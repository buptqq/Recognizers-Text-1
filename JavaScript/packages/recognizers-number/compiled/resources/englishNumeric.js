"use strict";
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
const baseNumbers_1 = require("./baseNumbers");
var EnglishNumeric;
(function (EnglishNumeric) {
    EnglishNumeric.LangMarker = 'Eng';
    EnglishNumeric.RoundNumberIntegerRegex = `(hundred|thousand|million|billion|trillion)`;
    EnglishNumeric.ZeroToNineIntegerRegex = `(three|seven|eight|four|five|zero|nine|one|two|six)`;
    EnglishNumeric.AnIntRegex = `(an|a)(?=\\s)`;
    EnglishNumeric.TenToNineteenIntegerRegex = `(seventeen|thirteen|fourteen|eighteen|nineteen|fifteen|sixteen|eleven|twelve|ten)`;
    EnglishNumeric.TensNumberIntegerRegex = `(seventy|twenty|thirty|eighty|ninety|forty|fifty|sixty)`;
    EnglishNumeric.SeparaIntRegex = `(((${EnglishNumeric.TenToNineteenIntegerRegex}|(${EnglishNumeric.TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${EnglishNumeric.ZeroToNineIntegerRegex})|${EnglishNumeric.TensNumberIntegerRegex}|${EnglishNumeric.ZeroToNineIntegerRegex})(\\s+${EnglishNumeric.RoundNumberIntegerRegex})*))|((${EnglishNumeric.AnIntRegex}(\\s+${EnglishNumeric.RoundNumberIntegerRegex})+))`;
    EnglishNumeric.AllIntRegex = `((((${EnglishNumeric.TenToNineteenIntegerRegex}|(${EnglishNumeric.TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${EnglishNumeric.ZeroToNineIntegerRegex})|${EnglishNumeric.TensNumberIntegerRegex}|${EnglishNumeric.ZeroToNineIntegerRegex}|${EnglishNumeric.AnIntRegex})(\\s+${EnglishNumeric.RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*${EnglishNumeric.SeparaIntRegex})`;
    EnglishNumeric.PlaceHolderPureNumber = `\\b`;
    EnglishNumeric.PlaceHolderDefault = `\\D|\\b`;
    EnglishNumeric.NumbersWithPlaceHolder = (placeholder) => { return `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!(\\.\\d+[a-zA-Z]))(?=${placeholder})`; };
    EnglishNumeric.NumbersWithSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s*(K|k|M|T|G)(?=\\b)`;
    EnglishNumeric.RoundNumberIntegerRegexWithLocks = `(?<=\\b)\\d+\\s+${EnglishNumeric.RoundNumberIntegerRegex}(?=\\b)`;
    EnglishNumeric.NumbersWithDozenSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dozen(s)?(?=\\b)`;
    EnglishNumeric.AllIntRegexWithLocks = `((?<=\\b)${EnglishNumeric.AllIntRegex}(?=\\b))`;
    EnglishNumeric.AllIntRegexWithDozenSuffixLocks = `(?<=\\b)(((half\\s+)?a\\s+dozen)|(${EnglishNumeric.AllIntRegex}\\s+dozen(s)?))(?=\\b)`;
    EnglishNumeric.SignSymbolRegexEng = `(negative|minus)\\s*${EnglishNumeric.AllIntRegex}`;
    EnglishNumeric.RoundNumberOrdinalRegex = `(hundredth|thousandth|millionth|billionth|trillionth)`;
    EnglishNumeric.BasicOrdinalRegex = `(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|thirtieth|fortieth|fiftieth|sixtieth|seventieth|eightieth|ninetieth)`;
    EnglishNumeric.SuffixBasicOrdinalRegex = `(((((${EnglishNumeric.TensNumberIntegerRegex}(\\s+(and\\s+)?|\\s*-\\s*)${EnglishNumeric.ZeroToNineIntegerRegex})|${EnglishNumeric.TensNumberIntegerRegex}|${EnglishNumeric.ZeroToNineIntegerRegex}|${EnglishNumeric.AnIntRegex})(\\s+${EnglishNumeric.RoundNumberIntegerRegex})+)\\s+(and\\s+)?)*(${EnglishNumeric.TensNumberIntegerRegex}(\\s+|\\s*-\\s*))?${EnglishNumeric.BasicOrdinalRegex})`;
    EnglishNumeric.SuffixRoundNumberOrdinalRegex = `((${EnglishNumeric.AllIntRegex}\\s+)${EnglishNumeric.RoundNumberOrdinalRegex})`;
    EnglishNumeric.AllOrdinalRegex = `(${EnglishNumeric.SuffixBasicOrdinalRegex}|${EnglishNumeric.SuffixRoundNumberOrdinalRegex})`;
    EnglishNumeric.OrdinalSuffixRegex = `(?<=\\b)((\\d*(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|0th))|(11th|12th))(?=\\b)`;
    EnglishNumeric.OrdinalNumericRegex = `(?<=\\b)(\\d{1,3}(\\s*,\\s*\\d{3})*\\s*th)(?=\\b)`;
    EnglishNumeric.OrdinalRoundNumberRegex = `(?<!(a|an)\\s+)${EnglishNumeric.RoundNumberOrdinalRegex}`;
    EnglishNumeric.OrdinalEnglishRegex = `(?<=\\b)${EnglishNumeric.AllOrdinalRegex}(?=\\b)`;
    EnglishNumeric.FractionNotationWithSpacesRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))`;
    EnglishNumeric.FractionNotationRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))`;
    EnglishNumeric.FractionNounRegex = `(?<=\\b)(${EnglishNumeric.AllIntRegex}\\s+(and\\s+)?)?(${EnglishNumeric.AllIntRegex})(\\s+|\\s*-\\s*)(((${EnglishNumeric.AllOrdinalRegex})|(${EnglishNumeric.RoundNumberOrdinalRegex}))s|halves|quarters)(?=\\b)`;
    EnglishNumeric.FractionNounWithArticleRegex = `(?<=\\b)(${EnglishNumeric.AllIntRegex}\\s+(and\\s+)?)?(a|an|one)(\\s+|\\s*-\\s*)((${EnglishNumeric.AllOrdinalRegex})|(${EnglishNumeric.RoundNumberOrdinalRegex})|half|quarter)(?=\\b)`;
    EnglishNumeric.FractionPrepositionRegex = `(?<=\\b)((${EnglishNumeric.AllIntRegex})|((?<!\\.)\\d+))\\s+over\\s+((${EnglishNumeric.AllIntRegex})|(\\d+)(?!\\.))(?=\\b)`;
    EnglishNumeric.AllPointRegex = `((\\s+${EnglishNumeric.ZeroToNineIntegerRegex})+|(\\s+${EnglishNumeric.SeparaIntRegex}))`;
    EnglishNumeric.AllFloatRegex = `${EnglishNumeric.AllIntRegex}(\\s+point)${EnglishNumeric.AllPointRegex}`;
    EnglishNumeric.DoubleWithMultiplierRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+\\s*(K|k|M|G|T|B|b)(?=\\b)`;
    EnglishNumeric.DoubleExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)`;
    EnglishNumeric.DoubleCaretExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))(\\d+(\\.\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)`;
    EnglishNumeric.DoubleDecimalPointRegex = (placeholder) => { return `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+(?!(\\.\\d+))(?=${placeholder})`; };
    EnglishNumeric.DoubleWithoutIntegralRegex = (placeholder) => { return `(?<=\\s|^)(?<!(\\d+))\\.\\d+(?!(\\.\\d+))(?=${placeholder})`; };
    EnglishNumeric.DoubleWithRoundNumber = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\.)))\\d+\\.\\d+\\s+${EnglishNumeric.RoundNumberIntegerRegex}(?=\\b)`;
    EnglishNumeric.DoubleAllFloatRegex = `((?<=\\b)${EnglishNumeric.AllFloatRegex}(?=\\b))`;
    EnglishNumeric.CurrencyRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(B|b|m|t|g)(?=\\b)`;
    EnglishNumeric.NumberWithSuffixPercentage = `(${baseNumbers_1.BaseNumbers.NumberReplaceToken})(\\s*)(%|per cents|per cent|cents|cent|percentage|percents|percent)`;
    EnglishNumeric.NumberWithPrefixPercentage = `(per cent of|percent of|percents of)(\\s*)(${baseNumbers_1.BaseNumbers.NumberReplaceToken})`;
    EnglishNumeric.DecimalSeparatorChar = '.';
    EnglishNumeric.FractionMarkerToken = 'over';
    EnglishNumeric.NonDecimalSeparatorChar = ',';
    EnglishNumeric.HalfADozenText = 'six';
    EnglishNumeric.WordSeparatorToken = 'and';
    EnglishNumeric.WrittenDecimalSeparatorTexts = ['point'];
    EnglishNumeric.WrittenGroupSeparatorTexts = ['punto'];
    EnglishNumeric.WrittenIntegerSeparatorTexts = ['and'];
    EnglishNumeric.WrittenFractionSeparatorTexts = ['and'];
    EnglishNumeric.HalfADozenRegex = `half\\s+a\\s+dozen`;
    EnglishNumeric.DigitalNumberRegex = `((?<=\\b)(hundred|thousand|million|billion|trillion|dozen(s)?)(?=\\b))|((?<=(\\d|\\b))(k|t|m|g|b)(?=\\b))`;
    EnglishNumeric.SignMap = new Map([["negative", -1], ["minus", -1]]);
    EnglishNumeric.CardinalNumberMap = new Map([["negative", -1], ["minus", -1], ["a", 1], ["zero", 0], ["an", 1], ["one", 1], ["two", 2], ["three", 3], ["four", 4], ["five", 5], ["six", 6], ["seven", 7], ["eight", 8], ["nine", 9], ["ten", 10], ["eleven", 11], ["twelve", 12], ["dozen", 12], ["dozens", 12], ["thirteen", 13], ["fourteen", 14], ["fifteen", 15], ["sixteen", 16], ["seventeen", 17], ["eighteen", 18], ["nineteen", 19], ["twenty", 20], ["thirty", 30], ["forty", 40], ["fifty", 50], ["sixty", 60], ["seventy", 70], ["eighty", 80], ["ninety", 90], ["hundred", 100], ["thousand", 1000], ["million", 1000000], ["billion", 1000000000], ["trillion", 1000000000000]]);
    EnglishNumeric.OrdinalNumberMap = new Map([["first", 1], ["second", 2], ["secondary", 2], ["half", 2], ["third", 3], ["fourth", 4], ["quarter", 4], ["fifth", 5], ["sixth", 6], ["seventh", 7], ["eighth", 8], ["ninth", 9], ["tenth", 10], ["eleventh", 11], ["twelfth", 12], ["thirteenth", 13], ["fourteenth", 14], ["fifteenth", 15], ["sixteenth", 16], ["seventeenth", 17], ["eighteenth", 18], ["nineteenth", 19], ["twentieth", 20], ["thirtieth", 30], ["fortieth", 40], ["fiftieth", 50], ["sixtieth", 60], ["seventieth", 70], ["eightieth", 80], ["ninetieth", 90], ["hundredth", 100], ["thousandth", 1000], ["millionth", 1000000], ["billionth", 1000000000], ["trillionth", 1000000000000], ["firsts", 1], ["halves", 2], ["thirds", 3], ["fourths", 4], ["quarters", 4], ["fifths", 5], ["sixths", 6], ["sevenths", 7], ["eighths", 8], ["ninths", 9], ["tenths", 10], ["elevenths", 11], ["twelfths", 12], ["thirteenths", 13], ["fourteenths", 14], ["fifteenths", 15], ["sixteenths", 16], ["seventeenths", 17], ["eighteenths", 18], ["nineteenths", 19], ["twentieths", 20], ["thirtieths", 30], ["fortieths", 40], ["fiftieths", 50], ["sixtieths", 60], ["seventieths", 70], ["eightieths", 80], ["ninetieths", 90], ["hundredths", 100], ["thousandths", 1000], ["millionths", 1000000], ["billionths", 1000000000], ["trillionths", 1000000000000]]);
    EnglishNumeric.RoundNumberMap = new Map([["hundred", 100], ["thousand", 1000], ["million", 1000000], ["billion", 1000000000], ["trillion", 1000000000000], ["hundredth", 100], ["thousandth", 1000], ["millionth", 1000000], ["billionth", 1000000000], ["trillionth", 1000000000000], ["hundredths", 100], ["thousandths", 1000], ["millionths", 1000000], ["billionths", 1000000000], ["trillionths", 1000000000000], ["dozen", 12], ["dozens", 12], ["k", 1000], ["m", 1000000], ["g", 1000000000], ["b", 1000000000], ["t", 1000000000000]]);
})(EnglishNumeric = exports.EnglishNumeric || (exports.EnglishNumeric = {}));
//# sourceMappingURL=englishNumeric.js.map