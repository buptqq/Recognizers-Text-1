"use strict";
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
const baseNumbers_1 = require("./baseNumbers");
var FrenchNumeric;
(function (FrenchNumeric) {
    FrenchNumeric.LangMarker = 'Fr';
    FrenchNumeric.RoundNumberIntegerRegex = `(cent|mille|millions|million|milliard|milliards|billion|billions)`;
    FrenchNumeric.ZeroToNineIntegerRegex = `(et un|un|une|deux|trois|quatre|cinq|six|sept|huit|neuf)`;
    FrenchNumeric.TenToNineteenIntegerRegex = `(dix\\Wneuf|dix\\Whuit|dix\\Wsept|seize|quinze|quatorze|treize|douze|onze|dix)`;
    FrenchNumeric.TensNumberIntegerRegex = `(octante|vingt|trente|quarante|cinquante|soixante-dix|soixante|septante|huitante|quatre-vingt-dix|nonante)`;
    FrenchNumeric.DigitsNumberRegex = `\\d|\\d{1,3}(\\.\\d{3})`;
    FrenchNumeric.HundredsNumberIntegerRegex = `((${FrenchNumeric.ZeroToNineIntegerRegex}(\\s+cent))|cent|((\\s+cent\\s)+${FrenchNumeric.TensNumberIntegerRegex}))`;
    FrenchNumeric.BelowHundredsRegex = `((${FrenchNumeric.TenToNineteenIntegerRegex}|(${FrenchNumeric.TensNumberIntegerRegex}(\\W+${FrenchNumeric.ZeroToNineIntegerRegex})?))|${FrenchNumeric.ZeroToNineIntegerRegex})`;
    FrenchNumeric.BelowThousandsRegex = `((${FrenchNumeric.HundredsNumberIntegerRegex}(\\s+${FrenchNumeric.BelowHundredsRegex})?|${FrenchNumeric.BelowHundredsRegex}|${FrenchNumeric.TenToNineteenIntegerRegex})|cent\\s+${FrenchNumeric.TenToNineteenIntegerRegex})`;
    FrenchNumeric.SupportThousandsRegex = `((${FrenchNumeric.BelowThousandsRegex}|${FrenchNumeric.BelowHundredsRegex})\\s+${FrenchNumeric.RoundNumberIntegerRegex}(\\s+${FrenchNumeric.RoundNumberIntegerRegex})?)`;
    FrenchNumeric.SeparaIntRegex = `(${FrenchNumeric.SupportThousandsRegex}(\\s+${FrenchNumeric.SupportThousandsRegex})*(\\s+${FrenchNumeric.BelowThousandsRegex})?|${FrenchNumeric.BelowThousandsRegex})`;
    FrenchNumeric.AllIntRegex = `(${FrenchNumeric.SeparaIntRegex}|mille(\\s+${FrenchNumeric.BelowThousandsRegex})?)`;
    FrenchNumeric.NumbersWithPlaceHolder = (placeholder) => { return `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+(?!(,\\d+[a-zA-Z]))(?=${placeholder})`; };
    FrenchNumeric.NumbersWithSuffix = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(k|M|T|G)(?=\\b)`;
    FrenchNumeric.RoundNumberIntegerRegexWithLocks = `(?<=\\b)(${FrenchNumeric.DigitsNumberRegex})+\\s+${FrenchNumeric.RoundNumberIntegerRegex}(?=\\b)`;
    FrenchNumeric.NumbersWithDozenSuffix = `(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+douzaine(s)?(?=\\b)`;
    FrenchNumeric.AllIntRegexWithLocks = `((?<=\\b)${FrenchNumeric.AllIntRegex}(?=\\b))`;
    FrenchNumeric.AllIntRegexWithDozenSuffixLocks = `(?<=\\b)(((demi\\s+)?\\s+douzaine)|(${FrenchNumeric.AllIntRegex}\\s+douzaines?))(?=\\b)`;
    FrenchNumeric.SimpleRoundOrdinalRegex = `(centi[eè]me|milli[eè]me|millioni[eè]me|milliardi[eè]me|billioni[eè]me)`;
    FrenchNumeric.OneToNineOrdinalRegex = `(premier|premi[eè]re|deuxi[eè]me|second[e]|troisi[eè]me|tiers|tierce|quatri[eè]me|cinqui[eè]me|sixi[eè]me|septi[eè]me|huiti[eè]me|neuvi[eè]me)`;
    FrenchNumeric.SpecialUnderHundredOrdinalRegex = `(onzi[eè]me|douzi[eè]me)`;
    FrenchNumeric.TensOrdinalRegex = `(quatre-vingt-dixi[eè]me|quatre-vingti[eè]me|huitanti[eè]me|octanti[eè]me|soixante-dixi[eè]me|septanti[eè]me|soixanti[eè]me|cinquanti[eè]me|quaranti[eè]me|trenti[eè]me|vingti[eè]me)`;
    FrenchNumeric.HundredOrdinalRegex = `(${FrenchNumeric.AllIntRegex}(\\s+(centi[eè]me\\s)))`;
    FrenchNumeric.UnderHundredOrdinalRegex = `(((${FrenchNumeric.AllIntRegex}(\\W)?)?${FrenchNumeric.OneToNineOrdinalRegex})|(${FrenchNumeric.TensNumberIntegerRegex}(\\W)?)?${FrenchNumeric.OneToNineOrdinalRegex}|${FrenchNumeric.TensOrdinalRegex}|${FrenchNumeric.SpecialUnderHundredOrdinalRegex})`;
    FrenchNumeric.UnderThousandOrdinalRegex = `(((${FrenchNumeric.HundredOrdinalRegex}(\\s)?)?${FrenchNumeric.UnderHundredOrdinalRegex})|((${FrenchNumeric.AllIntRegex}(\\W)?)?${FrenchNumeric.SimpleRoundOrdinalRegex})|${FrenchNumeric.HundredOrdinalRegex})`;
    FrenchNumeric.OverThousandOrdinalRegex = `((${FrenchNumeric.AllIntRegex})(i[eè]me))`;
    FrenchNumeric.ComplexOrdinalRegex = `((${FrenchNumeric.OverThousandOrdinalRegex}(\\s)?)?${FrenchNumeric.UnderThousandOrdinalRegex}|${FrenchNumeric.OverThousandOrdinalRegex}|${FrenchNumeric.UnderHundredOrdinalRegex})`;
    FrenchNumeric.SuffixOrdinalRegex = `((${FrenchNumeric.AllIntRegex})(${FrenchNumeric.SimpleRoundOrdinalRegex}))`;
    FrenchNumeric.ComplexRoundOrdinalRegex = `(((${FrenchNumeric.SuffixOrdinalRegex}(\\s)?)?${FrenchNumeric.ComplexOrdinalRegex})|${FrenchNumeric.SuffixOrdinalRegex})`;
    FrenchNumeric.AllOrdinalRegex = `(${FrenchNumeric.ComplexOrdinalRegex}|${FrenchNumeric.SimpleRoundOrdinalRegex}|${FrenchNumeric.ComplexRoundOrdinalRegex})`;
    FrenchNumeric.PlaceHolderPureNumber = `\\b`;
    FrenchNumeric.PlaceHolderDefault = `\\D|\\b`;
    FrenchNumeric.OrdinalSuffixRegex = `(?<=\\b)((\\d*(1er|2e|2eme|3e|3eme|4e|4eme|5e|5eme|6e|6eme|7e|7eme|8e|8eme|9e|9eme|0e|0eme))|(11e|11eme|12e|12eme))(?=\\b)`;
    FrenchNumeric.OrdinalFrenchRegex = `(?<=\\b)${FrenchNumeric.AllOrdinalRegex}(?=\\b)`;
    FrenchNumeric.FractionNotationWithSpacesRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))`;
    FrenchNumeric.FractionNotationRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))`;
    FrenchNumeric.FractionNounRegex = `(?<=\\b)(${FrenchNumeric.AllIntRegex}\\s+((et)\\s+)?)?(${FrenchNumeric.AllIntRegex})(\\s+((et)\\s)?)(((${FrenchNumeric.AllOrdinalRegex})s?|(${FrenchNumeric.SuffixOrdinalRegex})s?)|demis?|tiers?|quarts?)(?=\\b)`;
    FrenchNumeric.FractionNounWithArticleRegex = `(?<=\\b)(${FrenchNumeric.AllIntRegex}\\s+(et\\s+)?)?(un|une)(\\s+)((${FrenchNumeric.AllOrdinalRegex})|(${FrenchNumeric.SuffixOrdinalRegex})|(et\\s+)?demis?)(?=\\b)`;
    FrenchNumeric.FractionPrepositionRegex = `(?<=\\b)((${FrenchNumeric.AllIntRegex})|((?<!\\.)\\d+))\\s+sur\\s+((${FrenchNumeric.AllIntRegex})|((\\d+)(?!\\.)))(?=\\b)`;
    FrenchNumeric.AllPointRegex = `((\\s+${FrenchNumeric.ZeroToNineIntegerRegex})+|(\\s+${FrenchNumeric.SeparaIntRegex}))`;
    FrenchNumeric.AllFloatRegex = `(${FrenchNumeric.AllIntRegex}(\\s+(virgule|point))${FrenchNumeric.AllPointRegex})`;
    FrenchNumeric.DoubleDecimalPointRegex = (placeholder) => { return `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))\\d+,\\d+(?!(,\\d+))(?=${placeholder})`; };
    FrenchNumeric.DoubleWithoutIntegralRegex = (placeholder) => { return `(?<=\\s|^)(?<!(\\d+)),\\d+(?!(,\\d+))(?=${placeholder})`; };
    FrenchNumeric.DoubleWithMultiplierRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\,)))\\d+,\\d+\\s*(K|k|M|G|T)(?=\\b)`;
    FrenchNumeric.DoubleWithRoundNumber = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\,)))\\d+,\\d+\\s+${FrenchNumeric.RoundNumberIntegerRegex}(?=\\b)`;
    FrenchNumeric.DoubleAllFloatRegex = `((?<=\\b)${FrenchNumeric.AllFloatRegex}(?=\\b))`;
    FrenchNumeric.DoubleExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)`;
    FrenchNumeric.DoubleCaretExponentialNotationRegex = `(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)`;
    FrenchNumeric.CurrencyRegex = `(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(B|b|m|t|g)(?=\\b)`;
    FrenchNumeric.NumberWithSuffixPercentage = `(${baseNumbers_1.BaseNumbers.NumberReplaceToken})(\\s*)(%|pourcentages|pourcents|pourcentage|pourcent)`;
    FrenchNumeric.NumberWithPrefixPercentage = `(%|pourcent|pourcent des|pourcentage de)(\\s*)(${baseNumbers_1.BaseNumbers.NumberReplaceToken})`;
    FrenchNumeric.DecimalSeparatorChar = ',';
    FrenchNumeric.FractionMarkerToken = 'sur';
    FrenchNumeric.NonDecimalSeparatorChar = '.';
    FrenchNumeric.HalfADozenText = 'six';
    FrenchNumeric.WordSeparatorToken = 'et';
    FrenchNumeric.WrittenDecimalSeparatorTexts = ['virgule'];
    FrenchNumeric.WrittenGroupSeparatorTexts = ['point', 'points'];
    FrenchNumeric.WrittenIntegerSeparatorTexts = ['et', '-'];
    FrenchNumeric.WrittenFractionSeparatorTexts = ['et', 'sur'];
    FrenchNumeric.HalfADozenRegex = `(?<=\\b)+demi\\s+douzaine`;
    FrenchNumeric.DigitalNumberRegex = `((?<=\\b)(cent|mille|million|millions|milliard|milliards|billions|billion|douzaine(s)?)(?=\\b))|((?<=(\\d|\\b))(k|t|m|g|b)(?=\\b))`;
    FrenchNumeric.SignMap = new Map([["negative", -1], ["minus", -1]]);
    FrenchNumeric.CardinalNumberMap = new Map([["zéro", 0], ["zero", 0], ["un", 1], ["une", 1], ["deux", 2], ["trois", 3], ["quatre", 4], ["cinq", 5], ["six", 6], ["sept", 7], ["huit", 8], ["neuf", 9], ["dix", 10], ["onze", 11], ["douze", 12], ["treize", 13], ["quatorze", 14], ["quinze", 15], ["seize", 16], ["dix-sept", 17], ["dix-huit", 18], ["dix-neuf", 19], ["vingt", 20], ["trente", 30], ["quarante", 40], ["cinquante", 50], ["soixante", 60], ["soixante-dix", 70], ["septante", 70], ["quatre-vingts", 80], ["quatre-vingts-dix", 90], ["quatre-vingts-onze", 91], ["quatre-vingts-douze", 92], ["quatre-vingts-treize", 93], ["quatre-vingts-quatorze", 94], ["quatre-vingts-quinze", 95], ["quatre-vingts-seize", 96], ["quatre-vingt-dix-sept", 97], ["quatre-vingt-dix-neuf", 98], ["nonante", 90], ["cent", 100], ["mille", 1000], ["un million", 1000000], ["million", 1000000], ["millions", 1000000], ["un milliard", 1000000000], ["milliard", 1000000000], ["milliards", 1000000000], ["un mille milliards", 1000000000000], ["un billion", 1000000000000]]);
    FrenchNumeric.OrdinalNumberMap = new Map([["premier", 1], ["première", 1], ["premiere", 1], ["deuxième", 2], ["deuxieme", 2], ["second", 2], ["seconde", 2], ["troisième", 3], ["demi", 2], ["tiers", 3], ["tierce", 3], ["quart", 4], ["quarts", 4], ["troisieme", 3], ["quatrième", 4], ["quatrieme", 4], ["cinquième", 5], ["cinquieme", 5], ["sixième", 6], ["sixieme", 6], ["septième", 7], ["septieme", 7], ["huitième", 8], ["huitieme", 8], ["neuvième", 9], ["neuvieme", 9], ["dixième", 10], ["dixieme", 10], ["onzième", 11], ["onzieme", 11], ["douzième", 12], ["douzieme", 12], ["treizième", 13], ["treizieme", 13], ["quatorzième", 14], ["quatorizieme", 14], ["quinzième", 15], ["quinzieme", 15], ["seizième", 16], ["seizieme", 16], ["dix-septième", 17], ["dix-septieme", 17], ["dix-huitième", 18], ["dix-huitieme", 18], ["dix-neuvième", 19], ["dix-neuvieme", 19], ["vingtième", 20], ["vingtieme", 20], ["trentième", 30], ["trentieme", 30], ["quarantième", 40], ["quarantieme", 40], ["cinquantième", 50], ["cinquantieme", 50], ["soixantième", 60], ["soixantieme", 60], ["soixante-dixième", 70], ["soixante-dixieme", 70], ["septantième", 70], ["septantieme", 70], ["quatre-vingtième", 80], ["quatre-vingtieme", 80], ["huitantième", 80], ["huitantieme", 80], ["octantième", 80], ["octantieme", 80], ["quatre-vingt-dixième", 90], ["quatre-vingt-dixieme", 90], ["nonantième", 90], ["nonantieme", 90], ["centième", 100], ["centieme", 100], ["millième", 1000], ["millieme", 1000], ["millionième", 1000000], ["millionieme", 1000000], ["milliardième", 1000000000], ["milliardieme", 1000000000], ["billionieme", 1000000000000], ["billionième", 1000000000000], ["trillionième", 1000000000000000000], ["trillionieme", 1000000000000000000]]);
    FrenchNumeric.PrefixCardinalDictionary = new Map([["deux", 2], ["trois", 3], ["quatre", 4], ["cinq", 5], ["six", 6], ["sept", 7], ["huit", 8], ["neuf", 9], ["dix", 10], ["onze", 11], ["douze", 12], ["treize", 13], ["quatorze", 14], ["quinze", 15], ["seize", 16], ["dix sept", 17], ["dix-sept", 17], ["dix-huit", 18], ["dix huit", 18], ["dix-neuf", 19], ["dix neuf", 19], ["vingt", 20], ["vingt-et-un", 21], ["vingt et un", 21], ["vingt-deux", 21], ["vingt deux", 22], ["vingt-trois", 23], ["vingt trois", 23], ["vingt-quatre", 24], ["vingt quatre", 24], ["vingt-cinq", 25], ["vingt cinq", 25], ["vingt-six", 26], ["vingt six", 26], ["vingt-sept", 27], ["vingt sept", 27], ["vingt-huit", 28], ["vingt huit", 28], ["vingt-neuf", 29], ["vingt neuf", 29], ["trente", 30], ["quarante", 40], ["cinquante", 50], ["soixante", 60], ["soixante-dix", 70], ["soixante dix", 70], ["septante", 70], ["quatre-vingt", 80], ["quatre vingt", 80], ["quatre vingt dix", 90], ["quatre-vingt-dix", 90], ["cent", 100], ["deux cent", 200], ["trois cents", 300], ["quatre cents", 400], ["cinq cent", 500], ["six cent", 600], ["sept cent", 700], ["huit cent", 800], ["neuf cent", 900]]);
    FrenchNumeric.SufixOrdinalDictionary = new Map([["millième", 1000], ["million", 1000000], ["milliardième", 1000000000000]]);
    FrenchNumeric.RoundNumberMap = new Map([["cent", 100], ["mille", 1000], ["million", 1000000], ["millions", 1000000], ["milliard", 1000000000], ["milliards", 1000000000], ["billion", 1000000000000], ["billions", 1000000000000], ["centieme", 100], ["centième", 100], ["millieme", 1000], ["millième", 1000], ["millionième", 1000000], ["millionieme", 1000000], ["milliardième", 1000000000], ["milliardieme", 1000000000], ["billionième", 1000000000000], ["billionieme", 1000000000000], ["centiemes", 100], ["centièmes", 100], ["millièmes", 1000], ["milliemes", 1000], ["millionièmes", 1000000], ["millioniemes", 1000000], ["milliardièmes", 1000000000], ["milliardiemes", 1000000000], ["billionièmes", 1000000000000], ["billioniemes", 1000000000000], ["douzaine", 12], ["douzaines", 12], ["k", 1000], ["m", 1000000], ["g", 1000000000], ["b", 1000000000], ["t", 1000000000000]]);
})(FrenchNumeric = exports.FrenchNumeric || (exports.FrenchNumeric = {}));
//# sourceMappingURL=frenchNumeric.js.map