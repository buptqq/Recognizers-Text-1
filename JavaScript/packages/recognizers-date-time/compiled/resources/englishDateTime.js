"use strict";
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
Object.defineProperty(exports, "__esModule", { value: true });
const baseDateTime_1 = require("./baseDateTime");
var EnglishDateTime;
(function (EnglishDateTime) {
    EnglishDateTime.TillRegex = `(?<till>to|till|til|until|thru|through|--|-|—|——)`;
    EnglishDateTime.RangeConnectorRegex = `(?<and>and|through|to|--|-|—|——)`;
    EnglishDateTime.RelativeRegex = `(?<order>next|upcoming|this|last|past|previous|current|the|my)`;
    EnglishDateTime.StrictRelativeRegex = `(?<order>next|upcoming|this|last|past|previous|current)`;
    EnglishDateTime.NextPrefixRegex = `(next|upcoming)\\b`;
    EnglishDateTime.PastPrefixRegex = `(last|past|previous)\\b`;
    EnglishDateTime.ThisPrefixRegex = `(this|current)\\b`;
    EnglishDateTime.DayRegex = `(the\\s*)?(?<day>01|02|03|04|05|06|07|08|09|10th|10|11th|11st|11|12nd|12th|12|13rd|13th|13|14th|14|15th|15|16th|16|17th|17|18th|18|19th|19|1st|1|20th|20|21st|21|22nd|22|23rd|23|24th|24|25th|25|26th|26|27th|27|28th|28|29th|29|2nd|2|30th|30|31st|31|3rd|3|4th|4|5th|5|6th|6|7th|7|8th|8|9th|9)(?=\\b|t)`;
    EnglishDateTime.MonthNumRegex = `(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b`;
    EnglishDateTime.PeriodYearRegex = `\\b(?<year>19\\d{2}|20\\d{2})\\b`;
    EnglishDateTime.WeekDayRegex = `\\b(?<weekday>Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Mon|Tues|Tue|Wedn|Weds|Wed|Thurs|Thur|Thu|Fri|Sat|Sun)\\b`;
    EnglishDateTime.SingleWeekDayRegex = `\\b(?<weekday>Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Mon|Tue|Tues|Wedn|Weds|Wed|Thurs|Thur|Thu|Fri|((?<=on)\\s+(Sat|Sun)))\\b`;
    EnglishDateTime.RelativeMonthRegex = `(?<relmonth>(of\\s+)?${EnglishDateTime.RelativeRegex}\\s+month)\\b`;
    EnglishDateTime.EngMonthRegex = `(((the\\s+)?month of\\s+)?(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sept|Sep))`;
    EnglishDateTime.MonthSuffixRegex = `(?<msuf>(in\\s+|of\\s+|on\\s+)?(${EnglishDateTime.RelativeMonthRegex}|${EnglishDateTime.EngMonthRegex}))`;
    EnglishDateTime.DateUnitRegex = `(?<unit>years|year|months|month|weeks|week|days|day)\\b`;
    EnglishDateTime.SimpleCasesRegex = `\\b((from|between)\\s+)?(${EnglishDateTime.DayRegex})\\s*${EnglishDateTime.TillRegex}\\s*(${EnglishDateTime.DayRegex})\\s+${EnglishDateTime.MonthSuffixRegex}((\\s+|\\s*,\\s*)${EnglishDateTime.PeriodYearRegex})?\\b`;
    EnglishDateTime.MonthFrontSimpleCasesRegex = `\\b((from|between)\\s+)?${EnglishDateTime.MonthSuffixRegex}\\s+((from|between)\\s+)?(${EnglishDateTime.DayRegex})\\s*${EnglishDateTime.TillRegex}\\s*(${EnglishDateTime.DayRegex})((\\s+|\\s*,\\s*)${EnglishDateTime.PeriodYearRegex})?\\b`;
    EnglishDateTime.MonthFrontBetweenRegex = `\\b${EnglishDateTime.MonthSuffixRegex}\\s+(between\\s+)(${EnglishDateTime.DayRegex})\\s*${EnglishDateTime.RangeConnectorRegex}\\s*(${EnglishDateTime.DayRegex})((\\s+|\\s*,\\s*)${EnglishDateTime.PeriodYearRegex})?\\b`;
    EnglishDateTime.BetweenRegex = `\\b(between\\s+)(${EnglishDateTime.DayRegex})\\s*${EnglishDateTime.RangeConnectorRegex}\\s*(${EnglishDateTime.DayRegex})\\s+${EnglishDateTime.MonthSuffixRegex}((\\s+|\\s*,\\s*)${EnglishDateTime.PeriodYearRegex})?\\b`;
    EnglishDateTime.MonthWithYear = `\\b((?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sep|Sept),?(\\s+of)?\\s+(${EnglishDateTime.PeriodYearRegex}|(?<order>next|last|this)\\s+year))`;
    EnglishDateTime.OneWordPeriodRegex = `\\b((((the\\s+)?month of\\s+)?(${EnglishDateTime.RelativeRegex}\\s+)?(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sep|Sept))|(${EnglishDateTime.RelativeRegex}\\s+)?(weekend|week|month|year)|weekend|(month|year) to date)\\b`;
    EnglishDateTime.MonthNumWithYear = `(${EnglishDateTime.PeriodYearRegex}[/\\-\\.]${EnglishDateTime.MonthNumRegex})|(${EnglishDateTime.MonthNumRegex}[/\\-]${EnglishDateTime.PeriodYearRegex})`;
    EnglishDateTime.WeekOfMonthRegex = `(?<wom>(the\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\\s+week\\s+${EnglishDateTime.MonthSuffixRegex})`;
    EnglishDateTime.WeekOfYearRegex = `(?<woy>(the\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\\s+week(\\s+of)?\\s+(${EnglishDateTime.PeriodYearRegex}|${EnglishDateTime.RelativeRegex}\\s+year))`;
    EnglishDateTime.FollowedDateUnit = `^\\s*${EnglishDateTime.DateUnitRegex}`;
    EnglishDateTime.NumberCombinedWithDateUnit = `\\b(?<num>\\d+(\\.\\d*)?)${EnglishDateTime.DateUnitRegex}`;
    EnglishDateTime.QuarterRegex = `(the\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th)\\s+quarter(\\s+of|\\s*,\\s*)?\\s+(${EnglishDateTime.PeriodYearRegex}|${EnglishDateTime.RelativeRegex}\\s+year)`;
    EnglishDateTime.QuarterRegexYearFront = `(${EnglishDateTime.PeriodYearRegex}|${EnglishDateTime.RelativeRegex}\\s+year)\\s+(the\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th)\\s+quarter`;
    EnglishDateTime.SeasonRegex = `\\b(?<season>(${EnglishDateTime.RelativeRegex}\\s+)?(?<seas>spring|summer|fall|autumn|winter)((\\s+of|\\s*,\\s*)?\\s+(${EnglishDateTime.PeriodYearRegex}|${EnglishDateTime.RelativeRegex}\\s+year))?)\\b`;
    EnglishDateTime.WhichWeekRegex = `(week)(\\s*)(?<number>\\d\\d|\\d|0\\d)`;
    EnglishDateTime.WeekOfRegex = `(the\\s+)?(week)(\\s+of)`;
    EnglishDateTime.MonthOfRegex = `(month)(\\s*)(of)`;
    EnglishDateTime.MonthRegex = `(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sept|Sep)`;
    EnglishDateTime.AmDescRegex = `(am\\b|a\\.m\\.|a m\\b|a\\. m\\.|a\\.m\\b|a\\. m\\b|a m\\b)`;
    EnglishDateTime.PmDescRegex = `(pm\\b|p\\.m\\.|p\\b|p m\\b|p\\. m\\.|p\\.m\\b|p\\. m\\b|p m\\b)`;
    EnglishDateTime.DateYearRegex = `(?<year>19\\d{2}|20\\d{2}|((9\\d|0\\d|1\\d|2\\d)(?!(\\s*((\\:)|${EnglishDateTime.AmDescRegex}|${EnglishDateTime.PmDescRegex})))))`;
    EnglishDateTime.OnRegex = `(?<=\\bon\\s+)(${EnglishDateTime.DayRegex}s?)\\b`;
    EnglishDateTime.RelaxedOnRegex = `(?<=\\b(on|at|in)\\s+)((?<day>10th|11th|11st|12nd|12th|13rd|13th|14th|15th|16th|17th|18th|19th|1st|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|2nd|30th|31st|3rd|4th|5th|6th|7th|8th|9th)s?)\\b`;
    EnglishDateTime.ThisRegex = `\\b((this(\\s*week)?(\\s*on)?\\s+)${EnglishDateTime.WeekDayRegex})|(${EnglishDateTime.WeekDayRegex}((\\s+of)?\\s+this\\s*week))\\b`;
    EnglishDateTime.LastDateRegex = `\\b(${EnglishDateTime.PastPrefixRegex}(\\s*week)?\\s+${EnglishDateTime.WeekDayRegex})|(${EnglishDateTime.WeekDayRegex}(\\s+last\\s*week))\\b`;
    EnglishDateTime.NextDateRegex = `\\b(${EnglishDateTime.NextPrefixRegex}(\\s*week(\\s*on)?)?\\s+${EnglishDateTime.WeekDayRegex})|((on\\s+)?${EnglishDateTime.WeekDayRegex}((\\s+of)?\\s+next\\s*week))\\b`;
    EnglishDateTime.SpecialDayRegex = `\\b((the\\s+)?day before yesterday|(the\\s+)?day after (tomorrow|tmr)|((the\\s+)?${EnglishDateTime.RelativeRegex}\\s+day)|yesterday|tomorrow|tmr|today)\\b`;
    EnglishDateTime.RelativeDayRegex = `\\b(((the\\s+)?${EnglishDateTime.RelativeRegex}\\s+day))\\b`;
    EnglishDateTime.SetWeekDayRegex = `\\b(?<prefix>on\\s+)?(?<weekday>morning|afternoon|evening|night|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)s\\b`;
    EnglishDateTime.WeekDayOfMonthRegex = `(?<wom>(the\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\\s+${EnglishDateTime.WeekDayRegex}\\s+${EnglishDateTime.MonthSuffixRegex})`;
    EnglishDateTime.SpecialDate = `(?=\\b(on|at)\\s+the\\s+)${EnglishDateTime.DayRegex}\\b`;
    EnglishDateTime.DateExtractor1 = `\\b(${EnglishDateTime.WeekDayRegex}(\\s+|\\s*,\\s*))?${EnglishDateTime.MonthRegex}(\\.)?\\s*[/\\\\\\.\\-]?\\s*${EnglishDateTime.DayRegex}(\\.)?\\b`;
    EnglishDateTime.DateExtractor2 = `\\b(${EnglishDateTime.WeekDayRegex}(\\s+|\\s*,\\s*))?${EnglishDateTime.MonthRegex}(\\.)?\\s*[\\.\\-]?\\s*${EnglishDateTime.DayRegex}(\\.)?(\\s+|\\s*,\\s*|\\s+of\\s+)${EnglishDateTime.DateYearRegex}\\b`;
    EnglishDateTime.DateExtractor3 = `\\b(${EnglishDateTime.WeekDayRegex}(\\s+|\\s*,\\s*))?${EnglishDateTime.DayRegex}(\\.)?(\\s+|\\s*,\\s*|\\s+of\\s+|\\s*-\\s*)${EnglishDateTime.MonthRegex}(\\.)?((\\s+|\\s*,\\s*)${EnglishDateTime.DateYearRegex})?\\b`;
    EnglishDateTime.DateExtractor4 = `\\b${EnglishDateTime.MonthNumRegex}\\s*[/\\\\\\-]\\s*${EnglishDateTime.DayRegex}(\\.)?\\s*[/\\\\\\-]\\s*${EnglishDateTime.DateYearRegex}`;
    EnglishDateTime.DateExtractor5 = `\\b${EnglishDateTime.DayRegex}\\s*[/\\\\\\-]\\s*${EnglishDateTime.MonthNumRegex}\\s*[/\\\\\\-]\\s*${EnglishDateTime.DateYearRegex}`;
    EnglishDateTime.DateExtractor6 = `(?<=\\b(on|in|at)\\s+)${EnglishDateTime.MonthNumRegex}[\\-\\.]${EnglishDateTime.DayRegex}\\b`;
    EnglishDateTime.DateExtractor7 = `\\b${EnglishDateTime.MonthNumRegex}\\s*/\\s*${EnglishDateTime.DayRegex}((\\s+|\\s*,\\s*|\\s+of\\s+)${EnglishDateTime.DateYearRegex})?\\b`;
    EnglishDateTime.DateExtractor8 = `(?<=\\b(on|in|at)\\s+)${EnglishDateTime.DayRegex}[\\\\\\-]${EnglishDateTime.MonthNumRegex}\\b`;
    EnglishDateTime.DateExtractor9 = `\\b${EnglishDateTime.DayRegex}\\s*/\\s*${EnglishDateTime.MonthNumRegex}((\\s+|\\s*,\\s*|\\s+of\\s+)${EnglishDateTime.DateYearRegex})?\\b`;
    EnglishDateTime.DateExtractorA = `\\b${EnglishDateTime.DateYearRegex}\\s*[/\\\\\\-]\\s*${EnglishDateTime.MonthNumRegex}\\s*[/\\\\\\-]\\s*${EnglishDateTime.DayRegex}`;
    EnglishDateTime.OfMonth = `^\\s*of\\s*${EnglishDateTime.MonthRegex}`;
    EnglishDateTime.MonthEnd = `${EnglishDateTime.MonthRegex}\\s*(the)?\\s*$`;
    EnglishDateTime.RangeUnitRegex = `\\b(?<unit>years|year|months|month|weeks|week)\\b`;
    EnglishDateTime.OclockRegex = `(?<oclock>o\\s*’\\s*clock|o\\s*‘\\s*clock|o\\s*'\\s*clock|o\\s*clock)`;
    EnglishDateTime.DescRegex = `(((${EnglishDateTime.OclockRegex}\\s+)?(?<desc>ampm|am\\b|a\\.m\\.|a m\\b|a\\. m\\.|a\\.m\\b|a\\. m\\b|a m\\b|pm\\b|p\\.m\\.|p m\\b|p\\. m\\.|p\\.m\\b|p\\. m\\b|p\\b|p m\\b))|${EnglishDateTime.OclockRegex})`;
    EnglishDateTime.HourNumRegex = `\\b(?<hournum>zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)\\b`;
    EnglishDateTime.MinuteNumRegex = `(?<minnum>one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty)`;
    EnglishDateTime.DeltaMinuteNumRegex = `(?<deltaminnum>one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty)`;
    EnglishDateTime.PmRegex = `(?<pm>(((at|in|around|on|for)\\s+(the\\s+)?)?(afternoon|evening|midnight|lunchtime))|((at|in|around|on|for)\\s+(the\\s+)?night))`;
    EnglishDateTime.PmRegexFull = `(?<pm>((at|in|around|on|for)\\s+(the\\s+)?)?(afternoon|evening|midnight|night|lunchtime))`;
    EnglishDateTime.AmRegex = `(?<am>((at|in|around|on|for)\\s+(the\\s+)?)?(morning))`;
    EnglishDateTime.LunchRegex = `\\b(lunchtime)\\b`;
    EnglishDateTime.NightRegex = `\\b(midnight|night)\\b`;
    EnglishDateTime.LessThanOneHour = `(?<lth>(a\\s+)?quarter|three quarter(s)?|half( an hour)?|${baseDateTime_1.BaseDateTime.DeltaMinuteRegex}(\\s+(minute|minutes|min|mins))|${EnglishDateTime.DeltaMinuteNumRegex}(\\s+(minute|minutes|min|mins)))`;
    EnglishDateTime.EngTimeRegex = `(?<engtime>${EnglishDateTime.HourNumRegex}\\s+(${EnglishDateTime.MinuteNumRegex}|(?<tens>twenty|thirty|forty|fourty|fifty)\\s+${EnglishDateTime.MinuteNumRegex}))`;
    EnglishDateTime.TimePrefix = `(?<prefix>(${EnglishDateTime.LessThanOneHour} past|${EnglishDateTime.LessThanOneHour} to))`;
    EnglishDateTime.TimeSuffix = `(?<suffix>${EnglishDateTime.AmRegex}|${EnglishDateTime.PmRegex}|${EnglishDateTime.OclockRegex})`;
    EnglishDateTime.TimeSuffixFull = `(?<suffix>${EnglishDateTime.AmRegex}|${EnglishDateTime.PmRegexFull}|${EnglishDateTime.OclockRegex})`;
    EnglishDateTime.BasicTime = `\\b(?<basictime>${EnglishDateTime.EngTimeRegex}|${EnglishDateTime.HourNumRegex}|${baseDateTime_1.BaseDateTime.HourRegex}:${baseDateTime_1.BaseDateTime.MinuteRegex}(:${baseDateTime_1.BaseDateTime.SecondRegex})?|${baseDateTime_1.BaseDateTime.HourRegex})`;
    EnglishDateTime.MidnightRegex = `(?<midnight>midnight|mid-night|mid night)`;
    EnglishDateTime.MidmorningRegex = `(?<midmorning>midmorning|mid-morning|mid morning)`;
    EnglishDateTime.MidafternoonRegex = `(?<midafternoon>midafternoon|mid-afternoon|mid afternoon)`;
    EnglishDateTime.MiddayRegex = `(?<midday>midday|mid-day|mid day|((12\\s)?noon))`;
    EnglishDateTime.MidTimeRegex = `(?<mid>(${EnglishDateTime.MidnightRegex}|${EnglishDateTime.MidmorningRegex}|${EnglishDateTime.MidafternoonRegex}|${EnglishDateTime.MiddayRegex}))`;
    EnglishDateTime.AtRegex = `\\b(((?<=\\bat\\s+)(${EnglishDateTime.EngTimeRegex}|${EnglishDateTime.HourNumRegex}|${baseDateTime_1.BaseDateTime.HourRegex}|${EnglishDateTime.MidTimeRegex}))|${EnglishDateTime.MidTimeRegex})\\b`;
    EnglishDateTime.IshRegex = `\\b(${baseDateTime_1.BaseDateTime.HourRegex}(-|——)?ish|noonish|noon)\\b`;
    EnglishDateTime.TimeUnitRegex = `(?<unit>hours|hour|hrs|hr|h|minutes|minute|mins|min|seconds|second|secs|sec)\\b`;
    EnglishDateTime.RestrictedTimeUnitRegex = `(?<unit>hour|minute)\\b`;
    EnglishDateTime.FivesRegex = `(?<tens>(fifteen|twenty(\\s*five)?|thirty(\\s*five)?|forty(\\s*five)?|fourty(\\s*five)?|fifty(\\s*five)?|ten|five))\\b`;
    EnglishDateTime.HourRegex = `\\b(?<hour>00|01|02|03|04|05|06|07|08|09|0|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|1|2|3|4|5|6|7|8|9)`;
    EnglishDateTime.PeriodHourNumRegex = `\\b(?<hour>twenty one|twenty two|twenty three|twenty four|zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty)\\b`;
    EnglishDateTime.ConnectNumRegex = `${baseDateTime_1.BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\\s*${EnglishDateTime.DescRegex}`;
    EnglishDateTime.TimeRegex1 = `\\b(${EnglishDateTime.TimePrefix}\\s+)?(${EnglishDateTime.EngTimeRegex}|${EnglishDateTime.HourNumRegex}|${baseDateTime_1.BaseDateTime.HourRegex})\\s*${EnglishDateTime.DescRegex}`;
    EnglishDateTime.TimeRegex2 = `(\\b${EnglishDateTime.TimePrefix}\\s+)?(T)?${baseDateTime_1.BaseDateTime.HourRegex}(\\s*)?:(\\s*)?${baseDateTime_1.BaseDateTime.MinuteRegex}((\\s*)?:(\\s*)?${baseDateTime_1.BaseDateTime.SecondRegex})?((\\s*${EnglishDateTime.DescRegex})|\\b)`;
    EnglishDateTime.TimeRegex3 = `(\\b${EnglishDateTime.TimePrefix}\\s+)?${baseDateTime_1.BaseDateTime.HourRegex}\\.${baseDateTime_1.BaseDateTime.MinuteRegex}(\\s*${EnglishDateTime.DescRegex})`;
    EnglishDateTime.TimeRegex4 = `\\b${EnglishDateTime.TimePrefix}\\s+${EnglishDateTime.BasicTime}(\\s*${EnglishDateTime.DescRegex})?\\s+${EnglishDateTime.TimeSuffix}\\b`;
    EnglishDateTime.TimeRegex5 = `\\b${EnglishDateTime.TimePrefix}\\s+${EnglishDateTime.BasicTime}((\\s*${EnglishDateTime.DescRegex})|\\b)`;
    EnglishDateTime.TimeRegex6 = `${EnglishDateTime.BasicTime}(\\s*${EnglishDateTime.DescRegex})?\\s+${EnglishDateTime.TimeSuffix}\\b`;
    EnglishDateTime.TimeRegex7 = `\\b${EnglishDateTime.TimeSuffixFull}\\s+at\\s+${EnglishDateTime.BasicTime}((\\s*${EnglishDateTime.DescRegex})|\\b)`;
    EnglishDateTime.TimeRegex8 = `\\b${EnglishDateTime.TimeSuffixFull}\\s+${EnglishDateTime.BasicTime}((\\s*${EnglishDateTime.DescRegex})|\\b)`;
    EnglishDateTime.TimeRegex9 = `\\b${EnglishDateTime.PeriodHourNumRegex}\\s+${EnglishDateTime.FivesRegex}((\\s*${EnglishDateTime.DescRegex})|\\b)`;
    EnglishDateTime.PureNumFromTo = `((from|between)\\s+)?(${EnglishDateTime.HourRegex}|${EnglishDateTime.PeriodHourNumRegex})(\\s*(?<leftDesc>${EnglishDateTime.DescRegex}))?\\s*${EnglishDateTime.TillRegex}\\s*(${EnglishDateTime.HourRegex}|${EnglishDateTime.PeriodHourNumRegex})\\s*(?<rightDesc>${EnglishDateTime.PmRegex}|${EnglishDateTime.AmRegex}|${EnglishDateTime.DescRegex})?`;
    EnglishDateTime.PureNumBetweenAnd = `(between\\s+)(${EnglishDateTime.HourRegex}|${EnglishDateTime.PeriodHourNumRegex})(\\s*(?<leftDesc>${EnglishDateTime.DescRegex}))?\\s*${EnglishDateTime.RangeConnectorRegex}\\s*(${EnglishDateTime.HourRegex}|${EnglishDateTime.PeriodHourNumRegex})\\s*(?<rightDesc>${EnglishDateTime.PmRegex}|${EnglishDateTime.AmRegex}|${EnglishDateTime.DescRegex})?`;
    EnglishDateTime.PrepositionRegex = `(?<prep>^(at|on|of)(\\s+the)?$)`;
    EnglishDateTime.TimeOfDayRegex = `\\b(?<timeOfDay>((((in\\s+(the)?\\s+)?((?<early>early(\\s+|-))|(?<late>late(\\s+|-)))?(morning|afternoon|night|evening)))|(((in\\s+(the)?\\s+)?)(daytime)))s?)\\b`;
    EnglishDateTime.SpecificTimeOfDayRegex = `\\b((${EnglishDateTime.StrictRelativeRegex}\\s+${EnglishDateTime.TimeOfDayRegex})\\b|\\btonight)s?\\b`;
    EnglishDateTime.TimeFollowedUnit = `^\\s*${EnglishDateTime.TimeUnitRegex}`;
    EnglishDateTime.TimeNumberCombinedWithUnit = `\\b(?<num>\\d+(\\.\\d*)?)${EnglishDateTime.TimeUnitRegex}`;
    EnglishDateTime.NowRegex = `\\b(?<now>(right\\s+)?now|as soon as possible|asap|recently|previously)\\b`;
    EnglishDateTime.SuffixRegex = `^\\s*(in the\\s+)?(morning|afternoon|evening|night)\\b`;
    EnglishDateTime.DateTimeTimeOfDayRegex = `\\b(?<timeOfDay>morning|afternoon|night|evening)\\b`;
    EnglishDateTime.DateTimeSpecificTimeOfDayRegex = `\\b((${EnglishDateTime.RelativeRegex}\\s+${EnglishDateTime.DateTimeTimeOfDayRegex})\\b|\\btonight)\\b`;
    EnglishDateTime.TimeOfTodayAfterRegex = `^\\s*(,\\s*)?(in\\s+)?${EnglishDateTime.DateTimeSpecificTimeOfDayRegex}`;
    EnglishDateTime.TimeOfTodayBeforeRegex = `${EnglishDateTime.DateTimeSpecificTimeOfDayRegex}(\\s*,)?(\\s+(at|around|in|on))?\\s*$`;
    EnglishDateTime.SimpleTimeOfTodayAfterRegex = `(${EnglishDateTime.HourNumRegex}|${baseDateTime_1.BaseDateTime.HourRegex})\\s*(,\\s*)?(in\\s+)?${EnglishDateTime.DateTimeSpecificTimeOfDayRegex}`;
    EnglishDateTime.SimpleTimeOfTodayBeforeRegex = `${EnglishDateTime.DateTimeSpecificTimeOfDayRegex}(\\s*,)?(\\s+(at|around))?\\s*(${EnglishDateTime.HourNumRegex}|${baseDateTime_1.BaseDateTime.HourRegex})`;
    EnglishDateTime.TheEndOfRegex = `(the\\s+)?end of(\\s+the)?\\s*$`;
    EnglishDateTime.PeriodTimeOfDayRegex = `\\b((in\\s+(the)?\\s+)?((?<early>early(\\s+|-))|(?<late>late(\\s+|-)))?(?<timeOfDay>morning|afternoon|night|evening))\\b`;
    EnglishDateTime.PeriodSpecificTimeOfDayRegex = `\\b((${EnglishDateTime.StrictRelativeRegex}\\s+${EnglishDateTime.PeriodTimeOfDayRegex})\\b|\\btonight)\\b`;
    EnglishDateTime.PeriodTimeOfDayWithDateRegex = `\\b((${EnglishDateTime.TimeOfDayRegex}(\\s+on)?))\\b`;
    EnglishDateTime.DurationUnitRegex = `(?<unit>years|year|months|month|weeks|week|days|day|hours|hour|hrs|hr|h|minutes|minute|mins|min|seconds|second|secs|sec)\\b`;
    EnglishDateTime.SuffixAndRegex = `(?<suffix>\\s*(and)\\s+((an|a)\\s+)?(?<suffix_num>half|quarter))`;
    EnglishDateTime.PeriodicRegex = `\\b(?<periodic>daily|monthly|weekly|biweekly|yearly|annually|annual)\\b`;
    EnglishDateTime.EachUnitRegex = `(?<each>(each|every)(?<other>\\s+other)?\\s*${EnglishDateTime.DurationUnitRegex})`;
    EnglishDateTime.EachPrefixRegex = `\\b(?<each>(each|(every))\\s*$)`;
    EnglishDateTime.SetEachRegex = `\\b(?<each>(each|(every))\\s*)`;
    EnglishDateTime.SetLastRegex = `(?<last>next|upcoming|this|last|past|previous|current)`;
    EnglishDateTime.EachDayRegex = `^\\s*(each|every)\\s*day\\b`;
    EnglishDateTime.DurationFollowedUnit = `^\\s*${EnglishDateTime.SuffixAndRegex}?(\\s+|-)?${EnglishDateTime.DurationUnitRegex}`;
    EnglishDateTime.NumberCombinedWithDurationUnit = `\\b(?<num>\\d+(\\.\\d*)?)(-)?${EnglishDateTime.DurationUnitRegex}`;
    EnglishDateTime.AnUnitRegex = `\\b(((?<half>half\\s+)?(an|a))|(an|a))\\s+${EnglishDateTime.DurationUnitRegex}`;
    EnglishDateTime.AllRegex = `\\b(?<all>all\\s+(?<unit>year|month|week|day))\\b`;
    EnglishDateTime.HalfRegex = `(((a|an)\\s*)|\\b)(?<half>half\\s+(?<unit>year|month|week|day|hour))\\b`;
    EnglishDateTime.ConjunctionRegex = `\\b((and(\\s+for)?)|with)\\b`;
    EnglishDateTime.YearRegex = `\\b(?<year>19\\d{2}|20\\d{2})\\b`;
    EnglishDateTime.HolidayRegex1 = `\\b(?<holiday>clean monday|good friday|ash wednesday|mardi gras|washington's birthday|mao's birthday|chinese new Year|new years' eve|new year's eve|new year 's eve|new years eve|new year eve|new years'|new year's|new year 's|new years|new year|mayday|yuan dan|april fools|christmas eve|christmas|xmas|thanksgiving|halloween|yuandan|easter)(\\s+(of\\s+)?(${EnglishDateTime.YearRegex}|${EnglishDateTime.RelativeRegex}\\s+year))?\\b`;
    EnglishDateTime.HolidayRegex2 = `\\b(?<holiday>martin luther king|martin luther king jr|all saint's|tree planting day|white lover|st patrick|st george|cinco de mayo|independence|us independence|all hallow|all souls|guy fawkes)(\\s+(of\\s+)?(${EnglishDateTime.YearRegex}|${EnglishDateTime.RelativeRegex}\\s+year))?\\b`;
    EnglishDateTime.HolidayRegex3 = `(?<holiday>(canberra|easter|columbus|thanks\\s*giving|christmas|xmas|labour|mother's|mother|mothers|father's|father|fathers|female|single|teacher's|youth|children|arbor|girls|chsmilbuild|lover|labor|inauguration|groundhog|valentine's|baptiste|bastille|halloween|veterans|memorial|mid(-| )autumn|moon|spring|lantern|qingming|dragon boat|new years'|new year's|new year 's|new years|new year)\\s+(day))(\\s+(of\\s+)?(${EnglishDateTime.YearRegex}|${EnglishDateTime.RelativeRegex}\\s+year))?`;
    EnglishDateTime.DateTokenPrefix = 'on ';
    EnglishDateTime.TimeTokenPrefix = 'at ';
    EnglishDateTime.TokenBeforeDate = 'on ';
    EnglishDateTime.TokenBeforeTime = 'at ';
    EnglishDateTime.AMTimeRegex = `(?<am>morning)`;
    EnglishDateTime.PMTimeRegex = `\\b(?<pm>afternoon|evening|night)\\b`;
    EnglishDateTime.BeforeRegex = `\\b(before|in advance of|prior to)\\b`;
    EnglishDateTime.AfterRegex = `\\b(after)\\b`;
    EnglishDateTime.SinceRegex = `\\b(since)\\b`;
    EnglishDateTime.AgoRegex = `\\b(ago)\\b`;
    EnglishDateTime.LaterRegex = `\\b(later|from now)\\b`;
    EnglishDateTime.InConnectorRegex = `\\b(in)\\b`;
    EnglishDateTime.AmPmDescRegex = `(ampm)`;
    EnglishDateTime.MorningStartEndRegex = `(^(morning))|((morning)$)`;
    EnglishDateTime.AfternoonStartEndRegex = `(^(afternoon))|((afternoon)$)`;
    EnglishDateTime.EveningStartEndRegex = `(^(evening))|((evening)$)`;
    EnglishDateTime.NightStartEndRegex = `(^(overnight|tonight|night))|((overnight|tonight|night)$)`;
    EnglishDateTime.InExactNumberRegex = `\\b(a few|few|some|several)\\b`;
    EnglishDateTime.InExactNumberUnitRegex = `(${EnglishDateTime.InExactNumberRegex})\\s+(${EnglishDateTime.DurationUnitRegex})`;
    EnglishDateTime.RelativeTimeUnitRegex = `(((${EnglishDateTime.NextPrefixRegex}|${EnglishDateTime.PastPrefixRegex}|${EnglishDateTime.ThisPrefixRegex})\\s+(${EnglishDateTime.TimeUnitRegex}))|((the|my))\\s+(${EnglishDateTime.RestrictedTimeUnitRegex}))`;
    EnglishDateTime.RelativeDurationUnitRegex = `(((?<=(${EnglishDateTime.NextPrefixRegex}|${EnglishDateTime.PastPrefixRegex}|${EnglishDateTime.ThisPrefixRegex})\\s+)(${EnglishDateTime.DurationUnitRegex}))|((the|my))\\s+(${EnglishDateTime.RestrictedTimeUnitRegex}))`;
    EnglishDateTime.ConnectorRegex = `^(-|,|for|t|around)$`;
    EnglishDateTime.FromToRegex = `\\b(from).+(to)\\b.+`;
    EnglishDateTime.SingleAmbiguousMonthRegex = `^(the\\s+)?(may|march)$`;
    EnglishDateTime.PrepositionSuffixRegex = `\\b(on|in|at|around|from|to)$`;
    EnglishDateTime.FlexibleDayRegex = `(?<DayOfMonth>([A-Za-z]+\\s)?[A-Za-z\\d]+)`;
    EnglishDateTime.ForTheRegex = `\\b(((for the ${EnglishDateTime.FlexibleDayRegex})|(on (the\\s+)?${EnglishDateTime.FlexibleDayRegex}(?<=(st|nd|rd|th))))(?<end>\\s*(,|\\.|!|\\?|$)))`;
    EnglishDateTime.WeekDayAndDayOfMothRegex = `\\b${EnglishDateTime.WeekDayRegex}\\s+(the\\s+${EnglishDateTime.FlexibleDayRegex})\\b`;
    EnglishDateTime.RestOfDateRegex = `\\bRest\\s+(of\\s+)?((the|my|this|current)\\s+)?(?<duration>week|month|year)\\b`;
    EnglishDateTime.RestOfDateTimeRegex = `\\bRest\\s+(of\\s+)?((the|my|this|current)\\s+)?(?<unit>day)\\b`;
    EnglishDateTime.MealTimeRegex = `\\b(at\\s+)?(?<mealTime>lunchtime)\\b`;
    EnglishDateTime.NumberEndingPattern = `^(\\s+(?<meeting>meeting|appointment|conference|call|skype call)\\s+to\\s+(?<newTime>${EnglishDateTime.PeriodHourNumRegex}|${EnglishDateTime.HourRegex})((\\.)?$|(\\.,|,|!|\\?)))`;
    EnglishDateTime.OneOnOneRegex = `\\b(1\\s*:\\s*1)|(one (on )?one|one\\s*-\\s*one|one\\s*:\\s*one)\\b`;
    EnglishDateTime.LaterEarlyPeriodRegex = `\\b((?<LatePrefix>late|later)|(?<EarlyPrefix>early))\\s+(?<suffix>${EnglishDateTime.OneWordPeriodRegex})\\b`;
    EnglishDateTime.WeekWithWeekDayRangeRegex = `\\b((?<week>(${EnglishDateTime.NextPrefixRegex}|${EnglishDateTime.PastPrefixRegex}|this)\\s+week)((\\s+between\\s+${EnglishDateTime.WeekDayRegex}\\s+and\\s+${EnglishDateTime.WeekDayRegex})|(\\s+from\\s+${EnglishDateTime.WeekDayRegex}\\s+to\\s+${EnglishDateTime.WeekDayRegex})))\\b`;
    EnglishDateTime.GeneralEndingRegex = `^\\s*((\\.,)|\\.|,|!|\\?)?\\s*$`;
    EnglishDateTime.MiddlePauseRegex = `\\s*(,)\\s*`;
    EnglishDateTime.DurationConnectorRegex = `^\\s*(?<connector>\\s+|and|,)\\s*$`;
    EnglishDateTime.PrefixArticleRegex = `\\bthe\\s+`;
    EnglishDateTime.UnitMap = new Map([["years", "Y"], ["year", "Y"], ["months", "MON"], ["month", "MON"], ["weeks", "W"], ["week", "W"], ["days", "D"], ["day", "D"], ["hours", "H"], ["hour", "H"], ["hrs", "H"], ["hr", "H"], ["h", "H"], ["minutes", "M"], ["minute", "M"], ["mins", "M"], ["min", "M"], ["seconds", "S"], ["second", "S"], ["secs", "S"], ["sec", "S"]]);
    EnglishDateTime.UnitValueMap = new Map([["years", 31536000], ["year", 31536000], ["months", 2592000], ["month", 2592000], ["weeks", 604800], ["week", 604800], ["days", 86400], ["day", 86400], ["hours", 3600], ["hour", 3600], ["hrs", 3600], ["hr", 3600], ["h", 3600], ["minutes", 60], ["minute", 60], ["mins", 60], ["min", 60], ["seconds", 1], ["second", 1], ["secs", 1], ["sec", 1]]);
    EnglishDateTime.SeasonMap = new Map([["spring", "SP"], ["summer", "SU"], ["fall", "FA"], ["autumn", "FA"], ["winter", "WI"]]);
    EnglishDateTime.SeasonValueMap = new Map([["SP", 3], ["SU", 6], ["FA", 9], ["WI", 12]]);
    EnglishDateTime.CardinalMap = new Map([["first", 1], ["1st", 1], ["second", 2], ["2nd", 2], ["third", 3], ["3rd", 3], ["fourth", 4], ["4th", 4], ["fifth", 5], ["5th", 5]]);
    EnglishDateTime.DayOfWeek = new Map([["monday", 1], ["tuesday", 2], ["wednesday", 3], ["thursday", 4], ["friday", 5], ["saturday", 6], ["sunday", 0], ["mon", 1], ["tue", 2], ["tues", 2], ["wed", 3], ["wedn", 3], ["weds", 3], ["thu", 4], ["thur", 4], ["thurs", 4], ["fri", 5], ["sat", 6], ["sun", 0]]);
    EnglishDateTime.MonthOfYear = new Map([["1", 1], ["2", 2], ["3", 3], ["4", 4], ["5", 5], ["6", 6], ["7", 7], ["8", 8], ["9", 9], ["10", 10], ["11", 11], ["12", 12], ["january", 1], ["february", 2], ["march", 3], ["april", 4], ["may", 5], ["june", 6], ["july", 7], ["august", 8], ["september", 9], ["october", 10], ["november", 11], ["december", 12], ["jan", 1], ["feb", 2], ["mar", 3], ["apr", 4], ["jun", 6], ["jul", 7], ["aug", 8], ["sep", 9], ["sept", 9], ["oct", 10], ["nov", 11], ["dec", 12], ["01", 1], ["02", 2], ["03", 3], ["04", 4], ["05", 5], ["06", 6], ["07", 7], ["08", 8], ["09", 9]]);
    EnglishDateTime.Numbers = new Map([["zero", 0], ["one", 1], ["a", 1], ["an", 1], ["two", 2], ["three", 3], ["four", 4], ["five", 5], ["six", 6], ["seven", 7], ["eight", 8], ["nine", 9], ["ten", 10], ["eleven", 11], ["twelve", 12], ["thirteen", 13], ["fourteen", 14], ["fifteen", 15], ["sixteen", 16], ["seventeen", 17], ["eighteen", 18], ["nineteen", 19], ["twenty", 20], ["twenty one", 21], ["twenty two", 22], ["twenty three", 23], ["twenty four", 24], ["twenty five", 25], ["twenty six", 26], ["twenty seven", 27], ["twenty eight", 28], ["twenty nine", 29], ["thirty", 30], ["thirty one", 31], ["thirty two", 32], ["thirty three", 33], ["thirty four", 34], ["thirty five", 35], ["thirty six", 36], ["thirty seven", 37], ["thirty eight", 38], ["thirty nine", 39], ["forty", 40], ["forty one", 41], ["forty two", 42], ["forty three", 43], ["forty four", 44], ["forty five", 45], ["forty six", 46], ["forty seven", 47], ["forty eight", 48], ["forty nine", 49], ["fifty", 50], ["fifty one", 51], ["fifty two", 52], ["fifty three", 53], ["fifty four", 54], ["fifty five", 55], ["fifty six", 56], ["fifty seven", 57], ["fifty eight", 58], ["fifty nine", 59], ["sixty", 60], ["sixty one", 61], ["sixty two", 62], ["sixty three", 63], ["sixty four", 64], ["sixty five", 65], ["sixty six", 66], ["sixty seven", 67], ["sixty eight", 68], ["sixty nine", 69], ["seventy", 70], ["seventy one", 71], ["seventy two", 72], ["seventy three", 73], ["seventy four", 74], ["seventy five", 75], ["seventy six", 76], ["seventy seven", 77], ["seventy eight", 78], ["seventy nine", 79], ["eighty", 80], ["eighty one", 81], ["eighty two", 82], ["eighty three", 83], ["eighty four", 84], ["eighty five", 85], ["eighty six", 86], ["eighty seven", 87], ["eighty eight", 88], ["eighty nine", 89], ["ninety", 90], ["ninety one", 91], ["ninety two", 92], ["ninety three", 93], ["ninety four", 94], ["ninety five", 95], ["ninety six", 96], ["ninety seven", 97], ["ninety eight", 98], ["ninety nine", 99], ["one hundred", 100]]);
    EnglishDateTime.DayOfMonth = new Map([["1st", 1], ["2nd", 2], ["3rd", 3], ["4th", 4], ["5th", 5], ["6th", 6], ["7th", 7], ["8th", 8], ["9th", 9], ["10th", 10], ["11th", 11], ["11st", 11], ["12th", 12], ["12nd", 12], ["13th", 13], ["13rd", 13], ["14th", 14], ["15th", 15], ["16th", 16], ["17th", 17], ["18th", 18], ["19th", 19], ["20th", 20], ["21st", 21], ["22nd", 22], ["23rd", 23], ["24th", 24], ["25th", 25], ["26th", 26], ["27th", 27], ["28th", 28], ["29th", 29], ["30th", 30], ["31st", 31]]);
    EnglishDateTime.DoubleNumbers = new Map([["half", 0.5], ["quarter", 0.25]]);
    EnglishDateTime.HolidayNames = new Map([["easterday", ["easterday", "easter"]], ["fathers", ["fatherday", "fathersday"]], ["mothers", ["motherday", "mothersday"]], ["thanksgiving", ["thanksgivingday", "thanksgiving"]], ["martinlutherking", ["martinlutherkingday", "martinlutherkingjrday"]], ["washingtonsbirthday", ["washingtonsbirthday", "washingtonbirthday"]], ["canberra", ["canberraday"]], ["labour", ["labourday", "laborday"]], ["columbus", ["columbusday"]], ["memorial", ["memorialday"]], ["yuandan", ["yuandan"]], ["maosbirthday", ["maosbirthday"]], ["teachersday", ["teachersday", "teacherday"]], ["singleday", ["singleday"]], ["allsaintsday", ["allsaintsday"]], ["youthday", ["youthday"]], ["childrenday", ["childrenday", "childday"]], ["femaleday", ["femaleday"]], ["treeplantingday", ["treeplantingday"]], ["arborday", ["arborday"]], ["girlsday", ["girlsday"]], ["whiteloverday", ["whiteloverday"]], ["loverday", ["loverday"]], ["christmas", ["christmasday", "christmas"]], ["xmas", ["xmasday", "xmas"]], ["newyear", ["newyear"]], ["newyearday", ["newyearday"]], ["newyearsday", ["newyearsday"]], ["inaugurationday", ["inaugurationday"]], ["groundhougday", ["groundhougday"]], ["valentinesday", ["valentinesday"]], ["stpatrickday", ["stpatrickday"]], ["aprilfools", ["aprilfools"]], ["stgeorgeday", ["stgeorgeday"]], ["mayday", ["mayday"]], ["cincodemayoday", ["cincodemayoday"]], ["baptisteday", ["baptisteday"]], ["usindependenceday", ["usindependenceday"]], ["independenceday", ["independenceday"]], ["bastilleday", ["bastilleday"]], ["halloweenday", ["halloweenday"]], ["allhallowday", ["allhallowday"]], ["allsoulsday", ["allsoulsday"]], ["guyfawkesday", ["guyfawkesday"]], ["veteransday", ["veteransday"]], ["christmaseve", ["christmaseve"]], ["newyeareve", ["newyearseve", "newyeareve"]]]);
})(EnglishDateTime = exports.EnglishDateTime || (exports.EnglishDateTime = {}));
//# sourceMappingURL=englishDateTime.js.map