{"version":3,"file":"recognizers-text-date-time.umd.js","sources":["../../recognizers-text/src/culture.ts","../../recognizers-text/src/models.ts","../../recognizers-text/src/recognizer.ts","../../recognizers-text/src/extractors.ts","../../recognizers-text/src/parsers.ts","../../../node_modules/xregexp/xregexp-all.js","../../recognizers-text/src/utilities.ts","../../recognizers-text/src/recognizers-text.ts","../../recognizers-number/node_modules/lodash.trimend/index.js","../../recognizers-number/node_modules/bignumber.js/bignumber.js","../../recognizers-number/src/number/models.ts","../../recognizers-number/src/culture.ts","../../recognizers-number/node_modules/lodash.sortby/index.js","../../recognizers-number/src/number/parsers.ts","../../recognizers-number/src/number/constants.ts","../../recognizers-number/src/number/chinese/parsers.ts","../../recognizers-number/src/number/agnosticNumberParser.ts","../../recognizers-number/src/resources/baseNumbers.ts","../../recognizers-number/src/resources/englishNumeric.ts","../../recognizers-number/src/number/english/parserConfiguration.ts","../../recognizers-number/src/resources/spanishNumeric.ts","../../recognizers-number/src/number/spanish/parserConfiguration.ts","../../recognizers-number/src/resources/portugueseNumeric.ts","../../recognizers-number/src/number/portuguese/parserConfiguration.ts","../../recognizers-number/src/resources/frenchNumeric.ts","../../recognizers-number/src/number/french/parserConfiguration.ts","../../recognizers-number/src/resources/chineseNumeric.ts","../../recognizers-number/src/number/chinese/parserConfiguration.ts","../../recognizers-number/node_modules/lodash.escaperegexp/index.js","../../recognizers-number/src/number/extractors.ts","../../recognizers-number/src/number/english/extractors.ts","../../recognizers-number/src/number/spanish/extractors.ts","../../recognizers-number/src/number/portuguese/extractors.ts","../../recognizers-number/src/number/french/extractors.ts","../../recognizers-number/src/number/chinese/extractors.ts","../../recognizers-number/src/number/numberRecognizer.ts","../../recognizers-number/src/recognizers-text-number.ts","../src/dateTime/models.ts","../src/dateTime/constants.ts","../src/dateTime/utilities.ts","../node_modules/lodash.isequal/index.js","../src/dateTime/baseMerged.ts","../src/resources/baseDateTime.ts","../src/resources/englishDateTime.ts","../src/dateTime/parsers.ts","../node_modules/lodash.tonumber/index.js","../src/dateTime/baseDate.ts","../src/dateTime/baseTime.ts","../src/dateTime/baseDatePeriod.ts","../src/dateTime/baseTimePeriod.ts","../src/dateTime/baseDateTime.ts","../src/dateTime/baseDateTimePeriod.ts","../src/dateTime/baseDuration.ts","../src/dateTime/english/durationConfiguration.ts","../src/dateTime/english/timeConfiguration.ts","../src/dateTime/english/dateConfiguration.ts","../src/dateTime/english/dateTimeConfiguration.ts","../src/dateTime/english/timePeriodConfiguration.ts","../src/dateTime/english/datePeriodConfiguration.ts","../src/dateTime/english/dateTimePeriodConfiguration.ts","../src/dateTime/english/parsers.ts","../src/dateTime/english/baseConfiguration.ts","../src/dateTime/baseSet.ts","../src/dateTime/baseHoliday.ts","../src/dateTime/english/setConfiguration.ts","../src/dateTime/english/holidayConfiguration.ts","../src/dateTime/english/mergedConfiguration.ts","../src/resources/spanishDateTime.ts","../src/dateTime/spanish/durationConfiguration.ts","../src/dateTime/spanish/timeConfiguration.ts","../src/dateTime/spanish/dateTimeConfiguration.ts","../src/dateTime/spanish/datePeriodConfiguration.ts","../src/dateTime/spanish/timePeriodConfiguration.ts","../src/dateTime/spanish/dateTimePeriodConfiguration.ts","../src/dateTime/spanish/baseConfiguration.ts","../src/dateTime/spanish/dateConfiguration.ts","../src/dateTime/spanish/holidayConfiguration.ts","../src/dateTime/spanish/setConfiguration.ts","../src/dateTime/spanish/dateTimePeriodParser.ts","../src/dateTime/spanish/mergedConfiguration.ts","../src/resources/frenchDateTime.ts","../src/dateTime/french/durationConfiguration.ts","../src/dateTime/french/timeConfiguration.ts","../src/dateTime/french/dateTimeConfiguration.ts","../src/dateTime/french/datePeriodConfiguration.ts","../src/dateTime/french/timePeriodConfiguration.ts","../src/dateTime/french/dateTimePeriodConfiguration.ts","../src/dateTime/french/baseConfiguration.ts","../src/dateTime/french/dateConfiguration.ts","../src/dateTime/french/holidayConfiguration.ts","../src/dateTime/french/setConfiguration.ts","../src/dateTime/french/mergedConfiguration.ts","../src/resources/chineseDateTime.ts","../../recognizers-number-with-unit/src/numberWithUnit/models.ts","../../recognizers-number-with-unit/node_modules/lodash.max/index.js","../../recognizers-number-with-unit/node_modules/lodash.escaperegexp/index.js","../../recognizers-number-with-unit/src/numberWithUnit/extractors.ts","../../recognizers-number-with-unit/node_modules/lodash.last/index.js","../../recognizers-number-with-unit/src/numberWithUnit/parsers.ts","../../recognizers-number-with-unit/src/numberWithUnit/constants.ts","../../recognizers-number-with-unit/src/resources/englishNumericWithUnit.ts","../../recognizers-number-with-unit/src/numberWithUnit/english/base.ts","../../recognizers-number-with-unit/src/numberWithUnit/english/currency.ts","../../recognizers-number-with-unit/src/numberWithUnit/english/temperature.ts","../../recognizers-number-with-unit/src/numberWithUnit/english/dimension.ts","../../recognizers-number-with-unit/src/numberWithUnit/english/age.ts","../../recognizers-number-with-unit/src/resources/spanishNumericWithUnit.ts","../../recognizers-number-with-unit/src/numberWithUnit/spanish/base.ts","../../recognizers-number-with-unit/src/numberWithUnit/spanish/currency.ts","../../recognizers-number-with-unit/src/numberWithUnit/spanish/temperature.ts","../../recognizers-number-with-unit/src/numberWithUnit/spanish/dimension.ts","../../recognizers-number-with-unit/src/numberWithUnit/spanish/age.ts","../../recognizers-number-with-unit/src/resources/portugueseNumericWithUnit.ts","../../recognizers-number-with-unit/src/numberWithUnit/portuguese/base.ts","../../recognizers-number-with-unit/src/numberWithUnit/portuguese/currency.ts","../../recognizers-number-with-unit/src/numberWithUnit/portuguese/temperature.ts","../../recognizers-number-with-unit/src/numberWithUnit/portuguese/dimension.ts","../../recognizers-number-with-unit/src/numberWithUnit/portuguese/age.ts","../../recognizers-number-with-unit/src/resources/chineseNumericWithUnit.ts","../../recognizers-number-with-unit/src/numberWithUnit/chinese/base.ts","../../recognizers-number-with-unit/src/numberWithUnit/chinese/currency.ts","../../recognizers-number-with-unit/src/numberWithUnit/chinese/temperature.ts","../../recognizers-number-with-unit/src/numberWithUnit/chinese/dimension.ts","../../recognizers-number-with-unit/src/numberWithUnit/chinese/age.ts","../../recognizers-number-with-unit/src/resources/frenchNumericWithUnit.ts","../../recognizers-number-with-unit/src/numberWithUnit/french/base.ts","../../recognizers-number-with-unit/src/numberWithUnit/french/currency.ts","../../recognizers-number-with-unit/src/numberWithUnit/french/temperature.ts","../../recognizers-number-with-unit/src/numberWithUnit/french/dimension.ts","../../recognizers-number-with-unit/src/numberWithUnit/french/age.ts","../../recognizers-number-with-unit/src/numberWithUnit/numberWithUnitRecognizer.ts","../../recognizers-number-with-unit/src/recognizers-text-number-with-unit.ts","../src/dateTime/chinese/baseDateTime.ts","../src/dateTime/chinese/durationConfiguration.ts","../src/dateTime/chinese/timeConfiguration.ts","../src/dateTime/chinese/dateConfiguration.ts","../src/dateTime/chinese/dateTimeConfiguration.ts","../src/dateTime/chinese/timePeriodConfiguration.ts","../src/dateTime/chinese/datePeriodConfiguration.ts","../src/dateTime/chinese/dateTimePeriodConfiguration.ts","../src/dateTime/chinese/setConfiguration.ts","../src/dateTime/chinese/holidayConfiguration.ts","../src/dateTime/chinese/mergedConfiguration.ts","../src/dateTime/dateTimeRecognizer.ts","../src/recognizers-text-date-time.ts"],"sourcesContent":["export class Culture {\n\n  static readonly English: string = \"en-us\"\n  static readonly Chinese: string = \"zh-cn\"\n  static readonly Spanish: string = \"es-es\"\n  static readonly Portuguese: string = \"pt-br\"\n  static readonly French: string = \"fr-fr\"\n\n  static readonly supportedCultures: Array<Culture> = [\n    new Culture(\"English\", Culture.English),\n    new Culture(\"Chinese\", Culture.Chinese),\n    new Culture(\"Spanish\", Culture.Spanish),\n    new Culture(\"Portuguese\", Culture.Portuguese),\n    new Culture(\"French\", Culture.French)\n  ]\n\n  readonly cultureName: string\n  readonly cultureCode: string\n\n  protected constructor(cultureName: string, cultureCode: string) {\n    this.cultureName = cultureName\n    this.cultureCode = cultureCode\n  }\n\n  static getSupportedCultureCodes(): Array<string> {\n    return Culture.supportedCultures.map(c => c.cultureCode)\n  }\n}\n\nexport class CultureInfo {\n  readonly code: string;\n\n  static getCultureInfo(cultureCode: string): CultureInfo {\n    return new CultureInfo(cultureCode);\n  }\n\n  constructor(cultureName: string) {\n    this.code = cultureName;\n  }\n}","import { Culture } from \"./culture\";\n\nexport interface IModel {\n    readonly modelTypeName: string\n    parse(query: string): Array<ModelResult>\n}\n\nexport class ModelResult {\n    text: string\n    start: number\n    end: number\n    typeName: string\n    resolution: { [key: string]: any }\n}\n\nexport class ModelContainer {\n    static readonly defaultCulture: string = Culture.English;\n\n    private modelInstances: Map<string, IModel> = new Map<string, IModel>();\n\n    getModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        let result = this.tryGetModel(modelTypeName, culture, fallbackToDefaultCulture);\n        if (!result.containsModel) {\n            throw new Error(`No IModel instance for ${culture}-${modelTypeName}`);\n        }\n\n        return result.model as IModel;\n    }\n\n    tryGetModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean = true): { containsModel: boolean; model?: IModel } {\n        let model: IModel;\n        let ret: boolean = true;\n        let key = this.generateKey(modelTypeName, culture);\n        if (!this.modelInstances.has(key)) {\n            if (fallbackToDefaultCulture) {\n                culture = ModelContainer.defaultCulture;\n                key = this.generateKey(modelTypeName, culture);\n            }\n\n            if (!this.modelInstances.has(key)) {\n                ret = false;\n            }\n        }\n\n        if (ret) {\n            return { containsModel: true, model: this.modelInstances.get(key) };\n        }\n\n        return { containsModel: false };\n    }\n\n    containsModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean = true): boolean {\n        return this.tryGetModel(modelTypeName, culture, fallbackToDefaultCulture).containsModel;\n    }\n\n    registerModel(modelTypeName: string, culture: string, model: IModel) {\n        let key = this.generateKey(modelTypeName, culture);\n        if (this.modelInstances.has(key)) {\n            throw new Error(`${culture}-${modelTypeName} has been registered.`);\n        }\n\n        this.modelInstances.set(key, model);\n    }\n\n    registerModels(models: Map<string, IModel>, culture: string) {\n        for (let key in models.keys()) {\n            let model: IModel = models.get(key) as IModel;\n            this.registerModel(key, culture, model);\n        }\n    }\n\n    private generateKey(modelTypeName: string, culture: string): string {\n        return `${culture.toLowerCase()}-${modelTypeName}`;\n    }\n}","import { IModel, ModelContainer } from \"./models\"\n\nexport interface IRecognizer {\n  getModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean): void\n\n  tryGetModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean): { containsModel: boolean; model?: IModel }\n\n  containsModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean): boolean\n}\n\nexport abstract class Recognizer implements IRecognizer {\n  private readonly modelContainer: ModelContainer = new ModelContainer();\n\n  getModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n    return this.modelContainer.getModel(modelTypeName, culture, fallbackToDefaultCulture);\n  }\n\n  tryGetModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean = true): { containsModel: boolean; model?: IModel } {\n    return this.modelContainer.tryGetModel(modelTypeName, culture, fallbackToDefaultCulture);\n  }\n\n  containsModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean = true): boolean {\n    return this.modelContainer.containsModel(modelTypeName, culture, fallbackToDefaultCulture);\n  }\n\n  registerModel(modelTypeName: string, culture: string, model: IModel) {\n    this.modelContainer.registerModel(modelTypeName, culture, model);\n  }\n\n  registerModels(models: Map<string, IModel>, culture: string) {\n    this.modelContainer.registerModels(models, culture);\n  }\n}","export interface IExtractor {\n    extract(input: string): Array<ExtractResult>\n}\n\nexport class ExtractResult {\n    start: number;\n    length: number;\n    text: string;\n    type: string;\n    data?: any;\n\n    static isOverlap(erA: ExtractResult, erB: ExtractResult): boolean {\n        return !( erA.start >= erB.start + erB.length ) && !( erB.start >= erA.start + erA.length );\n    }\n\n    static isCover(er1: ExtractResult, er2: ExtractResult): boolean {\n        return ((er2.start < er1.start) && ((er2.start + er2.length) >= (er1.start + er1.length)))\n        || ((er2.start <= er1.start) && ((er2.start + er2.length) > (er1.start + er1.length)));\n    }\n\n    static getFromText(source: string): ExtractResult {\n        return {\n            start: 0,\n            length: source.length,\n            text: source,\n            type: 'custom'\n        }\n    }\n}\n","import { ExtractResult } from \"./extractors\";\n\nexport interface IParser {\n    parse(extResult: ExtractResult): ParseResult | null\n}\n\nexport class ParseResult extends ExtractResult {\n    constructor(er?: ExtractResult) {\n        super();\n        if (er) {\n            this.length = er.length;\n            this.start = er.start;\n            this.data = er.data;\n            this.text = er.text;\n            this.type = er.type;\n        }\n    }\n\n    // Value is for resolution.\n    // e.g. 1000 for \"one thousand\".\n    // The resolutions are different for different parsers.\n    // Therefore, we use object here.\n    value?: any;\n\n    // Output the value in string format.\n    // It is used in some parsers.\n    resolutionStr?: string;\n}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.XRegExp = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*!\r\n * XRegExp.build 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2012-2017 MIT License\r\n * Inspired by Lea Verou's RegExp.create <lea.verou.me>\r\n */\r\n\r\nmodule.exports = function(XRegExp) {\r\n    'use strict';\r\n\r\n    var REGEX_DATA = 'xregexp';\r\n    var subParts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\r\n    var parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subParts], 'g', {\r\n        conjunction: 'or'\r\n    });\r\n\r\n    /**\r\n     * Strips a leading `^` and trailing unescaped `$`, if both are present.\r\n     *\r\n     * @private\r\n     * @param {String} pattern Pattern to process.\r\n     * @returns {String} Pattern with edge anchors removed.\r\n     */\r\n    function deanchor(pattern) {\r\n        // Allow any number of empty noncapturing groups before/after anchors, because regexes\r\n        // built/generated by XRegExp sometimes include them\r\n        var leadingAnchor = /^(?:\\(\\?:\\))*\\^/;\r\n        var trailingAnchor = /\\$(?:\\(\\?:\\))*$/;\r\n\r\n        if (\r\n            leadingAnchor.test(pattern) &&\r\n            trailingAnchor.test(pattern) &&\r\n            // Ensure that the trailing `$` isn't escaped\r\n            trailingAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, ''))\r\n        ) {\r\n            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');\r\n        }\r\n\r\n        return pattern;\r\n    }\r\n\r\n    /**\r\n     * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.\r\n     *\r\n     * @private\r\n     * @param {String|RegExp} value Value to convert.\r\n     * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not\r\n     *   already a regex generated by XRegExp\r\n     * @returns {RegExp} XRegExp object with XRegExp syntax applied.\r\n     */\r\n    function asXRegExp(value, addFlagX) {\r\n        var flags = addFlagX ? 'x' : '';\r\n        return XRegExp.isRegExp(value) ?\r\n            (value[REGEX_DATA] && value[REGEX_DATA].captureNames ?\r\n                // Don't recompile, to preserve capture names\r\n                value :\r\n                // Recompile as XRegExp\r\n                XRegExp(value.source, flags)\r\n            ) :\r\n            // Compile string as XRegExp\r\n            XRegExp(value, flags);\r\n    }\r\n\r\n    /**\r\n     * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in\r\n     * the outer pattern and provided subpatterns are automatically renumbered to work correctly.\r\n     * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.\r\n     *\r\n     * @memberOf XRegExp\r\n     * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\r\n     *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\r\n     *   character classes.\r\n     * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\r\n     *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\r\n     * @param {String} [flags] Any combination of XRegExp flags.\r\n     * @returns {RegExp} Regex with interpolated subpatterns.\r\n     * @example\r\n     *\r\n     * var time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\r\n     *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\r\n     *     h12: /1[0-2]|0?[1-9]/,\r\n     *     h24: /2[0-3]|[01][0-9]/\r\n     *   }, 'x'),\r\n     *   minutes: /^[0-5][0-9]$/\r\n     * });\r\n     * time.test('10:59'); // -> true\r\n     * XRegExp.exec('10:59', time).minutes; // -> '59'\r\n     */\r\n    XRegExp.build = function(pattern, subs, flags) {\r\n        flags = flags || '';\r\n        // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how\r\n        // some browsers convert `RegExp('\\n')` to a regex that contains the literal characters `\\`\r\n        // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.\r\n        var addFlagX = flags.indexOf('x') > -1;\r\n        var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern);\r\n        // Add flags within a leading mode modifier to the overall pattern's flags\r\n        if (inlineFlags) {\r\n            flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);\r\n        }\r\n\r\n        var data = {};\r\n        for (var p in subs) {\r\n            if (subs.hasOwnProperty(p)) {\r\n                // Passing to XRegExp enables extended syntax and ensures independent validity,\r\n                // lest an unescaped `(`, `)`, `[`, or trailing `\\` breaks the `(?:)` wrapper. For\r\n                // subpatterns provided as native regexes, it dies on octals and adds the property\r\n                // used to hold extended regex instance data, for simplicity.\r\n                var sub = asXRegExp(subs[p], addFlagX);\r\n                data[p] = {\r\n                    // Deanchoring allows embedding independently useful anchored regexes. If you\r\n                    // really need to keep your anchors, double them (i.e., `^^...$$`).\r\n                    pattern: deanchor(sub.source),\r\n                    names: sub[REGEX_DATA].captureNames || []\r\n                };\r\n            }\r\n        }\r\n\r\n        // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\r\n        // helps keep this simple. Named captures will be put back.\r\n        var patternAsRegex = asXRegExp(pattern, addFlagX);\r\n\r\n        // 'Caps' is short for 'captures'\r\n        var numCaps = 0;\r\n        var numPriorCaps;\r\n        var numOuterCaps = 0;\r\n        var outerCapsMap = [0];\r\n        var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];\r\n        var output = patternAsRegex.source.replace(parts, function($0, $1, $2, $3, $4) {\r\n            var subName = $1 || $2;\r\n            var capName;\r\n            var intro;\r\n            var localCapIndex;\r\n            // Named subpattern\r\n            if (subName) {\r\n                if (!data.hasOwnProperty(subName)) {\r\n                    throw new ReferenceError('Undefined property ' + $0);\r\n                }\r\n                // Named subpattern was wrapped in a capturing group\r\n                if ($1) {\r\n                    capName = outerCapNames[numOuterCaps];\r\n                    outerCapsMap[++numOuterCaps] = ++numCaps;\r\n                    // If it's a named group, preserve the name. Otherwise, use the subpattern name\r\n                    // as the capture name\r\n                    intro = '(?<' + (capName || subName) + '>';\r\n                } else {\r\n                    intro = '(?:';\r\n                }\r\n                numPriorCaps = numCaps;\r\n                return intro + data[subName].pattern.replace(subParts, function(match, paren, backref) {\r\n                    // Capturing group\r\n                    if (paren) {\r\n                        capName = data[subName].names[numCaps - numPriorCaps];\r\n                        ++numCaps;\r\n                        // If the current capture has a name, preserve the name\r\n                        if (capName) {\r\n                            return '(?<' + capName + '>';\r\n                        }\r\n                    // Backreference\r\n                    } else if (backref) {\r\n                        localCapIndex = +backref - 1;\r\n                        // Rewrite the backreference\r\n                        return data[subName].names[localCapIndex] ?\r\n                            // Need to preserve the backreference name in case using flag `n`\r\n                            '\\\\k<' + data[subName].names[localCapIndex] + '>' :\r\n                            '\\\\' + (+backref + numPriorCaps);\r\n                    }\r\n                    return match;\r\n                }) + ')';\r\n            }\r\n            // Capturing group\r\n            if ($3) {\r\n                capName = outerCapNames[numOuterCaps];\r\n                outerCapsMap[++numOuterCaps] = ++numCaps;\r\n                // If the current capture has a name, preserve the name\r\n                if (capName) {\r\n                    return '(?<' + capName + '>';\r\n                }\r\n            // Backreference\r\n            } else if ($4) {\r\n                localCapIndex = +$4 - 1;\r\n                // Rewrite the backreference\r\n                return outerCapNames[localCapIndex] ?\r\n                    // Need to preserve the backreference name in case using flag `n`\r\n                    '\\\\k<' + outerCapNames[localCapIndex] + '>' :\r\n                    '\\\\' + outerCapsMap[+$4];\r\n            }\r\n            return $0;\r\n        });\r\n\r\n        return XRegExp(output, flags);\r\n    };\r\n\r\n};\r\n\n},{}],2:[function(require,module,exports){\n/*!\r\n * XRegExp.matchRecursive 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2009-2017 MIT License\r\n */\r\n\r\nmodule.exports = function(XRegExp) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns a match detail object composed of the provided values.\r\n     *\r\n     * @private\r\n     */\r\n    function row(name, value, start, end) {\r\n        return {\r\n            name: name,\r\n            value: value,\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns an array of match strings between outermost left and right delimiters, or an array of\r\n     * objects with detailed match parts and position data. An error is thrown if delimiters are\r\n     * unbalanced within the data.\r\n     *\r\n     * @memberOf XRegExp\r\n     * @param {String} str String to search.\r\n     * @param {String} left Left delimiter as an XRegExp pattern.\r\n     * @param {String} right Right delimiter as an XRegExp pattern.\r\n     * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.\r\n     * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\r\n     * @returns {Array} Array of matches, or an empty array.\r\n     * @example\r\n     *\r\n     * // Basic usage\r\n     * var str = '(t((e))s)t()(ing)';\r\n     * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\r\n     * // -> ['t((e))s', '', 'ing']\r\n     *\r\n     * // Extended information mode with valueNames\r\n     * str = 'Here is <div> <div>an</div></div> example';\r\n     * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\r\n     *   valueNames: ['between', 'left', 'match', 'right']\r\n     * });\r\n     * // -> [\r\n     * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\r\n     * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\r\n     * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\r\n     * // {name: 'right',   value: '</div>',         start: 27, end: 33},\r\n     * // {name: 'between', value: ' example',       start: 33, end: 41}\r\n     * // ]\r\n     *\r\n     * // Omitting unneeded parts with null valueNames, and using escapeChar\r\n     * str = '...{1}.\\\\{{function(x,y){return {y:x}}}';\r\n     * XRegExp.matchRecursive(str, '{', '}', 'g', {\r\n     *   valueNames: ['literal', null, 'value', null],\r\n     *   escapeChar: '\\\\'\r\n     * });\r\n     * // -> [\r\n     * // {name: 'literal', value: '...',  start: 0, end: 3},\r\n     * // {name: 'value',   value: '1',    start: 4, end: 5},\r\n     * // {name: 'literal', value: '.\\\\{', start: 6, end: 9},\r\n     * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}\r\n     * // ]\r\n     *\r\n     * // Sticky mode via flag y\r\n     * str = '<1><<<2>>><3>4<5>';\r\n     * XRegExp.matchRecursive(str, '<', '>', 'gy');\r\n     * // -> ['1', '<<2>>', '3']\r\n     */\r\n    XRegExp.matchRecursive = function(str, left, right, flags, options) {\r\n        flags = flags || '';\r\n        options = options || {};\r\n        var global = flags.indexOf('g') > -1;\r\n        var sticky = flags.indexOf('y') > -1;\r\n        // Flag `y` is controlled internally\r\n        var basicFlags = flags.replace(/y/g, '');\r\n        var escapeChar = options.escapeChar;\r\n        var vN = options.valueNames;\r\n        var output = [];\r\n        var openTokens = 0;\r\n        var delimStart = 0;\r\n        var delimEnd = 0;\r\n        var lastOuterEnd = 0;\r\n        var outerStart;\r\n        var innerStart;\r\n        var leftMatch;\r\n        var rightMatch;\r\n        var esc;\r\n        left = XRegExp(left, basicFlags);\r\n        right = XRegExp(right, basicFlags);\r\n\r\n        if (escapeChar) {\r\n            if (escapeChar.length > 1) {\r\n                throw new Error('Cannot use more than one escape character');\r\n            }\r\n            escapeChar = XRegExp.escape(escapeChar);\r\n            // Example of concatenated `esc` regex:\r\n            // `escapeChar`: '%'\r\n            // `left`: '<'\r\n            // `right`: '>'\r\n            // Regex is: /(?:%[\\S\\s]|(?:(?!<|>)[^%])+)+/\r\n            esc = new RegExp(\r\n                '(?:' + escapeChar + '[\\\\S\\\\s]|(?:(?!' +\r\n                    // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.\r\n                    // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax\r\n                    // transformation resulting from those flags was already applied to `left` and\r\n                    // `right` when they were passed through the XRegExp constructor above.\r\n                    XRegExp.union([left, right], '', {conjunction: 'or'}).source +\r\n                    ')[^' + escapeChar + '])+)+',\r\n                // Flags `gy` not needed here\r\n                flags.replace(/[^imu]+/g, '')\r\n            );\r\n        }\r\n\r\n        while (true) {\r\n            // If using an escape character, advance to the delimiter's next starting position,\r\n            // skipping any escaped characters in between\r\n            if (escapeChar) {\r\n                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;\r\n            }\r\n            leftMatch = XRegExp.exec(str, left, delimEnd);\r\n            rightMatch = XRegExp.exec(str, right, delimEnd);\r\n            // Keep the leftmost match only\r\n            if (leftMatch && rightMatch) {\r\n                if (leftMatch.index <= rightMatch.index) {\r\n                    rightMatch = null;\r\n                } else {\r\n                    leftMatch = null;\r\n                }\r\n            }\r\n            // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\r\n            // LM | RM | OT | Result\r\n            // 1  | 0  | 1  | loop\r\n            // 1  | 0  | 0  | loop\r\n            // 0  | 1  | 1  | loop\r\n            // 0  | 1  | 0  | throw\r\n            // 0  | 0  | 1  | throw\r\n            // 0  | 0  | 0  | break\r\n            // The paths above don't include the sticky mode special case. The loop ends after the\r\n            // first completed match if not `global`.\r\n            if (leftMatch || rightMatch) {\r\n                delimStart = (leftMatch || rightMatch).index;\r\n                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\r\n            } else if (!openTokens) {\r\n                break;\r\n            }\r\n            if (sticky && !openTokens && delimStart > lastOuterEnd) {\r\n                break;\r\n            }\r\n            if (leftMatch) {\r\n                if (!openTokens) {\r\n                    outerStart = delimStart;\r\n                    innerStart = delimEnd;\r\n                }\r\n                ++openTokens;\r\n            } else if (rightMatch && openTokens) {\r\n                if (!--openTokens) {\r\n                    if (vN) {\r\n                        if (vN[0] && outerStart > lastOuterEnd) {\r\n                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\r\n                        }\r\n                        if (vN[1]) {\r\n                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\r\n                        }\r\n                        if (vN[2]) {\r\n                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\r\n                        }\r\n                        if (vN[3]) {\r\n                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\r\n                        }\r\n                    } else {\r\n                        output.push(str.slice(innerStart, delimStart));\r\n                    }\r\n                    lastOuterEnd = delimEnd;\r\n                    if (!global) {\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error('Unbalanced delimiter found in string');\r\n            }\r\n            // If the delimiter matched an empty string, avoid an infinite loop\r\n            if (delimStart === delimEnd) {\r\n                ++delimEnd;\r\n            }\r\n        }\r\n\r\n        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\r\n            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\r\n        }\r\n\r\n        return output;\r\n    };\r\n\r\n};\r\n\n},{}],3:[function(require,module,exports){\n/*!\r\n * XRegExp Unicode Base 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2008-2017 MIT License\r\n */\r\n\r\nmodule.exports = function(XRegExp) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Adds base support for Unicode matching:\r\n     * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\r\n     *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\r\n     *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).\r\n     * - Adds flag A (astral), which enables 21-bit Unicode support.\r\n     * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\r\n     *\r\n     * Unicode Base relies on externally provided Unicode character data. Official addons are\r\n     * available to provide data for Unicode categories, scripts, blocks, and properties.\r\n     *\r\n     * @requires XRegExp\r\n     */\r\n\r\n    // ==--------------------------==\r\n    // Private stuff\r\n    // ==--------------------------==\r\n\r\n    // Storage for Unicode data\r\n    var unicode = {};\r\n\r\n    // Reuse utils\r\n    var dec = XRegExp._dec;\r\n    var hex = XRegExp._hex;\r\n    var pad4 = XRegExp._pad4;\r\n\r\n    // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\r\n    function normalize(name) {\r\n        return name.replace(/[- _]+/g, '').toLowerCase();\r\n    }\r\n\r\n    // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\r\n    function charCode(chr) {\r\n        var esc = /^\\\\[xu](.+)/.exec(chr);\r\n        return esc ?\r\n            dec(esc[1]) :\r\n            chr.charCodeAt(chr.charAt(0) === '\\\\' ? 1 : 0);\r\n    }\r\n\r\n    // Inverts a list of ordered BMP characters and ranges\r\n    function invertBmp(range) {\r\n        var output = '';\r\n        var lastEnd = -1;\r\n\r\n        XRegExp.forEach(\r\n            range,\r\n            /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/,\r\n            function(m) {\r\n                var start = charCode(m[1]);\r\n                if (start > (lastEnd + 1)) {\r\n                    output += '\\\\u' + pad4(hex(lastEnd + 1));\r\n                    if (start > (lastEnd + 2)) {\r\n                        output += '-\\\\u' + pad4(hex(start - 1));\r\n                    }\r\n                }\r\n                lastEnd = charCode(m[2] || m[1]);\r\n            }\r\n        );\r\n\r\n        if (lastEnd < 0xFFFF) {\r\n            output += '\\\\u' + pad4(hex(lastEnd + 1));\r\n            if (lastEnd < 0xFFFE) {\r\n                output += '-\\\\uFFFF';\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    // Generates an inverted BMP range on first use\r\n    function cacheInvertedBmp(slug) {\r\n        var prop = 'b!';\r\n        return (\r\n            unicode[slug][prop] ||\r\n            (unicode[slug][prop] = invertBmp(unicode[slug].bmp))\r\n        );\r\n    }\r\n\r\n    // Combines and optionally negates BMP and astral data\r\n    function buildAstral(slug, isNegated) {\r\n        var item = unicode[slug];\r\n        var combined = '';\r\n\r\n        if (item.bmp && !item.isBmpLast) {\r\n            combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');\r\n        }\r\n        if (item.astral) {\r\n            combined += item.astral;\r\n        }\r\n        if (item.isBmpLast && item.bmp) {\r\n            combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';\r\n        }\r\n\r\n        // Astral Unicode tokens always match a code point, never a code unit\r\n        return isNegated ?\r\n            '(?:(?!' + combined + ')(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))' :\r\n            '(?:' + combined + ')';\r\n    }\r\n\r\n    // Builds a complete astral pattern on first use\r\n    function cacheAstral(slug, isNegated) {\r\n        var prop = isNegated ? 'a!' : 'a=';\r\n        return (\r\n            unicode[slug][prop] ||\r\n            (unicode[slug][prop] = buildAstral(slug, isNegated))\r\n        );\r\n    }\r\n\r\n    // ==--------------------------==\r\n    // Core functionality\r\n    // ==--------------------------==\r\n\r\n    /*\r\n     * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.\r\n     */\r\n    XRegExp.addToken(\r\n        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\r\n        /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/,\r\n        function(match, scope, flags) {\r\n            var ERR_DOUBLE_NEG = 'Invalid double negation ';\r\n            var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\r\n            var ERR_UNKNOWN_REF = 'Unicode token missing data ';\r\n            var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\r\n            var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';\r\n            // Negated via \\P{..} or \\p{^..}\r\n            var isNegated = match[1] === 'P' || !!match[2];\r\n            // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\r\n            var isAstralMode = flags.indexOf('A') > -1;\r\n            // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`\r\n            var slug = normalize(match[4] || match[3]);\r\n            // Token data object\r\n            var item = unicode[slug];\r\n\r\n            if (match[1] === 'P' && match[2]) {\r\n                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\r\n            }\r\n            if (!unicode.hasOwnProperty(slug)) {\r\n                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\r\n            }\r\n\r\n            // Switch to the negated form of the referenced Unicode token\r\n            if (item.inverseOf) {\r\n                slug = normalize(item.inverseOf);\r\n                if (!unicode.hasOwnProperty(slug)) {\r\n                    throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);\r\n                }\r\n                item = unicode[slug];\r\n                isNegated = !isNegated;\r\n            }\r\n\r\n            if (!(item.bmp || isAstralMode)) {\r\n                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\r\n            }\r\n            if (isAstralMode) {\r\n                if (scope === 'class') {\r\n                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\r\n                }\r\n\r\n                return cacheAstral(slug, isNegated);\r\n            }\r\n\r\n            return scope === 'class' ?\r\n                (isNegated ? cacheInvertedBmp(slug) : item.bmp) :\r\n                (isNegated ? '[^' : '[') + item.bmp + ']';\r\n        },\r\n        {\r\n            scope: 'all',\r\n            optionalFlags: 'A',\r\n            leadChar: '\\\\'\r\n        }\r\n    );\r\n\r\n    /**\r\n     * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\r\n     *\r\n     * @memberOf XRegExp\r\n     * @param {Array} data Objects with named character ranges. Each object may have properties\r\n     *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\r\n     *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\r\n     *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\r\n     *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\r\n     *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\r\n     *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\r\n     *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\r\n     *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape\r\n     *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\r\n     *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\r\n     *   character classes and alternation, and should use surrogate pairs to represent astral code\r\n     *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\r\n     *   defined as the exact inverse of another token.\r\n     * @example\r\n     *\r\n     * // Basic use\r\n     * XRegExp.addUnicodeData([{\r\n     *   name: 'XDigit',\r\n     *   alias: 'Hexadecimal',\r\n     *   bmp: '0-9A-Fa-f'\r\n     * }]);\r\n     * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\r\n     */\r\n    XRegExp.addUnicodeData = function(data) {\r\n        var ERR_NO_NAME = 'Unicode token requires name';\r\n        var ERR_NO_DATA = 'Unicode token has no character data ';\r\n        var item;\r\n\r\n        for (var i = 0; i < data.length; ++i) {\r\n            item = data[i];\r\n            if (!item.name) {\r\n                throw new Error(ERR_NO_NAME);\r\n            }\r\n            if (!(item.inverseOf || item.bmp || item.astral)) {\r\n                throw new Error(ERR_NO_DATA + item.name);\r\n            }\r\n            unicode[normalize(item.name)] = item;\r\n            if (item.alias) {\r\n                unicode[normalize(item.alias)] = item;\r\n            }\r\n        }\r\n\r\n        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\r\n        // flags might now produce different results\r\n        XRegExp.cache.flush('patterns');\r\n    };\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Return a reference to the internal Unicode definition structure for the given Unicode\r\n     * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex\r\n     * constructs.\r\n     *\r\n     * @memberOf XRegExp\r\n     * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\r\n     *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\r\n     *   Properties and Property Aliases.\r\n     * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\r\n     *\r\n     * @note\r\n     * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\r\n     *\r\n     * @note\r\n     * This method is *not* part of the officially documented API and may change or be removed in\r\n     * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\r\n     * structures set up by XRegExp.\r\n     */\r\n    XRegExp._getUnicodeProperty = function(name) {\r\n        var slug = normalize(name);\r\n        return unicode[slug];\r\n    };\r\n\r\n};\r\n\n},{}],4:[function(require,module,exports){\n/*!\r\n * XRegExp Unicode Blocks 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2010-2017 MIT License\r\n * Unicode data by Mathias Bynens <mathiasbynens.be>\r\n */\r\n\r\nmodule.exports = function(XRegExp) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,\r\n     * `\\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and\r\n     * underscores are ignored.\r\n     *\r\n     * Uses Unicode 9.0.0.\r\n     *\r\n     * @requires XRegExp, Unicode Base\r\n     */\r\n\r\n    if (!XRegExp.addUnicodeData) {\r\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');\r\n    }\r\n\r\n    XRegExp.addUnicodeData([\r\n        {\r\n            name: 'InAdlam',\r\n            astral: '\\uD83A[\\uDD00-\\uDD5F]'\r\n        },\r\n        {\r\n            name: 'InAegean_Numbers',\r\n            astral: '\\uD800[\\uDD00-\\uDD3F]'\r\n        },\r\n        {\r\n            name: 'InAhom',\r\n            astral: '\\uD805[\\uDF00-\\uDF3F]'\r\n        },\r\n        {\r\n            name: 'InAlchemical_Symbols',\r\n            astral: '\\uD83D[\\uDF00-\\uDF7F]'\r\n        },\r\n        {\r\n            name: 'InAlphabetic_Presentation_Forms',\r\n            bmp: '\\uFB00-\\uFB4F'\r\n        },\r\n        {\r\n            name: 'InAnatolian_Hieroglyphs',\r\n            astral: '\\uD811[\\uDC00-\\uDE7F]'\r\n        },\r\n        {\r\n            name: 'InAncient_Greek_Musical_Notation',\r\n            astral: '\\uD834[\\uDE00-\\uDE4F]'\r\n        },\r\n        {\r\n            name: 'InAncient_Greek_Numbers',\r\n            astral: '\\uD800[\\uDD40-\\uDD8F]'\r\n        },\r\n        {\r\n            name: 'InAncient_Symbols',\r\n            astral: '\\uD800[\\uDD90-\\uDDCF]'\r\n        },\r\n        {\r\n            name: 'InArabic',\r\n            bmp: '\\u0600-\\u06FF'\r\n        },\r\n        {\r\n            name: 'InArabic_Extended_A',\r\n            bmp: '\\u08A0-\\u08FF'\r\n        },\r\n        {\r\n            name: 'InArabic_Mathematical_Alphabetic_Symbols',\r\n            astral: '\\uD83B[\\uDE00-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InArabic_Presentation_Forms_A',\r\n            bmp: '\\uFB50-\\uFDFF'\r\n        },\r\n        {\r\n            name: 'InArabic_Presentation_Forms_B',\r\n            bmp: '\\uFE70-\\uFEFF'\r\n        },\r\n        {\r\n            name: 'InArabic_Supplement',\r\n            bmp: '\\u0750-\\u077F'\r\n        },\r\n        {\r\n            name: 'InArmenian',\r\n            bmp: '\\u0530-\\u058F'\r\n        },\r\n        {\r\n            name: 'InArrows',\r\n            bmp: '\\u2190-\\u21FF'\r\n        },\r\n        {\r\n            name: 'InAvestan',\r\n            astral: '\\uD802[\\uDF00-\\uDF3F]'\r\n        },\r\n        {\r\n            name: 'InBalinese',\r\n            bmp: '\\u1B00-\\u1B7F'\r\n        },\r\n        {\r\n            name: 'InBamum',\r\n            bmp: '\\uA6A0-\\uA6FF'\r\n        },\r\n        {\r\n            name: 'InBamum_Supplement',\r\n            astral: '\\uD81A[\\uDC00-\\uDE3F]'\r\n        },\r\n        {\r\n            name: 'InBasic_Latin',\r\n            bmp: '\\0-\\x7F'\r\n        },\r\n        {\r\n            name: 'InBassa_Vah',\r\n            astral: '\\uD81A[\\uDED0-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InBatak',\r\n            bmp: '\\u1BC0-\\u1BFF'\r\n        },\r\n        {\r\n            name: 'InBengali',\r\n            bmp: '\\u0980-\\u09FF'\r\n        },\r\n        {\r\n            name: 'InBhaiksuki',\r\n            astral: '\\uD807[\\uDC00-\\uDC6F]'\r\n        },\r\n        {\r\n            name: 'InBlock_Elements',\r\n            bmp: '\\u2580-\\u259F'\r\n        },\r\n        {\r\n            name: 'InBopomofo',\r\n            bmp: '\\u3100-\\u312F'\r\n        },\r\n        {\r\n            name: 'InBopomofo_Extended',\r\n            bmp: '\\u31A0-\\u31BF'\r\n        },\r\n        {\r\n            name: 'InBox_Drawing',\r\n            bmp: '\\u2500-\\u257F'\r\n        },\r\n        {\r\n            name: 'InBrahmi',\r\n            astral: '\\uD804[\\uDC00-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'InBraille_Patterns',\r\n            bmp: '\\u2800-\\u28FF'\r\n        },\r\n        {\r\n            name: 'InBuginese',\r\n            bmp: '\\u1A00-\\u1A1F'\r\n        },\r\n        {\r\n            name: 'InBuhid',\r\n            bmp: '\\u1740-\\u175F'\r\n        },\r\n        {\r\n            name: 'InByzantine_Musical_Symbols',\r\n            astral: '\\uD834[\\uDC00-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InCJK_Compatibility',\r\n            bmp: '\\u3300-\\u33FF'\r\n        },\r\n        {\r\n            name: 'InCJK_Compatibility_Forms',\r\n            bmp: '\\uFE30-\\uFE4F'\r\n        },\r\n        {\r\n            name: 'InCJK_Compatibility_Ideographs',\r\n            bmp: '\\uF900-\\uFAFF'\r\n        },\r\n        {\r\n            name: 'InCJK_Compatibility_Ideographs_Supplement',\r\n            astral: '\\uD87E[\\uDC00-\\uDE1F]'\r\n        },\r\n        {\r\n            name: 'InCJK_Radicals_Supplement',\r\n            bmp: '\\u2E80-\\u2EFF'\r\n        },\r\n        {\r\n            name: 'InCJK_Strokes',\r\n            bmp: '\\u31C0-\\u31EF'\r\n        },\r\n        {\r\n            name: 'InCJK_Symbols_and_Punctuation',\r\n            bmp: '\\u3000-\\u303F'\r\n        },\r\n        {\r\n            name: 'InCJK_Unified_Ideographs',\r\n            bmp: '\\u4E00-\\u9FFF'\r\n        },\r\n        {\r\n            name: 'InCJK_Unified_Ideographs_Extension_A',\r\n            bmp: '\\u3400-\\u4DBF'\r\n        },\r\n        {\r\n            name: 'InCJK_Unified_Ideographs_Extension_B',\r\n            astral: '[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF]'\r\n        },\r\n        {\r\n            name: 'InCJK_Unified_Ideographs_Extension_C',\r\n            astral: '\\uD869[\\uDF00-\\uDFFF]|[\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF3F]'\r\n        },\r\n        {\r\n            name: 'InCJK_Unified_Ideographs_Extension_D',\r\n            astral: '\\uD86D[\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1F]'\r\n        },\r\n        {\r\n            name: 'InCJK_Unified_Ideographs_Extension_E',\r\n            astral: '\\uD86E[\\uDC20-\\uDFFF]|[\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD873[\\uDC00-\\uDEAF]'\r\n        },\r\n        {\r\n            name: 'InCarian',\r\n            astral: '\\uD800[\\uDEA0-\\uDEDF]'\r\n        },\r\n        {\r\n            name: 'InCaucasian_Albanian',\r\n            astral: '\\uD801[\\uDD30-\\uDD6F]'\r\n        },\r\n        {\r\n            name: 'InChakma',\r\n            astral: '\\uD804[\\uDD00-\\uDD4F]'\r\n        },\r\n        {\r\n            name: 'InCham',\r\n            bmp: '\\uAA00-\\uAA5F'\r\n        },\r\n        {\r\n            name: 'InCherokee',\r\n            bmp: '\\u13A0-\\u13FF'\r\n        },\r\n        {\r\n            name: 'InCherokee_Supplement',\r\n            bmp: '\\uAB70-\\uABBF'\r\n        },\r\n        {\r\n            name: 'InCombining_Diacritical_Marks',\r\n            bmp: '\\u0300-\\u036F'\r\n        },\r\n        {\r\n            name: 'InCombining_Diacritical_Marks_Extended',\r\n            bmp: '\\u1AB0-\\u1AFF'\r\n        },\r\n        {\r\n            name: 'InCombining_Diacritical_Marks_Supplement',\r\n            bmp: '\\u1DC0-\\u1DFF'\r\n        },\r\n        {\r\n            name: 'InCombining_Diacritical_Marks_for_Symbols',\r\n            bmp: '\\u20D0-\\u20FF'\r\n        },\r\n        {\r\n            name: 'InCombining_Half_Marks',\r\n            bmp: '\\uFE20-\\uFE2F'\r\n        },\r\n        {\r\n            name: 'InCommon_Indic_Number_Forms',\r\n            bmp: '\\uA830-\\uA83F'\r\n        },\r\n        {\r\n            name: 'InControl_Pictures',\r\n            bmp: '\\u2400-\\u243F'\r\n        },\r\n        {\r\n            name: 'InCoptic',\r\n            bmp: '\\u2C80-\\u2CFF'\r\n        },\r\n        {\r\n            name: 'InCoptic_Epact_Numbers',\r\n            astral: '\\uD800[\\uDEE0-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InCounting_Rod_Numerals',\r\n            astral: '\\uD834[\\uDF60-\\uDF7F]'\r\n        },\r\n        {\r\n            name: 'InCuneiform',\r\n            astral: '\\uD808[\\uDC00-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'InCuneiform_Numbers_and_Punctuation',\r\n            astral: '\\uD809[\\uDC00-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'InCurrency_Symbols',\r\n            bmp: '\\u20A0-\\u20CF'\r\n        },\r\n        {\r\n            name: 'InCypriot_Syllabary',\r\n            astral: '\\uD802[\\uDC00-\\uDC3F]'\r\n        },\r\n        {\r\n            name: 'InCyrillic',\r\n            bmp: '\\u0400-\\u04FF'\r\n        },\r\n        {\r\n            name: 'InCyrillic_Extended_A',\r\n            bmp: '\\u2DE0-\\u2DFF'\r\n        },\r\n        {\r\n            name: 'InCyrillic_Extended_B',\r\n            bmp: '\\uA640-\\uA69F'\r\n        },\r\n        {\r\n            name: 'InCyrillic_Extended_C',\r\n            bmp: '\\u1C80-\\u1C8F'\r\n        },\r\n        {\r\n            name: 'InCyrillic_Supplement',\r\n            bmp: '\\u0500-\\u052F'\r\n        },\r\n        {\r\n            name: 'InDeseret',\r\n            astral: '\\uD801[\\uDC00-\\uDC4F]'\r\n        },\r\n        {\r\n            name: 'InDevanagari',\r\n            bmp: '\\u0900-\\u097F'\r\n        },\r\n        {\r\n            name: 'InDevanagari_Extended',\r\n            bmp: '\\uA8E0-\\uA8FF'\r\n        },\r\n        {\r\n            name: 'InDingbats',\r\n            bmp: '\\u2700-\\u27BF'\r\n        },\r\n        {\r\n            name: 'InDomino_Tiles',\r\n            astral: '\\uD83C[\\uDC30-\\uDC9F]'\r\n        },\r\n        {\r\n            name: 'InDuployan',\r\n            astral: '\\uD82F[\\uDC00-\\uDC9F]'\r\n        },\r\n        {\r\n            name: 'InEarly_Dynastic_Cuneiform',\r\n            astral: '\\uD809[\\uDC80-\\uDD4F]'\r\n        },\r\n        {\r\n            name: 'InEgyptian_Hieroglyphs',\r\n            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F]'\r\n        },\r\n        {\r\n            name: 'InElbasan',\r\n            astral: '\\uD801[\\uDD00-\\uDD2F]'\r\n        },\r\n        {\r\n            name: 'InEmoticons',\r\n            astral: '\\uD83D[\\uDE00-\\uDE4F]'\r\n        },\r\n        {\r\n            name: 'InEnclosed_Alphanumeric_Supplement',\r\n            astral: '\\uD83C[\\uDD00-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InEnclosed_Alphanumerics',\r\n            bmp: '\\u2460-\\u24FF'\r\n        },\r\n        {\r\n            name: 'InEnclosed_CJK_Letters_and_Months',\r\n            bmp: '\\u3200-\\u32FF'\r\n        },\r\n        {\r\n            name: 'InEnclosed_Ideographic_Supplement',\r\n            astral: '\\uD83C[\\uDE00-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InEthiopic',\r\n            bmp: '\\u1200-\\u137F'\r\n        },\r\n        {\r\n            name: 'InEthiopic_Extended',\r\n            bmp: '\\u2D80-\\u2DDF'\r\n        },\r\n        {\r\n            name: 'InEthiopic_Extended_A',\r\n            bmp: '\\uAB00-\\uAB2F'\r\n        },\r\n        {\r\n            name: 'InEthiopic_Supplement',\r\n            bmp: '\\u1380-\\u139F'\r\n        },\r\n        {\r\n            name: 'InGeneral_Punctuation',\r\n            bmp: '\\u2000-\\u206F'\r\n        },\r\n        {\r\n            name: 'InGeometric_Shapes',\r\n            bmp: '\\u25A0-\\u25FF'\r\n        },\r\n        {\r\n            name: 'InGeometric_Shapes_Extended',\r\n            astral: '\\uD83D[\\uDF80-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'InGeorgian',\r\n            bmp: '\\u10A0-\\u10FF'\r\n        },\r\n        {\r\n            name: 'InGeorgian_Supplement',\r\n            bmp: '\\u2D00-\\u2D2F'\r\n        },\r\n        {\r\n            name: 'InGlagolitic',\r\n            bmp: '\\u2C00-\\u2C5F'\r\n        },\r\n        {\r\n            name: 'InGlagolitic_Supplement',\r\n            astral: '\\uD838[\\uDC00-\\uDC2F]'\r\n        },\r\n        {\r\n            name: 'InGothic',\r\n            astral: '\\uD800[\\uDF30-\\uDF4F]'\r\n        },\r\n        {\r\n            name: 'InGrantha',\r\n            astral: '\\uD804[\\uDF00-\\uDF7F]'\r\n        },\r\n        {\r\n            name: 'InGreek_Extended',\r\n            bmp: '\\u1F00-\\u1FFF'\r\n        },\r\n        {\r\n            name: 'InGreek_and_Coptic',\r\n            bmp: '\\u0370-\\u03FF'\r\n        },\r\n        {\r\n            name: 'InGujarati',\r\n            bmp: '\\u0A80-\\u0AFF'\r\n        },\r\n        {\r\n            name: 'InGurmukhi',\r\n            bmp: '\\u0A00-\\u0A7F'\r\n        },\r\n        {\r\n            name: 'InHalfwidth_and_Fullwidth_Forms',\r\n            bmp: '\\uFF00-\\uFFEF'\r\n        },\r\n        {\r\n            name: 'InHangul_Compatibility_Jamo',\r\n            bmp: '\\u3130-\\u318F'\r\n        },\r\n        {\r\n            name: 'InHangul_Jamo',\r\n            bmp: '\\u1100-\\u11FF'\r\n        },\r\n        {\r\n            name: 'InHangul_Jamo_Extended_A',\r\n            bmp: '\\uA960-\\uA97F'\r\n        },\r\n        {\r\n            name: 'InHangul_Jamo_Extended_B',\r\n            bmp: '\\uD7B0-\\uD7FF'\r\n        },\r\n        {\r\n            name: 'InHangul_Syllables',\r\n            bmp: '\\uAC00-\\uD7AF'\r\n        },\r\n        {\r\n            name: 'InHanunoo',\r\n            bmp: '\\u1720-\\u173F'\r\n        },\r\n        {\r\n            name: 'InHatran',\r\n            astral: '\\uD802[\\uDCE0-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InHebrew',\r\n            bmp: '\\u0590-\\u05FF'\r\n        },\r\n        {\r\n            name: 'InHigh_Private_Use_Surrogates',\r\n            bmp: '\\uDB80-\\uDBFF'\r\n        },\r\n        {\r\n            name: 'InHigh_Surrogates',\r\n            bmp: '\\uD800-\\uDB7F'\r\n        },\r\n        {\r\n            name: 'InHiragana',\r\n            bmp: '\\u3040-\\u309F'\r\n        },\r\n        {\r\n            name: 'InIPA_Extensions',\r\n            bmp: '\\u0250-\\u02AF'\r\n        },\r\n        {\r\n            name: 'InIdeographic_Description_Characters',\r\n            bmp: '\\u2FF0-\\u2FFF'\r\n        },\r\n        {\r\n            name: 'InIdeographic_Symbols_and_Punctuation',\r\n            astral: '\\uD81B[\\uDFE0-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'InImperial_Aramaic',\r\n            astral: '\\uD802[\\uDC40-\\uDC5F]'\r\n        },\r\n        {\r\n            name: 'InInscriptional_Pahlavi',\r\n            astral: '\\uD802[\\uDF60-\\uDF7F]'\r\n        },\r\n        {\r\n            name: 'InInscriptional_Parthian',\r\n            astral: '\\uD802[\\uDF40-\\uDF5F]'\r\n        },\r\n        {\r\n            name: 'InJavanese',\r\n            bmp: '\\uA980-\\uA9DF'\r\n        },\r\n        {\r\n            name: 'InKaithi',\r\n            astral: '\\uD804[\\uDC80-\\uDCCF]'\r\n        },\r\n        {\r\n            name: 'InKana_Supplement',\r\n            astral: '\\uD82C[\\uDC00-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InKanbun',\r\n            bmp: '\\u3190-\\u319F'\r\n        },\r\n        {\r\n            name: 'InKangxi_Radicals',\r\n            bmp: '\\u2F00-\\u2FDF'\r\n        },\r\n        {\r\n            name: 'InKannada',\r\n            bmp: '\\u0C80-\\u0CFF'\r\n        },\r\n        {\r\n            name: 'InKatakana',\r\n            bmp: '\\u30A0-\\u30FF'\r\n        },\r\n        {\r\n            name: 'InKatakana_Phonetic_Extensions',\r\n            bmp: '\\u31F0-\\u31FF'\r\n        },\r\n        {\r\n            name: 'InKayah_Li',\r\n            bmp: '\\uA900-\\uA92F'\r\n        },\r\n        {\r\n            name: 'InKharoshthi',\r\n            astral: '\\uD802[\\uDE00-\\uDE5F]'\r\n        },\r\n        {\r\n            name: 'InKhmer',\r\n            bmp: '\\u1780-\\u17FF'\r\n        },\r\n        {\r\n            name: 'InKhmer_Symbols',\r\n            bmp: '\\u19E0-\\u19FF'\r\n        },\r\n        {\r\n            name: 'InKhojki',\r\n            astral: '\\uD804[\\uDE00-\\uDE4F]'\r\n        },\r\n        {\r\n            name: 'InKhudawadi',\r\n            astral: '\\uD804[\\uDEB0-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InLao',\r\n            bmp: '\\u0E80-\\u0EFF'\r\n        },\r\n        {\r\n            name: 'InLatin_Extended_Additional',\r\n            bmp: '\\u1E00-\\u1EFF'\r\n        },\r\n        {\r\n            name: 'InLatin_Extended_A',\r\n            bmp: '\\u0100-\\u017F'\r\n        },\r\n        {\r\n            name: 'InLatin_Extended_B',\r\n            bmp: '\\u0180-\\u024F'\r\n        },\r\n        {\r\n            name: 'InLatin_Extended_C',\r\n            bmp: '\\u2C60-\\u2C7F'\r\n        },\r\n        {\r\n            name: 'InLatin_Extended_D',\r\n            bmp: '\\uA720-\\uA7FF'\r\n        },\r\n        {\r\n            name: 'InLatin_Extended_E',\r\n            bmp: '\\uAB30-\\uAB6F'\r\n        },\r\n        {\r\n            name: 'InLatin_1_Supplement',\r\n            bmp: '\\x80-\\xFF'\r\n        },\r\n        {\r\n            name: 'InLepcha',\r\n            bmp: '\\u1C00-\\u1C4F'\r\n        },\r\n        {\r\n            name: 'InLetterlike_Symbols',\r\n            bmp: '\\u2100-\\u214F'\r\n        },\r\n        {\r\n            name: 'InLimbu',\r\n            bmp: '\\u1900-\\u194F'\r\n        },\r\n        {\r\n            name: 'InLinear_A',\r\n            astral: '\\uD801[\\uDE00-\\uDF7F]'\r\n        },\r\n        {\r\n            name: 'InLinear_B_Ideograms',\r\n            astral: '\\uD800[\\uDC80-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InLinear_B_Syllabary',\r\n            astral: '\\uD800[\\uDC00-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'InLisu',\r\n            bmp: '\\uA4D0-\\uA4FF'\r\n        },\r\n        {\r\n            name: 'InLow_Surrogates',\r\n            bmp: '\\uDC00-\\uDFFF'\r\n        },\r\n        {\r\n            name: 'InLycian',\r\n            astral: '\\uD800[\\uDE80-\\uDE9F]'\r\n        },\r\n        {\r\n            name: 'InLydian',\r\n            astral: '\\uD802[\\uDD20-\\uDD3F]'\r\n        },\r\n        {\r\n            name: 'InMahajani',\r\n            astral: '\\uD804[\\uDD50-\\uDD7F]'\r\n        },\r\n        {\r\n            name: 'InMahjong_Tiles',\r\n            astral: '\\uD83C[\\uDC00-\\uDC2F]'\r\n        },\r\n        {\r\n            name: 'InMalayalam',\r\n            bmp: '\\u0D00-\\u0D7F'\r\n        },\r\n        {\r\n            name: 'InMandaic',\r\n            bmp: '\\u0840-\\u085F'\r\n        },\r\n        {\r\n            name: 'InManichaean',\r\n            astral: '\\uD802[\\uDEC0-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InMarchen',\r\n            astral: '\\uD807[\\uDC70-\\uDCBF]'\r\n        },\r\n        {\r\n            name: 'InMathematical_Alphanumeric_Symbols',\r\n            astral: '\\uD835[\\uDC00-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'InMathematical_Operators',\r\n            bmp: '\\u2200-\\u22FF'\r\n        },\r\n        {\r\n            name: 'InMeetei_Mayek',\r\n            bmp: '\\uABC0-\\uABFF'\r\n        },\r\n        {\r\n            name: 'InMeetei_Mayek_Extensions',\r\n            bmp: '\\uAAE0-\\uAAFF'\r\n        },\r\n        {\r\n            name: 'InMende_Kikakui',\r\n            astral: '\\uD83A[\\uDC00-\\uDCDF]'\r\n        },\r\n        {\r\n            name: 'InMeroitic_Cursive',\r\n            astral: '\\uD802[\\uDDA0-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InMeroitic_Hieroglyphs',\r\n            astral: '\\uD802[\\uDD80-\\uDD9F]'\r\n        },\r\n        {\r\n            name: 'InMiao',\r\n            astral: '\\uD81B[\\uDF00-\\uDF9F]'\r\n        },\r\n        {\r\n            name: 'InMiscellaneous_Mathematical_Symbols_A',\r\n            bmp: '\\u27C0-\\u27EF'\r\n        },\r\n        {\r\n            name: 'InMiscellaneous_Mathematical_Symbols_B',\r\n            bmp: '\\u2980-\\u29FF'\r\n        },\r\n        {\r\n            name: 'InMiscellaneous_Symbols',\r\n            bmp: '\\u2600-\\u26FF'\r\n        },\r\n        {\r\n            name: 'InMiscellaneous_Symbols_and_Arrows',\r\n            bmp: '\\u2B00-\\u2BFF'\r\n        },\r\n        {\r\n            name: 'InMiscellaneous_Symbols_and_Pictographs',\r\n            astral: '\\uD83C[\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InMiscellaneous_Technical',\r\n            bmp: '\\u2300-\\u23FF'\r\n        },\r\n        {\r\n            name: 'InModi',\r\n            astral: '\\uD805[\\uDE00-\\uDE5F]'\r\n        },\r\n        {\r\n            name: 'InModifier_Tone_Letters',\r\n            bmp: '\\uA700-\\uA71F'\r\n        },\r\n        {\r\n            name: 'InMongolian',\r\n            bmp: '\\u1800-\\u18AF'\r\n        },\r\n        {\r\n            name: 'InMongolian_Supplement',\r\n            astral: '\\uD805[\\uDE60-\\uDE7F]'\r\n        },\r\n        {\r\n            name: 'InMro',\r\n            astral: '\\uD81A[\\uDE40-\\uDE6F]'\r\n        },\r\n        {\r\n            name: 'InMultani',\r\n            astral: '\\uD804[\\uDE80-\\uDEAF]'\r\n        },\r\n        {\r\n            name: 'InMusical_Symbols',\r\n            astral: '\\uD834[\\uDD00-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InMyanmar',\r\n            bmp: '\\u1000-\\u109F'\r\n        },\r\n        {\r\n            name: 'InMyanmar_Extended_A',\r\n            bmp: '\\uAA60-\\uAA7F'\r\n        },\r\n        {\r\n            name: 'InMyanmar_Extended_B',\r\n            bmp: '\\uA9E0-\\uA9FF'\r\n        },\r\n        {\r\n            name: 'InNKo',\r\n            bmp: '\\u07C0-\\u07FF'\r\n        },\r\n        {\r\n            name: 'InNabataean',\r\n            astral: '\\uD802[\\uDC80-\\uDCAF]'\r\n        },\r\n        {\r\n            name: 'InNew_Tai_Lue',\r\n            bmp: '\\u1980-\\u19DF'\r\n        },\r\n        {\r\n            name: 'InNewa',\r\n            astral: '\\uD805[\\uDC00-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'InNumber_Forms',\r\n            bmp: '\\u2150-\\u218F'\r\n        },\r\n        {\r\n            name: 'InOgham',\r\n            bmp: '\\u1680-\\u169F'\r\n        },\r\n        {\r\n            name: 'InOl_Chiki',\r\n            bmp: '\\u1C50-\\u1C7F'\r\n        },\r\n        {\r\n            name: 'InOld_Hungarian',\r\n            astral: '\\uD803[\\uDC80-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InOld_Italic',\r\n            astral: '\\uD800[\\uDF00-\\uDF2F]'\r\n        },\r\n        {\r\n            name: 'InOld_North_Arabian',\r\n            astral: '\\uD802[\\uDE80-\\uDE9F]'\r\n        },\r\n        {\r\n            name: 'InOld_Permic',\r\n            astral: '\\uD800[\\uDF50-\\uDF7F]'\r\n        },\r\n        {\r\n            name: 'InOld_Persian',\r\n            astral: '\\uD800[\\uDFA0-\\uDFDF]'\r\n        },\r\n        {\r\n            name: 'InOld_South_Arabian',\r\n            astral: '\\uD802[\\uDE60-\\uDE7F]'\r\n        },\r\n        {\r\n            name: 'InOld_Turkic',\r\n            astral: '\\uD803[\\uDC00-\\uDC4F]'\r\n        },\r\n        {\r\n            name: 'InOptical_Character_Recognition',\r\n            bmp: '\\u2440-\\u245F'\r\n        },\r\n        {\r\n            name: 'InOriya',\r\n            bmp: '\\u0B00-\\u0B7F'\r\n        },\r\n        {\r\n            name: 'InOrnamental_Dingbats',\r\n            astral: '\\uD83D[\\uDE50-\\uDE7F]'\r\n        },\r\n        {\r\n            name: 'InOsage',\r\n            astral: '\\uD801[\\uDCB0-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InOsmanya',\r\n            astral: '\\uD801[\\uDC80-\\uDCAF]'\r\n        },\r\n        {\r\n            name: 'InPahawh_Hmong',\r\n            astral: '\\uD81A[\\uDF00-\\uDF8F]'\r\n        },\r\n        {\r\n            name: 'InPalmyrene',\r\n            astral: '\\uD802[\\uDC60-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'InPau_Cin_Hau',\r\n            astral: '\\uD806[\\uDEC0-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InPhags_pa',\r\n            bmp: '\\uA840-\\uA87F'\r\n        },\r\n        {\r\n            name: 'InPhaistos_Disc',\r\n            astral: '\\uD800[\\uDDD0-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InPhoenician',\r\n            astral: '\\uD802[\\uDD00-\\uDD1F]'\r\n        },\r\n        {\r\n            name: 'InPhonetic_Extensions',\r\n            bmp: '\\u1D00-\\u1D7F'\r\n        },\r\n        {\r\n            name: 'InPhonetic_Extensions_Supplement',\r\n            bmp: '\\u1D80-\\u1DBF'\r\n        },\r\n        {\r\n            name: 'InPlaying_Cards',\r\n            astral: '\\uD83C[\\uDCA0-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InPrivate_Use_Area',\r\n            bmp: '\\uE000-\\uF8FF'\r\n        },\r\n        {\r\n            name: 'InPsalter_Pahlavi',\r\n            astral: '\\uD802[\\uDF80-\\uDFAF]'\r\n        },\r\n        {\r\n            name: 'InRejang',\r\n            bmp: '\\uA930-\\uA95F'\r\n        },\r\n        {\r\n            name: 'InRumi_Numeral_Symbols',\r\n            astral: '\\uD803[\\uDE60-\\uDE7F]'\r\n        },\r\n        {\r\n            name: 'InRunic',\r\n            bmp: '\\u16A0-\\u16FF'\r\n        },\r\n        {\r\n            name: 'InSamaritan',\r\n            bmp: '\\u0800-\\u083F'\r\n        },\r\n        {\r\n            name: 'InSaurashtra',\r\n            bmp: '\\uA880-\\uA8DF'\r\n        },\r\n        {\r\n            name: 'InSharada',\r\n            astral: '\\uD804[\\uDD80-\\uDDDF]'\r\n        },\r\n        {\r\n            name: 'InShavian',\r\n            astral: '\\uD801[\\uDC50-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'InShorthand_Format_Controls',\r\n            astral: '\\uD82F[\\uDCA0-\\uDCAF]'\r\n        },\r\n        {\r\n            name: 'InSiddham',\r\n            astral: '\\uD805[\\uDD80-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InSinhala',\r\n            bmp: '\\u0D80-\\u0DFF'\r\n        },\r\n        {\r\n            name: 'InSinhala_Archaic_Numbers',\r\n            astral: '\\uD804[\\uDDE0-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InSmall_Form_Variants',\r\n            bmp: '\\uFE50-\\uFE6F'\r\n        },\r\n        {\r\n            name: 'InSora_Sompeng',\r\n            astral: '\\uD804[\\uDCD0-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InSpacing_Modifier_Letters',\r\n            bmp: '\\u02B0-\\u02FF'\r\n        },\r\n        {\r\n            name: 'InSpecials',\r\n            bmp: '\\uFFF0-\\uFFFF'\r\n        },\r\n        {\r\n            name: 'InSundanese',\r\n            bmp: '\\u1B80-\\u1BBF'\r\n        },\r\n        {\r\n            name: 'InSundanese_Supplement',\r\n            bmp: '\\u1CC0-\\u1CCF'\r\n        },\r\n        {\r\n            name: 'InSuperscripts_and_Subscripts',\r\n            bmp: '\\u2070-\\u209F'\r\n        },\r\n        {\r\n            name: 'InSupplemental_Arrows_A',\r\n            bmp: '\\u27F0-\\u27FF'\r\n        },\r\n        {\r\n            name: 'InSupplemental_Arrows_B',\r\n            bmp: '\\u2900-\\u297F'\r\n        },\r\n        {\r\n            name: 'InSupplemental_Arrows_C',\r\n            astral: '\\uD83E[\\uDC00-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InSupplemental_Mathematical_Operators',\r\n            bmp: '\\u2A00-\\u2AFF'\r\n        },\r\n        {\r\n            name: 'InSupplemental_Punctuation',\r\n            bmp: '\\u2E00-\\u2E7F'\r\n        },\r\n        {\r\n            name: 'InSupplemental_Symbols_and_Pictographs',\r\n            astral: '\\uD83E[\\uDD00-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'InSupplementary_Private_Use_Area_A',\r\n            astral: '[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'InSupplementary_Private_Use_Area_B',\r\n            astral: '[\\uDBC0-\\uDBFF][\\uDC00-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'InSutton_SignWriting',\r\n            astral: '\\uD836[\\uDC00-\\uDEAF]'\r\n        },\r\n        {\r\n            name: 'InSyloti_Nagri',\r\n            bmp: '\\uA800-\\uA82F'\r\n        },\r\n        {\r\n            name: 'InSyriac',\r\n            bmp: '\\u0700-\\u074F'\r\n        },\r\n        {\r\n            name: 'InTagalog',\r\n            bmp: '\\u1700-\\u171F'\r\n        },\r\n        {\r\n            name: 'InTagbanwa',\r\n            bmp: '\\u1760-\\u177F'\r\n        },\r\n        {\r\n            name: 'InTags',\r\n            astral: '\\uDB40[\\uDC00-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'InTai_Le',\r\n            bmp: '\\u1950-\\u197F'\r\n        },\r\n        {\r\n            name: 'InTai_Tham',\r\n            bmp: '\\u1A20-\\u1AAF'\r\n        },\r\n        {\r\n            name: 'InTai_Viet',\r\n            bmp: '\\uAA80-\\uAADF'\r\n        },\r\n        {\r\n            name: 'InTai_Xuan_Jing_Symbols',\r\n            astral: '\\uD834[\\uDF00-\\uDF5F]'\r\n        },\r\n        {\r\n            name: 'InTakri',\r\n            astral: '\\uD805[\\uDE80-\\uDECF]'\r\n        },\r\n        {\r\n            name: 'InTamil',\r\n            bmp: '\\u0B80-\\u0BFF'\r\n        },\r\n        {\r\n            name: 'InTangut',\r\n            astral: '[\\uD81C-\\uD821][\\uDC00-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'InTangut_Components',\r\n            astral: '\\uD822[\\uDC00-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InTelugu',\r\n            bmp: '\\u0C00-\\u0C7F'\r\n        },\r\n        {\r\n            name: 'InThaana',\r\n            bmp: '\\u0780-\\u07BF'\r\n        },\r\n        {\r\n            name: 'InThai',\r\n            bmp: '\\u0E00-\\u0E7F'\r\n        },\r\n        {\r\n            name: 'InTibetan',\r\n            bmp: '\\u0F00-\\u0FFF'\r\n        },\r\n        {\r\n            name: 'InTifinagh',\r\n            bmp: '\\u2D30-\\u2D7F'\r\n        },\r\n        {\r\n            name: 'InTirhuta',\r\n            astral: '\\uD805[\\uDC80-\\uDCDF]'\r\n        },\r\n        {\r\n            name: 'InTransport_and_Map_Symbols',\r\n            astral: '\\uD83D[\\uDE80-\\uDEFF]'\r\n        },\r\n        {\r\n            name: 'InUgaritic',\r\n            astral: '\\uD800[\\uDF80-\\uDF9F]'\r\n        },\r\n        {\r\n            name: 'InUnified_Canadian_Aboriginal_Syllabics',\r\n            bmp: '\\u1400-\\u167F'\r\n        },\r\n        {\r\n            name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',\r\n            bmp: '\\u18B0-\\u18FF'\r\n        },\r\n        {\r\n            name: 'InVai',\r\n            bmp: '\\uA500-\\uA63F'\r\n        },\r\n        {\r\n            name: 'InVariation_Selectors',\r\n            bmp: '\\uFE00-\\uFE0F'\r\n        },\r\n        {\r\n            name: 'InVariation_Selectors_Supplement',\r\n            astral: '\\uDB40[\\uDD00-\\uDDEF]'\r\n        },\r\n        {\r\n            name: 'InVedic_Extensions',\r\n            bmp: '\\u1CD0-\\u1CFF'\r\n        },\r\n        {\r\n            name: 'InVertical_Forms',\r\n            bmp: '\\uFE10-\\uFE1F'\r\n        },\r\n        {\r\n            name: 'InWarang_Citi',\r\n            astral: '\\uD806[\\uDCA0-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'InYi_Radicals',\r\n            bmp: '\\uA490-\\uA4CF'\r\n        },\r\n        {\r\n            name: 'InYi_Syllables',\r\n            bmp: '\\uA000-\\uA48F'\r\n        },\r\n        {\r\n            name: 'InYijing_Hexagram_Symbols',\r\n            bmp: '\\u4DC0-\\u4DFF'\r\n        }\r\n    ]);\r\n\r\n};\r\n\n},{}],5:[function(require,module,exports){\n/*!\r\n * XRegExp Unicode Categories 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2010-2017 MIT License\r\n * Unicode data by Mathias Bynens <mathiasbynens.be>\r\n */\r\n\r\nmodule.exports = function(XRegExp) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Adds support for Unicode's general categories. E.g., `\\p{Lu}` or `\\p{Uppercase Letter}`. See\r\n     * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token\r\n     * names are case insensitive, and any spaces, hyphens, and underscores are ignored.\r\n     *\r\n     * Uses Unicode 9.0.0.\r\n     *\r\n     * @requires XRegExp, Unicode Base\r\n     */\r\n\r\n    if (!XRegExp.addUnicodeData) {\r\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');\r\n    }\r\n\r\n    XRegExp.addUnicodeData([\r\n        {\r\n            name: 'C',\r\n            alias: 'Other',\r\n            isBmpLast: true,\r\n            bmp: '\\0-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5\\u08BE-\\u08D3\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E45-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF',\r\n            astral: '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5E-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE1-\\uDFFF]|\\uD821[\\uDFED-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA0-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD73-\\uDD7A\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD83D[\\uDED3-\\uDEDF\\uDEED-\\uDEEF\\uDEF7-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD1F\\uDD28-\\uDD2F\\uDD31\\uDD32\\uDD3F\\uDD4C-\\uDD4F\\uDD5F-\\uDD7F\\uDD92-\\uDDBF\\uDDC1-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'Cc',\r\n            alias: 'Control',\r\n            bmp: '\\0-\\x1F\\x7F-\\x9F'\r\n        },\r\n        {\r\n            name: 'Cf',\r\n            alias: 'Format',\r\n            bmp: '\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB',\r\n            astral: '\\uD804\\uDCBD|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'Cn',\r\n            alias: 'Unassigned',\r\n            bmp: '\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u0560\\u0588\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EF\\u05F5-\\u05FF\\u061D\\u070E\\u074B\\u074C\\u07B2-\\u07BF\\u07FB-\\u07FF\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F-\\u089F\\u08B5\\u08BE-\\u08D3\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FC-\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0AFA-\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C04\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0D00\\u0D04\\u0D0D\\u0D11\\u0D3B\\u0D3C\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1878-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1CBF\\u1CC8-\\u1CCF\\u1CF7\\u1CFA-\\u1CFF\\u1DF6-\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u2065\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20BF-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u23FF\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2BEB\\u2BF0-\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E45-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u312E-\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FD6-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7AF\\uA7B8-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA8FE\\uA8FF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD\\uFEFE\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFF8\\uFFFE\\uFFFF',\r\n            astral: '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2F\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE34-\\uDE37\\uDE3B-\\uDE3E\\uDE48-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD00-\\uDE5F\\uDE7F-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD44-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF3B\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5E-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1A-\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD874-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDB7F][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE1-\\uDFFF]|\\uD821[\\uDFED-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDC02-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDDE9-\\uDDFF\\uDE46-\\uDEFF\\uDF57-\\uDF5F\\uDF72-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF]|\\uD83D[\\uDED3-\\uDEDF\\uDEED-\\uDEEF\\uDEF7-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDD0F\\uDD1F\\uDD28-\\uDD2F\\uDD31\\uDD32\\uDD3F\\uDD4C-\\uDD4F\\uDD5F-\\uDD7F\\uDD92-\\uDDBF\\uDDC1-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00\\uDC02-\\uDC1F\\uDC80-\\uDCFF\\uDDF0-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'Co',\r\n            alias: 'Private_Use',\r\n            bmp: '\\uE000-\\uF8FF',\r\n            astral: '[\\uDB80-\\uDBBE\\uDBC0-\\uDBFE][\\uDC00-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDC00-\\uDFFD]'\r\n        },\r\n        {\r\n            name: 'Cs',\r\n            alias: 'Surrogate',\r\n            bmp: '\\uD800-\\uDFFF'\r\n        },\r\n        {\r\n            name: 'L',\r\n            alias: 'Letter',\r\n            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\r\n            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'\r\n        },\r\n        {\r\n            name: 'Ll',\r\n            alias: 'Lowercase_Letter',\r\n            bmp: 'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\r\n            astral: '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'\r\n        },\r\n        {\r\n            name: 'Lm',\r\n            alias: 'Modifier_Letter',\r\n            bmp: '\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E\\uFF9F',\r\n            astral: '\\uD81A[\\uDF40-\\uDF43]|\\uD81B[\\uDF93-\\uDF9F\\uDFE0]'\r\n        },\r\n        {\r\n            name: 'Lo',\r\n            alias: 'Other_Letter',\r\n            bmp: '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\r\n            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC50-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'\r\n        },\r\n        {\r\n            name: 'Lt',\r\n            alias: 'Titlecase_Letter',\r\n            bmp: '\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC'\r\n        },\r\n        {\r\n            name: 'Lu',\r\n            alias: 'Uppercase_Letter',\r\n            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',\r\n            astral: '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]'\r\n        },\r\n        {\r\n            name: 'M',\r\n            alias: 'Mark',\r\n            bmp: '\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D01-\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\r\n            astral: '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDCA-\\uDDCC\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDF00-\\uDF03\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDEAB-\\uDEB7\\uDF1D-\\uDF2B]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'\r\n        },\r\n        {\r\n            name: 'Mc',\r\n            alias: 'Spacing_Mark',\r\n            bmp: '\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\u1CF3\\u302E\\u302F\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC',\r\n            astral: '\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3E\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB0-\\uDCB2\\uDCB9\\uDCBB-\\uDCBE\\uDCC1\\uDDAF-\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF20\\uDF21\\uDF26]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4]|\\uD81B[\\uDF51-\\uDF7E]|\\uD834[\\uDD65\\uDD66\\uDD6D-\\uDD72]'\r\n        },\r\n        {\r\n            name: 'Me',\r\n            alias: 'Enclosing_Mark',\r\n            bmp: '\\u0488\\u0489\\u1ABE\\u20DD-\\u20E0\\u20E2-\\u20E4\\uA670-\\uA672'\r\n        },\r\n        {\r\n            name: 'Mn',\r\n            alias: 'Nonspacing_Mark',\r\n            bmp: '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D4-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D01\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\r\n            astral: '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDCA-\\uDDCC\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3C\\uDF40\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDCB3-\\uDCB8\\uDCBA\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'\r\n        },\r\n        {\r\n            name: 'N',\r\n            alias: 'Number',\r\n            bmp: '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D58-\\u0D5E\\u0D66-\\u0D78\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\r\n            astral: '\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2]|\\uD807[\\uDC50-\\uDC6C]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF\\uDD50-\\uDD59]|\\uD83C[\\uDD00-\\uDD0C]'\r\n        },\r\n        {\r\n            name: 'Nd',\r\n            alias: 'Decimal_Number',\r\n            bmp: '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\r\n            astral: '\\uD801[\\uDCA0-\\uDCA9]|\\uD804[\\uDC66-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF39]|\\uD806[\\uDCE0-\\uDCE9]|\\uD807[\\uDC50-\\uDC59]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDD50-\\uDD59]'\r\n        },\r\n        {\r\n            name: 'Nl',\r\n            alias: 'Letter_Number',\r\n            bmp: '\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF',\r\n            astral: '\\uD800[\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD809[\\uDC00-\\uDC6E]'\r\n        },\r\n        {\r\n            name: 'No',\r\n            alias: 'Other_Number',\r\n            bmp: '\\xB2\\xB3\\xB9\\xBC-\\xBE\\u09F4-\\u09F9\\u0B72-\\u0B77\\u0BF0-\\u0BF2\\u0C78-\\u0C7E\\u0D58-\\u0D5E\\u0D70-\\u0D78\\u0F2A-\\u0F33\\u1369-\\u137C\\u17F0-\\u17F9\\u19DA\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u215F\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA830-\\uA835',\r\n            astral: '\\uD800[\\uDD07-\\uDD33\\uDD75-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC65\\uDDE1-\\uDDF4]|\\uD805[\\uDF3A\\uDF3B]|\\uD806[\\uDCEA-\\uDCF2]|\\uD807[\\uDC5A-\\uDC6C]|\\uD81A[\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD83C[\\uDD00-\\uDD0C]'\r\n        },\r\n        {\r\n            name: 'P',\r\n            alias: 'Punctuation',\r\n            bmp: '\\x21-\\x23\\x25-\\\\x2A\\x2C-\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5B-\\\\x5D\\x5F\\\\x7B\\x7D\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E44\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65',\r\n            astral: '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'\r\n        },\r\n        {\r\n            name: 'Pc',\r\n            alias: 'Connector_Punctuation',\r\n            bmp: '\\x5F\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F'\r\n        },\r\n        {\r\n            name: 'Pd',\r\n            alias: 'Dash_Punctuation',\r\n            bmp: '\\\\x2D\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D'\r\n        },\r\n        {\r\n            name: 'Pe',\r\n            alias: 'Close_Punctuation',\r\n            bmp: '\\\\x29\\\\x5D\\x7D\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63'\r\n        },\r\n        {\r\n            name: 'Pf',\r\n            alias: 'Final_Punctuation',\r\n            bmp: '\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21'\r\n        },\r\n        {\r\n            name: 'Pi',\r\n            alias: 'Initial_Punctuation',\r\n            bmp: '\\xAB\\u2018\\u201B\\u201C\\u201F\\u2039\\u2E02\\u2E04\\u2E09\\u2E0C\\u2E1C\\u2E20'\r\n        },\r\n        {\r\n            name: 'Po',\r\n            alias: 'Other_Punctuation',\r\n            bmp: '\\x21-\\x23\\x25-\\x27\\\\x2A\\x2C\\\\x2E\\x2F\\x3A\\x3B\\\\x3F\\x40\\\\x5C\\xA1\\xA7\\xB6\\xB7\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u166D\\u166E\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u1805\\u1807-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2016\\u2017\\u2020-\\u2027\\u2030-\\u2038\\u203B-\\u203E\\u2041-\\u2043\\u2047-\\u2051\\u2053\\u2055-\\u205E\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00\\u2E01\\u2E06-\\u2E08\\u2E0B\\u2E0E-\\u2E16\\u2E18\\u2E19\\u2E1B\\u2E1E\\u2E1F\\u2E2A-\\u2E2E\\u2E30-\\u2E39\\u2E3C-\\u2E3F\\u2E41\\u2E43\\u2E44\\u3001-\\u3003\\u303D\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFE10-\\uFE16\\uFE19\\uFE30\\uFE45\\uFE46\\uFE49-\\uFE4C\\uFE50-\\uFE52\\uFE54-\\uFE57\\uFE5F-\\uFE61\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF07\\uFF0A\\uFF0C\\uFF0E\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3C\\uFF61\\uFF64\\uFF65',\r\n            astral: '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'\r\n        },\r\n        {\r\n            name: 'Ps',\r\n            alias: 'Open_Punctuation',\r\n            bmp: '\\\\x28\\\\x5B\\\\x7B\\u0F3A\\u0F3C\\u169B\\u201A\\u201E\\u2045\\u207D\\u208D\\u2308\\u230A\\u2329\\u2768\\u276A\\u276C\\u276E\\u2770\\u2772\\u2774\\u27C5\\u27E6\\u27E8\\u27EA\\u27EC\\u27EE\\u2983\\u2985\\u2987\\u2989\\u298B\\u298D\\u298F\\u2991\\u2993\\u2995\\u2997\\u29D8\\u29DA\\u29FC\\u2E22\\u2E24\\u2E26\\u2E28\\u2E42\\u3008\\u300A\\u300C\\u300E\\u3010\\u3014\\u3016\\u3018\\u301A\\u301D\\uFD3F\\uFE17\\uFE35\\uFE37\\uFE39\\uFE3B\\uFE3D\\uFE3F\\uFE41\\uFE43\\uFE47\\uFE59\\uFE5B\\uFE5D\\uFF08\\uFF3B\\uFF5B\\uFF5F\\uFF62'\r\n        },\r\n        {\r\n            name: 'S',\r\n            alias: 'Symbol',\r\n            bmp: '\\\\x24\\\\x2B\\x3C-\\x3E\\\\x5E\\x60\\\\x7C\\x7E\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BE\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD',\r\n            astral: '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83B[\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]'\r\n        },\r\n        {\r\n            name: 'Sc',\r\n            alias: 'Currency_Symbol',\r\n            bmp: '\\\\x24\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BE\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\n        },\r\n        {\r\n            name: 'Sk',\r\n            alias: 'Modifier_Symbol',\r\n            bmp: '\\\\x5E\\x60\\xA8\\xAF\\xB4\\xB8\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u309B\\u309C\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uAB5B\\uFBB2-\\uFBC1\\uFF3E\\uFF40\\uFFE3',\r\n            astral: '\\uD83C[\\uDFFB-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'Sm',\r\n            alias: 'Math_Symbol',\r\n            bmp: '\\\\x2B\\x3C-\\x3E\\\\x7C\\x7E\\xAC\\xB1\\xD7\\xF7\\u03F6\\u0606-\\u0608\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u2118\\u2140-\\u2144\\u214B\\u2190-\\u2194\\u219A\\u219B\\u21A0\\u21A3\\u21A6\\u21AE\\u21CE\\u21CF\\u21D2\\u21D4\\u21F4-\\u22FF\\u2320\\u2321\\u237C\\u239B-\\u23B3\\u23DC-\\u23E1\\u25B7\\u25C1\\u25F8-\\u25FF\\u266F\\u27C0-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u27FF\\u2900-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2AFF\\u2B30-\\u2B44\\u2B47-\\u2B4C\\uFB29\\uFE62\\uFE64-\\uFE66\\uFF0B\\uFF1C-\\uFF1E\\uFF5C\\uFF5E\\uFFE2\\uFFE9-\\uFFEC',\r\n            astral: '\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD83B[\\uDEF0\\uDEF1]'\r\n        },\r\n        {\r\n            name: 'So',\r\n            alias: 'Other_Symbol',\r\n            bmp: '\\xA6\\xA9\\xAE\\xB0\\u0482\\u058D\\u058E\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09FA\\u0B70\\u0BF3-\\u0BF8\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116\\u2117\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u214A\\u214C\\u214D\\u214F\\u218A\\u218B\\u2195-\\u2199\\u219C-\\u219F\\u21A1\\u21A2\\u21A4\\u21A5\\u21A7-\\u21AD\\u21AF-\\u21CD\\u21D0\\u21D1\\u21D3\\u21D5-\\u21F3\\u2300-\\u2307\\u230C-\\u231F\\u2322-\\u2328\\u232B-\\u237B\\u237D-\\u239A\\u23B4-\\u23DB\\u23E2-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u25B6\\u25B8-\\u25C0\\u25C2-\\u25F7\\u2600-\\u266E\\u2670-\\u2767\\u2794-\\u27BF\\u2800-\\u28FF\\u2B00-\\u2B2F\\u2B45\\u2B46\\u2B4D-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA828-\\uA82B\\uA836\\uA837\\uA839\\uAA77-\\uAA79\\uFDFD\\uFFE4\\uFFE8\\uFFED\\uFFEE\\uFFFC\\uFFFD',\r\n            astral: '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFA]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]'\r\n        },\r\n        {\r\n            name: 'Z',\r\n            alias: 'Separator',\r\n            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\n        },\r\n        {\r\n            name: 'Zl',\r\n            alias: 'Line_Separator',\r\n            bmp: '\\u2028'\r\n        },\r\n        {\r\n            name: 'Zp',\r\n            alias: 'Paragraph_Separator',\r\n            bmp: '\\u2029'\r\n        },\r\n        {\r\n            name: 'Zs',\r\n            alias: 'Space_Separator',\r\n            bmp: '\\x20\\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000'\r\n        }\r\n    ]);\r\n\r\n};\r\n\n},{}],6:[function(require,module,exports){\n/*!\r\n * XRegExp Unicode Properties 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2012-2017 MIT License\r\n * Unicode data by Mathias Bynens <mathiasbynens.be>\r\n */\r\n\r\nmodule.exports = function(XRegExp) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See\r\n     * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from\r\n     * UAX #44 <http://unicode.org/reports/tr44/>:\r\n     *\r\n     * - Alphabetic\r\n     *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +\r\n     *   Lo + Nl + Other_Alphabetic.\r\n     *\r\n     * - Default_Ignorable_Code_Point\r\n     *   For programmatic determination of default ignorable code points. New characters that should\r\n     *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,\r\n     *   permitting programs to correctly handle the default rendering of such characters when not\r\n     *   otherwise supported.\r\n     *\r\n     * - Lowercase\r\n     *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.\r\n     *\r\n     * - Noncharacter_Code_Point\r\n     *   Code points permanently reserved for internal use.\r\n     *\r\n     * - Uppercase\r\n     *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.\r\n     *\r\n     * - White_Space\r\n     *   Spaces, separator characters and other control characters which should be treated by\r\n     *   programming languages as \"white space\" for the purpose of parsing elements.\r\n     *\r\n     * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS\r\n     * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are\r\n     * included in XRegExp's Unicode Categories and Unicode Scripts addons.\r\n     *\r\n     * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.\r\n     *\r\n     * Uses Unicode 9.0.0.\r\n     *\r\n     * @requires XRegExp, Unicode Base\r\n     */\r\n\r\n    if (!XRegExp.addUnicodeData) {\r\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');\r\n    }\r\n\r\n    var unicodeData = [\r\n        {\r\n            name: 'ASCII',\r\n            bmp: '\\0-\\x7F'\r\n        },\r\n        {\r\n            name: 'Alphabetic',\r\n            bmp: 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08DF\\u08E3-\\u08E9\\u08F0-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1DE7-\\u1DF4\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8C5\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\r\n            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC45\\uDC82-\\uDCB8\\uDCD0-\\uDCE8\\uDD00-\\uDD32\\uDD50-\\uDD72\\uDD76\\uDD80-\\uDDBF\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE34\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEE8\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D-\\uDF44\\uDF47\\uDF48\\uDF4B\\uDF4C\\uDF50\\uDF57\\uDF5D-\\uDF63]|\\uD805[\\uDC00-\\uDC41\\uDC43-\\uDC45\\uDC47-\\uDC4A\\uDC80-\\uDCC1\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDB5\\uDDB8-\\uDDBE\\uDDD8-\\uDDDD\\uDE00-\\uDE3E\\uDE40\\uDE44\\uDE80-\\uDEB5\\uDF00-\\uDF19\\uDF1D-\\uDF2A]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC3E\\uDC40\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9E]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD47]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'\r\n        },\r\n        {\r\n            name: 'Any',\r\n            isBmpLast: true,\r\n            bmp: '\\0-\\uFFFF',\r\n            astral: '[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'Default_Ignorable_Code_Point',\r\n            bmp: '\\xAD\\u034F\\u061C\\u115F\\u1160\\u17B4\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8',\r\n            astral: '\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|[\\uDB40-\\uDB43][\\uDC00-\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'Lowercase',\r\n            bmp: 'a-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02B8\\u02C0\\u02C1\\u02E0-\\u02E4\\u0345\\u0371\\u0373\\u0377\\u037A-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1DBF\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u2090-\\u209C\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2170-\\u217F\\u2184\\u24D0-\\u24E9\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7D\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B-\\uA69D\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7F8-\\uA7FA\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\r\n            astral: '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'\r\n        },\r\n        {\r\n            name: 'Noncharacter_Code_Point',\r\n            bmp: '\\uFDD0-\\uFDEF\\uFFFE\\uFFFF',\r\n            astral: '[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'\r\n        },\r\n        {\r\n            name: 'Uppercase',\r\n            bmp: 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2160-\\u216F\\u2183\\u24B6-\\u24CF\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A',\r\n            astral: '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]'\r\n        },\r\n        {\r\n            name: 'White_Space',\r\n            bmp: '\\x09-\\x0D\\x20\\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\n        }\r\n    ];\r\n\r\n    // Add non-generated data\r\n    unicodeData.push({\r\n        name: 'Assigned',\r\n        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode\r\n        // Categories addon is required to use this property\r\n        inverseOf: 'Cn'\r\n    });\r\n\r\n    XRegExp.addUnicodeData(unicodeData);\r\n\r\n};\r\n\n},{}],7:[function(require,module,exports){\n/*!\r\n * XRegExp Unicode Scripts 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2010-2017 MIT License\r\n * Unicode data by Mathias Bynens <mathiasbynens.be>\r\n */\r\n\r\nmodule.exports = function(XRegExp) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Adds support for all Unicode scripts. E.g., `\\p{Latin}`. Token names are case insensitive,\r\n     * and any spaces, hyphens, and underscores are ignored.\r\n     *\r\n     * Uses Unicode 9.0.0.\r\n     *\r\n     * @requires XRegExp, Unicode Base\r\n     */\r\n\r\n    if (!XRegExp.addUnicodeData) {\r\n        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');\r\n    }\r\n\r\n    XRegExp.addUnicodeData([\r\n        {\r\n            name: 'Adlam',\r\n            astral: '\\uD83A[\\uDD00-\\uDD4A\\uDD50-\\uDD59\\uDD5E\\uDD5F]'\r\n        },\r\n        {\r\n            name: 'Ahom',\r\n            astral: '\\uD805[\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3F]'\r\n        },\r\n        {\r\n            name: 'Anatolian_Hieroglyphs',\r\n            astral: '\\uD811[\\uDC00-\\uDE46]'\r\n        },\r\n        {\r\n            name: 'Arabic',\r\n            bmp: '\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC',\r\n            astral: '\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]'\r\n        },\r\n        {\r\n            name: 'Armenian',\r\n            bmp: '\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u058A\\u058D-\\u058F\\uFB13-\\uFB17'\r\n        },\r\n        {\r\n            name: 'Avestan',\r\n            astral: '\\uD802[\\uDF00-\\uDF35\\uDF39-\\uDF3F]'\r\n        },\r\n        {\r\n            name: 'Balinese',\r\n            bmp: '\\u1B00-\\u1B4B\\u1B50-\\u1B7C'\r\n        },\r\n        {\r\n            name: 'Bamum',\r\n            bmp: '\\uA6A0-\\uA6F7',\r\n            astral: '\\uD81A[\\uDC00-\\uDE38]'\r\n        },\r\n        {\r\n            name: 'Bassa_Vah',\r\n            astral: '\\uD81A[\\uDED0-\\uDEED\\uDEF0-\\uDEF5]'\r\n        },\r\n        {\r\n            name: 'Batak',\r\n            bmp: '\\u1BC0-\\u1BF3\\u1BFC-\\u1BFF'\r\n        },\r\n        {\r\n            name: 'Bengali',\r\n            bmp: '\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FB'\r\n        },\r\n        {\r\n            name: 'Bhaiksuki',\r\n            astral: '\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC45\\uDC50-\\uDC6C]'\r\n        },\r\n        {\r\n            name: 'Bopomofo',\r\n            bmp: '\\u02EA\\u02EB\\u3105-\\u312D\\u31A0-\\u31BA'\r\n        },\r\n        {\r\n            name: 'Brahmi',\r\n            astral: '\\uD804[\\uDC00-\\uDC4D\\uDC52-\\uDC6F\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'Braille',\r\n            bmp: '\\u2800-\\u28FF'\r\n        },\r\n        {\r\n            name: 'Buginese',\r\n            bmp: '\\u1A00-\\u1A1B\\u1A1E\\u1A1F'\r\n        },\r\n        {\r\n            name: 'Buhid',\r\n            bmp: '\\u1740-\\u1753'\r\n        },\r\n        {\r\n            name: 'Canadian_Aboriginal',\r\n            bmp: '\\u1400-\\u167F\\u18B0-\\u18F5'\r\n        },\r\n        {\r\n            name: 'Carian',\r\n            astral: '\\uD800[\\uDEA0-\\uDED0]'\r\n        },\r\n        {\r\n            name: 'Caucasian_Albanian',\r\n            astral: '\\uD801[\\uDD30-\\uDD63\\uDD6F]'\r\n        },\r\n        {\r\n            name: 'Chakma',\r\n            astral: '\\uD804[\\uDD00-\\uDD34\\uDD36-\\uDD43]'\r\n        },\r\n        {\r\n            name: 'Cham',\r\n            bmp: '\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA5F'\r\n        },\r\n        {\r\n            name: 'Cherokee',\r\n            bmp: '\\u13A0-\\u13F5\\u13F8-\\u13FD\\uAB70-\\uABBF'\r\n        },\r\n        {\r\n            name: 'Common',\r\n            bmp: '\\0-\\x40\\\\x5B-\\x60\\\\x7B-\\xA9\\xAB-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9-\\u02DF\\u02E5-\\u02E9\\u02EC-\\u02FF\\u0374\\u037E\\u0385\\u0387\\u0589\\u0605\\u060C\\u061B\\u061C\\u061F\\u0640\\u06DD\\u08E2\\u0964\\u0965\\u0E3F\\u0FD5-\\u0FD8\\u10FB\\u16EB-\\u16ED\\u1735\\u1736\\u1802\\u1803\\u1805\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u2000-\\u200B\\u200E-\\u2064\\u2066-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20BE\\u2100-\\u2125\\u2127-\\u2129\\u212C-\\u2131\\u2133-\\u214D\\u214F-\\u215F\\u2189-\\u218B\\u2190-\\u23FE\\u2400-\\u2426\\u2440-\\u244A\\u2460-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BB9\\u2BBD-\\u2BC8\\u2BCA-\\u2BD1\\u2BEC-\\u2BEF\\u2E00-\\u2E44\\u2FF0-\\u2FFB\\u3000-\\u3004\\u3006\\u3008-\\u3020\\u3030-\\u3037\\u303C-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u30FC\\u3190-\\u319F\\u31C0-\\u31E3\\u3220-\\u325F\\u327F-\\u32CF\\u3358-\\u33FF\\u4DC0-\\u4DFF\\uA700-\\uA721\\uA788-\\uA78A\\uA830-\\uA839\\uA92E\\uA9CF\\uAB5B\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFF70\\uFF9E\\uFF9F\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD',\r\n            astral: '\\uD800[\\uDD00-\\uDD02\\uDD07-\\uDD33\\uDD37-\\uDD3F\\uDD90-\\uDD9B\\uDDD0-\\uDDFC\\uDEE1-\\uDEFB]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD66\\uDD6A-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDF00-\\uDF56\\uDF60-\\uDF71]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD00-\\uDD0C\\uDD10-\\uDD2E\\uDD30-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED2\\uDEE0-\\uDEEC\\uDEF0-\\uDEF6\\uDF00-\\uDF73\\uDF80-\\uDFD4]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3E\\uDD40-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'Coptic',\r\n            bmp: '\\u03E2-\\u03EF\\u2C80-\\u2CF3\\u2CF9-\\u2CFF'\r\n        },\r\n        {\r\n            name: 'Cuneiform',\r\n            astral: '\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC70-\\uDC74\\uDC80-\\uDD43]'\r\n        },\r\n        {\r\n            name: 'Cypriot',\r\n            astral: '\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F]'\r\n        },\r\n        {\r\n            name: 'Cyrillic',\r\n            bmp: '\\u0400-\\u0484\\u0487-\\u052F\\u1C80-\\u1C88\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69F\\uFE2E\\uFE2F'\r\n        },\r\n        {\r\n            name: 'Deseret',\r\n            astral: '\\uD801[\\uDC00-\\uDC4F]'\r\n        },\r\n        {\r\n            name: 'Devanagari',\r\n            bmp: '\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FD'\r\n        },\r\n        {\r\n            name: 'Duployan',\r\n            astral: '\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9C-\\uDC9F]'\r\n        },\r\n        {\r\n            name: 'Egyptian_Hieroglyphs',\r\n            astral: '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]'\r\n        },\r\n        {\r\n            name: 'Elbasan',\r\n            astral: '\\uD801[\\uDD00-\\uDD27]'\r\n        },\r\n        {\r\n            name: 'Ethiopic',\r\n            bmp: '\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E'\r\n        },\r\n        {\r\n            name: 'Georgian',\r\n            bmp: '\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u2D00-\\u2D25\\u2D27\\u2D2D'\r\n        },\r\n        {\r\n            name: 'Glagolitic',\r\n            bmp: '\\u2C00-\\u2C2E\\u2C30-\\u2C5E',\r\n            astral: '\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]'\r\n        },\r\n        {\r\n            name: 'Gothic',\r\n            astral: '\\uD800[\\uDF30-\\uDF4A]'\r\n        },\r\n        {\r\n            name: 'Grantha',\r\n            astral: '\\uD804[\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]'\r\n        },\r\n        {\r\n            name: 'Greek',\r\n            bmp: '\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65',\r\n            astral: '\\uD800[\\uDD40-\\uDD8E\\uDDA0]|\\uD834[\\uDE00-\\uDE45]'\r\n        },\r\n        {\r\n            name: 'Gujarati',\r\n            bmp: '\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9'\r\n        },\r\n        {\r\n            name: 'Gurmukhi',\r\n            bmp: '\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75'\r\n        },\r\n        {\r\n            name: 'Han',\r\n            bmp: '\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uF900-\\uFA6D\\uFA70-\\uFAD9',\r\n            astral: '[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]'\r\n        },\r\n        {\r\n            name: 'Hangul',\r\n            bmp: '\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\n        },\r\n        {\r\n            name: 'Hanunoo',\r\n            bmp: '\\u1720-\\u1734'\r\n        },\r\n        {\r\n            name: 'Hatran',\r\n            astral: '\\uD802[\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'Hebrew',\r\n            bmp: '\\u0591-\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F'\r\n        },\r\n        {\r\n            name: 'Hiragana',\r\n            bmp: '\\u3041-\\u3096\\u309D-\\u309F',\r\n            astral: '\\uD82C\\uDC01|\\uD83C\\uDE00'\r\n        },\r\n        {\r\n            name: 'Imperial_Aramaic',\r\n            astral: '\\uD802[\\uDC40-\\uDC55\\uDC57-\\uDC5F]'\r\n        },\r\n        {\r\n            name: 'Inherited',\r\n            bmp: '\\u0300-\\u036F\\u0485\\u0486\\u064B-\\u0655\\u0670\\u0951\\u0952\\u1AB0-\\u1ABE\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF5\\u1DFB-\\u1DFF\\u200C\\u200D\\u20D0-\\u20F0\\u302A-\\u302D\\u3099\\u309A\\uFE00-\\uFE0F\\uFE20-\\uFE2D',\r\n            astral: '\\uD800[\\uDDFD\\uDEE0]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD]|\\uDB40[\\uDD00-\\uDDEF]'\r\n        },\r\n        {\r\n            name: 'Inscriptional_Pahlavi',\r\n            astral: '\\uD802[\\uDF60-\\uDF72\\uDF78-\\uDF7F]'\r\n        },\r\n        {\r\n            name: 'Inscriptional_Parthian',\r\n            astral: '\\uD802[\\uDF40-\\uDF55\\uDF58-\\uDF5F]'\r\n        },\r\n        {\r\n            name: 'Javanese',\r\n            bmp: '\\uA980-\\uA9CD\\uA9D0-\\uA9D9\\uA9DE\\uA9DF'\r\n        },\r\n        {\r\n            name: 'Kaithi',\r\n            astral: '\\uD804[\\uDC80-\\uDCC1]'\r\n        },\r\n        {\r\n            name: 'Kannada',\r\n            bmp: '\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2'\r\n        },\r\n        {\r\n            name: 'Katakana',\r\n            bmp: '\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D',\r\n            astral: '\\uD82C\\uDC00'\r\n        },\r\n        {\r\n            name: 'Kayah_Li',\r\n            bmp: '\\uA900-\\uA92D\\uA92F'\r\n        },\r\n        {\r\n            name: 'Kharoshthi',\r\n            astral: '\\uD802[\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE50-\\uDE58]'\r\n        },\r\n        {\r\n            name: 'Khmer',\r\n            bmp: '\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF'\r\n        },\r\n        {\r\n            name: 'Khojki',\r\n            astral: '\\uD804[\\uDE00-\\uDE11\\uDE13-\\uDE3E]'\r\n        },\r\n        {\r\n            name: 'Khudawadi',\r\n            astral: '\\uD804[\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9]'\r\n        },\r\n        {\r\n            name: 'Lao',\r\n            bmp: '\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF'\r\n        },\r\n        {\r\n            name: 'Latin',\r\n            bmp: 'A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A'\r\n        },\r\n        {\r\n            name: 'Lepcha',\r\n            bmp: '\\u1C00-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C4F'\r\n        },\r\n        {\r\n            name: 'Limbu',\r\n            bmp: '\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u194F'\r\n        },\r\n        {\r\n            name: 'Linear_A',\r\n            astral: '\\uD801[\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]'\r\n        },\r\n        {\r\n            name: 'Linear_B',\r\n            astral: '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA]'\r\n        },\r\n        {\r\n            name: 'Lisu',\r\n            bmp: '\\uA4D0-\\uA4FF'\r\n        },\r\n        {\r\n            name: 'Lycian',\r\n            astral: '\\uD800[\\uDE80-\\uDE9C]'\r\n        },\r\n        {\r\n            name: 'Lydian',\r\n            astral: '\\uD802[\\uDD20-\\uDD39\\uDD3F]'\r\n        },\r\n        {\r\n            name: 'Mahajani',\r\n            astral: '\\uD804[\\uDD50-\\uDD76]'\r\n        },\r\n        {\r\n            name: 'Malayalam',\r\n            bmp: '\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4F\\u0D54-\\u0D63\\u0D66-\\u0D7F'\r\n        },\r\n        {\r\n            name: 'Mandaic',\r\n            bmp: '\\u0840-\\u085B\\u085E'\r\n        },\r\n        {\r\n            name: 'Manichaean',\r\n            astral: '\\uD802[\\uDEC0-\\uDEE6\\uDEEB-\\uDEF6]'\r\n        },\r\n        {\r\n            name: 'Marchen',\r\n            astral: '\\uD807[\\uDC70-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]'\r\n        },\r\n        {\r\n            name: 'Meetei_Mayek',\r\n            bmp: '\\uAAE0-\\uAAF6\\uABC0-\\uABED\\uABF0-\\uABF9'\r\n        },\r\n        {\r\n            name: 'Mende_Kikakui',\r\n            astral: '\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]'\r\n        },\r\n        {\r\n            name: 'Meroitic_Cursive',\r\n            astral: '\\uD802[\\uDDA0-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDDFF]'\r\n        },\r\n        {\r\n            name: 'Meroitic_Hieroglyphs',\r\n            astral: '\\uD802[\\uDD80-\\uDD9F]'\r\n        },\r\n        {\r\n            name: 'Miao',\r\n            astral: '\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]'\r\n        },\r\n        {\r\n            name: 'Modi',\r\n            astral: '\\uD805[\\uDE00-\\uDE44\\uDE50-\\uDE59]'\r\n        },\r\n        {\r\n            name: 'Mongolian',\r\n            bmp: '\\u1800\\u1801\\u1804\\u1806-\\u180E\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA',\r\n            astral: '\\uD805[\\uDE60-\\uDE6C]'\r\n        },\r\n        {\r\n            name: 'Mro',\r\n            astral: '\\uD81A[\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE6E\\uDE6F]'\r\n        },\r\n        {\r\n            name: 'Multani',\r\n            astral: '\\uD804[\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA9]'\r\n        },\r\n        {\r\n            name: 'Myanmar',\r\n            bmp: '\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F'\r\n        },\r\n        {\r\n            name: 'Nabataean',\r\n            astral: '\\uD802[\\uDC80-\\uDC9E\\uDCA7-\\uDCAF]'\r\n        },\r\n        {\r\n            name: 'New_Tai_Lue',\r\n            bmp: '\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE\\u19DF'\r\n        },\r\n        {\r\n            name: 'Newa',\r\n            astral: '\\uD805[\\uDC00-\\uDC59\\uDC5B\\uDC5D]'\r\n        },\r\n        {\r\n            name: 'Nko',\r\n            bmp: '\\u07C0-\\u07FA'\r\n        },\r\n        {\r\n            name: 'Ogham',\r\n            bmp: '\\u1680-\\u169C'\r\n        },\r\n        {\r\n            name: 'Ol_Chiki',\r\n            bmp: '\\u1C50-\\u1C7F'\r\n        },\r\n        {\r\n            name: 'Old_Hungarian',\r\n            astral: '\\uD803[\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'Old_Italic',\r\n            astral: '\\uD800[\\uDF00-\\uDF23]'\r\n        },\r\n        {\r\n            name: 'Old_North_Arabian',\r\n            astral: '\\uD802[\\uDE80-\\uDE9F]'\r\n        },\r\n        {\r\n            name: 'Old_Permic',\r\n            astral: '\\uD800[\\uDF50-\\uDF7A]'\r\n        },\r\n        {\r\n            name: 'Old_Persian',\r\n            astral: '\\uD800[\\uDFA0-\\uDFC3\\uDFC8-\\uDFD5]'\r\n        },\r\n        {\r\n            name: 'Old_South_Arabian',\r\n            astral: '\\uD802[\\uDE60-\\uDE7F]'\r\n        },\r\n        {\r\n            name: 'Old_Turkic',\r\n            astral: '\\uD803[\\uDC00-\\uDC48]'\r\n        },\r\n        {\r\n            name: 'Oriya',\r\n            bmp: '\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77'\r\n        },\r\n        {\r\n            name: 'Osage',\r\n            astral: '\\uD801[\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB]'\r\n        },\r\n        {\r\n            name: 'Osmanya',\r\n            astral: '\\uD801[\\uDC80-\\uDC9D\\uDCA0-\\uDCA9]'\r\n        },\r\n        {\r\n            name: 'Pahawh_Hmong',\r\n            astral: '\\uD81A[\\uDF00-\\uDF45\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]'\r\n        },\r\n        {\r\n            name: 'Palmyrene',\r\n            astral: '\\uD802[\\uDC60-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'Pau_Cin_Hau',\r\n            astral: '\\uD806[\\uDEC0-\\uDEF8]'\r\n        },\r\n        {\r\n            name: 'Phags_Pa',\r\n            bmp: '\\uA840-\\uA877'\r\n        },\r\n        {\r\n            name: 'Phoenician',\r\n            astral: '\\uD802[\\uDD00-\\uDD1B\\uDD1F]'\r\n        },\r\n        {\r\n            name: 'Psalter_Pahlavi',\r\n            astral: '\\uD802[\\uDF80-\\uDF91\\uDF99-\\uDF9C\\uDFA9-\\uDFAF]'\r\n        },\r\n        {\r\n            name: 'Rejang',\r\n            bmp: '\\uA930-\\uA953\\uA95F'\r\n        },\r\n        {\r\n            name: 'Runic',\r\n            bmp: '\\u16A0-\\u16EA\\u16EE-\\u16F8'\r\n        },\r\n        {\r\n            name: 'Samaritan',\r\n            bmp: '\\u0800-\\u082D\\u0830-\\u083E'\r\n        },\r\n        {\r\n            name: 'Saurashtra',\r\n            bmp: '\\uA880-\\uA8C5\\uA8CE-\\uA8D9'\r\n        },\r\n        {\r\n            name: 'Sharada',\r\n            astral: '\\uD804[\\uDD80-\\uDDCD\\uDDD0-\\uDDDF]'\r\n        },\r\n        {\r\n            name: 'Shavian',\r\n            astral: '\\uD801[\\uDC50-\\uDC7F]'\r\n        },\r\n        {\r\n            name: 'Siddham',\r\n            astral: '\\uD805[\\uDD80-\\uDDB5\\uDDB8-\\uDDDD]'\r\n        },\r\n        {\r\n            name: 'SignWriting',\r\n            astral: '\\uD836[\\uDC00-\\uDE8B\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]'\r\n        },\r\n        {\r\n            name: 'Sinhala',\r\n            bmp: '\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4',\r\n            astral: '\\uD804[\\uDDE1-\\uDDF4]'\r\n        },\r\n        {\r\n            name: 'Sora_Sompeng',\r\n            astral: '\\uD804[\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9]'\r\n        },\r\n        {\r\n            name: 'Sundanese',\r\n            bmp: '\\u1B80-\\u1BBF\\u1CC0-\\u1CC7'\r\n        },\r\n        {\r\n            name: 'Syloti_Nagri',\r\n            bmp: '\\uA800-\\uA82B'\r\n        },\r\n        {\r\n            name: 'Syriac',\r\n            bmp: '\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F'\r\n        },\r\n        {\r\n            name: 'Tagalog',\r\n            bmp: '\\u1700-\\u170C\\u170E-\\u1714'\r\n        },\r\n        {\r\n            name: 'Tagbanwa',\r\n            bmp: '\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773'\r\n        },\r\n        {\r\n            name: 'Tai_Le',\r\n            bmp: '\\u1950-\\u196D\\u1970-\\u1974'\r\n        },\r\n        {\r\n            name: 'Tai_Tham',\r\n            bmp: '\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD'\r\n        },\r\n        {\r\n            name: 'Tai_Viet',\r\n            bmp: '\\uAA80-\\uAAC2\\uAADB-\\uAADF'\r\n        },\r\n        {\r\n            name: 'Takri',\r\n            astral: '\\uD805[\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]'\r\n        },\r\n        {\r\n            name: 'Tamil',\r\n            bmp: '\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA'\r\n        },\r\n        {\r\n            name: 'Tangut',\r\n            astral: '\\uD81B\\uDFE0|[\\uD81C-\\uD820][\\uDC00-\\uDFFF]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]'\r\n        },\r\n        {\r\n            name: 'Telugu',\r\n            bmp: '\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F'\r\n        },\r\n        {\r\n            name: 'Thaana',\r\n            bmp: '\\u0780-\\u07B1'\r\n        },\r\n        {\r\n            name: 'Thai',\r\n            bmp: '\\u0E01-\\u0E3A\\u0E40-\\u0E5B'\r\n        },\r\n        {\r\n            name: 'Tibetan',\r\n            bmp: '\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA'\r\n        },\r\n        {\r\n            name: 'Tifinagh',\r\n            bmp: '\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F'\r\n        },\r\n        {\r\n            name: 'Tirhuta',\r\n            astral: '\\uD805[\\uDC80-\\uDCC7\\uDCD0-\\uDCD9]'\r\n        },\r\n        {\r\n            name: 'Ugaritic',\r\n            astral: '\\uD800[\\uDF80-\\uDF9D\\uDF9F]'\r\n        },\r\n        {\r\n            name: 'Vai',\r\n            bmp: '\\uA500-\\uA62B'\r\n        },\r\n        {\r\n            name: 'Warang_Citi',\r\n            astral: '\\uD806[\\uDCA0-\\uDCF2\\uDCFF]'\r\n        },\r\n        {\r\n            name: 'Yi',\r\n            bmp: '\\uA000-\\uA48C\\uA490-\\uA4C6'\r\n        }\r\n    ]);\r\n\r\n};\r\n\n},{}],8:[function(require,module,exports){\nvar XRegExp = require('./xregexp');\r\n\r\nrequire('./addons/build')(XRegExp);\r\nrequire('./addons/matchrecursive')(XRegExp);\r\nrequire('./addons/unicode-base')(XRegExp);\r\nrequire('./addons/unicode-blocks')(XRegExp);\r\nrequire('./addons/unicode-categories')(XRegExp);\r\nrequire('./addons/unicode-properties')(XRegExp);\r\nrequire('./addons/unicode-scripts')(XRegExp);\r\n\r\nmodule.exports = XRegExp;\r\n\n},{\"./addons/build\":1,\"./addons/matchrecursive\":2,\"./addons/unicode-base\":3,\"./addons/unicode-blocks\":4,\"./addons/unicode-categories\":5,\"./addons/unicode-properties\":6,\"./addons/unicode-scripts\":7,\"./xregexp\":9}],9:[function(require,module,exports){\n/*!\r\n * XRegExp 3.2.0\r\n * <xregexp.com>\r\n * Steven Levithan (c) 2007-2017 MIT License\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\r\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\r\n * make your client-side grepping simpler and more powerful, while freeing you from related\r\n * cross-browser inconsistencies.\r\n */\r\n\r\n// ==--------------------------==\r\n// Private stuff\r\n// ==--------------------------==\r\n\r\n// Property name used for extended regex instance data\r\nvar REGEX_DATA = 'xregexp';\r\n// Optional features that can be installed and uninstalled\r\nvar features = {\r\n    astral: false,\r\n    natives: false\r\n};\r\n// Native methods to use and restore ('native' is an ES3 reserved keyword)\r\nvar nativ = {\r\n    exec: RegExp.prototype.exec,\r\n    test: RegExp.prototype.test,\r\n    match: String.prototype.match,\r\n    replace: String.prototype.replace,\r\n    split: String.prototype.split\r\n};\r\n// Storage for fixed/extended native methods\r\nvar fixed = {};\r\n// Storage for regexes cached by `XRegExp.cache`\r\nvar regexCache = {};\r\n// Storage for pattern details cached by the `XRegExp` constructor\r\nvar patternCache = {};\r\n// Storage for regex syntax tokens added internally or by `XRegExp.addToken`\r\nvar tokens = [];\r\n// Token scopes\r\nvar defaultScope = 'default';\r\nvar classScope = 'class';\r\n// Regexes that match native regex syntax, including octals\r\nvar nativeTokens = {\r\n    // Any native multicharacter token in default scope, or any single character\r\n    'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\r\n    // Any native multicharacter token in character class scope, or any single character\r\n    'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\r\n};\r\n// Any backreference or dollar-prefixed character in replacement strings\r\nvar replacementToken = /\\$(?:{([\\w$]+)}|(\\d\\d?|[\\s\\S]))/g;\r\n// Check for correct `exec` handling of nonparticipating capturing groups\r\nvar correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;\r\n// Check for ES6 `flags` prop support\r\nvar hasFlagsProp = /x/.flags !== undefined;\r\n// Shortcut to `Object.prototype.toString`\r\nvar toString = {}.toString;\r\n\r\nfunction hasNativeFlag(flag) {\r\n    // Can't check based on the presence of properties/getters since browsers might support such\r\n    // properties even when they don't support the corresponding flag in regex construction (tested\r\n    // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\r\n    // throws an error)\r\n    var isSupported = true;\r\n    try {\r\n        // Can't use regex literals for testing even in a `try` because regex literals with\r\n        // unsupported flags cause a compilation error in IE\r\n        new RegExp('', flag);\r\n    } catch (exception) {\r\n        isSupported = false;\r\n    }\r\n    return isSupported;\r\n}\r\n// Check for ES6 `u` flag support\r\nvar hasNativeU = hasNativeFlag('u');\r\n// Check for ES6 `y` flag support\r\nvar hasNativeY = hasNativeFlag('y');\r\n// Tracker for known flags, including addon flags\r\nvar registeredFlags = {\r\n    g: true,\r\n    i: true,\r\n    m: true,\r\n    u: hasNativeU,\r\n    y: hasNativeY\r\n};\r\n\r\n/**\r\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\r\n *\r\n * @private\r\n * @param {RegExp} regex Regex to augment.\r\n * @param {Array} captureNames Array with capture names, or `null`.\r\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\r\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\r\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\r\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\r\n *   skipping some operations like attaching `XRegExp.prototype` properties.\r\n * @returns {RegExp} Augmented regex.\r\n */\r\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\r\n    var p;\r\n\r\n    regex[REGEX_DATA] = {\r\n        captureNames: captureNames\r\n    };\r\n\r\n    if (isInternalOnly) {\r\n        return regex;\r\n    }\r\n\r\n    // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\r\n    if (regex.__proto__) {\r\n        regex.__proto__ = XRegExp.prototype;\r\n    } else {\r\n        for (p in XRegExp.prototype) {\r\n            // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\r\n            // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\r\n            // extensions exist on `regex.prototype` anyway\r\n            regex[p] = XRegExp.prototype[p];\r\n        }\r\n    }\r\n\r\n    regex[REGEX_DATA].source = xSource;\r\n    // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\r\n    regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;\r\n\r\n    return regex;\r\n}\r\n\r\n/**\r\n * Removes any duplicate characters from the provided string.\r\n *\r\n * @private\r\n * @param {String} str String to remove duplicate characters from.\r\n * @returns {String} String with any duplicate characters removed.\r\n */\r\nfunction clipDuplicates(str) {\r\n    return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\r\n}\r\n\r\n/**\r\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\r\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\r\n * flags g and y while copying the regex.\r\n *\r\n * @private\r\n * @param {RegExp} regex Regex to copy.\r\n * @param {Object} [options] Options object with optional properties:\r\n *   - `addG` {Boolean} Add flag g while copying the regex.\r\n *   - `addY` {Boolean} Add flag y while copying the regex.\r\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\r\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\r\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\r\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\r\n *     skipping some operations like attaching `XRegExp.prototype` properties.\r\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\r\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\r\n */\r\nfunction copyRegex(regex, options) {\r\n    if (!XRegExp.isRegExp(regex)) {\r\n        throw new TypeError('Type RegExp expected');\r\n    }\r\n\r\n    var xData = regex[REGEX_DATA] || {};\r\n    var flags = getNativeFlags(regex);\r\n    var flagsToAdd = '';\r\n    var flagsToRemove = '';\r\n    var xregexpSource = null;\r\n    var xregexpFlags = null;\r\n\r\n    options = options || {};\r\n\r\n    if (options.removeG) {flagsToRemove += 'g';}\r\n    if (options.removeY) {flagsToRemove += 'y';}\r\n    if (flagsToRemove) {\r\n        flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');\r\n    }\r\n\r\n    if (options.addG) {flagsToAdd += 'g';}\r\n    if (options.addY) {flagsToAdd += 'y';}\r\n    if (flagsToAdd) {\r\n        flags = clipDuplicates(flags + flagsToAdd);\r\n    }\r\n\r\n    if (!options.isInternalOnly) {\r\n        if (xData.source !== undefined) {\r\n            xregexpSource = xData.source;\r\n        }\r\n        // null or undefined; don't want to add to `flags` if the previous value was null, since\r\n        // that indicates we're not tracking original precompilation flags\r\n        if (xData.flags != null) {\r\n            // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\r\n            // removed for non-internal regexes, so don't need to handle it\r\n            xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;\r\n        }\r\n    }\r\n\r\n    // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\r\n    // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\r\n    // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\r\n    // translation to native regex syntax\r\n    regex = augment(\r\n        new RegExp(options.source || regex.source, flags),\r\n        hasNamedCapture(regex) ? xData.captureNames.slice(0) : null,\r\n        xregexpSource,\r\n        xregexpFlags,\r\n        options.isInternalOnly\r\n    );\r\n\r\n    return regex;\r\n}\r\n\r\n/**\r\n * Converts hexadecimal to decimal.\r\n *\r\n * @private\r\n * @param {String} hex\r\n * @returns {Number}\r\n */\r\nfunction dec(hex) {\r\n    return parseInt(hex, 16);\r\n}\r\n\r\n/**\r\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\r\n * inline comment or whitespace with flag x. This is used directly as a token handler function\r\n * passed to `XRegExp.addToken`.\r\n *\r\n * @private\r\n * @param {String} match Match arg of `XRegExp.addToken` handler\r\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\r\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\r\n * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.\r\n */\r\nfunction getContextualTokenSeparator(match, scope, flags) {\r\n    if (\r\n        // No need to separate tokens if at the beginning or end of a group\r\n        match.input.charAt(match.index - 1) === '(' ||\r\n        match.input.charAt(match.index + match[0].length) === ')' ||\r\n        // Avoid separating tokens when the following token is a quantifier\r\n        isPatternNext(match.input, match.index + match[0].length, flags, '[?*+]|{\\\\d+(?:,\\\\d*)?}')\r\n    ) {\r\n        return '';\r\n    }\r\n    // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.\r\n    // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax\r\n    // error `(? :` into `(?:`.\r\n    return '(?:)';\r\n}\r\n\r\n/**\r\n * Returns native `RegExp` flags used by a regex object.\r\n *\r\n * @private\r\n * @param {RegExp} regex Regex to check.\r\n * @returns {String} Native flags in use.\r\n */\r\nfunction getNativeFlags(regex) {\r\n    return hasFlagsProp ?\r\n        regex.flags :\r\n        // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\r\n        // with an empty string) allows this to continue working predictably when\r\n        // `XRegExp.proptotype.toString` is overridden\r\n        nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\r\n}\r\n\r\n/**\r\n * Determines whether a regex has extended instance data used to track capture names.\r\n *\r\n * @private\r\n * @param {RegExp} regex Regex to check.\r\n * @returns {Boolean} Whether the regex uses named capture.\r\n */\r\nfunction hasNamedCapture(regex) {\r\n    return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\r\n}\r\n\r\n/**\r\n * Converts decimal to hexadecimal.\r\n *\r\n * @private\r\n * @param {Number|String} dec\r\n * @returns {String}\r\n */\r\nfunction hex(dec) {\r\n    return parseInt(dec, 10).toString(16);\r\n}\r\n\r\n/**\r\n * Returns the first index at which a given value can be found in an array.\r\n *\r\n * @private\r\n * @param {Array} array Array to search.\r\n * @param {*} value Value to locate in the array.\r\n * @returns {Number} Zero-based index at which the item is found, or -1.\r\n */\r\nfunction indexOf(array, value) {\r\n    var len = array.length;\r\n    var i;\r\n\r\n    for (i = 0; i < len; ++i) {\r\n        if (array[i] === value) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n/**\r\n * Checks whether the next nonignorable token after the specified position matches the\r\n * `needlePattern`\r\n *\r\n * @private\r\n * @param {String} pattern Pattern to search within.\r\n * @param {Number} pos Index in `pattern` to search at.\r\n * @param {String} flags Flags used by the pattern.\r\n * @param {String} needlePattern Pattern to match the next token against.\r\n * @returns {Boolean} Whether the next nonignorable token matches `needlePattern`\r\n */\r\nfunction isPatternNext(pattern, pos, flags, needlePattern) {\r\n    var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';\r\n    var lineCommentPattern = '#[^#\\\\n]*';\r\n    var patternsToIgnore = flags.indexOf('x') > -1 ?\r\n        // Ignore any leading whitespace, line comments, and inline comments\r\n        ['\\\\s', lineCommentPattern, inlineCommentPattern] :\r\n        // Ignore any leading inline comments\r\n        [inlineCommentPattern];\r\n    return nativ.test.call(\r\n        new RegExp('^(?:' + patternsToIgnore.join('|') + ')*(?:' + needlePattern + ')'),\r\n        pattern.slice(pos)\r\n    );\r\n}\r\n\r\n/**\r\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\r\n *\r\n * @private\r\n * @param {*} value Object to check.\r\n * @param {String} type Type to check for, in TitleCase.\r\n * @returns {Boolean} Whether the object matches the type.\r\n */\r\nfunction isType(value, type) {\r\n    return toString.call(value) === '[object ' + type + ']';\r\n}\r\n\r\n/**\r\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\r\n *\r\n * @private\r\n * @param {String} str\r\n * @returns {String}\r\n */\r\nfunction pad4(str) {\r\n    while (str.length < 4) {\r\n        str = '0' + str;\r\n    }\r\n    return str;\r\n}\r\n\r\n/**\r\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\r\n * the flag preparation logic from the `XRegExp` constructor.\r\n *\r\n * @private\r\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\r\n * @param {String} flags Any combination of flags.\r\n * @returns {Object} Object with properties `pattern` and `flags`.\r\n */\r\nfunction prepareFlags(pattern, flags) {\r\n    var i;\r\n\r\n    // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\r\n    if (clipDuplicates(flags) !== flags) {\r\n        throw new SyntaxError('Invalid duplicate regex flag ' + flags);\r\n    }\r\n\r\n    // Strip and apply a leading mode modifier with any combination of flags except g or y\r\n    pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function($0, $1) {\r\n        if (nativ.test.call(/[gy]/, $1)) {\r\n            throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);\r\n        }\r\n        // Allow duplicate flags within the mode modifier\r\n        flags = clipDuplicates(flags + $1);\r\n        return '';\r\n    });\r\n\r\n    // Throw on unknown native or nonnative flags\r\n    for (i = 0; i < flags.length; ++i) {\r\n        if (!registeredFlags[flags.charAt(i)]) {\r\n            throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));\r\n        }\r\n    }\r\n\r\n    return {\r\n        pattern: pattern,\r\n        flags: flags\r\n    };\r\n}\r\n\r\n/**\r\n * Prepares an options object from the given value.\r\n *\r\n * @private\r\n * @param {String|Object} value Value to convert to an options object.\r\n * @returns {Object} Options object.\r\n */\r\nfunction prepareOptions(value) {\r\n    var options = {};\r\n\r\n    if (isType(value, 'String')) {\r\n        XRegExp.forEach(value, /[^\\s,]+/, function(match) {\r\n            options[match] = true;\r\n        });\r\n\r\n        return options;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/**\r\n * Registers a flag so it doesn't throw an 'unknown flag' error.\r\n *\r\n * @private\r\n * @param {String} flag Single-character flag to register.\r\n */\r\nfunction registerFlag(flag) {\r\n    if (!/^[\\w$]$/.test(flag)) {\r\n        throw new Error('Flag must be a single character A-Za-z0-9_$');\r\n    }\r\n\r\n    registeredFlags[flag] = true;\r\n}\r\n\r\n/**\r\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\r\n * position, until a match is found.\r\n *\r\n * @private\r\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\r\n * @param {String} flags Flags being used to construct the regex.\r\n * @param {Number} pos Position to search for tokens within `pattern`.\r\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\r\n * @param {Object} context Context object to use for token handler functions.\r\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\r\n */\r\nfunction runTokens(pattern, flags, pos, scope, context) {\r\n    var i = tokens.length;\r\n    var leadChar = pattern.charAt(pos);\r\n    var result = null;\r\n    var match;\r\n    var t;\r\n\r\n    // Run in reverse insertion order\r\n    while (i--) {\r\n        t = tokens[i];\r\n        if (\r\n            (t.leadChar && t.leadChar !== leadChar) ||\r\n            (t.scope !== scope && t.scope !== 'all') ||\r\n            (t.flag && flags.indexOf(t.flag) === -1)\r\n        ) {\r\n            continue;\r\n        }\r\n\r\n        match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\r\n        if (match) {\r\n            result = {\r\n                matchLength: match[0].length,\r\n                output: t.handler.call(context, match, scope, flags),\r\n                reparse: t.reparse\r\n            };\r\n            // Finished with token tests\r\n            break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\r\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\r\n * the Unicode Base addon is not available, since flag A is registered by that addon.\r\n *\r\n * @private\r\n * @param {Boolean} on `true` to enable; `false` to disable.\r\n */\r\nfunction setAstral(on) {\r\n    features.astral = on;\r\n}\r\n\r\n/**\r\n * Enables or disables native method overrides.\r\n *\r\n * @private\r\n * @param {Boolean} on `true` to enable; `false` to disable.\r\n */\r\nfunction setNatives(on) {\r\n    RegExp.prototype.exec = (on ? fixed : nativ).exec;\r\n    RegExp.prototype.test = (on ? fixed : nativ).test;\r\n    String.prototype.match = (on ? fixed : nativ).match;\r\n    String.prototype.replace = (on ? fixed : nativ).replace;\r\n    String.prototype.split = (on ? fixed : nativ).split;\r\n\r\n    features.natives = on;\r\n}\r\n\r\n/**\r\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\r\n * the ES5 abstract operation `ToObject`.\r\n *\r\n * @private\r\n * @param {*} value Object to check and return.\r\n * @returns {*} The provided object.\r\n */\r\nfunction toObject(value) {\r\n    // null or undefined\r\n    if (value == null) {\r\n        throw new TypeError('Cannot convert null or undefined to object');\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n// ==--------------------------==\r\n// Constructor\r\n// ==--------------------------==\r\n\r\n/**\r\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\r\n * native regular expression in that additional syntax and flags are supported. The returned object\r\n * is in fact a native `RegExp` and works with all native methods.\r\n *\r\n * @class XRegExp\r\n * @constructor\r\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\r\n * @param {String} [flags] Any combination of flags.\r\n *   Native flags:\r\n *     - `g` - global\r\n *     - `i` - ignore case\r\n *     - `m` - multiline anchors\r\n *     - `u` - unicode (ES6)\r\n *     - `y` - sticky (Firefox 3+, ES6)\r\n *   Additional XRegExp flags:\r\n *     - `n` - explicit capture\r\n *     - `s` - dot matches all (aka singleline)\r\n *     - `x` - free-spacing and line comments (aka extended)\r\n *     - `A` - astral (requires the Unicode Base addon)\r\n *   Flags cannot be provided when constructing one `RegExp` from another.\r\n * @returns {RegExp} Extended regular expression object.\r\n * @example\r\n *\r\n * // With named capture and flag x\r\n * XRegExp('(?<year>  [0-9]{4} ) -?  # year  \\n\\\r\n *          (?<month> [0-9]{2} ) -?  # month \\n\\\r\n *          (?<day>   [0-9]{2} )     # day   ', 'x');\r\n *\r\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\r\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\r\n * // have fresh `lastIndex` properties (set to zero).\r\n * XRegExp(/regex/);\r\n */\r\nfunction XRegExp(pattern, flags) {\r\n    if (XRegExp.isRegExp(pattern)) {\r\n        if (flags !== undefined) {\r\n            throw new TypeError('Cannot supply flags when copying a RegExp');\r\n        }\r\n        return copyRegex(pattern);\r\n    }\r\n\r\n    // Copy the argument behavior of `RegExp`\r\n    pattern = pattern === undefined ? '' : String(pattern);\r\n    flags = flags === undefined ? '' : String(flags);\r\n\r\n    if (XRegExp.isInstalled('astral') && flags.indexOf('A') === -1) {\r\n        // This causes an error to be thrown if the Unicode Base addon is not available\r\n        flags += 'A';\r\n    }\r\n\r\n    if (!patternCache[pattern]) {\r\n        patternCache[pattern] = {};\r\n    }\r\n\r\n    if (!patternCache[pattern][flags]) {\r\n        var context = {\r\n            hasNamedCapture: false,\r\n            captureNames: []\r\n        };\r\n        var scope = defaultScope;\r\n        var output = '';\r\n        var pos = 0;\r\n        var result;\r\n\r\n        // Check for flag-related errors, and strip/apply flags in a leading mode modifier\r\n        var applied = prepareFlags(pattern, flags);\r\n        var appliedPattern = applied.pattern;\r\n        var appliedFlags = applied.flags;\r\n\r\n        // Use XRegExp's tokens to translate the pattern to a native regex pattern.\r\n        // `appliedPattern.length` may change on each iteration if tokens use `reparse`\r\n        while (pos < appliedPattern.length) {\r\n            do {\r\n                // Check for custom tokens at the current position\r\n                result = runTokens(appliedPattern, appliedFlags, pos, scope, context);\r\n                // If the matched token used the `reparse` option, splice its output into the\r\n                // pattern before running tokens again at the same position\r\n                if (result && result.reparse) {\r\n                    appliedPattern = appliedPattern.slice(0, pos) +\r\n                        result.output +\r\n                        appliedPattern.slice(pos + result.matchLength);\r\n                }\r\n            } while (result && result.reparse);\r\n\r\n            if (result) {\r\n                output += result.output;\r\n                pos += (result.matchLength || 1);\r\n            } else {\r\n                // Get the native token at the current position\r\n                var token = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];\r\n                output += token;\r\n                pos += token.length;\r\n                if (token === '[' && scope === defaultScope) {\r\n                    scope = classScope;\r\n                } else if (token === ']' && scope === classScope) {\r\n                    scope = defaultScope;\r\n                }\r\n            }\r\n        }\r\n\r\n        patternCache[pattern][flags] = {\r\n            // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\r\n            // groups are sometimes inserted during regex transpilation in order to keep tokens\r\n            // separated. However, more than one empty group in a row is never needed.\r\n            pattern: nativ.replace.call(output, /(?:\\(\\?:\\))+/g, '(?:)'),\r\n            // Strip all but native flags\r\n            flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\r\n            // `context.captureNames` has an item for each capturing group, even if unnamed\r\n            captures: context.hasNamedCapture ? context.captureNames : null\r\n        };\r\n    }\r\n\r\n    var generated = patternCache[pattern][flags];\r\n    return augment(\r\n        new RegExp(generated.pattern, generated.flags),\r\n        generated.captures,\r\n        pattern,\r\n        flags\r\n    );\r\n}\r\n\r\n// Add `RegExp.prototype` to the prototype chain\r\nXRegExp.prototype = new RegExp();\r\n\r\n// ==--------------------------==\r\n// Public properties\r\n// ==--------------------------==\r\n\r\n/**\r\n * The XRegExp version number as a string containing three dot-separated parts. For example,\r\n * '2.0.0-beta-3'.\r\n *\r\n * @static\r\n * @memberOf XRegExp\r\n * @type String\r\n */\r\nXRegExp.version = '3.2.0';\r\n\r\n// ==--------------------------==\r\n// Public methods\r\n// ==--------------------------==\r\n\r\n// Intentionally undocumented; used in tests and addons\r\nXRegExp._clipDuplicates = clipDuplicates;\r\nXRegExp._hasNativeFlag = hasNativeFlag;\r\nXRegExp._dec = dec;\r\nXRegExp._hex = hex;\r\nXRegExp._pad4 = pad4;\r\n\r\n/**\r\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\r\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\r\n *\r\n * @memberOf XRegExp\r\n * @param {RegExp} regex Regex object that matches the new token.\r\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\r\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\r\n *   properties of the regex being built, through `this`. Invoked with three arguments:\r\n *   - The match array, with named backreference properties.\r\n *   - The regex scope where the match was found: 'default' or 'class'.\r\n *   - The flags used by the regex, including any flags in a leading mode modifier.\r\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\r\n *   construct XRegExps within the function or you will trigger infinite recursion.\r\n * @param {Object} [options] Options object with optional properties:\r\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\r\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\r\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\r\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\r\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\r\n *     throwing an 'unknown flag' error when any of the flags are used.\r\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\r\n *     final, and instead be reparseable by other tokens (including the current token). Allows\r\n *     token chaining or deferring.\r\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\r\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\r\n *     you provide an erroneous value. However, providing it can increase the token's performance\r\n *     since the token can be skipped at any positions where this character doesn't appear.\r\n * @example\r\n *\r\n * // Basic usage: Add \\a for the ALERT control code\r\n * XRegExp.addToken(\r\n *   /\\\\a/,\r\n *   function() {return '\\\\x07';},\r\n *   {scope: 'all'}\r\n * );\r\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\r\n *\r\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\r\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\r\n * // character classes only)\r\n * XRegExp.addToken(\r\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\r\n *   function(match) {return match[1] + (match[2] ? '' : '?');},\r\n *   {flag: 'U'}\r\n * );\r\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\r\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\r\n */\r\nXRegExp.addToken = function(regex, handler, options) {\r\n    options = options || {};\r\n    var optionalFlags = options.optionalFlags;\r\n    var i;\r\n\r\n    if (options.flag) {\r\n        registerFlag(options.flag);\r\n    }\r\n\r\n    if (optionalFlags) {\r\n        optionalFlags = nativ.split.call(optionalFlags, '');\r\n        for (i = 0; i < optionalFlags.length; ++i) {\r\n            registerFlag(optionalFlags[i]);\r\n        }\r\n    }\r\n\r\n    // Add to the private list of syntax tokens\r\n    tokens.push({\r\n        regex: copyRegex(regex, {\r\n            addG: true,\r\n            addY: hasNativeY,\r\n            isInternalOnly: true\r\n        }),\r\n        handler: handler,\r\n        scope: options.scope || defaultScope,\r\n        flag: options.flag,\r\n        reparse: options.reparse,\r\n        leadChar: options.leadChar\r\n    });\r\n\r\n    // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\r\n    // might now produce different results\r\n    XRegExp.cache.flush('patterns');\r\n};\r\n\r\n/**\r\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\r\n * the same pattern and flag combination, the cached copy of the regex is returned.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} pattern Regex pattern string.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @returns {RegExp} Cached XRegExp object.\r\n * @example\r\n *\r\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\r\n *   // The regex is compiled once only\r\n * }\r\n */\r\nXRegExp.cache = function(pattern, flags) {\r\n    if (!regexCache[pattern]) {\r\n        regexCache[pattern] = {};\r\n    }\r\n    return regexCache[pattern][flags] || (\r\n        regexCache[pattern][flags] = XRegExp(pattern, flags)\r\n    );\r\n};\r\n\r\n// Intentionally undocumented; used in tests\r\nXRegExp.cache.flush = function(cacheName) {\r\n    if (cacheName === 'patterns') {\r\n        // Flush the pattern cache used by the `XRegExp` constructor\r\n        patternCache = {};\r\n    } else {\r\n        // Flush the regex cache populated by `XRegExp.cache`\r\n        regexCache = {};\r\n    }\r\n};\r\n\r\n/**\r\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\r\n * can safely be used at any point within a regex that uses any flags.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to escape.\r\n * @returns {String} String with regex metacharacters escaped.\r\n * @example\r\n *\r\n * XRegExp.escape('Escaped? <.>');\r\n * // -> 'Escaped\\?\\ <\\.>'\r\n */\r\nXRegExp.escape = function(str) {\r\n    return nativ.replace.call(toObject(str), /[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n};\r\n\r\n/**\r\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\r\n * regex uses named capture, named backreference properties are included on the match array.\r\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\r\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\r\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\r\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n * @returns {Array} Match array with named backreference properties, or `null`.\r\n * @example\r\n *\r\n * // Basic use, with named backreference\r\n * var match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\r\n * match.hex; // -> '2620'\r\n *\r\n * // With pos and sticky, in a loop\r\n * var pos = 2, result = [], match;\r\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\r\n *   result.push(match[1]);\r\n *   pos = match.index + match[0].length;\r\n * }\r\n * // result -> ['2', '3', '4']\r\n */\r\nXRegExp.exec = function(str, regex, pos, sticky) {\r\n    var cacheKey = 'g';\r\n    var addY = false;\r\n    var fakeY = false;\r\n    var match;\r\n    var r2;\r\n\r\n    addY = hasNativeY && !!(sticky || (regex.sticky && sticky !== false));\r\n    if (addY) {\r\n        cacheKey += 'y';\r\n    } else if (sticky) {\r\n        // Simulate sticky matching by appending an empty capture to the original regex. The\r\n        // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\r\n        // and will not search the rest of the subject string. We'll know that the original regex\r\n        // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\r\n        // capture participated in the match).\r\n        fakeY = true;\r\n        cacheKey += 'FakeY';\r\n    }\r\n\r\n    regex[REGEX_DATA] = regex[REGEX_DATA] || {};\r\n\r\n    // Shares cached copies with `XRegExp.match`/`replace`\r\n    r2 = regex[REGEX_DATA][cacheKey] || (\r\n        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\r\n            addG: true,\r\n            addY: addY,\r\n            source: fakeY ? regex.source + '|()' : undefined,\r\n            removeY: sticky === false,\r\n            isInternalOnly: true\r\n        })\r\n    );\r\n\r\n    pos = pos || 0;\r\n    r2.lastIndex = pos;\r\n\r\n    // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\r\n    match = fixed.exec.call(r2, str);\r\n\r\n    // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\r\n    // the original regexp failed (see above).\r\n    if (fakeY && match && match.pop() === '') {\r\n        match = null;\r\n    }\r\n\r\n    if (regex.global) {\r\n        regex.lastIndex = match ? r2.lastIndex : 0;\r\n    }\r\n\r\n    return match;\r\n};\r\n\r\n/**\r\n * Executes a provided function once per regex match. Searches always start at the beginning of the\r\n * string and continue until the end, regardless of the state of the regex's `global` property and\r\n * initial `lastIndex`.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\r\n *   - The match array, with named backreference properties.\r\n *   - The zero-based match index.\r\n *   - The string being traversed.\r\n *   - The regex object being used to traverse the string.\r\n * @example\r\n *\r\n * // Extracts every other digit from a string\r\n * var evens = [];\r\n * XRegExp.forEach('1a2345', /\\d/, function(match, i) {\r\n *   if (i % 2) evens.push(+match[0]);\r\n * });\r\n * // evens -> [2, 4]\r\n */\r\nXRegExp.forEach = function(str, regex, callback) {\r\n    var pos = 0;\r\n    var i = -1;\r\n    var match;\r\n\r\n    while ((match = XRegExp.exec(str, regex, pos))) {\r\n        // Because `regex` is provided to `callback`, the function could use the deprecated/\r\n        // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\r\n        // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\r\n        // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\r\n        // regexes, mutating the regex will not have any effect on the iteration or matched strings,\r\n        // which is a nice side effect that brings extra safety.\r\n        callback(match, ++i, str, regex);\r\n\r\n        pos = match.index + (match[0].length || 1);\r\n    }\r\n};\r\n\r\n/**\r\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\r\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\r\n * regexes are not recompiled using XRegExp syntax.\r\n *\r\n * @memberOf XRegExp\r\n * @param {RegExp} regex Regex to globalize.\r\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\r\n * @example\r\n *\r\n * var globalCopy = XRegExp.globalize(/regex/);\r\n * globalCopy.global; // -> true\r\n */\r\nXRegExp.globalize = function(regex) {\r\n    return copyRegex(regex, {addG: true});\r\n};\r\n\r\n/**\r\n * Installs optional features according to the specified options. Can be undone using\r\n * `XRegExp.uninstall`.\r\n *\r\n * @memberOf XRegExp\r\n * @param {Object|String} options Options object or string.\r\n * @example\r\n *\r\n * // With an options object\r\n * XRegExp.install({\r\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\r\n *   astral: true,\r\n *\r\n *   // DEPRECATED: Overrides native regex methods with fixed/extended versions\r\n *   natives: true\r\n * });\r\n *\r\n * // With an options string\r\n * XRegExp.install('astral natives');\r\n */\r\nXRegExp.install = function(options) {\r\n    options = prepareOptions(options);\r\n\r\n    if (!features.astral && options.astral) {\r\n        setAstral(true);\r\n    }\r\n\r\n    if (!features.natives && options.natives) {\r\n        setNatives(true);\r\n    }\r\n};\r\n\r\n/**\r\n * Checks whether an individual optional feature is installed.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} feature Name of the feature to check. One of:\r\n *   - `astral`\r\n *   - `natives`\r\n * @returns {Boolean} Whether the feature is installed.\r\n * @example\r\n *\r\n * XRegExp.isInstalled('astral');\r\n */\r\nXRegExp.isInstalled = function(feature) {\r\n    return !!(features[feature]);\r\n};\r\n\r\n/**\r\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\r\n * created in another frame, when `instanceof` and `constructor` checks would fail.\r\n *\r\n * @memberOf XRegExp\r\n * @param {*} value Object to check.\r\n * @returns {Boolean} Whether the object is a `RegExp` object.\r\n * @example\r\n *\r\n * XRegExp.isRegExp('string'); // -> false\r\n * XRegExp.isRegExp(/regex/i); // -> true\r\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\r\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\r\n */\r\nXRegExp.isRegExp = function(value) {\r\n    return toString.call(value) === '[object RegExp]';\r\n    //return isType(value, 'RegExp');\r\n};\r\n\r\n/**\r\n * Returns the first matched string, or in global mode, an array containing all matched strings.\r\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\r\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\r\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\r\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\r\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\r\n *   `scope` is 'all'.\r\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\r\n *   mode: Array of all matched strings, or an empty array.\r\n * @example\r\n *\r\n * // Match first\r\n * XRegExp.match('abc', /\\w/); // -> 'a'\r\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\r\n * XRegExp.match('abc', /x/g, 'one'); // -> null\r\n *\r\n * // Match all\r\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\r\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\r\n * XRegExp.match('abc', /x/, 'all'); // -> []\r\n */\r\nXRegExp.match = function(str, regex, scope) {\r\n    var global = (regex.global && scope !== 'one') || scope === 'all';\r\n    var cacheKey = ((global ? 'g' : '') + (regex.sticky ? 'y' : '')) || 'noGY';\r\n    var result;\r\n    var r2;\r\n\r\n    regex[REGEX_DATA] = regex[REGEX_DATA] || {};\r\n\r\n    // Shares cached copies with `XRegExp.exec`/`replace`\r\n    r2 = regex[REGEX_DATA][cacheKey] || (\r\n        regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\r\n            addG: !!global,\r\n            removeG: scope === 'one',\r\n            isInternalOnly: true\r\n        })\r\n    );\r\n\r\n    result = nativ.match.call(toObject(str), r2);\r\n\r\n    if (regex.global) {\r\n        regex.lastIndex = (\r\n            (scope === 'one' && result) ?\r\n                // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\r\n                (result.index + result[0].length) : 0\r\n        );\r\n    }\r\n\r\n    return global ? (result || []) : (result && result[0]);\r\n};\r\n\r\n/**\r\n * Retrieves the matches from searching a string using a chain of regexes that successively search\r\n * within previous matches. The provided `chain` array can contain regexes and or objects with\r\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\r\n * backreference is passed forward to the next regex or returned.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {Array} chain Regexes that each search for matches within preceding results.\r\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\r\n * @example\r\n *\r\n * // Basic usage; matches numbers within <b> tags\r\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\r\n *   XRegExp('(?is)<b>.*?</b>'),\r\n *   /\\d+/\r\n * ]);\r\n * // -> ['2', '4', '56']\r\n *\r\n * // Passing forward and returning specific backreferences\r\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\r\n *         <a href=\"http://www.google.com/\">Google</a>';\r\n * XRegExp.matchChain(html, [\r\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\r\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\r\n * ]);\r\n * // -> ['xregexp.com', 'www.google.com']\r\n */\r\nXRegExp.matchChain = function(str, chain) {\r\n    return (function recurseChain(values, level) {\r\n        var item = chain[level].regex ? chain[level] : {regex: chain[level]};\r\n        var matches = [];\r\n\r\n        function addMatch(match) {\r\n            if (item.backref) {\r\n                // Safari 4.0.5 (but not 5.0.5+) inappropriately uses sparse arrays to hold the\r\n                // `undefined`s for backreferences to nonparticipating capturing groups. In such\r\n                // cases, a `hasOwnProperty` or `in` check on its own would inappropriately throw\r\n                // the exception, so also check if the backreference is a number that is within the\r\n                // bounds of the array.\r\n                if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {\r\n                    throw new ReferenceError('Backreference to undefined group: ' + item.backref);\r\n                }\r\n\r\n                matches.push(match[item.backref] || '');\r\n            } else {\r\n                matches.push(match[0]);\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < values.length; ++i) {\r\n            XRegExp.forEach(values[i], item.regex, addMatch);\r\n        }\r\n\r\n        return ((level === chain.length - 1) || !matches.length) ?\r\n            matches :\r\n            recurseChain(matches, level + 1);\r\n    }([str], 0));\r\n};\r\n\r\n/**\r\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\r\n * or regex, and the replacement can be a string or a function to be called for each match. To\r\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\r\n * a regex. Replacement strings can use `${n}` for named and numbered backreferences. Replacement\r\n * functions can use named backreferences via `arguments[0].name`. Also fixes browser bugs compared\r\n * to the native `String.prototype.replace` and can be used reliably cross-browser.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp|String} search Search pattern to be replaced.\r\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n *   Replacement strings can include special replacement syntax:\r\n *     - $$ - Inserts a literal $ character.\r\n *     - $&, $0 - Inserts the matched substring.\r\n *     - $` - Inserts the string that precedes the matched substring (left context).\r\n *     - $' - Inserts the string that follows the matched substring (right context).\r\n *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\r\n *       backreference n/nn.\r\n *     - ${n} - Where n is a name or any number of digits that reference an existent capturing\r\n *       group, inserts backreference n.\r\n *   Replacement functions are invoked with three or more arguments:\r\n *     - The matched substring (corresponds to $& above). Named backreferences are accessible as\r\n *       properties of this first argument.\r\n *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\r\n *     - The zero-based index of the match within the total search string.\r\n *     - The total string being searched.\r\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\r\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\r\n * @returns {String} New string with one or all matches replaced.\r\n * @example\r\n *\r\n * // Regex search, using named backreferences in replacement string\r\n * var name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\r\n * XRegExp.replace('John Smith', name, '${last}, ${first}');\r\n * // -> 'Smith, John'\r\n *\r\n * // Regex search, using named backreferences in replacement function\r\n * XRegExp.replace('John Smith', name, function(match) {\r\n *   return match.last + ', ' + match.first;\r\n * });\r\n * // -> 'Smith, John'\r\n *\r\n * // String search, with replace-all\r\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\r\n * // -> 'XRegExp builds XRegExps'\r\n */\r\nXRegExp.replace = function(str, search, replacement, scope) {\r\n    var isRegex = XRegExp.isRegExp(search);\r\n    var global = (search.global && scope !== 'one') || scope === 'all';\r\n    var cacheKey = ((global ? 'g' : '') + (search.sticky ? 'y' : '')) || 'noGY';\r\n    var s2 = search;\r\n    var result;\r\n\r\n    if (isRegex) {\r\n        search[REGEX_DATA] = search[REGEX_DATA] || {};\r\n\r\n        // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\r\n        // `lastIndex` isn't updated *during* replacement iterations\r\n        s2 = search[REGEX_DATA][cacheKey] || (\r\n            search[REGEX_DATA][cacheKey] = copyRegex(search, {\r\n                addG: !!global,\r\n                removeG: scope === 'one',\r\n                isInternalOnly: true\r\n            })\r\n        );\r\n    } else if (global) {\r\n        s2 = new RegExp(XRegExp.escape(String(search)), 'g');\r\n    }\r\n\r\n    // Fixed `replace` required for named backreferences, etc.\r\n    result = fixed.replace.call(toObject(str), s2, replacement);\r\n\r\n    if (isRegex && search.global) {\r\n        // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\r\n        search.lastIndex = 0;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\r\n * array of replacement details. Later replacements operate on the output of earlier replacements.\r\n * Replacement details are accepted as an array with a regex or string to search for, the\r\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\r\n * replacement text syntax, which supports named backreference properties via `${name}`.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {Array} replacements Array of replacement detail arrays.\r\n * @returns {String} New string with all replacements.\r\n * @example\r\n *\r\n * str = XRegExp.replaceEach(str, [\r\n *   [XRegExp('(?<name>a)'), 'z${name}'],\r\n *   [/b/gi, 'y'],\r\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\r\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\r\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\r\n *   [/f/g, function($0) {\r\n *     return $0.toUpperCase();\r\n *   }]\r\n * ]);\r\n */\r\nXRegExp.replaceEach = function(str, replacements) {\r\n    var i;\r\n    var r;\r\n\r\n    for (i = 0; i < replacements.length; ++i) {\r\n        r = replacements[i];\r\n        str = XRegExp.replace(str, r[0], r[1], r[2]);\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\n/**\r\n * Splits a string into an array of strings using a regex or string separator. Matches of the\r\n * separator are not included in the result array. However, if `separator` is a regex that contains\r\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\r\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\r\n * cross-browser.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to split.\r\n * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n * @param {Number} [limit] Maximum number of items to include in the result array.\r\n * @returns {Array} Array of substrings.\r\n * @example\r\n *\r\n * // Basic use\r\n * XRegExp.split('a b c', ' ');\r\n * // -> ['a', 'b', 'c']\r\n *\r\n * // With limit\r\n * XRegExp.split('a b c', ' ', 2);\r\n * // -> ['a', 'b']\r\n *\r\n * // Backreferences in result array\r\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\r\n * // -> ['..', 'word', '1', '..']\r\n */\r\nXRegExp.split = function(str, separator, limit) {\r\n    return fixed.split.call(toObject(str), separator, limit);\r\n};\r\n\r\n/**\r\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\r\n * `sticky` arguments specify the search start position, and whether the match must start at the\r\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\r\n * updated for compatibility. Also fixes browser bugs compared to the native\r\n * `RegExp.prototype.test` and can be used reliably cross-browser.\r\n *\r\n * @memberOf XRegExp\r\n * @param {String} str String to search.\r\n * @param {RegExp} regex Regex to search with.\r\n * @param {Number} [pos=0] Zero-based index at which to start the search.\r\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\r\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n * @example\r\n *\r\n * // Basic use\r\n * XRegExp.test('abc', /c/); // -> true\r\n *\r\n * // With pos and sticky\r\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\r\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\r\n */\r\nXRegExp.test = function(str, regex, pos, sticky) {\r\n    // Do this the easy way :-)\r\n    return !!XRegExp.exec(str, regex, pos, sticky);\r\n};\r\n\r\n/**\r\n * Uninstalls optional features according to the specified options. All optional features start out\r\n * uninstalled, so this is used to undo the actions of `XRegExp.install`.\r\n *\r\n * @memberOf XRegExp\r\n * @param {Object|String} options Options object or string.\r\n * @example\r\n *\r\n * // With an options object\r\n * XRegExp.uninstall({\r\n *   // Disables support for astral code points in Unicode addons\r\n *   astral: true,\r\n *\r\n *   // DEPRECATED: Restores native regex methods\r\n *   natives: true\r\n * });\r\n *\r\n * // With an options string\r\n * XRegExp.uninstall('astral natives');\r\n */\r\nXRegExp.uninstall = function(options) {\r\n    options = prepareOptions(options);\r\n\r\n    if (features.astral && options.astral) {\r\n        setAstral(false);\r\n    }\r\n\r\n    if (features.natives && options.natives) {\r\n        setNatives(false);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\r\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\r\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\r\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\r\n * `flags` argument.\r\n *\r\n * @memberOf XRegExp\r\n * @param {Array} patterns Regexes and strings to combine.\r\n * @param {String} [flags] Any combination of XRegExp flags.\r\n * @param {Object} [options] Options object with optional properties:\r\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\r\n * @returns {RegExp} Union of the provided regexes and strings.\r\n * @example\r\n *\r\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\r\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\r\n *\r\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\r\n * // -> /manbearpig/i\r\n */\r\nXRegExp.union = function(patterns, flags, options) {\r\n    options = options || {};\r\n    var conjunction = options.conjunction || 'or';\r\n    var numCaptures = 0;\r\n    var numPriorCaptures;\r\n    var captureNames;\r\n\r\n    function rewrite(match, paren, backref) {\r\n        var name = captureNames[numCaptures - numPriorCaptures];\r\n\r\n        // Capturing group\r\n        if (paren) {\r\n            ++numCaptures;\r\n            // If the current capture has a name, preserve the name\r\n            if (name) {\r\n                return '(?<' + name + '>';\r\n            }\r\n        // Backreference\r\n        } else if (backref) {\r\n            // Rewrite the backreference\r\n            return '\\\\' + (+backref + numPriorCaptures);\r\n        }\r\n\r\n        return match;\r\n    }\r\n\r\n    if (!(isType(patterns, 'Array') && patterns.length)) {\r\n        throw new TypeError('Must provide a nonempty array of patterns to merge');\r\n    }\r\n\r\n    var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\r\n    var output = [];\r\n    var pattern;\r\n    for (var i = 0; i < patterns.length; ++i) {\r\n        pattern = patterns[i];\r\n\r\n        if (XRegExp.isRegExp(pattern)) {\r\n            numPriorCaptures = numCaptures;\r\n            captureNames = (pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames) || [];\r\n\r\n            // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\r\n            // independently valid; helps keep this simple. Named captures are put back\r\n            output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));\r\n        } else {\r\n            output.push(XRegExp.escape(pattern));\r\n        }\r\n    }\r\n\r\n    var separator = conjunction === 'none' ? '' : '|';\r\n    return XRegExp(output.join(separator), flags);\r\n};\r\n\r\n// ==--------------------------==\r\n// Fixed/extended native methods\r\n// ==--------------------------==\r\n\r\n/**\r\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n * bugs in the native `RegExp.prototype.exec`. Calling `XRegExp.install('natives')` uses this to\r\n * override the native method. Use via `XRegExp.exec` without overriding natives.\r\n *\r\n * @memberOf RegExp\r\n * @param {String} str String to search.\r\n * @returns {Array} Match array with named backreference properties, or `null`.\r\n */\r\nfixed.exec = function(str) {\r\n    var origLastIndex = this.lastIndex;\r\n    var match = nativ.exec.apply(this, arguments);\r\n    var name;\r\n    var r2;\r\n    var i;\r\n\r\n    if (match) {\r\n        // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\r\n        // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\r\n        // in standards mode follows the spec.\r\n        if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {\r\n            r2 = copyRegex(this, {\r\n                removeG: true,\r\n                isInternalOnly: true\r\n            });\r\n            // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\r\n            // matching due to characters outside the match\r\n            nativ.replace.call(String(str).slice(match.index), r2, function() {\r\n                var len = arguments.length;\r\n                var i;\r\n                // Skip index 0 and the last 2\r\n                for (i = 1; i < len - 2; ++i) {\r\n                    if (arguments[i] === undefined) {\r\n                        match[i] = undefined;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Attach named capture properties\r\n        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\r\n            // Skip index 0\r\n            for (i = 1; i < match.length; ++i) {\r\n                name = this[REGEX_DATA].captureNames[i - 1];\r\n                if (name) {\r\n                    match[name] = match[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Fix browsers that increment `lastIndex` after zero-length matches\r\n        if (this.global && !match[0].length && (this.lastIndex > match.index)) {\r\n            this.lastIndex = match.index;\r\n        }\r\n    }\r\n\r\n    if (!this.global) {\r\n        // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\r\n        this.lastIndex = origLastIndex;\r\n    }\r\n\r\n    return match;\r\n};\r\n\r\n/**\r\n * Fixes browser bugs in the native `RegExp.prototype.test`. Calling `XRegExp.install('natives')`\r\n * uses this to override the native method.\r\n *\r\n * @memberOf RegExp\r\n * @param {String} str String to search.\r\n * @returns {Boolean} Whether the regex matched the provided value.\r\n */\r\nfixed.test = function(str) {\r\n    // Do this the easy way :-)\r\n    return !!fixed.exec.call(this, str);\r\n};\r\n\r\n/**\r\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\r\n * bugs in the native `String.prototype.match`. Calling `XRegExp.install('natives')` uses this to\r\n * override the native method.\r\n *\r\n * @memberOf String\r\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\r\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\r\n *   the result of calling `regex.exec(this)`.\r\n */\r\nfixed.match = function(regex) {\r\n    var result;\r\n\r\n    if (!XRegExp.isRegExp(regex)) {\r\n        // Use the native `RegExp` rather than `XRegExp`\r\n        regex = new RegExp(regex);\r\n    } else if (regex.global) {\r\n        result = nativ.match.apply(this, arguments);\r\n        // Fixes IE bug\r\n        regex.lastIndex = 0;\r\n\r\n        return result;\r\n    }\r\n\r\n    return fixed.exec.call(regex, toObject(this));\r\n};\r\n\r\n/**\r\n * Adds support for `${n}` tokens for named and numbered backreferences in replacement text, and\r\n * provides named backreferences to replacement functions as `arguments[0].name`. Also fixes browser\r\n * bugs in replacement text syntax when performing a replacement using a nonregex search value, and\r\n * the value of a replacement regex's `lastIndex` property during replacement iterations and upon\r\n * completion. Calling `XRegExp.install('natives')` uses this to override the native method. Note\r\n * that this doesn't support SpiderMonkey's proprietary third (`flags`) argument. Use via\r\n * `XRegExp.replace` without overriding natives.\r\n *\r\n * @memberOf String\r\n * @param {RegExp|String} search Search pattern to be replaced.\r\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\r\n * @returns {String} New string with one or all matches replaced.\r\n */\r\nfixed.replace = function(search, replacement) {\r\n    var isRegex = XRegExp.isRegExp(search);\r\n    var origLastIndex;\r\n    var captureNames;\r\n    var result;\r\n\r\n    if (isRegex) {\r\n        if (search[REGEX_DATA]) {\r\n            captureNames = search[REGEX_DATA].captureNames;\r\n        }\r\n        // Only needed if `search` is nonglobal\r\n        origLastIndex = search.lastIndex;\r\n    } else {\r\n        search += ''; // Type-convert\r\n    }\r\n\r\n    // Don't use `typeof`; some older browsers return 'function' for regex objects\r\n    if (isType(replacement, 'Function')) {\r\n        // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\r\n        // functions isn't type-converted to a string\r\n        result = nativ.replace.call(String(this), search, function() {\r\n            var args = arguments;\r\n            var i;\r\n            if (captureNames) {\r\n                // Change the `arguments[0]` string primitive to a `String` object that can store\r\n                // properties. This really does need to use `String` as a constructor\r\n                args[0] = new String(args[0]);\r\n                // Store named backreferences on the first argument\r\n                for (i = 0; i < captureNames.length; ++i) {\r\n                    if (captureNames[i]) {\r\n                        args[0][captureNames[i]] = args[i + 1];\r\n                    }\r\n                }\r\n            }\r\n            // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari\r\n            // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\r\n            if (isRegex && search.global) {\r\n                search.lastIndex = args[args.length - 2] + args[0].length;\r\n            }\r\n            // ES6 specs the context for replacement functions as `undefined`\r\n            return replacement.apply(undefined, args);\r\n        });\r\n    } else {\r\n        // Ensure that the last value of `args` will be a string when given nonstring `this`,\r\n        // while still throwing on null or undefined context\r\n        result = nativ.replace.call(this == null ? this : String(this), search, function() {\r\n            // Keep this function's `arguments` available through closure\r\n            var args = arguments;\r\n            return nativ.replace.call(String(replacement), replacementToken, function($0, $1, $2) {\r\n                var n;\r\n                // Named or numbered backreference with curly braces\r\n                if ($1) {\r\n                    // XRegExp behavior for `${n}`:\r\n                    // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the\r\n                    //    entire match. Any number of leading zeros may be used.\r\n                    // 2. Backreference to named capture `n`, if it exists and is not an integer\r\n                    //    overridden by numbered capture. In practice, this does not overlap with\r\n                    //    numbered capture since XRegExp does not allow named capture to use a bare\r\n                    //    integer as the name.\r\n                    // 3. If the name or number does not refer to an existing capturing group, it's\r\n                    //    an error.\r\n                    n = +$1; // Type-convert; drop leading zeros\r\n                    if (n <= args.length - 3) {\r\n                        return args[n] || '';\r\n                    }\r\n                    // Groups with the same name is an error, else would need `lastIndexOf`\r\n                    n = captureNames ? indexOf(captureNames, $1) : -1;\r\n                    if (n < 0) {\r\n                        throw new SyntaxError('Backreference to undefined group ' + $0);\r\n                    }\r\n                    return args[n + 1] || '';\r\n                }\r\n                // Else, special variable or numbered backreference without curly braces\r\n                if ($2 === '$') { // $$\r\n                    return '$';\r\n                }\r\n                if ($2 === '&' || +$2 === 0) { // $&, $0 (not followed by 1-9), $00\r\n                    return args[0];\r\n                }\r\n                if ($2 === '`') { // $` (left context)\r\n                    return args[args.length - 1].slice(0, args[args.length - 2]);\r\n                }\r\n                if ($2 === \"'\") { // $' (right context)\r\n                    return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\r\n                }\r\n                // Else, numbered backreference without curly braces\r\n                $2 = +$2; // Type-convert; drop leading zero\r\n                // XRegExp behavior for `$n` and `$nn`:\r\n                // - Backrefs end after 1 or 2 digits. Use `${..}` for more digits.\r\n                // - `$1` is an error if no capturing groups.\r\n                // - `$10` is an error if less than 10 capturing groups. Use `${1}0` instead.\r\n                // - `$01` is `$1` if at least one capturing group, else it's an error.\r\n                // - `$0` (not followed by 1-9) and `$00` are the entire match.\r\n                // Native behavior, for comparison:\r\n                // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\r\n                // - `$1` is a literal `$1` if no capturing groups.\r\n                // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\r\n                // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\r\n                // - `$0` is a literal `$0`.\r\n                if (!isNaN($2)) {\r\n                    if ($2 > args.length - 3) {\r\n                        throw new SyntaxError('Backreference to undefined group ' + $0);\r\n                    }\r\n                    return args[$2] || '';\r\n                }\r\n                // `$` followed by an unsupported char is an error, unlike native JS\r\n                throw new SyntaxError('Invalid token ' + $0);\r\n            });\r\n        });\r\n    }\r\n\r\n    if (isRegex) {\r\n        if (search.global) {\r\n            // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\r\n            search.lastIndex = 0;\r\n        } else {\r\n            // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\r\n            search.lastIndex = origLastIndex;\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install('natives')`\r\n * uses this to override the native method. Use via `XRegExp.split` without overriding natives.\r\n *\r\n * @memberOf String\r\n * @param {RegExp|String} separator Regex or string to use for separating the string.\r\n * @param {Number} [limit] Maximum number of items to include in the result array.\r\n * @returns {Array} Array of substrings.\r\n */\r\nfixed.split = function(separator, limit) {\r\n    if (!XRegExp.isRegExp(separator)) {\r\n        // Browsers handle nonregex split correctly, so use the faster native method\r\n        return nativ.split.apply(this, arguments);\r\n    }\r\n\r\n    var str = String(this);\r\n    var output = [];\r\n    var origLastIndex = separator.lastIndex;\r\n    var lastLastIndex = 0;\r\n    var lastLength;\r\n\r\n    // Values for `limit`, per the spec:\r\n    // If undefined: pow(2,32) - 1\r\n    // If 0, Infinity, or NaN: 0\r\n    // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\r\n    // If negative number: pow(2,32) - floor(abs(limit))\r\n    // If other: Type-convert, then use the above rules\r\n    // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\r\n    // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\r\n    limit = (limit === undefined ? -1 : limit) >>> 0;\r\n\r\n    XRegExp.forEach(str, separator, function(match) {\r\n        // This condition is not the same as `if (match[0].length)`\r\n        if ((match.index + match[0].length) > lastLastIndex) {\r\n            output.push(str.slice(lastLastIndex, match.index));\r\n            if (match.length > 1 && match.index < str.length) {\r\n                Array.prototype.push.apply(output, match.slice(1));\r\n            }\r\n            lastLength = match[0].length;\r\n            lastLastIndex = match.index + lastLength;\r\n        }\r\n    });\r\n\r\n    if (lastLastIndex === str.length) {\r\n        if (!nativ.test.call(separator, '') || lastLength) {\r\n            output.push('');\r\n        }\r\n    } else {\r\n        output.push(str.slice(lastLastIndex));\r\n    }\r\n\r\n    separator.lastIndex = origLastIndex;\r\n    return output.length > limit ? output.slice(0, limit) : output;\r\n};\r\n\r\n// ==--------------------------==\r\n// Built-in syntax/flag tokens\r\n// ==--------------------------==\r\n\r\n/*\r\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\r\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\r\n * consistency and to reserve their syntax, but lets them be superseded by addons.\r\n */\r\nXRegExp.addToken(\r\n    /\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/,\r\n    function(match, scope) {\r\n        // \\B is allowed in default scope only\r\n        if (match[1] === 'B' && scope === defaultScope) {\r\n            return match[0];\r\n        }\r\n        throw new SyntaxError('Invalid escape ' + match[0]);\r\n    },\r\n    {\r\n        scope: 'all',\r\n        leadChar: '\\\\'\r\n    }\r\n);\r\n\r\n/*\r\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\r\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\r\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\r\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\r\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\r\n * if you use the same in a character class.\r\n */\r\nXRegExp.addToken(\r\n    /\\\\u{([\\dA-Fa-f]+)}/,\r\n    function(match, scope, flags) {\r\n        var code = dec(match[1]);\r\n        if (code > 0x10FFFF) {\r\n            throw new SyntaxError('Invalid Unicode code point ' + match[0]);\r\n        }\r\n        if (code <= 0xFFFF) {\r\n            // Converting to \\uNNNN avoids needing to escape the literal character and keep it\r\n            // separate from preceding tokens\r\n            return '\\\\u' + pad4(hex(code));\r\n        }\r\n        // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\r\n        if (hasNativeU && flags.indexOf('u') > -1) {\r\n            return match[0];\r\n        }\r\n        throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\r\n    },\r\n    {\r\n        scope: 'all',\r\n        leadChar: '\\\\'\r\n    }\r\n);\r\n\r\n/*\r\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\r\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\r\n * character class endings can't be determined.\r\n */\r\nXRegExp.addToken(\r\n    /\\[(\\^?)\\]/,\r\n    function(match) {\r\n        // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\r\n        // (?!) should work like \\b\\B, but is unreliable in some versions of Firefox\r\n        return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';\r\n    },\r\n    {leadChar: '['}\r\n);\r\n\r\n/*\r\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\r\n * free-spacing mode (flag x).\r\n */\r\nXRegExp.addToken(\r\n    /\\(\\?#[^)]*\\)/,\r\n    getContextualTokenSeparator,\r\n    {leadChar: '('}\r\n);\r\n\r\n/*\r\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\r\n */\r\nXRegExp.addToken(\r\n    /\\s+|#[^\\n]*\\n?/,\r\n    getContextualTokenSeparator,\r\n    {flag: 'x'}\r\n);\r\n\r\n/*\r\n * Dot, in dotall mode (aka singleline mode, flag s) only.\r\n */\r\nXRegExp.addToken(\r\n    /\\./,\r\n    function() {\r\n        return '[\\\\s\\\\S]';\r\n    },\r\n    {\r\n        flag: 's',\r\n        leadChar: '.'\r\n    }\r\n);\r\n\r\n/*\r\n * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\r\n * and $ only. Also allows numbered backreferences as `\\k<n>`.\r\n */\r\nXRegExp.addToken(\r\n    /\\\\k<([\\w$]+)>/,\r\n    function(match) {\r\n        // Groups with the same name is an error, else would need `lastIndexOf`\r\n        var index = isNaN(match[1]) ? (indexOf(this.captureNames, match[1]) + 1) : +match[1];\r\n        var endIndex = match.index + match[0].length;\r\n        if (!index || index > this.captureNames.length) {\r\n            throw new SyntaxError('Backreference to undefined group ' + match[0]);\r\n        }\r\n        // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\r\n        // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.\r\n        return '\\\\' + index + (\r\n            endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ?\r\n                '' : '(?:)'\r\n        );\r\n    },\r\n    {leadChar: '\\\\'}\r\n);\r\n\r\n/*\r\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\r\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\r\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\r\n */\r\nXRegExp.addToken(\r\n    /\\\\(\\d+)/,\r\n    function(match, scope) {\r\n        if (\r\n            !(\r\n                scope === defaultScope &&\r\n                /^[1-9]/.test(match[1]) &&\r\n                +match[1] <= this.captureNames.length\r\n            ) &&\r\n            match[1] !== '0'\r\n        ) {\r\n            throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' +\r\n                match[0]);\r\n        }\r\n        return match[0];\r\n    },\r\n    {\r\n        scope: 'all',\r\n        leadChar: '\\\\'\r\n    }\r\n);\r\n\r\n/*\r\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\r\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\r\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\r\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\r\n * Python-style named capture as octals.\r\n */\r\nXRegExp.addToken(\r\n    /\\(\\?P?<([\\w$]+)>/,\r\n    function(match) {\r\n        // Disallow bare integers as names because named backreferences are added to match arrays\r\n        // and therefore numeric properties may lead to incorrect lookups\r\n        if (!isNaN(match[1])) {\r\n            throw new SyntaxError('Cannot use integer as capture name ' + match[0]);\r\n        }\r\n        if (match[1] === 'length' || match[1] === '__proto__') {\r\n            throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);\r\n        }\r\n        if (indexOf(this.captureNames, match[1]) > -1) {\r\n            throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);\r\n        }\r\n        this.captureNames.push(match[1]);\r\n        this.hasNamedCapture = true;\r\n        return '(';\r\n    },\r\n    {leadChar: '('}\r\n);\r\n\r\n/*\r\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\r\n * groups. Also adds explicit capture mode (flag n).\r\n */\r\nXRegExp.addToken(\r\n    /\\((?!\\?)/,\r\n    function(match, scope, flags) {\r\n        if (flags.indexOf('n') > -1) {\r\n            return '(?:';\r\n        }\r\n        this.captureNames.push(null);\r\n        return '(';\r\n    },\r\n    {\r\n        optionalFlags: 'n',\r\n        leadChar: '('\r\n    }\r\n);\r\n\r\nmodule.exports = XRegExp;\r\n\n},{}]},{},[8])(8)\n});","import * as XRegExp from \"xregexp\";\n\nexport class FormatUtility {\n    static preProcess(query: string, toLower: boolean = true): string {\n        if (toLower) {\n            query = query.toLowerCase()\n        }\n\n        return query\n            .replace(/０/g, \"0\")\n            .replace(/１/g, \"1\")\n            .replace(/２/g, \"2\")\n            .replace(/３/g, \"3\")\n            .replace(/４/g, \"4\")\n            .replace(/５/g, \"5\")\n            .replace(/６/g, \"6\")\n            .replace(/７/g, \"7\")\n            .replace(/８/g, \"8\")\n            .replace(/９/g, \"9\")\n            .replace(/：/g, \":\")\n            .replace(/－/g, \"-\")\n            .replace(/，/g, \",\")\n            .replace(/／/g, \"/\")\n            .replace(/Ｇ/g, \"G\")\n            .replace(/Ｍ/g, \"M\")\n            .replace(/Ｔ/g, \"T\")\n            .replace(/Ｋ/g, \"K\")\n            .replace(/ｋ/g, \"k\")\n            .replace(/．/g, \".\")\n            .replace(/（/g, \"(\")\n            .replace(/）/g, \")\")\n    }\n}\n\nexport class Match {\n    constructor(index: number, length: number, value: string, groups) {\n        this.index = index;\n        this.length = length;\n        this.value = value;\n        this.innerGroups = groups;\n    }\n\n    index: number;\n    length: number;\n    value: string;\n    private innerGroups: { [id: string]: { value: string, index: number, length: number, captures: string[] } };\n\n    groups(key: string): { value: string, index: number, length: number, captures: string[] } {\n        return this.innerGroups[key] ? this.innerGroups[key] : { value: '', index: 0, length: 0, captures: [] };\n    }\n}\n\nexport class RegExpUtility {\n    static getMatches(regex: RegExp, source: string): Array<Match> {\n        if (!regex) return [];\n        let rawRegex: string = (regex as any).xregexp.source;\n        if (!rawRegex.includes('(?<nlb__')) {\n            return this.getMatchesSimple(regex, source);\n        }\n        let realMatches = new Array<Match>();\n\n        let negativeLookbehindRegexes = new Array<RegExp>();\n\n        let closePos = 0;\n        let startPos = rawRegex.indexOf('(?<nlb__', 0);\n        while (startPos >= 0) {\n            closePos = this.getClosePos(rawRegex, startPos);\n            let nlbRegex = XRegExp(rawRegex.substring(startPos, closePos + 1), 'gis');\n            let nextRegex = RegExpUtility.getNextRegex(rawRegex, startPos);\n            (nlbRegex as any).nextRegex = nextRegex ? XRegExp(nextRegex, 'gis') : null;\n            negativeLookbehindRegexes.push(nlbRegex);\n            rawRegex = rawRegex.substr(0, startPos) + rawRegex.substr(closePos + 1);\n            startPos = rawRegex.indexOf('(?<nlb__', 0);\n        }\n\n        let tempRegex = XRegExp(rawRegex, 'gis');\n        let tempMatches = RegExpUtility.getMatchesSimple(tempRegex, source);\n        tempMatches.forEach(match => {\n            let clean = true;\n            negativeLookbehindRegexes.forEach(regex => {\n                let negativeLookbehindMatches = RegExpUtility.getMatchesSimple(regex, source);\n                negativeLookbehindMatches.forEach(negativeLookbehindMatch => {\n                    let negativeLookbehindEnd = negativeLookbehindMatch.index + negativeLookbehindMatch.length;\n                    let nextRegex = (regex as any).nextRegex;\n                    if (match.index === negativeLookbehindEnd) {\n                        if (!nextRegex) {\n                            clean = false;\n                            return;\n                        } else {\n                            let nextMatch = RegExpUtility.getFirstMatchIndex(nextRegex, source.substring(negativeLookbehindMatch.index));\n                            if (nextMatch.matched && ((nextMatch.index === negativeLookbehindMatch.length) || (source.includes(nextMatch.value + match.value)))) {\n                                clean = false;\n                                return;\n                            }\n                        }\n                    }\n                    if (negativeLookbehindMatch.value.includes(match.value)) {\n                        let preMatches = RegExpUtility.getMatchesSimple(regex, source.substring(0, match.index));\n                        preMatches.forEach(preMatch => {\n                            if (source.includes(preMatch.value + match.value)) {\n                                clean = false;\n                                return;\n                            }\n                        });\n                    }\n                });\n                if (!clean) {\n                    return;\n                }\n            });\n            if (clean) {\n                realMatches.push(match);\n            }\n        });\n\n        return realMatches;\n    }\n\n    static getMatchesSimple(regex: RegExp, source: string): Array<Match> {\n\n        // Word boundary (\\b) in JS is not unicode-aware, so words starting/ending with accentuated characters will not match\n        // use a normalized string to match, the return matches' values using the original one\n        // http://blog.stevenlevithan.com/archives/javascript-regex-and-unicode\n        // https://stackoverflow.com/questions/2881445/utf-8-word-boundary-regex-in-javascript\n        let normalized = StringUtility.removeDiacriticsFromWordBoundaries(source);\n\n        let matches = new Array<Match>();\n        XRegExp.forEach(normalized, regex, match => {\n            let positiveLookbehinds = [];\n            let groups: { [id: string]: { value: string, index: number, length: number, captures: string[] } } = {};\n            let lastGroup = '';\n\n            Object.keys(match).forEach(key => {\n                if (!key.includes('__')) return;\n                if (key.startsWith('plb') && match[key]) {\n                    if (match[0].indexOf(match[key]) !== 0 && !StringUtility.isNullOrEmpty(lastGroup)) {\n                        let index = match.index + match[0].indexOf(match[key]);\n                        let length = match[key].length;\n                        let value = source.substr(index, length);\n\n                        groups[lastGroup].value = groups[lastGroup].value + value;\n                    }\n                    positiveLookbehinds.push({ key: key, value: match[key] });\n                    return;\n                }\n                if (key.startsWith('nlb')) {\n                    return;\n                }\n\n                let groupKey = key.substr(0, key.lastIndexOf('__'));\n                lastGroup = groupKey;\n\n                if (!groups[groupKey]) groups[groupKey] = { value: '', index: 0, length: 0, captures: [] };\n\n                if (match[key]) {\n                    let index = match.index + match[0].indexOf(match[key]);\n                    let length = match[key].length;\n                    let value = source.substr(index, length);\n                    groups[groupKey].index = index;\n                    groups[groupKey].length = length;\n                    groups[groupKey].value = value;\n                    groups[groupKey].captures.push(value);\n                }\n            });\n\n            let value = match[0];\n            let index = match.index;\n            let length = value.length;\n\n            if (positiveLookbehinds && positiveLookbehinds.length > 0 && value.indexOf(positiveLookbehinds[0].value) === 0) {\n                value = source.substr(index, length).substr(positiveLookbehinds[0].value.length)\n                index += positiveLookbehinds[0].value.length\n                length -= positiveLookbehinds[0].value.length\n            } else {\n                value = source.substr(index, length);\n            }\n\n            matches.push(new Match(index, length, value, groups));\n        });\n\n        return matches;\n    }\n\n    static getSafeRegExp(source: string, flags?: string): RegExp {\n        let sanitizedSource = this.sanitizeGroups(source);\n        return XRegExp(sanitizedSource, flags || 'gis');\n    }\n\n    static getFirstMatchIndex(regex: RegExp, source: string): { matched: boolean; index: number; value: string; } {\n        let matches = RegExpUtility.getMatches(regex, source);\n        if (matches.length) {\n            return {\n                matched: true,\n                index: matches[0].index,\n                value: matches[0].value\n            };\n        }\n\n        return { matched: false, index: -1, value: null };\n    }\n\n    static split(regex: RegExp, source: string): string[] {\n        return XRegExp.split(source, regex);\n    }\n\n    static isMatch(regex: RegExp, source: string): boolean {\n        return !StringUtility.isNullOrEmpty(source)\n            && this.getMatches(regex, source).length > 0;\n    }\n\n    private static matchGroup = XRegExp(String.raw`\\?<(?<name>\\w+)>`, 'gis');\n    private static matchPositiveLookbehind = XRegExp(String.raw`\\(\\?<=`, 'gis');\n    private static matchNegativeLookbehind = XRegExp(String.raw`\\(\\?<!`, 'gis');\n\n    private static sanitizeGroups(source: string): string {\n        let index = 0;\n        let result = XRegExp.replace(source, this.matchGroup, (match, name) => match.replace(name, `${name}__${index++}`));\n        index = 0;\n        result = XRegExp.replace(result, this.matchPositiveLookbehind, () => `(?<plb__${index++}>`);\n        index = 0;\n        result = XRegExp.replace(result, this.matchNegativeLookbehind, () => `(?<nlb__${index++}>`);\n        return result;\n    }\n\n    private static getNextRegex(source: string, startPos: number) {\n        startPos = RegExpUtility.getClosePos(source, startPos) + 1;\n        let closePos = RegExpUtility.getClosePos(source, startPos);\n        if (source[startPos] !== '(') {\n            closePos--;\n        }\n\n        let next = (startPos === closePos)\n            ? null\n            : source.substring(startPos, closePos + 1);\n\n        return next;\n    }\n\n    private static getClosePos(source: string, startPos: number): number {\n        let counter = 1;\n        let closePos = startPos;\n        while (counter > 0 && closePos < source.length) {\n            let c = source[++closePos];\n            if (c === '(') counter++;\n            else if (c === ')') counter--;\n        }\n        return closePos;\n    }\n}\n\n\n\nexport class StringUtility {\n    static isNullOrWhitespace(input: string): boolean {\n        return !input || !input.trim();\n    }\n\n    static isNullOrEmpty(input: string): boolean {\n        return !input || input === '';\n    }\n\n    static isWhitespace(input: string): boolean {\n        return input && input !== '' && !input.trim();\n    }\n\n    static insertInto(input: string, value: string, index: number): string {\n        return input.substr(0, index) + value + input.substr(index);\n    }\n\n    static removeDiacriticsFromWordBoundaries(input: string) {\n        return input\n            .split(' ')\n            .map((s) => {\n                let length = s.length;\n                if (length === 0) return s;\n                let first =  StringUtility.removeDiacritics(s.substring(0, 1));\n                if(length === 1) return first;\n                let last = length > 1 ? StringUtility.removeDiacritics(s.substring(length - 1)) : '';\n                let mid = s.substring(1, length - 1);\n                // console.log(first + mid + last)\n                return first + mid + last;\n            })\n            .join(' ');\n    }\n\n    static removeDiacritics(c: string): string {\n        let clean = StringUtility.diacriticsRemovalMap[c];\n        return !clean ? c : clean;\n    }\n\n    private static readonly diacriticsRemovalMap = {\n        \"Ⓐ\": \"A\",\n        \"Ａ\": \"A\",\n        \"À\": \"A\",\n        \"Á\": \"A\",\n        \"Â\": \"A\",\n        \"Ầ\": \"A\",\n        \"Ấ\": \"A\",\n        \"Ẫ\": \"A\",\n        \"Ẩ\": \"A\",\n        \"Ã\": \"A\",\n        \"Ā\": \"A\",\n        \"Ă\": \"A\",\n        \"Ằ\": \"A\",\n        \"Ắ\": \"A\",\n        \"Ẵ\": \"A\",\n        \"Ẳ\": \"A\",\n        \"Ȧ\": \"A\",\n        \"Ǡ\": \"A\",\n        \"Ä\": \"A\",\n        \"Ǟ\": \"A\",\n        \"Ả\": \"A\",\n        \"Å\": \"A\",\n        \"Ǻ\": \"A\",\n        \"Ǎ\": \"A\",\n        \"Ȁ\": \"A\",\n        \"Ȃ\": \"A\",\n        \"Ạ\": \"A\",\n        \"Ậ\": \"A\",\n        \"Ặ\": \"A\",\n        \"Ḁ\": \"A\",\n        \"Ą\": \"A\",\n        \"Ⱥ\": \"A\",\n        \"Ɐ\": \"A\",\n        \"Ⓑ\": \"B\",\n        \"Ｂ\": \"B\",\n        \"Ḃ\": \"B\",\n        \"Ḅ\": \"B\",\n        \"Ḇ\": \"B\",\n        \"Ƀ\": \"B\",\n        \"Ƃ\": \"B\",\n        \"Ɓ\": \"B\",\n        \"Ⓒ\": \"C\",\n        \"Ｃ\": \"C\",\n        \"Ć\": \"C\",\n        \"Ĉ\": \"C\",\n        \"Ċ\": \"C\",\n        \"Č\": \"C\",\n        \"Ç\": \"C\",\n        \"Ḉ\": \"C\",\n        \"Ƈ\": \"C\",\n        \"Ȼ\": \"C\",\n        \"Ꜿ\": \"C\",\n        \"Ⓓ\": \"D\",\n        \"Ｄ\": \"D\",\n        \"Ḋ\": \"D\",\n        \"Ď\": \"D\",\n        \"Ḍ\": \"D\",\n        \"Ḑ\": \"D\",\n        \"Ḓ\": \"D\",\n        \"Ḏ\": \"D\",\n        \"Đ\": \"D\",\n        \"Ƌ\": \"D\",\n        \"Ɗ\": \"D\",\n        \"Ɖ\": \"D\",\n        \"Ꝺ\": \"D\",\n        \"Ⓔ\": \"E\",\n        \"Ｅ\": \"E\",\n        \"È\": \"E\",\n        \"É\": \"E\",\n        \"Ê\": \"E\",\n        \"Ề\": \"E\",\n        \"Ế\": \"E\",\n        \"Ễ\": \"E\",\n        \"Ể\": \"E\",\n        \"Ẽ\": \"E\",\n        \"Ē\": \"E\",\n        \"Ḕ\": \"E\",\n        \"Ḗ\": \"E\",\n        \"Ĕ\": \"E\",\n        \"Ė\": \"E\",\n        \"Ë\": \"E\",\n        \"Ẻ\": \"E\",\n        \"Ě\": \"E\",\n        \"Ȅ\": \"E\",\n        \"Ȇ\": \"E\",\n        \"Ẹ\": \"E\",\n        \"Ệ\": \"E\",\n        \"Ȩ\": \"E\",\n        \"Ḝ\": \"E\",\n        \"Ę\": \"E\",\n        \"Ḙ\": \"E\",\n        \"Ḛ\": \"E\",\n        \"Ɛ\": \"E\",\n        \"Ǝ\": \"E\",\n        \"Ⓕ\": \"F\",\n        \"Ｆ\": \"F\",\n        \"Ḟ\": \"F\",\n        \"Ƒ\": \"F\",\n        \"Ꝼ\": \"F\",\n        \"Ⓖ\": \"G\",\n        \"Ｇ\": \"G\",\n        \"Ǵ\": \"G\",\n        \"Ĝ\": \"G\",\n        \"Ḡ\": \"G\",\n        \"Ğ\": \"G\",\n        \"Ġ\": \"G\",\n        \"Ǧ\": \"G\",\n        \"Ģ\": \"G\",\n        \"Ǥ\": \"G\",\n        \"Ɠ\": \"G\",\n        \"Ꞡ\": \"G\",\n        \"Ᵹ\": \"G\",\n        \"Ꝿ\": \"G\",\n        \"Ⓗ\": \"H\",\n        \"Ｈ\": \"H\",\n        \"Ĥ\": \"H\",\n        \"Ḣ\": \"H\",\n        \"Ḧ\": \"H\",\n        \"Ȟ\": \"H\",\n        \"Ḥ\": \"H\",\n        \"Ḩ\": \"H\",\n        \"Ḫ\": \"H\",\n        \"Ħ\": \"H\",\n        \"Ⱨ\": \"H\",\n        \"Ⱶ\": \"H\",\n        \"Ɥ\": \"H\",\n        \"Ⓘ\": \"I\",\n        \"Ｉ\": \"I\",\n        \"Ì\": \"I\",\n        \"Í\": \"I\",\n        \"Î\": \"I\",\n        \"Ĩ\": \"I\",\n        \"Ī\": \"I\",\n        \"Ĭ\": \"I\",\n        \"İ\": \"I\",\n        \"Ï\": \"I\",\n        \"Ḯ\": \"I\",\n        \"Ỉ\": \"I\",\n        \"Ǐ\": \"I\",\n        \"Ȉ\": \"I\",\n        \"Ȋ\": \"I\",\n        \"Ị\": \"I\",\n        \"Į\": \"I\",\n        \"Ḭ\": \"I\",\n        \"Ɨ\": \"I\",\n        \"Ⓙ\": \"J\",\n        \"Ｊ\": \"J\",\n        \"Ĵ\": \"J\",\n        \"Ɉ\": \"J\",\n        \"Ⓚ\": \"K\",\n        \"Ｋ\": \"K\",\n        \"Ḱ\": \"K\",\n        \"Ǩ\": \"K\",\n        \"Ḳ\": \"K\",\n        \"Ķ\": \"K\",\n        \"Ḵ\": \"K\",\n        \"Ƙ\": \"K\",\n        \"Ⱪ\": \"K\",\n        \"Ꝁ\": \"K\",\n        \"Ꝃ\": \"K\",\n        \"Ꝅ\": \"K\",\n        \"Ꞣ\": \"K\",\n        \"Ⓛ\": \"L\",\n        \"Ｌ\": \"L\",\n        \"Ŀ\": \"L\",\n        \"Ĺ\": \"L\",\n        \"Ľ\": \"L\",\n        \"Ḷ\": \"L\",\n        \"Ḹ\": \"L\",\n        \"Ļ\": \"L\",\n        \"Ḽ\": \"L\",\n        \"Ḻ\": \"L\",\n        \"Ł\": \"L\",\n        \"Ƚ\": \"L\",\n        \"Ɫ\": \"L\",\n        \"Ⱡ\": \"L\",\n        \"Ꝉ\": \"L\",\n        \"Ꝇ\": \"L\",\n        \"Ꞁ\": \"L\",\n        \"Ⓜ\": \"M\",\n        \"Ｍ\": \"M\",\n        \"Ḿ\": \"M\",\n        \"Ṁ\": \"M\",\n        \"Ṃ\": \"M\",\n        \"Ɱ\": \"M\",\n        \"Ɯ\": \"M\",\n        \"Ⓝ\": \"N\",\n        \"Ｎ\": \"N\",\n        \"Ǹ\": \"N\",\n        \"Ń\": \"N\",\n        \"Ñ\": \"N\",\n        \"Ṅ\": \"N\",\n        \"Ň\": \"N\",\n        \"Ṇ\": \"N\",\n        \"Ņ\": \"N\",\n        \"Ṋ\": \"N\",\n        \"Ṉ\": \"N\",\n        \"Ƞ\": \"N\",\n        \"Ɲ\": \"N\",\n        \"Ꞑ\": \"N\",\n        \"Ꞥ\": \"N\",\n        \"Ⓞ\": \"O\",\n        \"Ｏ\": \"O\",\n        \"Ò\": \"O\",\n        \"Ó\": \"O\",\n        \"Ô\": \"O\",\n        \"Ồ\": \"O\",\n        \"Ố\": \"O\",\n        \"Ỗ\": \"O\",\n        \"Ổ\": \"O\",\n        \"Õ\": \"O\",\n        \"Ṍ\": \"O\",\n        \"Ȭ\": \"O\",\n        \"Ṏ\": \"O\",\n        \"Ō\": \"O\",\n        \"Ṑ\": \"O\",\n        \"Ṓ\": \"O\",\n        \"Ŏ\": \"O\",\n        \"Ȯ\": \"O\",\n        \"Ȱ\": \"O\",\n        \"Ö\": \"O\",\n        \"Ȫ\": \"O\",\n        \"Ỏ\": \"O\",\n        \"Ő\": \"O\",\n        \"Ǒ\": \"O\",\n        \"Ȍ\": \"O\",\n        \"Ȏ\": \"O\",\n        \"Ơ\": \"O\",\n        \"Ờ\": \"O\",\n        \"Ớ\": \"O\",\n        \"Ỡ\": \"O\",\n        \"Ở\": \"O\",\n        \"Ợ\": \"O\",\n        \"Ọ\": \"O\",\n        \"Ộ\": \"O\",\n        \"Ǫ\": \"O\",\n        \"Ǭ\": \"O\",\n        \"Ø\": \"O\",\n        \"Ǿ\": \"O\",\n        \"Ɔ\": \"O\",\n        \"Ɵ\": \"O\",\n        \"Ꝋ\": \"O\",\n        \"Ꝍ\": \"O\",\n        \"Ⓟ\": \"P\",\n        \"Ｐ\": \"P\",\n        \"Ṕ\": \"P\",\n        \"Ṗ\": \"P\",\n        \"Ƥ\": \"P\",\n        \"Ᵽ\": \"P\",\n        \"Ꝑ\": \"P\",\n        \"Ꝓ\": \"P\",\n        \"Ꝕ\": \"P\",\n        \"Ⓠ\": \"Q\",\n        \"Ｑ\": \"Q\",\n        \"Ꝗ\": \"Q\",\n        \"Ꝙ\": \"Q\",\n        \"Ɋ\": \"Q\",\n        \"Ⓡ\": \"R\",\n        \"Ｒ\": \"R\",\n        \"Ŕ\": \"R\",\n        \"Ṙ\": \"R\",\n        \"Ř\": \"R\",\n        \"Ȑ\": \"R\",\n        \"Ȓ\": \"R\",\n        \"Ṛ\": \"R\",\n        \"Ṝ\": \"R\",\n        \"Ŗ\": \"R\",\n        \"Ṟ\": \"R\",\n        \"Ɍ\": \"R\",\n        \"Ɽ\": \"R\",\n        \"Ꝛ\": \"R\",\n        \"Ꞧ\": \"R\",\n        \"Ꞃ\": \"R\",\n        \"Ⓢ\": \"S\",\n        \"Ｓ\": \"S\",\n        \"ẞ\": \"S\",\n        \"Ś\": \"S\",\n        \"Ṥ\": \"S\",\n        \"Ŝ\": \"S\",\n        \"Ṡ\": \"S\",\n        \"Š\": \"S\",\n        \"Ṧ\": \"S\",\n        \"Ṣ\": \"S\",\n        \"Ṩ\": \"S\",\n        \"Ș\": \"S\",\n        \"Ş\": \"S\",\n        \"Ȿ\": \"S\",\n        \"Ꞩ\": \"S\",\n        \"Ꞅ\": \"S\",\n        \"Ⓣ\": \"T\",\n        \"Ｔ\": \"T\",\n        \"Ṫ\": \"T\",\n        \"Ť\": \"T\",\n        \"Ṭ\": \"T\",\n        \"Ț\": \"T\",\n        \"Ţ\": \"T\",\n        \"Ṱ\": \"T\",\n        \"Ṯ\": \"T\",\n        \"Ŧ\": \"T\",\n        \"Ƭ\": \"T\",\n        \"Ʈ\": \"T\",\n        \"Ⱦ\": \"T\",\n        \"Ꞇ\": \"T\",\n        \"Ⓤ\": \"U\",\n        \"Ｕ\": \"U\",\n        \"Ù\": \"U\",\n        \"Ú\": \"U\",\n        \"Û\": \"U\",\n        \"Ũ\": \"U\",\n        \"Ṹ\": \"U\",\n        \"Ū\": \"U\",\n        \"Ṻ\": \"U\",\n        \"Ŭ\": \"U\",\n        \"Ü\": \"U\",\n        \"Ǜ\": \"U\",\n        \"Ǘ\": \"U\",\n        \"Ǖ\": \"U\",\n        \"Ǚ\": \"U\",\n        \"Ủ\": \"U\",\n        \"Ů\": \"U\",\n        \"Ű\": \"U\",\n        \"Ǔ\": \"U\",\n        \"Ȕ\": \"U\",\n        \"Ȗ\": \"U\",\n        \"Ư\": \"U\",\n        \"Ừ\": \"U\",\n        \"Ứ\": \"U\",\n        \"Ữ\": \"U\",\n        \"Ử\": \"U\",\n        \"Ự\": \"U\",\n        \"Ụ\": \"U\",\n        \"Ṳ\": \"U\",\n        \"Ų\": \"U\",\n        \"Ṷ\": \"U\",\n        \"Ṵ\": \"U\",\n        \"Ʉ\": \"U\",\n        \"Ⓥ\": \"V\",\n        \"Ｖ\": \"V\",\n        \"Ṽ\": \"V\",\n        \"Ṿ\": \"V\",\n        \"Ʋ\": \"V\",\n        \"Ꝟ\": \"V\",\n        \"Ʌ\": \"V\",\n        \"Ⓦ\": \"W\",\n        \"Ｗ\": \"W\",\n        \"Ẁ\": \"W\",\n        \"Ẃ\": \"W\",\n        \"Ŵ\": \"W\",\n        \"Ẇ\": \"W\",\n        \"Ẅ\": \"W\",\n        \"Ẉ\": \"W\",\n        \"Ⱳ\": \"W\",\n        \"Ⓧ\": \"X\",\n        \"Ｘ\": \"X\",\n        \"Ẋ\": \"X\",\n        \"Ẍ\": \"X\",\n        \"Ⓨ\": \"Y\",\n        \"Ｙ\": \"Y\",\n        \"Ỳ\": \"Y\",\n        \"Ý\": \"Y\",\n        \"Ŷ\": \"Y\",\n        \"Ỹ\": \"Y\",\n        \"Ȳ\": \"Y\",\n        \"Ẏ\": \"Y\",\n        \"Ÿ\": \"Y\",\n        \"Ỷ\": \"Y\",\n        \"Ỵ\": \"Y\",\n        \"Ƴ\": \"Y\",\n        \"Ɏ\": \"Y\",\n        \"Ỿ\": \"Y\",\n        \"Ⓩ\": \"Z\",\n        \"Ｚ\": \"Z\",\n        \"Ź\": \"Z\",\n        \"Ẑ\": \"Z\",\n        \"Ż\": \"Z\",\n        \"Ž\": \"Z\",\n        \"Ẓ\": \"Z\",\n        \"Ẕ\": \"Z\",\n        \"Ƶ\": \"Z\",\n        \"Ȥ\": \"Z\",\n        \"Ɀ\": \"Z\",\n        \"Ⱬ\": \"Z\",\n        \"Ꝣ\": \"Z\",\n        \"ⓐ\": \"a\",\n        \"ａ\": \"a\",\n        \"ẚ\": \"a\",\n        \"à\": \"a\",\n        \"á\": \"a\",\n        \"â\": \"a\",\n        \"ầ\": \"a\",\n        \"ấ\": \"a\",\n        \"ẫ\": \"a\",\n        \"ẩ\": \"a\",\n        \"ã\": \"a\",\n        \"ā\": \"a\",\n        \"ă\": \"a\",\n        \"ằ\": \"a\",\n        \"ắ\": \"a\",\n        \"ẵ\": \"a\",\n        \"ẳ\": \"a\",\n        \"ȧ\": \"a\",\n        \"ǡ\": \"a\",\n        \"ä\": \"a\",\n        \"ǟ\": \"a\",\n        \"ả\": \"a\",\n        \"å\": \"a\",\n        \"ǻ\": \"a\",\n        \"ǎ\": \"a\",\n        \"ȁ\": \"a\",\n        \"ȃ\": \"a\",\n        \"ạ\": \"a\",\n        \"ậ\": \"a\",\n        \"ặ\": \"a\",\n        \"ḁ\": \"a\",\n        \"ą\": \"a\",\n        \"ⱥ\": \"a\",\n        \"ɐ\": \"a\",\n        \"ⓑ\": \"b\",\n        \"ｂ\": \"b\",\n        \"ḃ\": \"b\",\n        \"ḅ\": \"b\",\n        \"ḇ\": \"b\",\n        \"ƀ\": \"b\",\n        \"ƃ\": \"b\",\n        \"ɓ\": \"b\",\n        \"ⓒ\": \"c\",\n        \"ｃ\": \"c\",\n        \"ć\": \"c\",\n        \"ĉ\": \"c\",\n        \"ċ\": \"c\",\n        \"č\": \"c\",\n        \"ç\": \"c\",\n        \"ḉ\": \"c\",\n        \"ƈ\": \"c\",\n        \"ȼ\": \"c\",\n        \"ꜿ\": \"c\",\n        \"ↄ\": \"c\",\n        \"ⓓ\": \"d\",\n        \"ｄ\": \"d\",\n        \"ḋ\": \"d\",\n        \"ď\": \"d\",\n        \"ḍ\": \"d\",\n        \"ḑ\": \"d\",\n        \"ḓ\": \"d\",\n        \"ḏ\": \"d\",\n        \"đ\": \"d\",\n        \"ƌ\": \"d\",\n        \"ɖ\": \"d\",\n        \"ɗ\": \"d\",\n        \"ꝺ\": \"d\",\n        \"ⓔ\": \"e\",\n        \"ｅ\": \"e\",\n        \"è\": \"e\",\n        \"é\": \"e\",\n        \"ê\": \"e\",\n        \"ề\": \"e\",\n        \"ế\": \"e\",\n        \"ễ\": \"e\",\n        \"ể\": \"e\",\n        \"ẽ\": \"e\",\n        \"ē\": \"e\",\n        \"ḕ\": \"e\",\n        \"ḗ\": \"e\",\n        \"ĕ\": \"e\",\n        \"ė\": \"e\",\n        \"ë\": \"e\",\n        \"ẻ\": \"e\",\n        \"ě\": \"e\",\n        \"ȅ\": \"e\",\n        \"ȇ\": \"e\",\n        \"ẹ\": \"e\",\n        \"ệ\": \"e\",\n        \"ȩ\": \"e\",\n        \"ḝ\": \"e\",\n        \"ę\": \"e\",\n        \"ḙ\": \"e\",\n        \"ḛ\": \"e\",\n        \"ɇ\": \"e\",\n        \"ɛ\": \"e\",\n        \"ǝ\": \"e\",\n        \"ⓕ\": \"f\",\n        \"ｆ\": \"f\",\n        \"ḟ\": \"f\",\n        \"ƒ\": \"f\",\n        \"ꝼ\": \"f\",\n        \"ⓖ\": \"g\",\n        \"ｇ\": \"g\",\n        \"ǵ\": \"g\",\n        \"ĝ\": \"g\",\n        \"ḡ\": \"g\",\n        \"ğ\": \"g\",\n        \"ġ\": \"g\",\n        \"ǧ\": \"g\",\n        \"ģ\": \"g\",\n        \"ǥ\": \"g\",\n        \"ɠ\": \"g\",\n        \"ꞡ\": \"g\",\n        \"ᵹ\": \"g\",\n        \"ꝿ\": \"g\",\n        \"ⓗ\": \"h\",\n        \"ｈ\": \"h\",\n        \"ĥ\": \"h\",\n        \"ḣ\": \"h\",\n        \"ḧ\": \"h\",\n        \"ȟ\": \"h\",\n        \"ḥ\": \"h\",\n        \"ḩ\": \"h\",\n        \"ḫ\": \"h\",\n        \"ẖ\": \"h\",\n        \"ħ\": \"h\",\n        \"ⱨ\": \"h\",\n        \"ⱶ\": \"h\",\n        \"ɥ\": \"h\",\n        \"ⓘ\": \"i\",\n        \"ｉ\": \"i\",\n        \"ì\": \"i\",\n        \"í\": \"i\",\n        \"î\": \"i\",\n        \"ĩ\": \"i\",\n        \"ī\": \"i\",\n        \"ĭ\": \"i\",\n        \"ï\": \"i\",\n        \"ḯ\": \"i\",\n        \"ỉ\": \"i\",\n        \"ǐ\": \"i\",\n        \"ȉ\": \"i\",\n        \"ȋ\": \"i\",\n        \"ị\": \"i\",\n        \"į\": \"i\",\n        \"ḭ\": \"i\",\n        \"ɨ\": \"i\",\n        \"ı\": \"i\",\n        \"ⓙ\": \"j\",\n        \"ｊ\": \"j\",\n        \"ĵ\": \"j\",\n        \"ǰ\": \"j\",\n        \"ɉ\": \"j\",\n        \"ⓚ\": \"k\",\n        \"ｋ\": \"k\",\n        \"ḱ\": \"k\",\n        \"ǩ\": \"k\",\n        \"ḳ\": \"k\",\n        \"ķ\": \"k\",\n        \"ḵ\": \"k\",\n        \"ƙ\": \"k\",\n        \"ⱪ\": \"k\",\n        \"ꝁ\": \"k\",\n        \"ꝃ\": \"k\",\n        \"ꝅ\": \"k\",\n        \"ꞣ\": \"k\",\n        \"ⓛ\": \"l\",\n        \"ｌ\": \"l\",\n        \"ŀ\": \"l\",\n        \"ĺ\": \"l\",\n        \"ľ\": \"l\",\n        \"ḷ\": \"l\",\n        \"ḹ\": \"l\",\n        \"ļ\": \"l\",\n        \"ḽ\": \"l\",\n        \"ḻ\": \"l\",\n        \"ſ\": \"l\",\n        \"ł\": \"l\",\n        \"ƚ\": \"l\",\n        \"ɫ\": \"l\",\n        \"ⱡ\": \"l\",\n        \"ꝉ\": \"l\",\n        \"ꞁ\": \"l\",\n        \"ꝇ\": \"l\",\n        \"ⓜ\": \"m\",\n        \"ｍ\": \"m\",\n        \"ḿ\": \"m\",\n        \"ṁ\": \"m\",\n        \"ṃ\": \"m\",\n        \"ɱ\": \"m\",\n        \"ɯ\": \"m\",\n        \"ⓝ\": \"n\",\n        \"ｎ\": \"n\",\n        \"ǹ\": \"n\",\n        \"ń\": \"n\",\n        \"ñ\": \"n\",\n        \"ṅ\": \"n\",\n        \"ň\": \"n\",\n        \"ṇ\": \"n\",\n        \"ņ\": \"n\",\n        \"ṋ\": \"n\",\n        \"ṉ\": \"n\",\n        \"ƞ\": \"n\",\n        \"ɲ\": \"n\",\n        \"ŉ\": \"n\",\n        \"ꞑ\": \"n\",\n        \"ꞥ\": \"n\",\n        \"ⓞ\": \"o\",\n        \"ｏ\": \"o\",\n        \"ò\": \"o\",\n        \"ó\": \"o\",\n        \"ô\": \"o\",\n        \"ồ\": \"o\",\n        \"ố\": \"o\",\n        \"ỗ\": \"o\",\n        \"ổ\": \"o\",\n        \"õ\": \"o\",\n        \"ṍ\": \"o\",\n        \"ȭ\": \"o\",\n        \"ṏ\": \"o\",\n        \"ō\": \"o\",\n        \"ṑ\": \"o\",\n        \"ṓ\": \"o\",\n        \"ŏ\": \"o\",\n        \"ȯ\": \"o\",\n        \"ȱ\": \"o\",\n        \"ö\": \"o\",\n        \"ȫ\": \"o\",\n        \"ỏ\": \"o\",\n        \"ő\": \"o\",\n        \"ǒ\": \"o\",\n        \"ȍ\": \"o\",\n        \"ȏ\": \"o\",\n        \"ơ\": \"o\",\n        \"ờ\": \"o\",\n        \"ớ\": \"o\",\n        \"ỡ\": \"o\",\n        \"ở\": \"o\",\n        \"ợ\": \"o\",\n        \"ọ\": \"o\",\n        \"ộ\": \"o\",\n        \"ǫ\": \"o\",\n        \"ǭ\": \"o\",\n        \"ø\": \"o\",\n        \"ǿ\": \"o\",\n        \"ɔ\": \"o\",\n        \"ꝋ\": \"o\",\n        \"ꝍ\": \"o\",\n        \"ɵ\": \"o\",\n        \"ⓟ\": \"p\",\n        \"ｐ\": \"p\",\n        \"ṕ\": \"p\",\n        \"ṗ\": \"p\",\n        \"ƥ\": \"p\",\n        \"ᵽ\": \"p\",\n        \"ꝑ\": \"p\",\n        \"ꝓ\": \"p\",\n        \"ꝕ\": \"p\",\n        \"ⓠ\": \"q\",\n        \"ｑ\": \"q\",\n        \"ɋ\": \"q\",\n        \"ꝗ\": \"q\",\n        \"ꝙ\": \"q\",\n        \"ⓡ\": \"r\",\n        \"ｒ\": \"r\",\n        \"ŕ\": \"r\",\n        \"ṙ\": \"r\",\n        \"ř\": \"r\",\n        \"ȑ\": \"r\",\n        \"ȓ\": \"r\",\n        \"ṛ\": \"r\",\n        \"ṝ\": \"r\",\n        \"ŗ\": \"r\",\n        \"ṟ\": \"r\",\n        \"ɍ\": \"r\",\n        \"ɽ\": \"r\",\n        \"ꝛ\": \"r\",\n        \"ꞧ\": \"r\",\n        \"ꞃ\": \"r\",\n        \"ⓢ\": \"s\",\n        \"ｓ\": \"s\",\n        \"ß\": \"s\",\n        \"ś\": \"s\",\n        \"ṥ\": \"s\",\n        \"ŝ\": \"s\",\n        \"ṡ\": \"s\",\n        \"š\": \"s\",\n        \"ṧ\": \"s\",\n        \"ṣ\": \"s\",\n        \"ṩ\": \"s\",\n        \"ș\": \"s\",\n        \"ş\": \"s\",\n        \"ȿ\": \"s\",\n        \"ꞩ\": \"s\",\n        \"ꞅ\": \"s\",\n        \"ẛ\": \"s\",\n        \"ⓣ\": \"t\",\n        \"ｔ\": \"t\",\n        \"ṫ\": \"t\",\n        \"ẗ\": \"t\",\n        \"ť\": \"t\",\n        \"ṭ\": \"t\",\n        \"ț\": \"t\",\n        \"ţ\": \"t\",\n        \"ṱ\": \"t\",\n        \"ṯ\": \"t\",\n        \"ŧ\": \"t\",\n        \"ƭ\": \"t\",\n        \"ʈ\": \"t\",\n        \"ⱦ\": \"t\",\n        \"ꞇ\": \"t\",\n        \"ⓤ\": \"u\",\n        \"ｕ\": \"u\",\n        \"ù\": \"u\",\n        \"ú\": \"u\",\n        \"û\": \"u\",\n        \"ũ\": \"u\",\n        \"ṹ\": \"u\",\n        \"ū\": \"u\",\n        \"ṻ\": \"u\",\n        \"ŭ\": \"u\",\n        \"ü\": \"u\",\n        \"ǜ\": \"u\",\n        \"ǘ\": \"u\",\n        \"ǖ\": \"u\",\n        \"ǚ\": \"u\",\n        \"ủ\": \"u\",\n        \"ů\": \"u\",\n        \"ű\": \"u\",\n        \"ǔ\": \"u\",\n        \"ȕ\": \"u\",\n        \"ȗ\": \"u\",\n        \"ư\": \"u\",\n        \"ừ\": \"u\",\n        \"ứ\": \"u\",\n        \"ữ\": \"u\",\n        \"ử\": \"u\",\n        \"ự\": \"u\",\n        \"ụ\": \"u\",\n        \"ṳ\": \"u\",\n        \"ų\": \"u\",\n        \"ṷ\": \"u\",\n        \"ṵ\": \"u\",\n        \"ʉ\": \"u\",\n        \"ⓥ\": \"v\",\n        \"ｖ\": \"v\",\n        \"ṽ\": \"v\",\n        \"ṿ\": \"v\",\n        \"ʋ\": \"v\",\n        \"ꝟ\": \"v\",\n        \"ʌ\": \"v\",\n        \"ⓦ\": \"w\",\n        \"ｗ\": \"w\",\n        \"ẁ\": \"w\",\n        \"ẃ\": \"w\",\n        \"ŵ\": \"w\",\n        \"ẇ\": \"w\",\n        \"ẅ\": \"w\",\n        \"ẘ\": \"w\",\n        \"ẉ\": \"w\",\n        \"ⱳ\": \"w\",\n        \"ⓧ\": \"x\",\n        \"ｘ\": \"x\",\n        \"ẋ\": \"x\",\n        \"ẍ\": \"x\",\n        \"ⓨ\": \"y\",\n        \"ｙ\": \"y\",\n        \"ỳ\": \"y\",\n        \"ý\": \"y\",\n        \"ŷ\": \"y\",\n        \"ỹ\": \"y\",\n        \"ȳ\": \"y\",\n        \"ẏ\": \"y\",\n        \"ÿ\": \"y\",\n        \"ỷ\": \"y\",\n        \"ẙ\": \"y\",\n        \"ỵ\": \"y\",\n        \"ƴ\": \"y\",\n        \"ɏ\": \"y\",\n        \"ỿ\": \"y\",\n        \"ⓩ\": \"z\",\n        \"ｚ\": \"z\",\n        \"ź\": \"z\",\n        \"ẑ\": \"z\",\n        \"ż\": \"z\",\n        \"ž\": \"z\",\n        \"ẓ\": \"z\",\n        \"ẕ\": \"z\",\n        \"ƶ\": \"z\",\n        \"ȥ\": \"z\",\n        \"ɀ\": \"z\",\n        \"ⱬ\": \"z\",\n        \"ꝣ\": \"z\"\n    }\n}","export { Culture, CultureInfo } from \"./culture\";\nexport { IModel, ModelResult, ModelContainer } from \"./models\";\nexport { IRecognizer, Recognizer } from \"./recognizer\";\nexport { IExtractor, ExtractResult } from \"./extractors\";\nexport { IParser, ParseResult } from \"./parsers\";\nexport { FormatUtility, StringUtility, Match, RegExpUtility } from \"./utilities\";","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimEnd = /\\s+$/;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimEnd, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n","/*! bignumber.js v4.1.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v4.1.0\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(config) {\r\n        var div, parseNumeric,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {\r\n                    raise( id, tooManyDigits, x.s * n );\r\n                }\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = BigNumber.set = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === true || v === false || v === 1 || v === 0 ) {\r\n                    if (v) {\r\n                        v = typeof crypto == 'undefined';\r\n                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n                            CRYPTO = true;\r\n                        } else if (ERRORS) {\r\n                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );\r\n                        } else {\r\n                            CRYPTO = false;\r\n                        }\r\n                    } else {\r\n                        CRYPTO = false;\r\n                    }\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if (crypto.getRandomValues) {\r\n\r\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if (crypto.randomBytes) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                crypto.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else {\r\n                        CRYPTO = false;\r\n                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random.\r\n                if (!CRYPTO) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc = [1].concat(xc);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x = [carry].concat(x);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.splice(0, 1) );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz = [0].concat(yz);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod = [0].concat(prod);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.splice(0, 1);\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.splice(0, 1), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc = [a].concat(xc);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.splice(0, 1);\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\r\n        P.toPower = P.pow = function ( n, m ) {\r\n            var k, y, z,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            if ( m != null ) {\r\n                id = 23;\r\n                m = new BigNumber(m);\r\n            }\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {\r\n                k = Math.pow( +x, n );\r\n                return new BigNumber( m ? k % m : k );\r\n            }\r\n\r\n            if (m) {\r\n                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {\r\n                    x = x.mod(m);\r\n                } else {\r\n                    z = m;\r\n\r\n                    // Nullify m so only a single mod operation is performed at the end.\r\n                    m = null;\r\n                }\r\n            } else if (POW_PRECISION) {\r\n\r\n                // Truncating each coefficient array to a length of k after each multiplication\r\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n                // i.e. there will be a minimum of 28 guard digits retained.\r\n                // (Using + 1.5 would give [9, 21] guard digits.)\r\n                k = mathceil( POW_PRECISION / LOG_BASE + 2 );\r\n            }\r\n\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if (k) {\r\n                        if ( y.c.length > k ) y.c.length = k;\r\n                    } else if (m) {\r\n                        y = y.mod(m);\r\n                    }\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n                x = x.times(x);\r\n                if (k) {\r\n                    if ( x.c && x.c.length > k ) x.c.length = k;\r\n                } else if (m) {\r\n                    x = x.mod(m);\r\n                }\r\n            }\r\n\r\n            if (m) return y;\r\n            if ( n < 0 ) y = ONE.div(y);\r\n\r\n            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if ( e === null ) return n.toString();\r\n\r\n            str = coeffToString( n.c );\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential( str, e )\r\n                : toFixedPoint( str, e );\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        P.isBigNumber = true;\r\n\r\n        if ( config != null ) BigNumber.config(config);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = constructorFactory();\r\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\r\n    // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return BigNumber; } );\r\n\r\n    // Node.js and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = BigNumber;\r\n\r\n    // Browser.\r\n    } else {\r\n        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = BigNumber;\r\n    }\r\n})(this);\r\n","import { IModel, ModelResult, IExtractor, IParser, ParseResult } from \"recognizers-text\";\n\nexport enum NumberMode {\n    // Default is for unit and datetime\n    Default,\n    // Add 67.5 billion & million support.\n    Currency,\n    // Don't extract number from cases like 16ml\n    PureNumber\n}\n\nexport class LongFormatType {\n    // Reference : https://www.wikiwand.com/en/Decimal_mark\n    // Value : 1234567.89\n    // 1,234,567\n    static readonly integerNumComma = new LongFormatType(',', '\\0');\n\n    // 1.234.567\n    static readonly integerNumDot = new LongFormatType('.', '\\0');\n\n    // 1 234 567\n    static readonly integerNumBlank = new LongFormatType(' ', '\\0');\n\n    // 1'234'567\n    static readonly integerNumQuote = new LongFormatType('\\'', '\\0');\n\n    // 1,234,567.89\n    static readonly doubleNumCommaDot = new LongFormatType(',', '.');\n\n    // 1,234,567·89\n    static readonly doubleNumCommaCdot = new LongFormatType(',', '·');\n\n    // 1 234 567,89\n    static readonly doubleNumBlankComma = new LongFormatType(' ', ',');\n\n    // 1 234 567.89\n    static readonly doubleNumBlankDot = new LongFormatType(' ', '.');\n\n    // 1.234.567,89\n    static readonly doubleNumDotComma = new LongFormatType('.', ',');\n\n    // 1'234'567,89\n    static readonly doubleNumQuoteComma = new LongFormatType('\\'', ',');\n\n    readonly thousandsMark: string;\n    readonly decimalsMark: string;\n\n    constructor(thousandsMark: string, decimalsMark: string) {\n        this.thousandsMark = thousandsMark;\n        this.decimalsMark = decimalsMark;\n    }\n}\n\nexport abstract class AbstractNumberModel implements IModel {\n    abstract modelTypeName: string;\n\n    protected readonly parser: IParser;\n    protected readonly extractor: IExtractor;\n\n    constructor(parser: IParser, extractor: IExtractor) {\n        this.extractor = extractor;\n        this.parser = parser;\n    }\n\n    parse(query: string): ModelResult[] {\n        let extractResults = this.extractor.extract(query);\n        let parseNums = extractResults.map(r => this.parser.parse(r));\n        //add by qiuqian,2018.2.11,debugger\n        //console.log(parseNums[0].data);\n        //console.log(\"extractResults : \",extractResults);\n        //console.log(\"parseNums : \",parseNums);\n        \n\n        return parseNums\n            .map(o => o as ParseResult)\n            .map(o => ({\n                start: o.start,\n                end: o.start + o.length - 1,\n                resolution: { value: o.resolutionStr },\n                text: o.text,\n                typeName: this.modelTypeName\n            }));\n    }\n}\n\nexport class NumberModel extends AbstractNumberModel {\n    modelTypeName: string = \"number\";\n}\n\nexport class OrdinalModel extends AbstractNumberModel {\n    modelTypeName: string = \"ordinal\";\n}\n\nexport class PercentModel extends AbstractNumberModel {\n    modelTypeName: string = \"percentage\";\n}","import { Culture as BaseCulture, CultureInfo as BaseCultureInfo } from \"recognizers-text\";\nimport trimEnd = require(\"lodash.trimend\");\nimport { BigNumber } from 'bignumber.js';\nimport { LongFormatType } from \"./number/models\";\n\nexport class Culture extends BaseCulture {\n\n  static readonly supportedCultures: Array<Culture> = [\n    new Culture(\"English\", Culture.English, new LongFormatType(',', '.')),\n    new Culture(\"Chinese\", Culture.Chinese, null),\n    new Culture(\"Spanish\", Culture.Spanish, new LongFormatType('.', ',')),\n    new Culture(\"Portuguese\", Culture.Portuguese, new LongFormatType('.', ',')),\n    new Culture(\"French\", Culture.French, new LongFormatType('.', ','))\n  ]\n\n  readonly longFormat: LongFormatType\n\n  private constructor(cultureName: string, cultureCode: string, longFormat: LongFormatType) {\n    super(cultureName, cultureCode);\n    this.longFormat = longFormat;\n  }\n}\n\nexport class CultureInfo extends BaseCultureInfo {\n  format(value: number | BigNumber): string {\n\n    let bigNumber = new BigNumber(value);\n    let s: string;\n    if (bigNumber.decimalPlaces()) {\n      s = bigNumber.toDigits(15, BigNumber.ROUND_HALF_UP).toString();\n    } else {\n      s = bigNumber.toString().toUpperCase();\n    }\n\n    if (s.indexOf('.') > -1) {\n      // trim leading 0 from decimal places\n      s = trimEnd(s, '0');\n    }\n\n    if (s.indexOf('e-') > -1) {\n      // mimic .NET behavior by adding leading 0 to exponential. E.g.: 1E-07\n      let p = s.split('e-');\n      p[1] = p[1].length === 1 ? ('0' + p[1]) : p[1];\n      s = p.join('E-')\n    }\n\n    // TODO: Use BigNumber.toFormat instead\n    let culture = Culture.supportedCultures.find(c => c.cultureCode === this.code);\n    if(culture && culture.longFormat) {\n      return s\n        .split(',')\n        .map(t => t.split('.').join(culture.longFormat.decimalsMark))\n        .join(culture.longFormat.thousandsMark);\n    }\n\n    return s;\n  }\n}","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, function(o) { return o.user; });\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n *\n * _.sortBy(users, 'user', function(o) {\n *   return Math.floor(o.age / 10);\n * });\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = sortBy;\n","import { IParser, ParseResult, ExtractResult } from \"recognizers-text\";\nimport { CultureInfo, Culture } from \"../culture\";\nimport { Constants } from \"./constants\";\nimport trimEnd = require(\"lodash.trimend\");\nimport sortBy = require(\"lodash.sortby\");\nimport { RegExpUtility } from \"recognizers-text\";\nimport { BigNumber } from 'bignumber.js';\n\n// Disable BigNumber errors when passing number with more than 15 significant digits\nBigNumber.config({ ERRORS: false });\n// The exponent value(s) at which toString returns exponential notation.\nBigNumber.config({ EXPONENTIAL_AT: [-5, 15] });\n\nexport interface INumberParserConfiguration {\n    readonly signMap: ReadonlyMap<string, number>;\n\n    \n\n    readonly cardinalNumberMap: ReadonlyMap<string, number>;\n    readonly ordinalNumberMap: ReadonlyMap<string, number>;\n    readonly roundNumberMap: ReadonlyMap<string, number>;\n    readonly cultureInfo: CultureInfo;\n    readonly digitalNumberRegex: RegExp;\n    readonly fractionMarkerToken: string;\n    readonly halfADozenRegex: RegExp;\n    readonly halfADozenText: string;\n    readonly langMarker: string;\n    readonly nonDecimalSeparatorChar: string;\n    readonly decimalSeparatorChar: string;\n    readonly wordSeparatorToken: string;\n    readonly writtenDecimalSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenGroupSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenIntegerSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenFractionSeparatorTexts: ReadonlyArray<string>;\n\n    normalizeTokenSet(tokens: ReadonlyArray<string>, context: ParseResult): ReadonlyArray<string>;\n    resolveCompositeNumber(numberStr: string): number;\n}\n\nexport class BaseNumberParser implements IParser {\n    protected readonly config: INumberParserConfiguration;\n    protected readonly textNumberRegex: RegExp;\n    protected readonly arabicNumberRegex: RegExp;\n    protected readonly roundNumberSet: Set<string>;\n\n    supportedTypes: ReadonlyArray<string>;\n\n    constructor(config: INumberParserConfiguration) {\n        this.config = config;\n\n        let singleIntFrac = `${this.config.wordSeparatorToken}| -|${this.getKeyRegex(this.config.cardinalNumberMap)}|${this.getKeyRegex(this.config.ordinalNumberMap)}`;\n\n        this.textNumberRegex = RegExpUtility.getSafeRegExp(String.raw`(?=\\b)(${singleIntFrac})(?=\\b)`, \"gis\");\n        this.arabicNumberRegex = RegExpUtility.getSafeRegExp(String.raw`\\d+`, \"is\");\n        this.roundNumberSet = new Set<string>();\n        this.config.roundNumberMap.forEach((value, key) =>\n            this.roundNumberSet.add(key)\n        );\n    }\n\n    parse(extResult: ExtractResult): ParseResult | null {\n\n        // check if the parser is configured to support specific types\n        if (this.supportedTypes && !this.supportedTypes.find(t => t === extResult.type)) {\n            return null;\n        }\n\n       \n\n        let ret: ParseResult | null = null;\n        let extra = extResult.data as string;\n        if (!extra) {\n            if (this.arabicNumberRegex.test(extResult.text)) {\n                extra = \"Num\";\n            } else {\n                extra = this.config.langMarker;\n            }\n        }\n        \n        if (extra.includes(\"Num\")) {\n            ret = this.digitNumberParse(extResult);\n        }\n        else if (extra.includes(`Frac${this.config.langMarker}`)) // Frac is a special number, parse via another method\n        {\n            ret = this.fracLikeNumberParse(extResult);\n        }\n        else if (extra.includes(this.config.langMarker)) {\n            ret = this.textNumberParse(extResult);\n            \n        }\n        else if (extra.includes(\"Pow\")) {\n            ret = this.powerNumberParse(extResult);\n        }\n\n        if (ret && ret.value) {\n            ret.resolutionStr = this.config.cultureInfo\n                ? this.config.cultureInfo.format(ret.value)\n                : ret.value.toString();\n        }\n        \n        return ret;\n    }\n\n    protected getKeyRegex(regexMap: ReadonlyMap<string, number>): string {\n        let keys = new Array<string>();\n        regexMap.forEach((value, key) => keys.push(key));\n        let sortKeys = sortBy(keys, key => key.length).reverse();\n        return sortKeys.join('|');\n    }\n\n    protected digitNumberParse(extResult: ExtractResult): ParseResult {\n        let result: ParseResult = {\n            start: extResult.start,\n            length: extResult.length,\n            text: extResult.text,\n            type: extResult.type\n        };\n\n        // [1] 24\n        // [2] 12 32/33\n        // [3] 1,000,000\n        // [4] 234.567\n        // [5] 44/55\n        // [6] 2 hundred\n        // dot occured.\n\n        let power: number = 1;\n        let tmpIndex: number = -1;\n        let startIndex: number = 0;\n        let handle = extResult.text.toLowerCase();\n\n        let matches = RegExpUtility.getMatches(this.config.digitalNumberRegex, handle);\n        if (matches) {\n            matches.forEach(match => {\n                // HACK: Matching regex may be buggy, may include a digit before the unit\n                match.value = match.value.replace(/\\d/g, '');\n                match.length = match.value.length;\n\n                let rep: number = this.config.roundNumberMap.get(match.value) as number;\n                // \\\\s+ for filter the spaces.\n                power *= rep;\n\n                // tslint:disable-next-line:no-conditional-assignment\n                while ((tmpIndex = handle.indexOf(match.value, startIndex)) >= 0) {\n                    let front = trimEnd(handle.substring(0, tmpIndex));\n                    startIndex = front.length;\n                    handle = front + handle.substring(tmpIndex + match.length);\n                }\n            });\n        }\n\n        // scale used in the calculate of double\n        result.value = this.getDigitalValue(handle, power);\n\n        return result;\n    }\n\n    protected isDigit(c: string): boolean {\n        return c >= '0' && c <= '9';\n    }\n\n    protected fracLikeNumberParse(extResult: ExtractResult): ParseResult {\n\n        let result =\n            {\n                start: extResult.start,\n                length: extResult.length,\n                text: extResult.text,\n                type: extResult.type\n            } as ParseResult;\n\n        let resultText = extResult.text.toLowerCase();\n        if (resultText.includes(this.config.fractionMarkerToken)) {\n            let overIndex = resultText.indexOf(this.config.fractionMarkerToken);\n            let smallPart = resultText.substring(0, overIndex).trim();\n            let bigPart = resultText.substring(overIndex + this.config.fractionMarkerToken.length, resultText.length).trim();\n\n            let smallValue = this.isDigit(smallPart[0])\n                ? this.getDigitalValue(smallPart, 1)\n                : this.getIntValue(this.getMatches(smallPart));\n\n            let bigValue = this.isDigit(bigPart[0])\n                ? this.getDigitalValue(bigPart, 1)\n                : this.getIntValue(this.getMatches(bigPart));\n\n            result.value = smallValue / bigValue;\n        }\n        else {\n            let words = resultText.split(\" \").filter(s => s && s.length);\n            let fracWords = Array.from(this.config.normalizeTokenSet(words, result));\n\n            // Split fraction with integer\n            let splitIndex = fracWords.length - 1;\n            let currentValue = this.config.resolveCompositeNumber(fracWords[splitIndex]);\n            let roundValue = 1;\n\n            for (splitIndex = fracWords.length - 2; splitIndex >= 0; splitIndex--) {\n\n                if (this.config.writtenFractionSeparatorTexts.indexOf(fracWords[splitIndex]) > -1 ||\n                    this.config.writtenIntegerSeparatorTexts.indexOf(fracWords[splitIndex]) > -1) {\n                    continue;\n                }\n\n                let previousValue = currentValue;\n                currentValue = this.config.resolveCompositeNumber(fracWords[splitIndex]);\n\n                let smHundreds = 100;\n\n                // previous : hundred\n                // current : one\n                if ((previousValue >= smHundreds && previousValue > currentValue)\n                    || (previousValue < smHundreds && this.isComposable(currentValue, previousValue))) {\n                    if (previousValue < smHundreds && currentValue >= roundValue) {\n                        roundValue = currentValue;\n                    }\n                    else if (previousValue < smHundreds && currentValue < roundValue) {\n                        splitIndex++;\n                        break;\n                    }\n                    // current is the first word\n                    if (splitIndex === 0) {\n                        // scan, skip the first word\n                        splitIndex = 1;\n                        while (splitIndex <= fracWords.length - 2) {\n                            // e.g. one hundred thousand\n                            // frac[i+1] % 100 && frac[i] % 100 = 0\n                            if (this.config.resolveCompositeNumber(fracWords[splitIndex]) >= smHundreds\n                                && !(this.config.writtenFractionSeparatorTexts.indexOf(fracWords[splitIndex + 1]) > -1)\n                                && this.config.resolveCompositeNumber(fracWords[splitIndex + 1]) < smHundreds) {\n                                splitIndex++;\n                                break;\n                            }\n                            splitIndex++;\n                        }\n                        break;\n                    }\n                    continue;\n                }\n                splitIndex++;\n                break;\n            }\n\n            let fracPart = new Array<string>();\n            for (let i = splitIndex; i < fracWords.length; i++) {\n                if (fracWords[i].indexOf(\"-\") > -1) {\n                    let split = fracWords[i].split('-');\n                    fracPart.push(split[0]);\n                    fracPart.push(\"-\");\n                    fracPart.push(split[1]);\n                }\n                else {\n                    fracPart.push(fracWords[i]);\n                }\n            }\n\n            fracWords.splice(splitIndex, fracWords.length - splitIndex);\n\n            // denomi = denominator\n            let denomiValue = this.getIntValue(fracPart);\n            // Split mixed number with fraction\n            let numerValue = 0;\n            let intValue = 0;\n\n            let mixedIndex = fracWords.length;\n            for (let i = fracWords.length - 1; i >= 0; i--) {\n                if (i < fracWords.length - 1 && this.config.writtenFractionSeparatorTexts.indexOf(fracWords[i]) > -1) {\n                    let numerStr = fracWords.slice(i + 1, fracWords.length).join(\" \");\n                    numerValue = this.getIntValue(this.getMatches(numerStr));\n                    mixedIndex = i + 1;\n                    break;\n                }\n            }\n\n            let intStr = fracWords.slice(0, mixedIndex).join(\" \");\n            intValue = this.getIntValue(this.getMatches(intStr));\n\n            // Find mixed number\n            if (mixedIndex !== fracWords.length && numerValue < denomiValue) {\n                // intValue + numerValue / denomiValue\n                result.value = new BigNumber(intValue).plus(new BigNumber(numerValue).dividedBy(denomiValue));\n            }\n            else {\n                // (intValue + numerValue) / denomiValue\n                result.value = new BigNumber(intValue + numerValue).dividedBy(denomiValue)\n            }\n        }\n\n        return result;\n    }\n\n    protected textNumberParse(extResult: ExtractResult): ParseResult {\n        let result =\n            {\n                start: extResult.start,\n                length: extResult.length,\n                text: extResult.text,\n                type: extResult.type\n            } as ParseResult;\n        \n        \n        \n        let handle = extResult.text.toLowerCase();//\n\n        handle = handle.replace(this.config.halfADozenRegex, this.config.halfADozenText)\n\n        let numGroup = this.splitMulti(handle, Array.from(this.config.writtenDecimalSeparatorTexts)).filter(s => s && s.length > 0);\n        \n        \n        \n        let intPart = numGroup[0];\n        \n        let matchStrs = intPart\n            ? intPart.match((this.textNumberRegex)).map(s => s.toLowerCase())\n            : new Array<string>();\n\n        \n        // Get the value recursively\n        \n        let firstbit = matchStrs[0];\n        matchStrs = matchStrs.filter(function(kk){\n            if(kk !== \"negative\" && kk !== \"minus\"){\n                return kk;\n            }\n        });\n        //\n        let intPartRet = this.getIntValue(matchStrs);\n        let pointPartRet = 0;\n        if (numGroup.length === 2) {\n            let pointPart = numGroup[1];\n            let matchStrs = pointPart.match(this.textNumberRegex).map(s => s.toLowerCase());\n            pointPartRet += this.getPointValue(matchStrs);\n        }\n\n        result.value = intPartRet + pointPartRet;\n        \n        if(firstbit === \"negative\" || firstbit === \"minus\"){\n            result.value = -result.value;\n        }\n        return result;\n        \n    }\n\n    protected powerNumberParse(extResult: ExtractResult): ParseResult {\n        let result =\n            {\n                start: extResult.start,\n                length: extResult.length,\n                text: extResult.text,\n                type: extResult.type\n            } as ParseResult;\n\n        let handle = extResult.text.toUpperCase();\n        let isE = !extResult.text.includes(\"^\");\n\n        // [1] 1e10\n        // [2] 1.1^-23\n        let calStack = new Array<BigNumber>();\n\n        let scale = new BigNumber(10);\n        let dot = false;\n        let isLessZero = false;\n        let tmp = new BigNumber(0);\n        for (let i = 0; i < handle.length; i++) {\n            let ch = handle[i];\n            if (ch === '^' || ch === 'E') {\n                if (isLessZero) {\n                    calStack.push(tmp.negated());\n                }\n                else {\n                    calStack.push(tmp);\n                }\n                tmp = new BigNumber(0);\n                scale = new BigNumber(10);\n                dot = false;\n                isLessZero = false;\n            }\n            else if (ch.charCodeAt(0) - 48 >= 0 && ch.charCodeAt(0) - 48 <= 9) {\n                if (dot) {\n                    // tmp = tmp + scale * (ch.charCodeAt(0) - 48);\n                    // scale *= 0.1;\n                    tmp = tmp.plus(scale.times(ch.charCodeAt(0) - 48));\n                    scale = scale.times(0.1);\n                }\n                else {\n                    // tmp = tmp * scale + (ch.charCodeAt(0) - 48);\n                    tmp = tmp.times(scale).plus(ch.charCodeAt(0) - 48);\n                }\n            }\n            else if (ch === this.config.decimalSeparatorChar) {\n                dot = true;\n                scale = new BigNumber(0.1);\n            }\n            else if (ch === '-') {\n                isLessZero = !isLessZero;\n            }\n            else if (ch === '+') {\n                continue;\n            }\n\n            if (i === handle.length - 1) {\n                if (isLessZero) {\n                    calStack.push(tmp.negated());\n                }\n                else {\n                    calStack.push(tmp);\n                }\n            }\n        }\n\n        let ret = 0;\n        if (isE) {\n            // ret = calStack.shift() * Math.pow(10, calStack.shift());\n            ret = calStack.shift().times(Math.pow(10, calStack.shift().toNumber())).toNumber();\n        }\n        else {\n            ret = Math.pow(calStack.shift().toNumber(), calStack.shift().toNumber());\n        }\n\n        result.value = ret;\n        result.resolutionStr = ret.toString(); // @TODO Possible Culture bug.\n\n        return result;\n    }\n\n    private splitMulti(str: string, tokens: Array<string>): Array<string> {\n        let tempChar = tokens[0]; // We can use the first token as a temporary join character\n        for (let i = 0; i < tokens.length; i++) {\n            str = str.split(tokens[i]).join(tempChar);\n        }\n        return str.split(tempChar);\n    }\n\n    private getMatches(input: string): Array<string> {\n        let matches = input.match(this.textNumberRegex);\n        return (matches || []).map(match => {\n            return match.toLowerCase();\n        });\n    }\n\n    // Test if big and combine with small.\n    // e.g. \"hundred\" can combine with \"thirty\" but \"twenty\" can't combine with \"thirty\".\n    private isComposable(big: number, small: number): boolean {\n        let baseNumber = small > 10 ? 100 : 10;\n\n        if (big % baseNumber === 0 && big / baseNumber >= 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private getIntValue(matchStrs: Array<string>): number {\n        \n        let isEnd = new Array<boolean>(matchStrs.length);\n        for (let i = 0; i < isEnd.length; i++) {\n            isEnd[i] = false;\n        }\n        let tempValue = 0;\n        let endFlag = 1;\n\n        // Scan from end to start, find the end word\n        for (let i = matchStrs.length - 1; i >= 0; i--) {\n            if (this.roundNumberSet.has(matchStrs[i])) {\n                // if false,then continue\n                // You will meet hundred first, then thousand.\n                if (endFlag > this.config.roundNumberMap.get(matchStrs[i])) {\n                    continue;\n                }\n                isEnd[i] = true;\n                endFlag = this.config.roundNumberMap.get(matchStrs[i]);\n            }\n        }\n\n        if (endFlag === 1) {\n            let tempStack = new Array<number>();\n            let oldSym = \"\";\n            matchStrs.forEach(matchStr => {\n                let isCardinal = this.config.cardinalNumberMap.has(matchStr);\n                let isOrdinal = this.config.ordinalNumberMap.has(matchStr);\n                if (isCardinal || isOrdinal) {\n                    let matchValue = isCardinal\n                        ? this.config.cardinalNumberMap.get(matchStr)\n                        : this.config.ordinalNumberMap.get(matchStr);\n\n                    // This is just for ordinal now. Not for fraction ever.\n                    if (isOrdinal) {\n                        let fracPart = this.config.ordinalNumberMap.get(matchStr);\n                        if (tempStack.length > 0) {\n                            let intPart = tempStack.pop();\n                            // if intPart >= fracPart, it means it is an ordinal number\n                            // it begins with an integer, ends with an ordinal\n                            // e.g. ninety-ninth\n                            if (intPart >= fracPart) {\n                                tempStack.push(intPart + fracPart);\n                            }\n                            // another case of the type is ordinal\n                            // e.g. three hundredth\n                            else {\n                                while (tempStack.length > 0) {\n                                    intPart = intPart + tempStack.pop();\n                                }\n                                tempStack.push(intPart * fracPart);\n                            }\n                        }\n                        else {\n                            tempStack.push(fracPart);\n                        }\n                    }\n                    else if (this.config.cardinalNumberMap.has(matchStr)) {\n                        if (oldSym === \"-\") {\n                            let sum = tempStack.pop() + matchValue;\n                            tempStack.push(sum);\n                        }\n                        else if (oldSym === this.config.writtenIntegerSeparatorTexts[0] || tempStack.length < 2) {\n                            tempStack.push(matchValue);\n                        }\n                        else if (tempStack.length >= 2) {\n                            let sum = tempStack.pop() + matchValue;\n                            sum = tempStack.pop() + sum;\n                            tempStack.push(sum);\n                        }\n                    }\n                }\n                else {\n                    let complexValue = this.config.resolveCompositeNumber(matchStr);\n                    if (complexValue !== 0) {\n                        tempStack.push(complexValue);\n                    }\n                }\n                oldSym = matchStr;\n            });\n\n            tempStack.forEach(stackValue => {\n                tempValue += stackValue;\n            });\n        }\n        else {\n            let lastIndex = 0;\n            let mulValue = 1;\n            let partValue = 1;\n            \n            for (let i = 0; i < isEnd.length; i++) {\n                if (isEnd[i]) {\n                    mulValue = this.config.roundNumberMap.get(matchStrs[i]);\n                    partValue = 1;\n\n                    if (i !== 0) {\n                        partValue = this.getIntValue(matchStrs.slice(lastIndex, i));\n                    }\n\n                    tempValue += mulValue * partValue;\n                    lastIndex = i + 1;\n                }\n            }\n            \n            // Calculate the part like \"thirty-one\"\n            mulValue = 1;\n            if (lastIndex !== isEnd.length) {\n                partValue = this.getIntValue(matchStrs.slice(lastIndex, isEnd.length));\n                tempValue += mulValue * partValue;\n            }\n            \n        }\n\n        return tempValue;\n    }\n\n    private getPointValue(matchStrs: Array<string>): number {\n        let ret = 0;\n        let firstMatch = matchStrs[0];\n\n        if (this.config.cardinalNumberMap.has(firstMatch) && this.config.cardinalNumberMap.get(firstMatch) >= 10) {\n            let prefix = \"0.\";\n            let tempInt = this.getIntValue(matchStrs);\n            let all = prefix + tempInt;\n            ret = parseFloat(all);\n        }\n        else {\n            let scale = new BigNumber(0.1);\n            for (let i = 0; i < matchStrs.length; i++) {\n                ret += scale.times(this.config.cardinalNumberMap.get(matchStrs[i])).toNumber();\n                // scale *= 0.1;\n                scale = scale.times(0.1);\n            }\n        }\n\n        return ret;\n    }\n\n    protected getDigitalValue(digitStr: string, power: number): number {\n        let tmp = new BigNumber(0);\n        let scale = new BigNumber(10);\n        let dot = false;\n        let isLessZero = false;\n        let isFrac = false;\n\n        let calStack = new Array<BigNumber>();\n\n        for (let i = 0; i < digitStr.length; i++) {\n            let ch = digitStr[i];\n            if (ch === '/') {\n                isFrac = true;\n            }\n\n            if (ch === ' ' || ch === '/') {\n                calStack.push(tmp);\n                tmp = new BigNumber(0);\n            }\n            else if (ch >= '0' && ch <= '9') {\n                if (dot) {\n                    // tmp = tmp + scale * (ch.charCodeAt(0) - 48);\n                    // scale *= 0.1;\n                    tmp = tmp.plus(scale.times(ch.charCodeAt(0) - 48));\n                    scale = scale.times(0.1);\n                }\n                else {\n                    // tmp = tmp * scale + (ch.charCodeAt(0) - 48);\n                    tmp = tmp.times(scale).plus(ch.charCodeAt(0) - 48);\n                }\n            }\n            else if (ch === this.config.decimalSeparatorChar) {\n                dot = true;\n                scale = new BigNumber(0.1);\n            }\n            else if (ch === '-') {\n                isLessZero = true;\n            }\n        }\n        calStack.push(tmp);\n\n        // is the number is a fraction.\n        let calResult = new BigNumber(0);\n        if (isFrac) {\n            let deno = calStack.pop();\n            let mole = calStack.pop();\n            // calResult += mole / deno;\n            calResult = calResult.plus(mole.dividedBy(deno));\n        }\n\n        while (calStack.length > 0) {\n            calResult = calResult.plus(calStack.pop());\n        }\n\n        // calResult *= power;\n        calResult = calResult.times(power);\n\n        if (isLessZero) {\n            return calResult.negated().toNumber();\n        }\n\n\n        return calResult.toNumber();\n    }\n}\n\nexport class BasePercentageParser extends BaseNumberParser {\n    parse(extResult: ExtractResult): ParseResult | null {\n\n        let originText = extResult.text;\n\n        // do replace text & data from extended info\n        if (extResult.data && extResult.data instanceof Array) {\n            extResult.text = extResult.data[0];\n            extResult.data = extResult.data[1].data;\n        }\n\n        let ret = super.parse(extResult) as ParseResult;\n\n        if (ret.resolutionStr && ret.resolutionStr.length > 0) {\n            if (!ret.resolutionStr.trim().endsWith(\"%\")) {\n                ret.resolutionStr = ret.resolutionStr.trim() + \"%\";\n            }\n        }\n\n        ret.data = extResult.text;\n        ret.text = originText;\n\n        return ret;\n    }\n}","export class Constants {\n    static readonly SYS_NUM_CARDINAL: string = \"builtin.num.cardinal\";\n    static readonly SYS_NUM_DOUBLE: string = \"builtin.num.double\";\n    static readonly SYS_NUM_FRACTION: string = \"builtin.num.fraction\";\n    static readonly SYS_NUM_INTEGER: string = \"builtin.num.integer\";\n    static readonly SYS_NUM: string = \"builtin.num\";\n    static readonly SYS_NUM_ORDINAL: string = \"builtin.num.ordinal\";\n    static readonly SYS_NUM_PERCENTAGE: string = \"builtin.num.percentage\";\n}","import { ExtractResult, IParser, ParseResult } from \"recognizers-text\";\nimport { BaseNumberParser } from \"../parsers\";\nimport { ChineseNumberParserConfiguration } from \"./parserConfiguration\";\nimport { Constants } from \"../constants\";\nimport { LongFormatType } from \"../models\";\nimport { ChineseNumeric } from \"../../resources/chineseNumeric\";\nimport { CultureInfo, Culture } from \"../../culture\";\nimport { RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { BigNumber } from 'bignumber.js';\nimport trimEnd = require(\"lodash.trimend\");\nimport sortBy = require(\"lodash.sortby\");\n\nexport class ChineseNumberParser extends BaseNumberParser {\n    readonly config: ChineseNumberParserConfiguration;\n\n    constructor(config: ChineseNumberParserConfiguration) {\n        super(config);\n        this.config = config;\n    }\n\n    private toString(value: any): string {\n        return this.config.cultureInfo\n            ? this.config.cultureInfo.format(value)\n            : value.toString();\n    }\n\n    parse(extResult: ExtractResult): ParseResult | null {\n        let extra = '';\n        let result: ParseResult;\n        extra = extResult.data;\n        let simplifiedExtResult: ExtractResult = {\n            start: extResult.start,\n            length: extResult.length,\n            data: extResult.data,\n            text: this.replaceTraditionalWithSimplified(extResult.text),\n            type: extResult.type\n        }\n\n        if (!extra) {\n            return result;\n        }\n\n        if (extra.includes(\"Per\")) {\n            result = this.perParseChs(simplifiedExtResult);\n        } else if (extra.includes(\"Num\")) {\n            simplifiedExtResult.text = this.replaceFullWithHalf(simplifiedExtResult.text);\n            result = this.digitNumberParse(simplifiedExtResult);\n            result.resolutionStr = this.toString(result.value);\n        } else if (extra.includes(\"Pow\")) {\n            simplifiedExtResult.text = this.replaceFullWithHalf(simplifiedExtResult.text);\n            result = this.powerNumberParse(simplifiedExtResult);\n            result.resolutionStr = this.toString(result.value);\n        } else if (extra.includes(\"Frac\")) {\n            result = this.fracParseChs(simplifiedExtResult);\n        } else if (extra.includes(\"Dou\")) {\n            result = this.douParseChs(simplifiedExtResult);\n        } else if (extra.includes(\"Integer\")) {\n            result = this.intParseChs(simplifiedExtResult);\n        } else if (extra.includes(\"Ordinal\")) {\n            result = this.ordParseChs(simplifiedExtResult);\n        }\n\n        if (result) {\n            result.text = extResult.text;\n        }\n\n        return result;\n    }\n\n    private replaceTraditionalWithSimplified(value: string): string {\n        if (StringUtility.isNullOrWhitespace(value)) {\n            return value;\n        }\n\n        let result = '';\n        for(let index = 0; index < value.length; index++) {\n            result = result.concat(this.config.tratoSimMapChs.get(value.charAt(index)) || value.charAt(index));\n        }\n        return result;\n    }\n\n    private replaceFullWithHalf(value: string): string {\n        if (StringUtility.isNullOrWhitespace(value)) {\n            return value;\n        }\n\n        let result = '';\n        for(let index = 0; index < value.length; index++) {\n            result = result.concat(this.config.fullToHalfMapChs.get(value.charAt(index)) || value.charAt(index));\n        }\n        return result;\n    }\n\n    private replaceUnit(value: string): string {\n        if (StringUtility.isNullOrEmpty(value)) return value;\n        let result = value;\n        this.config.unitMapChs.forEach((value: string, key: string) => {\n            result = result.replace(new RegExp(key, 'g'), value);\n        });\n        return result;\n    }\n\n    private perParseChs(extResult: ExtractResult): ParseResult {\n        let result = new ParseResult(extResult);\n\n        let resultText = extResult.text;\n        let power = 1;\n\n        if (extResult.data.includes(\"Spe\")) {\n            resultText = this.replaceFullWithHalf(resultText);\n            resultText = this.replaceUnit(resultText);\n\n            if (resultText === \"半折\") {\n                result.value = 50;\n            } else if (resultText === \"10成\") {\n                result.value = 100;\n            } else {\n                let matches = RegExpUtility.getMatches(this.config.speGetNumberRegex, resultText);\n                let intNumber: number;\n\n                if (matches.length === 2) {\n                    let intNumberChar = matches[0].value.charAt(0);\n\n                    if (intNumberChar === \"对\") {\n                        intNumber = 5;\n                    } else if (intNumberChar === \"十\" || intNumberChar === \"拾\") {\n                        intNumber = 10;\n                    } else {\n                        intNumber = this.config.zeroToNineMapChs.get(intNumberChar);\n                    }\n\n                    let pointNumberChar = matches[1].value.charAt(0);\n                    let pointNumber: number;\n\n                    if (pointNumberChar === \"半\") {\n                        pointNumber = 0.5;\n                    } else {\n                        pointNumber = this.config.zeroToNineMapChs.get(pointNumberChar) * 0.1;\n                    }\n\n                    result.value = (intNumber + pointNumber) * 10;\n                } else {\n                    let intNumberChar = matches[0].value.charAt(0);\n\n                    if (intNumberChar === \"对\") {\n                        intNumber = 5;\n                    } else if (intNumberChar === \"十\" || intNumberChar === \"拾\") {\n                        intNumber = 10;\n                    } else {\n                        intNumber = this.config.zeroToNineMapChs.get(intNumberChar);\n                    }\n                    result.value = intNumber * 10;\n                }\n            }\n        } else if (extResult.data.includes(\"Num\")) {\n            let doubleMatch = RegExpUtility.getMatches(this.config.percentageRegex, resultText).pop();\n            let doubleText = doubleMatch.value;\n\n            if (doubleText.includes(\"k\") || doubleText.includes(\"K\") || doubleText.includes(\"ｋ\") || doubleText.includes(\"Ｋ\")) {\n                power = 1000;\n            }\n\n            if (doubleText.includes(\"M\") || doubleText.includes(\"Ｍ\")) {\n                power = 1000000;\n            }\n\n            if (doubleText.includes(\"G\") || doubleText.includes(\"Ｇ\")) {\n                power = 1000000000;\n            }\n\n            if (doubleText.includes(\"T\") || doubleText.includes(\"Ｔ\")) {\n                power = 1000000000000;\n            }\n\n            result.value = this.getDigitValueChs(resultText, power);\n        } else {\n            let doubleMatch = RegExpUtility.getMatches(this.config.percentageRegex, resultText).pop();\n            let doubleText = this.replaceUnit(doubleMatch.value);\n\n            let splitResult = RegExpUtility.split(this.config.pointRegexChs, doubleText);\n            if (splitResult[0] === \"\") {\n                splitResult[0] = \"零\"\n            }\n\n            let doubleValue = this.getIntValueChs(splitResult[0]);\n            if (splitResult.length === 2) {\n                if (RegExpUtility.isMatch(this.config.symbolRegex, splitResult[0])) {\n                    doubleValue -= this.getPointValueChs(splitResult[1]);\n                } else {\n                    doubleValue += this.getPointValueChs(splitResult[1]);\n                }\n            }\n\n            result.value = doubleValue;\n        }\n\n        result.resolutionStr = this.toString(result.value) + \"%\";\n        return result;\n    }\n\n    private fracParseChs(extResult: ExtractResult): ParseResult {\n        let result = new ParseResult(extResult);\n\n        let resultText = extResult.text;\n        let splitResult = RegExpUtility.split(this.config.fracSplitRegex, resultText);\n        let intPart = \"\";\n        let demoPart = \"\";\n        let numPart = \"\";\n        if (splitResult.length === 3) {\n            intPart = splitResult[0] || \"\";\n            demoPart = splitResult[1] || \"\";\n            numPart = splitResult[2] || \"\";\n        } else {\n            intPart = \"零\";\n            demoPart = splitResult[0] || \"\";\n            numPart = splitResult[1] || \"\";\n        }\n\n        let intValue = this.isDigitChs(intPart)\n            ? this.getDigitValueChs(intPart, 1.0)\n            : this.getIntValueChs(intPart);\n\n        let numValue = this.isDigitChs(numPart)\n            ? this.getDigitValueChs(numPart, 1.0)\n            : this.getIntValueChs(numPart);\n\n        let demoValue = this.isDigitChs(demoPart)\n            ? this.getDigitValueChs(demoPart, 1.0)\n            : this.getIntValueChs(demoPart);\n\n        if (RegExpUtility.isMatch(this.config.symbolRegex, intPart)) {\n            result.value = intValue - numValue / demoValue;\n        } else {\n            result.value = intValue + numValue / demoValue;\n        }\n\n        result.resolutionStr = this.toString(result.value);\n        return result;\n    }\n\n    private douParseChs(extResult: ExtractResult): ParseResult {\n        let result = new ParseResult(extResult);\n        \n        let resultText = extResult.text;\n\n        if (RegExpUtility.isMatch(this.config.doubleAndRoundChsRegex, resultText)) {\n            resultText = this.replaceUnit(resultText);\n            let power = this.config.roundNumberMapChs.get(resultText.charAt(resultText.length - 1));\n            result.value = this.getDigitValueChs(resultText.substr(0, resultText.length - 1), power);\n        } else {\n            resultText = this.replaceUnit(resultText);\n            let splitResult = RegExpUtility.split(this.config.pointRegexChs, resultText);\n\n            if (splitResult[0] === \"\") {\n                splitResult[0] = \"零\";\n            }\n\n            if (RegExpUtility.isMatch(this.config.symbolRegex, splitResult[0])) {\n                result.value = this.getIntValueChs(splitResult[0]) - this.getPointValueChs(splitResult[1]);\n            } else {\n                result.value = this.getIntValueChs(splitResult[0]) + this.getPointValueChs(splitResult[1]);\n            }\n        }\n\n        result.resolutionStr = this.toString(result.value);        \n        return result;\n    }\n\n    private intParseChs(extResult: ExtractResult): ParseResult {\n        let result = new ParseResult(extResult);\n        \n        result.value = this.getIntValueChs(extResult.text);\n        result.resolutionStr = this.toString(result.value);        \n        return result;\n    }\n\n    private ordParseChs(extResult: ExtractResult): ParseResult {\n        let result = new ParseResult(extResult);\n        \n        let resultText = extResult.text.substr(1);\n\n        if (RegExpUtility.isMatch(this.config.digitNumRegex, resultText)) {\n            result.value = this.getDigitValueChs(resultText, 1);\n        } else {\n            result.value = this.getIntValueChs(resultText);\n        }\n\n        result.resolutionStr = this.toString(result.value);        \n        return result;\n    }\n\n    private getDigitValueChs(value: string, power: number): number {\n        let isLessZero = false;\n        let resultStr = value;\n        if (RegExpUtility.isMatch(this.config.symbolRegex, resultStr)) {\n            isLessZero = true;\n            resultStr = resultStr.substr(1);\n        }\n\n        resultStr = this.replaceFullWithHalf(resultStr);\n        let result = this.getDigitalValue(resultStr, power);\n        if (isLessZero) {\n            result = - result;\n        }\n\n        return result;\n    }\n\n    private getIntValueChs(value: string): number {\n        let resultStr = value;\n\n        let isDozen = false;\n        let isPair = false;\n        if (RegExpUtility.isMatch(this.config.dozenRegex, resultStr)) {\n            isDozen = true;\n            resultStr = resultStr.substr(0, resultStr.length - 1);\n        } else if (RegExpUtility.isMatch(this.config.pairRegex, resultStr)) {\n            isPair = true;\n            resultStr = resultStr.substr(0, resultStr.length - 1);\n        }\n\n        resultStr = this.replaceUnit(resultStr);\n        let intValue = 0;\n        let partValue = 0;\n        let beforeValue = 1;\n        let isRoundBefore = false;\n        let roundBefore = -1;\n        let roundDefault = 1;\n        let isLessZero = false;\n\n        if (RegExpUtility.isMatch(this.config.symbolRegex, resultStr)) {\n            isLessZero = true;\n            resultStr = resultStr.substr(1);\n        }\n\n        for(let index = 0; index < resultStr.length; index++) {\n            let resultChar = resultStr.charAt(index);\n            if (this.config.roundNumberMapChs.has(resultChar)) {\n                let roundRecent = this.config.roundNumberMapChs.get(resultChar);\n                if (roundBefore !== -1 && roundRecent > roundBefore) {\n                    if (isRoundBefore) {\n                        intValue += partValue * roundRecent;\n                        isRoundBefore = false;\n                    } else {\n                        partValue += beforeValue * roundDefault;\n                        intValue += partValue * roundRecent;\n                    }\n\n                    roundBefore = -1;\n                    partValue = 0;\n                } else {\n                    isRoundBefore = true;\n                    partValue += beforeValue * roundRecent;\n                    roundBefore = roundRecent;\n\n                    if ((index === resultStr.length - 1) || this.config.roundDirectListChs.some(o => o === resultChar)) {\n                        intValue += partValue;\n                        partValue = 0;\n                    }\n                }\n\n                roundDefault = roundRecent / 10;\n            } else if (this.config.zeroToNineMapChs.has(resultChar)) {\n                if (index !== resultStr.length - 1) {\n                    if ((resultChar === \"零\") && !this.config.roundNumberMapChs.has(resultStr.charAt(index + 1))) {\n                        beforeValue = 1;\n                        roundDefault = 1;\n                    } else {\n                        beforeValue = this.config.zeroToNineMapChs.get(resultChar);\n                        isRoundBefore = false;\n                    }\n                } else {\n                    partValue += this.config.zeroToNineMapChs.get(resultChar) * roundDefault;\n                    intValue += partValue;\n                    partValue = 0;\n                }\n            }\n        }\n\n        if (isLessZero) {\n            intValue = - intValue;\n        }\n\n        if (isDozen) {\n            intValue = intValue * 12;\n        }\n\n        if (isPair) {\n            intValue = intValue * 2;\n        }\n\n        return intValue;\n    }\n\n    private getPointValueChs(value: string): number {\n        let result = 0;\n        let scale = 0.1;\n        for(let index = 0; index < value.length; index++) {\n            result += scale * this.config.zeroToNineMapChs.get(value.charAt(index));\n            scale *= 0.1;\n        }\n\n        return result;\n    }\n\n    private isDigitChs(value: string): boolean {\n        return !StringUtility.isNullOrEmpty(value) \n            && RegExpUtility.isMatch(this.config.digitNumRegex, value);\n    }\n}","\nimport { INumberParserConfiguration, BaseNumberParser, BasePercentageParser } from \"./parsers\";\nimport { Culture } from \"../culture\";\nimport { Constants } from \"./constants\";\nimport { ChineseNumberParser } from \"./chinese/parsers\";\nimport { ChineseNumberParserConfiguration } from \"./chinese/parserConfiguration\";\n\nexport enum AgnosticNumberParserType {\n    Cardinal,\n    Double,\n    Fraction,\n    Integer,\n    Number,\n    Ordinal,\n    Percentage\n}\n\nexport class AgnosticNumberParserFactory {\n    static getParser(type: AgnosticNumberParserType, languageConfiguration: INumberParserConfiguration): BaseNumberParser {\n\n        let isChinese = languageConfiguration.cultureInfo.code.toLowerCase() === Culture.Chinese;\n\n        let parser: BaseNumberParser;\n\n        if (isChinese) {\n            parser = new ChineseNumberParser(languageConfiguration as ChineseNumberParserConfiguration);\n\n            // console.log(parser);\n        }\n        else {\n            parser = new BaseNumberParser(languageConfiguration);\n        }\n\n        \n\n        switch (type) {\n            case AgnosticNumberParserType.Cardinal:\n                parser.supportedTypes = [Constants.SYS_NUM_CARDINAL, Constants.SYS_NUM_INTEGER, Constants.SYS_NUM_DOUBLE];\n                break;\n            case AgnosticNumberParserType.Double:\n                parser.supportedTypes = [Constants.SYS_NUM_DOUBLE];\n                break;\n            case AgnosticNumberParserType.Fraction:\n                parser.supportedTypes = [Constants.SYS_NUM_FRACTION];\n                break;\n            case AgnosticNumberParserType.Integer:\n                parser.supportedTypes = [Constants.SYS_NUM_INTEGER];\n                break;\n            case AgnosticNumberParserType.Ordinal:\n                parser.supportedTypes = [Constants.SYS_NUM_ORDINAL];\n                break;\n            case AgnosticNumberParserType.Percentage:\n                if (!isChinese) {\n                    parser = new BasePercentageParser(languageConfiguration);\n                }\n                break;\n        }\n\n        return parser;\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nexport namespace BaseNumbers {\n\texport const NumberReplaceToken = '@builtin.num';\n\texport const IntegerRegexDefinition = (placeholder: string, thousandsmark: string) => { return `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!(\\\\d+\\\\.|\\\\d+,))))\\\\d{1,3}(${thousandsmark}\\\\d{3})+(?=${placeholder})`; }\n\texport const DoubleRegexDefinition = (placeholder: string, thousandsmark: string, decimalmark: string) => { return `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\.|\\\\d+,)))\\\\d{1,3}(${thousandsmark}\\\\d{3})+${decimalmark}\\\\d+(?=${placeholder})`; }\n\texport const PlaceHolderDefault = '\\\\\\\\D|\\\\\\\\b';\n}\n","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace EnglishNumeric {\n\texport const LangMarker = 'Eng';\n\texport const RoundNumberIntegerRegex = `(hundred|thousand|million|billion|trillion)`;\n\texport const ZeroToNineIntegerRegex = `(three|seven|eight|four|five|zero|nine|one|two|six)`;\n\texport const AnIntRegex = `(an|a)(?=\\\\s)`;\n\texport const TenToNineteenIntegerRegex = `(seventeen|thirteen|fourteen|eighteen|nineteen|fifteen|sixteen|eleven|twelve|ten)`;\n\texport const TensNumberIntegerRegex = `(seventy|twenty|thirty|eighty|ninety|forty|fifty|sixty)`;\n\texport const SeparaIntRegex = `(((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\\\s+(and\\\\s+)?|\\\\s*-\\\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex})(\\\\s+${RoundNumberIntegerRegex})*))|((${AnIntRegex}(\\\\s+${RoundNumberIntegerRegex})+))`;\n\texport const AllIntRegex = `((((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\\\s+(and\\\\s+)?|\\\\s*-\\\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\\\s+${RoundNumberIntegerRegex})+)\\\\s+(and\\\\s+)?)*${SeparaIntRegex})`;\n\texport const PlaceHolderPureNumber = `\\\\b`;\n\texport const PlaceHolderDefault = `\\\\D|\\\\b`;\n\texport const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<!\\\\d+\\\\s*)-\\\\s*)|(?<=\\\\b))\\\\d+(?!(\\\\.\\\\d+[a-zA-Z]))(?=${placeholder})`; }\n\texport const NumbersWithSuffix = `(((?<!\\\\d+\\\\s*)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(K|k|M|T|G)(?=\\\\b)`;\n\texport const RoundNumberIntegerRegexWithLocks = `(?<=\\\\b)\\\\d+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const NumbersWithDozenSuffix = `(((?<!\\\\d+\\\\s*)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+dozen(s)?(?=\\\\b)`;\n\texport const AllIntRegexWithLocks = `((?<=\\\\b)${AllIntRegex}(?=\\\\b))`;\n\texport const AllIntRegexWithDozenSuffixLocks = `(?<=\\\\b)(((half\\\\s+)?a\\\\s+dozen)|(${AllIntRegex}\\\\s+dozen(s)?))(?=\\\\b)`;\n\texport const SignSymbolRegexEng = `(negative|minus)\\\\s*${AllIntRegex}`;\n\texport const RoundNumberOrdinalRegex = `(hundredth|thousandth|millionth|billionth|trillionth)`;\n\texport const BasicOrdinalRegex = `(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|thirtieth|fortieth|fiftieth|sixtieth|seventieth|eightieth|ninetieth)`;\n\texport const SuffixBasicOrdinalRegex = `(((((${TensNumberIntegerRegex}(\\\\s+(and\\\\s+)?|\\\\s*-\\\\s*)${ZeroToNineIntegerRegex})|${TensNumberIntegerRegex}|${ZeroToNineIntegerRegex}|${AnIntRegex})(\\\\s+${RoundNumberIntegerRegex})+)\\\\s+(and\\\\s+)?)*(${TensNumberIntegerRegex}(\\\\s+|\\\\s*-\\\\s*))?${BasicOrdinalRegex})`;\n\texport const SuffixRoundNumberOrdinalRegex = `((${AllIntRegex}\\\\s+)${RoundNumberOrdinalRegex})`;\n\texport const AllOrdinalRegex = `(${SuffixBasicOrdinalRegex}|${SuffixRoundNumberOrdinalRegex})`;\n\texport const OrdinalSuffixRegex = `(?<=\\\\b)((\\\\d*(1st|2nd|3rd|4th|5th|6th|7th|8th|9th|0th))|(11th|12th))(?=\\\\b)`;\n\texport const OrdinalNumericRegex = `(?<=\\\\b)(\\\\d{1,3}(\\\\s*,\\\\s*\\\\d{3})*\\\\s*th)(?=\\\\b)`;\n\texport const OrdinalRoundNumberRegex = `(?<!(a|an)\\\\s+)${RoundNumberOrdinalRegex}`;\n\texport const OrdinalEnglishRegex = `(?<=\\\\b)${AllOrdinalRegex}(?=\\\\b)`;\n\texport const FractionNotationWithSpacesRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNotationRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNounRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+(and\\\\s+)?)?(${AllIntRegex})(\\\\s+|\\\\s*-\\\\s*)(((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex}))s|halves|quarters)(?=\\\\b)`;\n\texport const FractionNounWithArticleRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+(and\\\\s+)?)?(a|an|one)(\\\\s+|\\\\s*-\\\\s*)((${AllOrdinalRegex})|(${RoundNumberOrdinalRegex})|half|quarter)(?=\\\\b)`;\n\texport const FractionPrepositionRegex = `(?<=\\\\b)((${AllIntRegex})|((?<!\\\\.)\\\\d+))\\\\s+over\\\\s+((${AllIntRegex})|(\\\\d+)(?!\\\\.))(?=\\\\b)`;\n\texport const AllPointRegex = `((\\\\s+${ZeroToNineIntegerRegex})+|(\\\\s+${SeparaIntRegex}))`;\n\texport const AllFloatRegex = `${AllIntRegex}(\\\\s+point)${AllPointRegex}`;\n\texport const DoubleWithMultiplierRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\.)))\\\\d+\\\\.\\\\d+\\\\s*(K|k|M|G|T|B|b)(?=\\\\b)`;\n\texport const DoubleExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\.)))(\\\\d+(\\\\.\\\\d+)?)e([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const DoubleCaretExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\.)))(\\\\d+(\\\\.\\\\d+)?)\\\\^([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\.)))\\\\d+\\\\.\\\\d+(?!(\\\\.\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\\\s|^)(?<!(\\\\d+))\\\\.\\\\d+(?!(\\\\.\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithRoundNumber = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\.)))\\\\d+\\\\.\\\\d+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const DoubleAllFloatRegex = `((?<=\\\\b)${AllFloatRegex}(?=\\\\b))`;\n\texport const CurrencyRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(B|b|m|t|g)(?=\\\\b)`;\n\texport const NumberWithSuffixPercentage = `(${BaseNumbers.NumberReplaceToken})(\\\\s*)(%|per cents|per cent|cents|cent|percentage|percents|percent)`;\n\texport const NumberWithPrefixPercentage = `(per cent of|percent of|percents of)(\\\\s*)(${BaseNumbers.NumberReplaceToken})`;\n\texport const DecimalSeparatorChar = '.';\n\texport const FractionMarkerToken = 'over';\n\texport const NonDecimalSeparatorChar = ',';\n\texport const HalfADozenText = 'six';\n\texport const WordSeparatorToken = 'and';\n\texport const WrittenDecimalSeparatorTexts = [ 'point' ];\n\texport const WrittenGroupSeparatorTexts = [ 'punto' ];\n\texport const WrittenIntegerSeparatorTexts = [ 'and' ];\n\texport const WrittenFractionSeparatorTexts = [ 'and' ];\n\texport const HalfADozenRegex = `half\\\\s+a\\\\s+dozen`;\n\texport const DigitalNumberRegex = `((?<=\\\\b)(hundred|thousand|million|billion|trillion|dozen(s)?)(?=\\\\b))|((?<=(\\\\d|\\\\b))(k|t|m|g|b)(?=\\\\b))`;\n\texport const SignMap: ReadonlyMap<string, number> = new Map<string, number>([[\"negative\", -1],[\"minus\", -1]]);\n\texport const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"negative\", -1],[\"minus\", -1],[\"a\", 1],[\"zero\", 0],[\"an\", 1],[\"one\", 1],[\"two\", 2],[\"three\", 3],[\"four\", 4],[\"five\", 5],[\"six\", 6],[\"seven\", 7],[\"eight\", 8],[\"nine\", 9],[\"ten\", 10],[\"eleven\", 11],[\"twelve\", 12],[\"dozen\", 12],[\"dozens\", 12],[\"thirteen\", 13],[\"fourteen\", 14],[\"fifteen\", 15],[\"sixteen\", 16],[\"seventeen\", 17],[\"eighteen\", 18],[\"nineteen\", 19],[\"twenty\", 20],[\"thirty\", 30],[\"forty\", 40],[\"fifty\", 50],[\"sixty\", 60],[\"seventy\", 70],[\"eighty\", 80],[\"ninety\", 90],[\"hundred\", 100],[\"thousand\", 1000],[\"million\", 1000000],[\"billion\", 1000000000],[\"trillion\", 1000000000000]]);\n\texport const OrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"first\", 1],[\"second\", 2],[\"secondary\", 2],[\"half\", 2],[\"third\", 3],[\"fourth\", 4],[\"quarter\", 4],[\"fifth\", 5],[\"sixth\", 6],[\"seventh\", 7],[\"eighth\", 8],[\"ninth\", 9],[\"tenth\", 10],[\"eleventh\", 11],[\"twelfth\", 12],[\"thirteenth\", 13],[\"fourteenth\", 14],[\"fifteenth\", 15],[\"sixteenth\", 16],[\"seventeenth\", 17],[\"eighteenth\", 18],[\"nineteenth\", 19],[\"twentieth\", 20],[\"thirtieth\", 30],[\"fortieth\", 40],[\"fiftieth\", 50],[\"sixtieth\", 60],[\"seventieth\", 70],[\"eightieth\", 80],[\"ninetieth\", 90],[\"hundredth\", 100],[\"thousandth\", 1000],[\"millionth\", 1000000],[\"billionth\", 1000000000],[\"trillionth\", 1000000000000],[\"firsts\", 1],[\"halves\", 2],[\"thirds\", 3],[\"fourths\", 4],[\"quarters\", 4],[\"fifths\", 5],[\"sixths\", 6],[\"sevenths\", 7],[\"eighths\", 8],[\"ninths\", 9],[\"tenths\", 10],[\"elevenths\", 11],[\"twelfths\", 12],[\"thirteenths\", 13],[\"fourteenths\", 14],[\"fifteenths\", 15],[\"sixteenths\", 16],[\"seventeenths\", 17],[\"eighteenths\", 18],[\"nineteenths\", 19],[\"twentieths\", 20],[\"thirtieths\", 30],[\"fortieths\", 40],[\"fiftieths\", 50],[\"sixtieths\", 60],[\"seventieths\", 70],[\"eightieths\", 80],[\"ninetieths\", 90],[\"hundredths\", 100],[\"thousandths\", 1000],[\"millionths\", 1000000],[\"billionths\", 1000000000],[\"trillionths\", 1000000000000]]);\n\texport const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"hundred\", 100],[\"thousand\", 1000],[\"million\", 1000000],[\"billion\", 1000000000],[\"trillion\", 1000000000000],[\"hundredth\", 100],[\"thousandth\", 1000],[\"millionth\", 1000000],[\"billionth\", 1000000000],[\"trillionth\", 1000000000000],[\"hundredths\", 100],[\"thousandths\", 1000],[\"millionths\", 1000000],[\"billionths\", 1000000000],[\"trillionths\", 1000000000000],[\"dozen\", 12],[\"dozens\", 12],[\"k\", 1000],[\"m\", 1000000],[\"g\", 1000000000],[\"b\", 1000000000],[\"t\", 1000000000000]]);\n}\n","import { ParseResult } from \"recognizers-text\";\nimport { INumberParserConfiguration } from \"../parsers\";\nimport { CultureInfo, Culture } from \"../../culture\";\nimport { EnglishNumeric } from \"../../resources/englishNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class EnglishNumberParserConfiguration implements INumberParserConfiguration {\n\n    readonly signMap: ReadonlyMap<string, number>;\n    readonly cardinalNumberMap: ReadonlyMap<string, number>;\n    readonly ordinalNumberMap: ReadonlyMap<string, number>;\n    readonly roundNumberMap: ReadonlyMap<string, number>;\n    readonly cultureInfo: CultureInfo;\n    readonly digitalNumberRegex: RegExp;\n    readonly fractionMarkerToken: string;\n    readonly halfADozenRegex: RegExp;\n    readonly halfADozenText: string;\n    readonly langMarker: string;\n    readonly nonDecimalSeparatorChar: string;\n    readonly decimalSeparatorChar: string;\n    readonly wordSeparatorToken: string;\n    readonly writtenDecimalSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenGroupSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenIntegerSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenFractionSeparatorTexts: ReadonlyArray<string>;\n\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        this.cultureInfo = ci;\n\n        this.langMarker = EnglishNumeric.LangMarker;\n        this.decimalSeparatorChar = EnglishNumeric.DecimalSeparatorChar;\n        this.fractionMarkerToken = EnglishNumeric.FractionMarkerToken;\n        this.nonDecimalSeparatorChar = EnglishNumeric.NonDecimalSeparatorChar;\n        this.halfADozenText = EnglishNumeric.HalfADozenText;\n        this.wordSeparatorToken = EnglishNumeric.WordSeparatorToken;\n\n        this.writtenDecimalSeparatorTexts = EnglishNumeric.WrittenDecimalSeparatorTexts;\n        this.writtenGroupSeparatorTexts = EnglishNumeric.WrittenGroupSeparatorTexts;\n        this.writtenIntegerSeparatorTexts = EnglishNumeric.WrittenIntegerSeparatorTexts;\n        this.writtenFractionSeparatorTexts = EnglishNumeric.WrittenFractionSeparatorTexts;\n\n        this.signMap = EnglishNumeric.SignMap;\n        this.cardinalNumberMap = EnglishNumeric.CardinalNumberMap;\n        this.ordinalNumberMap = EnglishNumeric.OrdinalNumberMap;\n        this.roundNumberMap = EnglishNumeric.RoundNumberMap;\n        this.halfADozenRegex = RegExpUtility.getSafeRegExp(EnglishNumeric.HalfADozenRegex, \"gis\");\n        this.digitalNumberRegex = RegExpUtility.getSafeRegExp(EnglishNumeric.DigitalNumberRegex, \"gis\");\n    }\n\n    normalizeTokenSet(tokens: ReadonlyArray<string>, context: ParseResult): ReadonlyArray<string> {\n\n        let fracWords = new Array<string>();\n        let tokenList = Array.from(tokens);\n        let tokenLen = tokenList.length;\n        for (let i = 0; i < tokenLen; i++) {\n            if ((i < tokenLen - 2) && tokenList[i + 1] === \"-\") {\n                fracWords.push(tokenList[i] + tokenList[i + 1] + tokenList[i + 2]);\n                i += 2;\n            }\n            else {\n                fracWords.push(tokenList[i]);\n            }\n        }\n        return fracWords;\n    }\n\n    resolveCompositeNumber(numberStr: string): number {\n        \n        if (numberStr.includes(\"-\")) {\n            let numbers = numberStr.split('-');\n            let ret = 0;\n            numbers.forEach(num => {\n                if (this.ordinalNumberMap.has(num)) {\n                    ret += this.ordinalNumberMap.get(num) as number;\n                }\n                else if (this.cardinalNumberMap.has(num)) {\n                    ret += this.cardinalNumberMap.get(num) as number;\n                }\n            });\n        \n            return ret;\n        }\n\n        if (this.ordinalNumberMap.has(numberStr)) {\n            return this.ordinalNumberMap.get(numberStr) as number;\n        }\n\n        if (this.cardinalNumberMap.has(numberStr)) {\n            return this.cardinalNumberMap.get(numberStr) as number;\n        }\n\n        return 0;\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace SpanishNumeric {\n\texport const LangMarker = 'Spa';\n\texport const HundredsNumberIntegerRegex = `(cuatrocient[ao]s|trescient[ao]s|seiscient[ao]s|setecient[ao]s|ochocient[ao]s|novecient[ao]s|doscient[ao]s|quinient[ao]s|(?<!por\\\\s+)(cien(to)?))`;\n\texport const RoundNumberIntegerRegex = `(mil millones|mil|millones|mill[oó]n|billones|bill[oó]n|trillones|trill[oó]n|cuatrillones|cuatrill[oó]n|quintillones|quintill[oó]n|sextillones|sextill[oó]n|septillones|septill[oó]n)`;\n\texport const ZeroToNineIntegerRegex = `(cuatro|cinco|siete|nueve|cero|tres|seis|ocho|dos|un[ao]?)`;\n\texport const TenToNineteenIntegerRegex = `(diecisiete|diecinueve|diecis[eé]is|dieciocho|catorce|quince|trece|diez|once|doce)`;\n\texport const TwentiesIntegerRegex = `(veinticuatro|veinticinco|veintisiete|veintinueve|veintitr[eé]s|veintis[eé]is|veintiocho|veintid[oó]s|ventiun[ao]|veinti[uú]n[oa]?|veinte)`;\n\texport const TensNumberIntegerRegex = `(cincuenta|cuarenta|treinta|sesenta|setenta|ochenta|noventa)`;\n\texport const DigitsNumberRegex = `\\\\d|\\\\d{1,3}(\\\\.\\\\d{3})`;\n\texport const BelowHundredsRegex = `((${TenToNineteenIntegerRegex}|${TwentiesIntegerRegex}|(${TensNumberIntegerRegex}(\\\\s+y\\\\s+${ZeroToNineIntegerRegex})?))|${ZeroToNineIntegerRegex})`;\n\texport const BelowThousandsRegex = `(${HundredsNumberIntegerRegex}(\\\\s+${BelowHundredsRegex})?|${BelowHundredsRegex})`;\n\texport const SupportThousandsRegex = `((${BelowThousandsRegex}|${BelowHundredsRegex})\\\\s+${RoundNumberIntegerRegex}(\\\\s+${RoundNumberIntegerRegex})?)`;\n\texport const SeparaIntRegex = `(${SupportThousandsRegex}(\\\\s+${SupportThousandsRegex})*(\\\\s+${BelowThousandsRegex})?|${BelowThousandsRegex})`;\n\texport const AllIntRegex = `(${SeparaIntRegex}|mil(\\\\s+${BelowThousandsRegex})?)`;\n\texport const PlaceHolderPureNumber = `\\\\b`;\n\texport const PlaceHolderDefault = `\\\\D|\\\\b`;\n\texport const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+(?!(,\\\\d+[a-zA-Z]))(?=${placeholder})`; }\n\texport const NumbersWithSuffix = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(k|M|T|G)(?=\\\\b)`;\n\texport const RoundNumberIntegerRegexWithLocks = `(?<=\\\\b)(${DigitsNumberRegex})+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const NumbersWithDozenSuffix = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+docenas?(?=\\\\b)`;\n\texport const AllIntRegexWithLocks = `((?<=\\\\b)${AllIntRegex}(?=\\\\b))`;\n\texport const AllIntRegexWithDozenSuffixLocks = `(?<=\\\\b)(((media\\\\s+)?\\\\s+docena)|(${AllIntRegex}\\\\s+(y|con)\\\\s+)?(${AllIntRegex}\\\\s+docenas?))(?=\\\\b)`;\n\texport const SimpleRoundOrdinalRegex = `(mil[eé]simo|millon[eé]sim[oa]|billon[eé]sim[oa]|trillon[eé]sim[oa]|cuatrillon[eé]sim[oa]|quintillon[eé]sim[oa]|sextillon[eé]sim[oa]|septillon[eé]sim[oa])`;\n\texport const OneToNineOrdinalRegex = `(primer[oa]|segund[oa]|tercer[oa]|cuart[oa]|quint[oa]|sext[oa]|s[eé]ptim[oa]|octav[oa]|noven[oa])`;\n\texport const TensOrdinalRegex = `(nonag[eé]sim[oa]|octog[eé]sim[oa]|septuag[eé]sim[oa]|sexag[eé]sim[oa]|quincuag[eé]sim[oa]|cuadrag[eé]sim[oa]|trig[eé]sim[oa]|vig[eé]sim[oa]|d[eé]cim[oa])`;\n\texport const HundredOrdinalRegex = `(cent[eé]sim[oa]|ducent[eé]sim[oa]|tricent[eé]sim[oa]|cuadringent[eé]sim[oa]|quingent[eé]sim[oa]|sexcent[eé]sim[oa]|septingent[eé]sim[oa]|octingent[eé]sim[oa]|noningent[eé]sim[oa])`;\n\texport const SpecialUnderHundredOrdinalRegex = `(und[eé]cim[oa]|duod[eé]cimo|decimoctav[oa])`;\n\texport const UnderHundredOrdinalRegex = `(((${TensOrdinalRegex}(\\\\s)?)?${OneToNineOrdinalRegex})|${TensOrdinalRegex}|${SpecialUnderHundredOrdinalRegex})`;\n\texport const UnderThousandOrdinalRegex = `(((${HundredOrdinalRegex}(\\\\s)?)?${UnderHundredOrdinalRegex})|${HundredOrdinalRegex})`;\n\texport const OverThousandOrdinalRegex = `((${AllIntRegex})([eé]sim[oa]))`;\n\texport const ComplexOrdinalRegex = `((${OverThousandOrdinalRegex}(\\\\s)?)?${UnderThousandOrdinalRegex}|${OverThousandOrdinalRegex})`;\n\texport const SufixRoundOrdinalRegex = `((${AllIntRegex})(${SimpleRoundOrdinalRegex}))`;\n\texport const ComplexRoundOrdinalRegex = `(((${SufixRoundOrdinalRegex}(\\\\s)?)?${ComplexOrdinalRegex})|${SufixRoundOrdinalRegex})`;\n\texport const AllOrdinalRegex = `${ComplexOrdinalRegex}|${SimpleRoundOrdinalRegex}|${ComplexRoundOrdinalRegex}`;\n\texport const OrdinalSuffixRegex = `(?<=\\\\b)(\\\\d*(1r[oa]|2d[oa]|3r[oa]|4t[oa]|5t[oa]|6t[oa]|7m[oa]|8v[oa]|9n[oa]|0m[oa]|11[vm][oa]|12[vm][oa]))(?=\\\\b)`;\n\texport const OrdinalNounRegex = `(?<=\\\\b)${AllOrdinalRegex}(?=\\\\b)`;\n\texport const SpecialFractionInteger = `(((${AllIntRegex})i?(${ZeroToNineIntegerRegex})|(${AllIntRegex}))a?v[oa]s?)`;\n\texport const FractionNotationRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNotationWithSpacesRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNounRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+((y|con)\\\\s+)?)?(${AllIntRegex})(\\\\s+((y|con)\\\\s)?)(((${AllOrdinalRegex})s?|(${SpecialFractionInteger})|(${SufixRoundOrdinalRegex})s?)|medi[oa]s?|tercios?)(?=\\\\b)`;\n\texport const FractionNounWithArticleRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+(y\\\\s+)?)?(un|un[oa])(\\\\s+)((${AllOrdinalRegex})|(${SufixRoundOrdinalRegex})|(y\\\\s+)?medi[oa]s?)(?=\\\\b)`;\n\texport const FractionPrepositionRegex = `(?<=\\\\b)((${AllIntRegex})|((?<!\\\\.)\\\\d+))\\\\s+sobre\\\\s+((${AllIntRegex})|((\\\\d+)(?!\\\\.)))(?=\\\\b)`;\n\texport const AllPointRegex = `((\\\\s+${ZeroToNineIntegerRegex})+|(\\\\s+${AllIntRegex}))`;\n\texport const AllFloatRegex = `${AllIntRegex}(\\\\s+(coma|con))${AllPointRegex}`;\n\texport const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))\\\\d+,\\\\d+(?!(,\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\\\s|^)(?<!(\\\\d+)),\\\\d+(?!(,\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithMultiplierRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\,)))\\\\d+,\\\\d+\\\\s*(K|k|M|G|T)(?=\\\\b)`;\n\texport const DoubleWithRoundNumber = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\,)))\\\\d+,\\\\d+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const DoubleAllFloatRegex = `((?<=\\\\b)${AllFloatRegex}(?=\\\\b))`;\n\texport const DoubleExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))(\\\\d+(,\\\\d+)?)e([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const DoubleCaretExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))(\\\\d+(,\\\\d+)?)\\\\^([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const NumberWithPrefixPercentage = `(${BaseNumbers.NumberReplaceToken})(\\\\s*)(%|por ciento|por cien)`;\n\texport const CurrencyRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(B|b|m|t|g)(?=\\\\b)`;\n\texport const DecimalSeparatorChar = ',';\n\texport const FractionMarkerToken = 'sobre';\n\texport const NonDecimalSeparatorChar = '.';\n\texport const HalfADozenText = 'seis';\n\texport const WordSeparatorToken = 'y';\n\texport const WrittenDecimalSeparatorTexts = [ 'coma','con' ];\n\texport const WrittenGroupSeparatorTexts = [ 'punto' ];\n\texport const WrittenIntegerSeparatorTexts = [ 'y' ];\n\texport const WrittenFractionSeparatorTexts = [ 'con' ];\n\texport const HalfADozenRegex = `media\\\\s+docena`;\n\texport const DigitalNumberRegex = `((?<=\\\\b)(mil|millones|mill[oó]n|billones|bill[oó]n|trillones|trill[oó]n|docenas?)(?=\\\\b))|((?<=(\\\\d|\\\\b))(k|t|m|g)(?=\\\\b))`;\n\texport const SignMap: ReadonlyMap<string, number> = new Map<string, number>([[\"negative\", -1],[\"minus\", -1]]);\n\texport const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"cero\", 0],[\"un\", 1],[\"una\", 1],[\"uno\", 1],[\"dos\", 2],[\"tres\", 3],[\"cuatro\", 4],[\"cinco\", 5],[\"seis\", 6],[\"siete\", 7],[\"ocho\", 8],[\"nueve\", 9],[\"diez\", 10],[\"once\", 11],[\"doce\", 12],[\"docena\", 12],[\"docenas\", 12],[\"trece\", 13],[\"catorce\", 14],[\"quince\", 15],[\"dieciseis\", 16],[\"dieciséis\", 16],[\"diecisiete\", 17],[\"dieciocho\", 18],[\"diecinueve\", 19],[\"veinte\", 20],[\"ventiuna\", 21],[\"ventiuno\", 21],[\"veintiun\", 21],[\"veintiún\", 21],[\"veintiuno\", 21],[\"veintiuna\", 21],[\"veintidos\", 22],[\"veintidós\", 22],[\"veintitres\", 23],[\"veintitrés\", 23],[\"veinticuatro\", 24],[\"veinticinco\", 25],[\"veintiseis\", 26],[\"veintiséis\", 26],[\"veintisiete\", 27],[\"veintiocho\", 28],[\"veintinueve\", 29],[\"treinta\", 30],[\"cuarenta\", 40],[\"cincuenta\", 50],[\"sesenta\", 60],[\"setenta\", 70],[\"ochenta\", 80],[\"noventa\", 90],[\"cien\", 100],[\"ciento\", 100],[\"doscientas\", 200],[\"doscientos\", 200],[\"trescientas\", 300],[\"trescientos\", 300],[\"cuatrocientas\", 400],[\"cuatrocientos\", 400],[\"quinientas\", 500],[\"quinientos\", 500],[\"seiscientas\", 600],[\"seiscientos\", 600],[\"setecientas\", 700],[\"setecientos\", 700],[\"ochocientas\", 800],[\"ochocientos\", 800],[\"novecientas\", 900],[\"novecientos\", 900],[\"mil\", 1000],[\"millon\", 1000000],[\"millón\", 1000000],[\"millones\", 1000000],[\"billon\", 1000000000000],[\"billón\", 1000000000000],[\"billones\", 1000000000000],[\"trillon\", 1000000000000000000],[\"trillón\", 1000000000000000000],[\"trillones\", 1000000000000000000]]);\n\texport const SimpleOrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"primero\", 1],[\"primera\", 1],[\"primer\", 1],[\"segundo\", 2],[\"segunda\", 2],[\"medio\", 2],[\"media\", 2],[\"tercero\", 3],[\"tercera\", 3],[\"tercer\", 3],[\"tercio\", 3],[\"cuarto\", 4],[\"cuarta\", 4],[\"quinto\", 5],[\"quinta\", 5],[\"sexto\", 6],[\"sexta\", 6],[\"septimo\", 7],[\"septima\", 7],[\"octavo\", 8],[\"octava\", 8],[\"noveno\", 9],[\"novena\", 9],[\"decimo\", 10],[\"decima\", 10],[\"undecimo\", 11],[\"undecima\", 11],[\"duodecimo\", 12],[\"duodecima\", 12],[\"decimotercero\", 13],[\"decimotercera\", 13],[\"decimocuarto\", 14],[\"decimocuarta\", 14],[\"decimoquinto\", 15],[\"decimoquinta\", 15],[\"decimosexto\", 16],[\"decimosexta\", 16],[\"decimoseptimo\", 17],[\"decimoseptima\", 17],[\"decimoctavo\", 18],[\"decimoctava\", 18],[\"decimonoveno\", 19],[\"decimonovena\", 19],[\"vigesimo\", 20],[\"vigesima\", 20],[\"trigesimo\", 30],[\"trigesima\", 30],[\"cuadragesimo\", 40],[\"cuadragesima\", 40],[\"quincuagesimo\", 50],[\"quincuagesima\", 50],[\"sexagesimo\", 60],[\"sexagesima\", 60],[\"septuagesimo\", 70],[\"septuagesima\", 70],[\"octogesimo\", 80],[\"octogesima\", 80],[\"nonagesimo\", 90],[\"nonagesima\", 90],[\"centesimo\", 100],[\"centesima\", 100],[\"ducentesimo\", 200],[\"ducentesima\", 200],[\"tricentesimo\", 300],[\"tricentesima\", 300],[\"cuadringentesimo\", 400],[\"cuadringentesima\", 400],[\"quingentesimo\", 500],[\"quingentesima\", 500],[\"sexcentesimo\", 600],[\"sexcentesima\", 600],[\"septingentesimo\", 700],[\"septingentesima\", 700],[\"octingentesimo\", 800],[\"octingentesima\", 800],[\"noningentesimo\", 900],[\"noningentesima\", 900],[\"milesimo\", 1000],[\"milesima\", 1000],[\"millonesimo\", 1000000],[\"millonesima\", 1000000],[\"billonesimo\", 1000000000000],[\"billonesima\", 1000000000000]]);\n\texport const PrefixCardinalDictionary: ReadonlyMap<string, number> = new Map<string, number>([[\"dos\", 2],[\"tres\", 3],[\"cuatro\", 4],[\"cinco\", 5],[\"seis\", 6],[\"siete\", 7],[\"ocho\", 8],[\"nueve\", 9],[\"diez\", 10],[\"once\", 11],[\"doce\", 12],[\"trece\", 13],[\"catorce\", 14],[\"quince\", 15],[\"dieciseis\", 16],[\"dieciséis\", 16],[\"diecisiete\", 17],[\"dieciocho\", 18],[\"diecinueve\", 19],[\"veinte\", 20],[\"ventiuna\", 21],[\"veintiun\", 21],[\"veintiún\", 21],[\"veintidos\", 22],[\"veintitres\", 23],[\"veinticuatro\", 24],[\"veinticinco\", 25],[\"veintiseis\", 26],[\"veintisiete\", 27],[\"veintiocho\", 28],[\"veintinueve\", 29],[\"treinta\", 30],[\"cuarenta\", 40],[\"cincuenta\", 50],[\"sesenta\", 60],[\"setenta\", 70],[\"ochenta\", 80],[\"noventa\", 90],[\"cien\", 100],[\"doscientos\", 200],[\"trescientos\", 300],[\"cuatrocientos\", 400],[\"quinientos\", 500],[\"seiscientos\", 600],[\"setecientos\", 700],[\"ochocientos\", 800],[\"novecientos\", 900]]);\n\texport const SufixOrdinalDictionary: ReadonlyMap<string, number> = new Map<string, number>([[\"milesimo\", 1000],[\"millonesimo\", 1000000],[\"billonesimo\", 1000000000000]]);\n\texport const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"mil\", 1000],[\"milesimo\", 1000],[\"millon\", 1000000],[\"millón\", 1000000],[\"millones\", 1000000],[\"millonesimo\", 1000000],[\"billon\", 1000000000000],[\"billón\", 1000000000000],[\"billones\", 1000000000000],[\"billonesimo\", 1000000000000],[\"trillon\", 1000000000000000000],[\"trillón\", 1000000000000000000],[\"trillones\", 1000000000000000000],[\"trillonesimo\", 1000000000000000000],[\"docena\", 12],[\"docenas\", 12],[\"k\", 1000],[\"m\", 1000000],[\"g\", 1000000000],[\"t\", 1000000000000]]);\n}\n","import { ParseResult } from \"recognizers-text\";\nimport { INumberParserConfiguration } from \"../parsers\";\nimport { CultureInfo, Culture } from \"../../culture\";\nimport { SpanishNumeric } from \"../../resources/spanishNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class SpanishNumberParserConfiguration implements INumberParserConfiguration {\n\n    readonly signMap: ReadonlyMap<string, number>;//add by qiuqian , 2018.2.11\n    readonly cardinalNumberMap: ReadonlyMap<string, number>;\n    readonly ordinalNumberMap: ReadonlyMap<string, number>;\n    readonly roundNumberMap: ReadonlyMap<string, number>;\n    readonly cultureInfo: CultureInfo;\n    readonly digitalNumberRegex: RegExp;\n    readonly fractionMarkerToken: string;\n    readonly halfADozenRegex: RegExp;\n    readonly halfADozenText: string;\n    readonly langMarker: string;\n    readonly nonDecimalSeparatorChar: string;\n    readonly decimalSeparatorChar: string;\n    readonly wordSeparatorToken: string;\n    readonly writtenDecimalSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenGroupSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenIntegerSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenFractionSeparatorTexts: ReadonlyArray<string>;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        this.cultureInfo = ci;\n\n        this.langMarker = SpanishNumeric.LangMarker;\n        this.decimalSeparatorChar = SpanishNumeric.DecimalSeparatorChar;\n        this.fractionMarkerToken = SpanishNumeric.FractionMarkerToken;\n        this.nonDecimalSeparatorChar = SpanishNumeric.NonDecimalSeparatorChar;\n        this.halfADozenText = SpanishNumeric.HalfADozenText;\n        this.wordSeparatorToken = SpanishNumeric.WordSeparatorToken;\n\n        this.writtenDecimalSeparatorTexts = SpanishNumeric.WrittenDecimalSeparatorTexts;\n        this.writtenGroupSeparatorTexts = SpanishNumeric.WrittenGroupSeparatorTexts;\n        this.writtenIntegerSeparatorTexts = SpanishNumeric.WrittenIntegerSeparatorTexts;\n        this.writtenFractionSeparatorTexts = SpanishNumeric.WrittenFractionSeparatorTexts;\n\n        let ordinalNumberMap = new Map<string, number>(SpanishNumeric.SimpleOrdinalNumberMap);\n\n        SpanishNumeric.PrefixCardinalDictionary.forEach((prefixValue: number, prefixKey: string) => {\n            SpanishNumeric.SufixOrdinalDictionary.forEach((suffixValue: number, suffixKey: string) => {\n                if (!ordinalNumberMap.has(prefixKey + suffixKey)) {\n                    ordinalNumberMap.set(prefixKey + suffixKey, prefixValue * suffixValue);\n                }\n            });\n        });\n\n        this.cardinalNumberMap = SpanishNumeric.CardinalNumberMap;\n        this.ordinalNumberMap = ordinalNumberMap;\n        this.roundNumberMap = SpanishNumeric.RoundNumberMap;\n        this.halfADozenRegex = RegExpUtility.getSafeRegExp(SpanishNumeric.HalfADozenRegex);\n        this.digitalNumberRegex = RegExpUtility.getSafeRegExp(SpanishNumeric.DigitalNumberRegex);\n    }\n\n    normalizeTokenSet(tokens: ReadonlyArray<string>, context: ParseResult): ReadonlyArray<string> {\n        let result = new Array<string>();\n\n        tokens.forEach((token: string) => {\n            let tempWord = token.replace(/^s+/, '').replace(/s+$/, '');\n            if (this.ordinalNumberMap.has(tempWord)) {\n                result.push(tempWord);\n                return;\n            }\n\n            if (tempWord.endsWith(\"avo\") || tempWord.endsWith(\"ava\")) {\n                let origTempWord = tempWord;\n                let newLength = origTempWord.length;\n                tempWord = origTempWord.substring(0, newLength - 3);\n                if (this.cardinalNumberMap.has(tempWord)) {\n                    result.push(tempWord);\n                    return;\n                }\n                else {\n                    tempWord = origTempWord.substring(0, newLength - 2);\n                    if (this.cardinalNumberMap.has(tempWord)) {\n                        result.push(tempWord);\n                        return;\n                    }\n                }\n            }\n\n            result.push(token);\n        });\n\n        return result;\n    }\n\n    resolveCompositeNumber(numberStr: string): number {\n        if (this.ordinalNumberMap.has(numberStr)) {\n            return this.ordinalNumberMap.get(numberStr);\n        }\n\n        if (this.cardinalNumberMap.has(numberStr)) {\n            return this.cardinalNumberMap.get(numberStr);\n        }\n\n        let value = 0;\n        let finalValue = 0;\n        let strBuilder = \"\";\n        let lastGoodChar = 0;\n        for (let i = 0; i < numberStr.length; i++) {\n            strBuilder = strBuilder.concat(numberStr[i]);\n            if (this.cardinalNumberMap.has(strBuilder) && this.cardinalNumberMap.get(strBuilder) > value) {\n                lastGoodChar = i;\n                value = this.cardinalNumberMap.get(strBuilder);\n            }\n            if ((i + 1) === numberStr.length) {\n                finalValue += value;\n                strBuilder = \"\";\n                i = lastGoodChar++;\n                value = 0;\n            }\n        }\n        return finalValue;\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace PortugueseNumeric {\n\texport const LangMarker = 'Por';\n\texport const HundredsNumberIntegerRegex = `(quatrocent[ao]s|trezent[ao]s|seiscent[ao]s|setecent[ao]s|oitocent[ao]s|novecent[ao]s|duzent[ao]s|quinhent[ao]s|cem|(?<!por\\\\s+)(cento))`;\n\texport const RoundNumberIntegerRegex = `(mil|milh[ãa]o|milh[õo]es|bilh[ãa]o|bilh[õo]es|trilh[ãa]o|trilh[õo]es|qua[td]rilh[ãa]o|qua[td]rilh[õo]es|quintilh[ãa]o|quintilh[õo]es)`;\n\texport const ZeroToNineIntegerRegex = `(quatro|cinco|sete|nove|zero|tr[êe]s|seis|oito|dois|duas|um|uma)`;\n\texport const TenToNineteenIntegerRegex = `(dez[ea]sseis|dez[ea]ssete|dez[ea]nove|dezoito|quatorze|catorze|quinze|treze|d[ée]z|onze|doze)`;\n\texport const TensNumberIntegerRegex = `(cinquenta|quarenta|trinta|sessenta|setenta|oitenta|noventa|vinte)`;\n\texport const DigitsNumberRegex = `\\\\d|\\\\d{1,3}(\\\\.\\\\d{3})`;\n\texport const BelowHundredsRegex = `((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\\\s+e\\\\s+${ZeroToNineIntegerRegex})?))|${ZeroToNineIntegerRegex})`;\n\texport const BelowThousandsRegex = `(${HundredsNumberIntegerRegex}(\\\\s+e\\\\s+${BelowHundredsRegex})?|${BelowHundredsRegex})`;\n\texport const SupportThousandsRegex = `((${BelowThousandsRegex}|${BelowHundredsRegex})\\\\s+${RoundNumberIntegerRegex}(\\\\s+${RoundNumberIntegerRegex})?)`;\n\texport const SeparaIntRegex = `(${SupportThousandsRegex}(\\\\s+${SupportThousandsRegex})*(\\\\s+${BelowThousandsRegex})?|${BelowThousandsRegex})`;\n\texport const AllIntRegex = `(${SeparaIntRegex}|mil(\\\\s+${BelowThousandsRegex})?)`;\n\texport const AllPointRegex = `((\\\\s+${ZeroToNineIntegerRegex})+|(\\\\s+${AllIntRegex}))`;\n\texport const SpecialFractionInteger = `(((${AllIntRegex})i?(${ZeroToNineIntegerRegex})|(${AllIntRegex}))\\\\s+a?v[oa]s?)`;\n\texport const PlaceHolderDefault = `\\\\D|\\\\b`;\n\texport const PlaceHolderPureNumber = `\\\\b`;\n\texport const AllIntRegexWithLocks = `((?<=\\\\b)${AllIntRegex}(?=\\\\b))`;\n\texport const AllIntRegexWithDozenSuffixLocks = `(?<=\\\\b)(((meia)?\\\\s+(d[úu]zia))|(${AllIntRegex}\\\\s+(e|com)\\\\s+)?(${AllIntRegex}\\\\s+(d[úu]zia(s)?|dezena(s)?)))(?=\\\\b)`;\n\texport const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+(?!(,\\\\d+[a-zA-Z]))(?=${placeholder})`; }\n\texport const NumbersWithSuffix = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(k|M|T|G)(?=\\\\b)`;\n\texport const RoundNumberIntegerRegexWithLocks = `(?<=\\\\b)(${DigitsNumberRegex})+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const NumbersWithDozenSuffix = `(((?<!\\\\d+\\\\s*)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+dezena(s)?(?=\\\\b)`;\n\texport const NumbersWithDozen2Suffix = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+(\\\\s+d[úu]zia(s))?(?=\\\\b)`;\n\texport const SimpleRoundOrdinalRegex = `(mil[eé]sim[oa]|milion[eé]sim[oa]|bilion[eé]sim[oa]|trilion[eé]sim[oa]|quatrilion[eé]sim[oa]|quintilion[eé]sim[oa])`;\n\texport const OneToNineOrdinalRegex = `(primeir[oa]|segund[oa]|terceir[oa]|quart[oa]|quint[oa]|sext[oa]|s[eé]tim[oa]|oitav[oa]|non[oa])`;\n\texport const TensOrdinalRegex = `(nonag[eé]sim[oa]|octog[eé]sim[oa]|setuag[eé]sim[oa]|septuag[eé]sim[oa]|sexag[eé]sim[oa]|quinquag[eé]sim[oa]|quadrag[eé]sim[oa]|trig[eé]sim[oa]|vig[eé]sim[oa]|d[eé]cim[oa])`;\n\texport const HundredOrdinalRegex = `(cent[eé]sim[oa]|ducent[eé]sim[oa]|tricent[eé]sim[oa]|cuadringent[eé]sim[oa]|quingent[eé]sim[oa]|sexcent[eé]sim[oa]|septingent[eé]sim[oa]|octingent[eé]sim[oa]|noningent[eé]sim[oa])`;\n\texport const SpecialUnderHundredOrdinalRegex = `(und[eé]cim[oa]|duod[eé]cimo)`;\n\texport const UnderHundredOrdinalRegex = `(((${TensOrdinalRegex}(\\\\s)?)?${OneToNineOrdinalRegex})|${TensOrdinalRegex}|${SpecialUnderHundredOrdinalRegex})`;\n\texport const UnderThousandOrdinalRegex = `(((${HundredOrdinalRegex}(\\\\s)?)?${UnderHundredOrdinalRegex})|${HundredOrdinalRegex})`;\n\texport const OverThousandOrdinalRegex = `((${AllIntRegex})([eé]sim[oa]))`;\n\texport const ComplexOrdinalRegex = `((${OverThousandOrdinalRegex}(\\\\s)?)?${UnderThousandOrdinalRegex}|${OverThousandOrdinalRegex})`;\n\texport const SuffixRoundOrdinalRegex = `((${AllIntRegex})(${SimpleRoundOrdinalRegex}))`;\n\texport const ComplexRoundOrdinalRegex = `(((${SuffixRoundOrdinalRegex}(\\\\s)?)?${ComplexOrdinalRegex})|${SuffixRoundOrdinalRegex})`;\n\texport const AllOrdinalRegex = `${ComplexOrdinalRegex}|${SimpleRoundOrdinalRegex}|${ComplexRoundOrdinalRegex}`;\n\texport const OrdinalSuffixRegex = `(?<=\\\\b)(\\\\d*(1[oa]|2[oa]|3[oa]|4[oa]|5[oa]|6[oa]|7[oa]|8[oa]|9[oa]|0[oa]))(?=\\\\b)`;\n\texport const OrdinalEnglishRegex = `(?<=\\\\b)${AllOrdinalRegex}(?=\\\\b)`;\n\texport const FractionNotationRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNotationWithSpacesRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNounRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+((e|com)\\\\s+)?)?(${AllIntRegex})(\\\\s+((e|com)\\\\s)?)(((${AllOrdinalRegex})s?|(${SpecialFractionInteger})|(${SuffixRoundOrdinalRegex})s?)|mei[oa]?|ter[çc]o?)(?=\\\\b)`;\n\texport const FractionNounWithArticleRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+(e\\\\s+)?)?(um|um[as])(\\\\s+)((${AllOrdinalRegex})|(${SuffixRoundOrdinalRegex})|(e\\\\s+)?mei[oa]?)(?=\\\\b)`;\n\texport const FractionPrepositionRegex = `(?<=\\\\b)((${AllIntRegex})|((?<!\\\\.)\\\\d+))\\\\s+sobre\\\\s+((${AllIntRegex})|((\\\\d+)(?!\\\\.)))(?=\\\\b)`;\n\texport const AllFloatRegex = `${AllIntRegex}(\\\\s+(vírgula|virgula|e|ponto))${AllPointRegex}`;\n\texport const DoubleWithMultiplierRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\,)))\\\\d+,\\\\d+\\\\s*(K|k|M|G|T)(?=\\\\b)`;\n\texport const DoubleExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))(\\\\d+(,\\\\d+)?)e([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const DoubleCaretExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))(\\\\d+(,\\\\d+)?)\\\\^([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))\\\\d+,\\\\d+(?!(,\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\\\s|^)(?<!(\\\\d+)),\\\\d+(?!(,\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithRoundNumber = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\,)))\\\\d+,\\\\d+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const DoubleAllFloatRegex = `((?<=\\\\b)${AllFloatRegex}(?=\\\\b))`;\n\texport const CurrencyRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(B|b|m|t|g)(?=\\\\b)`;\n\texport const NumberWithSuffixPercentage = `(${BaseNumbers.NumberReplaceToken})(\\\\s*)(%|por cento|pontos percentuais)`;\n\texport const DecimalSeparatorChar = ',';\n\texport const FractionMarkerToken = 'sobre';\n\texport const NonDecimalSeparatorChar = '.';\n\texport const HalfADozenText = 'seis';\n\texport const WordSeparatorToken = 'e';\n\texport const WrittenDecimalSeparatorTexts = [ 'virgula','vírgula' ];\n\texport const WrittenGroupSeparatorTexts = [ 'ponto' ];\n\texport const WrittenIntegerSeparatorTexts = [ 'e' ];\n\texport const WrittenFractionSeparatorTexts = [ 'com' ];\n\texport const WrittenFractionSuffix = [ 'avo','ava' ];\n\texport const PluralSuffix = 's';\n\texport const HalfADozenRegex = `meia\\\\s+d[uú]zia`;\n\texport const DigitalNumberRegex = `((?<=\\\\b)(mil|cem|milh[oõ]es|milh[aã]o|bilh[oõ]es|bilh[aã]o|trilh[oõ]es|trilh[aã]o|milhares|centena|centenas|dezena|dezenas?)(?=\\\\b))|((?<=(\\\\d|\\\\b))(k|t|m|g)(?=\\\\b))`;\n\texport const SignMap: ReadonlyMap<string, number> = new Map<string, number>([[\"negative\", -1],[\"minus\", -1]]);\n\texport const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"zero\", 0],[\"hum\", 1],[\"um\", 1],[\"uma\", 1],[\"dois\", 2],[\"duas\", 2],[\"meia\", 2],[\"meio\", 2],[\"tres\", 3],[\"três\", 3],[\"quatro\", 4],[\"cinco\", 5],[\"seis\", 6],[\"sete\", 7],[\"oito\", 8],[\"nove\", 9],[\"dez\", 10],[\"dezena\", 10],[\"déz\", 10],[\"onze\", 11],[\"doze\", 12],[\"dúzia\", 12],[\"duzia\", 12],[\"dúzias\", 12],[\"duzias\", 12],[\"treze\", 13],[\"catorze\", 14],[\"quatorze\", 14],[\"quinze\", 15],[\"dezesseis\", 16],[\"dezasseis\", 16],[\"dezessete\", 17],[\"dezassete\", 17],[\"dezoito\", 18],[\"dezenove\", 19],[\"dezanove\", 19],[\"vinte\", 20],[\"trinta\", 30],[\"quarenta\", 40],[\"cinquenta\", 50],[\"cincoenta\", 50],[\"sessenta\", 60],[\"setenta\", 70],[\"oitenta\", 80],[\"noventa\", 90],[\"cem\", 100],[\"cento\", 100],[\"duzentos\", 200],[\"duzentas\", 200],[\"trezentos\", 300],[\"trezentas\", 300],[\"quatrocentos\", 400],[\"quatrocentas\", 400],[\"quinhentos\", 500],[\"quinhentas\", 500],[\"seiscentos\", 600],[\"seiscentas\", 600],[\"setecentos\", 700],[\"setecentas\", 700],[\"oitocentos\", 800],[\"oitocentas\", 800],[\"novecentos\", 900],[\"novecentas\", 900],[\"mil\", 1000],[\"milhão\", 1000000],[\"milhao\", 1000000],[\"milhões\", 1000000],[\"milhoes\", 1000000],[\"bilhão\", 1000000000],[\"bilhao\", 1000000000],[\"bilhões\", 1000000000],[\"bilhoes\", 1000000000],[\"trilhão\", 1000000000000],[\"trilhao\", 1000000000000],[\"trilhões\", 1000000000000],[\"trilhoes\", 1000000000000]]);\n\texport const OrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"primeiro\", 1],[\"primeira\", 1],[\"segundo\", 2],[\"segunda\", 2],[\"terceiro\", 3],[\"terceira\", 3],[\"quarto\", 4],[\"quarta\", 4],[\"quinto\", 5],[\"quinta\", 5],[\"sexto\", 6],[\"sexta\", 6],[\"sétimo\", 7],[\"setimo\", 7],[\"sétima\", 7],[\"setima\", 7],[\"oitavo\", 8],[\"oitava\", 8],[\"nono\", 9],[\"nona\", 9],[\"décimo\", 10],[\"decimo\", 10],[\"décima\", 10],[\"decima\", 10],[\"undécimo\", 11],[\"undecimo\", 11],[\"undécima\", 11],[\"undecima\", 11],[\"duodécimo\", 11],[\"duodecimo\", 11],[\"duodécima\", 11],[\"duodecima\", 11],[\"vigésimo\", 20],[\"vigesimo\", 20],[\"vigésima\", 20],[\"vigesima\", 20],[\"trigésimo\", 30],[\"trigesimo\", 30],[\"trigésima\", 30],[\"trigesima\", 30],[\"quadragésimo\", 40],[\"quadragesimo\", 40],[\"quadragésima\", 40],[\"quadragesima\", 40],[\"quinquagésimo\", 50],[\"quinquagesimo\", 50],[\"quinquagésima\", 50],[\"quinquagesima\", 50],[\"sexagésimo\", 60],[\"sexagesimo\", 60],[\"sexagésima\", 60],[\"sexagesima\", 60],[\"septuagésimo\", 70],[\"septuagesimo\", 70],[\"septuagésima\", 70],[\"septuagesima\", 70],[\"setuagésimo\", 70],[\"setuagesimo\", 70],[\"setuagésima\", 70],[\"setuagesima\", 70],[\"octogésimo\", 80],[\"octogesimo\", 80],[\"octogésima\", 80],[\"octogesima\", 80],[\"nonagésimo\", 90],[\"nonagesimo\", 90],[\"nonagésima\", 90],[\"nonagesima\", 90],[\"centesimo\", 100],[\"centésimo\", 100],[\"centesima\", 100],[\"centésima\", 100],[\"ducentésimo\", 200],[\"ducentesimo\", 200],[\"ducentésima\", 200],[\"ducentesima\", 200],[\"tricentésimo\", 300],[\"tricentesimo\", 300],[\"tricentésima\", 300],[\"tricentesima\", 300],[\"trecentésimo\", 300],[\"trecentesimo\", 300],[\"trecentésima\", 300],[\"trecentesima\", 300],[\"quadringentésimo\", 400],[\"quadringentesimo\", 400],[\"quadringentésima\", 400],[\"quadringentesima\", 400],[\"quingentésimo\", 500],[\"quingentesimo\", 500],[\"quingentésima\", 500],[\"quingentesima\", 500],[\"sexcentésimo\", 600],[\"sexcentesimo\", 600],[\"sexcentésima\", 600],[\"sexcentesima\", 600],[\"seiscentésimo\", 600],[\"seiscentesimo\", 600],[\"seiscentésima\", 600],[\"seiscentesima\", 600],[\"septingentésimo\", 700],[\"septingentesimo\", 700],[\"septingentésima\", 700],[\"septingentesima\", 700],[\"setingentésimo\", 700],[\"setingentesimo\", 700],[\"setingentésima\", 700],[\"setingentesima\", 700],[\"octingentésimo\", 800],[\"octingentesimo\", 800],[\"octingentésima\", 800],[\"octingentesima\", 800],[\"noningentésimo\", 900],[\"noningentesimo\", 900],[\"noningentésima\", 900],[\"noningentesima\", 900],[\"nongentésimo\", 900],[\"nongentesimo\", 900],[\"nongentésima\", 900],[\"nongentesima\", 900],[\"milésimo\", 1000],[\"milesimo\", 1000],[\"milésima\", 1000],[\"milesima\", 1000],[\"milionésimo\", 1000000],[\"milionesimo\", 1000000],[\"milionésima\", 1000000],[\"milionesima\", 1000000],[\"bilionésimo\", 1000000000],[\"bilionesimo\", 1000000000],[\"bilionésima\", 1000000000],[\"bilionesima\", 1000000000]]);\n\texport const PrefixCardinalMap: ReadonlyMap<string, number> = new Map<string, number>([[\"hum\", 1],[\"dois\", 2],[\"tres\", 3],[\"três\", 3],[\"quatro\", 4],[\"cinco\", 5],[\"seis\", 6],[\"sete\", 7],[\"oito\", 8],[\"nove\", 9],[\"dez\", 10],[\"onze\", 11],[\"doze\", 12],[\"treze\", 13],[\"catorze\", 14],[\"quatorze\", 14],[\"quinze\", 15],[\"dezesseis\", 16],[\"dezasseis\", 16],[\"dezessete\", 17],[\"dezassete\", 17],[\"dezoito\", 18],[\"dezenove\", 19],[\"dezanove\", 19],[\"vinte\", 20],[\"trinta\", 30],[\"quarenta\", 40],[\"cinquenta\", 50],[\"cincoenta\", 50],[\"sessenta\", 60],[\"setenta\", 70],[\"oitenta\", 80],[\"noventa\", 90],[\"cem\", 100],[\"duzentos\", 200],[\"trezentos\", 300],[\"quatrocentos\", 400],[\"quinhentos\", 500],[\"seiscentos\", 600],[\"setecentos\", 700],[\"oitocentos\", 800],[\"novecentos\", 900]]);\n\texport const SuffixOrdinalMap: ReadonlyMap<string, number> = new Map<string, number>([[\"milesimo\", 1000],[\"milionesimo\", 1000000],[\"bilionesimo\", 1000000000],[\"trilionesimo\", 1000000000000]]);\n\texport const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"mil\", 1000],[\"milesimo\", 1000],[\"milhão\", 1000000],[\"milhao\", 1000000],[\"milhões\", 1000000],[\"milhoes\", 1000000],[\"milionésimo\", 1000000],[\"milionesimo\", 1000000],[\"bilhão\", 1000000000],[\"bilhao\", 1000000000],[\"bilhões\", 1000000000],[\"bilhoes\", 1000000000],[\"bilionésimo\", 1000000000],[\"bilionesimo\", 1000000000],[\"trilhão\", 1000000000000],[\"trilhao\", 1000000000000],[\"trilhões\", 1000000000000],[\"trilhoes\", 1000000000000],[\"trilionésimo\", 1000000000000],[\"trilionesimo\", 1000000000000],[\"dezena\", 10],[\"dezenas\", 10],[\"dúzia\", 12],[\"duzia\", 12],[\"dúzias\", 12],[\"duzias\", 12],[\"k\", 1000],[\"m\", 1000000],[\"g\", 1000000000],[\"t\", 1000000000000]]);\n}\n","import { ParseResult } from \"recognizers-text\";\nimport { INumberParserConfiguration } from \"../parsers\";\nimport { CultureInfo, Culture } from \"../../culture\";\nimport { PortugueseNumeric } from \"../../resources/portugueseNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class PortugueseNumberParserConfiguration implements INumberParserConfiguration {\n\n    readonly signMap: ReadonlyMap<string, number>;//add by qiuqian , 2018.2.11\n    readonly cardinalNumberMap: ReadonlyMap<string, number>;\n    readonly ordinalNumberMap: ReadonlyMap<string, number>;\n    readonly roundNumberMap: ReadonlyMap<string, number>;\n    readonly cultureInfo: CultureInfo;\n    readonly digitalNumberRegex: RegExp;\n    readonly fractionMarkerToken: string;\n    readonly halfADozenRegex: RegExp;\n    readonly halfADozenText: string;\n    readonly langMarker: string;\n    readonly nonDecimalSeparatorChar: string;\n    readonly decimalSeparatorChar: string;\n    readonly wordSeparatorToken: string;\n    readonly writtenDecimalSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenGroupSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenIntegerSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenFractionSeparatorTexts: ReadonlyArray<string>;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        this.cultureInfo = ci;\n\n        this.langMarker = PortugueseNumeric.LangMarker;\n        this.decimalSeparatorChar = PortugueseNumeric.DecimalSeparatorChar;\n        this.fractionMarkerToken = PortugueseNumeric.FractionMarkerToken;\n        this.nonDecimalSeparatorChar = PortugueseNumeric.NonDecimalSeparatorChar;\n        this.halfADozenText = PortugueseNumeric.HalfADozenText;\n        this.wordSeparatorToken = PortugueseNumeric.WordSeparatorToken;\n\n        this.writtenDecimalSeparatorTexts = PortugueseNumeric.WrittenDecimalSeparatorTexts;\n        this.writtenGroupSeparatorTexts = PortugueseNumeric.WrittenGroupSeparatorTexts;\n        this.writtenIntegerSeparatorTexts = PortugueseNumeric.WrittenIntegerSeparatorTexts;\n        this.writtenFractionSeparatorTexts = PortugueseNumeric.WrittenFractionSeparatorTexts;\n\n        let ordinalNumberMap = new Map<string, number>(PortugueseNumeric.OrdinalNumberMap);\n\n        PortugueseNumeric.PrefixCardinalMap.forEach((prefixValue: number, prefixKey: string) => {\n            PortugueseNumeric.SuffixOrdinalMap.forEach((suffixValue: number, suffixKey: string) => {\n                if (!ordinalNumberMap.has(prefixKey + suffixKey)) {\n                    ordinalNumberMap.set(prefixKey + suffixKey, prefixValue * suffixValue);\n                }\n            });\n        });\n\n        this.cardinalNumberMap = PortugueseNumeric.CardinalNumberMap;\n        this.ordinalNumberMap = ordinalNumberMap;\n        this.roundNumberMap = PortugueseNumeric.RoundNumberMap;\n        this.halfADozenRegex = RegExpUtility.getSafeRegExp(PortugueseNumeric.HalfADozenRegex);\n        this.digitalNumberRegex = RegExpUtility.getSafeRegExp(PortugueseNumeric.DigitalNumberRegex);\n    }\n\n    normalizeTokenSet(tokens: ReadonlyArray<string>, context: ParseResult): ReadonlyArray<string> {\n        let result = new Array<string>();\n\n        tokens.forEach((token: string) => {\n            let tempWord = token.replace(/^s+/, '').replace(/s+$/, '');\n            if (this.ordinalNumberMap.has(tempWord)) {\n                result.push(tempWord);\n                return;\n            }\n\n            // ends with 'avo' or 'ava'\n            if (PortugueseNumeric.WrittenFractionSuffix.some(suffix => tempWord.endsWith(suffix))) {\n                let origTempWord = tempWord;\n                let newLength = origTempWord.length;\n                tempWord = origTempWord.substring(0, newLength - 3);\n                if (!tempWord) {\n                    return;\n                }\n                else if (this.cardinalNumberMap.has(tempWord)) {\n                    result.push(tempWord);\n                    return;\n                }\n                else {\n                    tempWord = origTempWord.substring(0, newLength - 2);\n                    if (this.cardinalNumberMap.has(tempWord)) {\n                        result.push(tempWord);\n                        return;\n                    }\n                }\n            }\n\n            result.push(token);\n        });\n\n        return result;\n    }\n\n    resolveCompositeNumber(numberStr: string): number {\n        if (this.ordinalNumberMap.has(numberStr)) {\n            return this.ordinalNumberMap.get(numberStr);\n        }\n\n        if (this.cardinalNumberMap.has(numberStr)) {\n            return this.cardinalNumberMap.get(numberStr);\n        }\n\n        let value = 0;\n        let finalValue = 0;\n        let strBuilder = \"\";\n        let lastGoodChar = 0;\n        for (let i = 0; i < numberStr.length; i++) {\n            strBuilder = strBuilder.concat(numberStr[i]);\n            if (this.cardinalNumberMap.has(strBuilder) && this.cardinalNumberMap.get(strBuilder) > value) {\n                lastGoodChar = i;\n                value = this.cardinalNumberMap.get(strBuilder);\n            }\n\n            if ((i + 1) === numberStr.length) {\n                finalValue += value;\n                strBuilder = \"\";\n                i = lastGoodChar++;\n                value = 0;\n            }\n        }\n\n        return finalValue;\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace FrenchNumeric {\n\texport const LangMarker = 'Fr';\n\texport const RoundNumberIntegerRegex = `(cent|mille|millions|million|milliard|milliards|billion|billions)`;\n\texport const ZeroToNineIntegerRegex = `(et un|un|une|deux|trois|quatre|cinq|six|sept|huit|neuf)`;\n\texport const TenToNineteenIntegerRegex = `(dix\\\\Wneuf|dix\\\\Whuit|dix\\\\Wsept|seize|quinze|quatorze|treize|douze|onze|dix)`;\n\texport const TensNumberIntegerRegex = `(octante|vingt|trente|quarante|cinquante|soixante-dix|soixante|septante|huitante|quatre-vingt-dix|nonante)`;\n\texport const DigitsNumberRegex = `\\\\d|\\\\d{1,3}(\\\\.\\\\d{3})`;\n\texport const HundredsNumberIntegerRegex = `((${ZeroToNineIntegerRegex}(\\\\s+cent))|cent|((\\\\s+cent\\\\s)+${TensNumberIntegerRegex}))`;\n\texport const BelowHundredsRegex = `((${TenToNineteenIntegerRegex}|(${TensNumberIntegerRegex}(\\\\W+${ZeroToNineIntegerRegex})?))|${ZeroToNineIntegerRegex})`;\n\texport const BelowThousandsRegex = `((${HundredsNumberIntegerRegex}(\\\\s+${BelowHundredsRegex})?|${BelowHundredsRegex}|${TenToNineteenIntegerRegex})|cent\\\\s+${TenToNineteenIntegerRegex})`;\n\texport const SupportThousandsRegex = `((${BelowThousandsRegex}|${BelowHundredsRegex})\\\\s+${RoundNumberIntegerRegex}(\\\\s+${RoundNumberIntegerRegex})?)`;\n\texport const SeparaIntRegex = `(${SupportThousandsRegex}(\\\\s+${SupportThousandsRegex})*(\\\\s+${BelowThousandsRegex})?|${BelowThousandsRegex})`;\n\texport const AllIntRegex = `(${SeparaIntRegex}|mille(\\\\s+${BelowThousandsRegex})?)`;\n\texport const NumbersWithPlaceHolder = (placeholder: string) => { return `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+(?!(,\\\\d+[a-zA-Z]))(?=${placeholder})`; }\n\texport const NumbersWithSuffix = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(k|M|T|G)(?=\\\\b)`;\n\texport const RoundNumberIntegerRegexWithLocks = `(?<=\\\\b)(${DigitsNumberRegex})+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const NumbersWithDozenSuffix = `(((?<!\\\\d+\\\\s*)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+douzaine(s)?(?=\\\\b)`;\n\texport const AllIntRegexWithLocks = `((?<=\\\\b)${AllIntRegex}(?=\\\\b))`;\n\texport const AllIntRegexWithDozenSuffixLocks = `(?<=\\\\b)(((demi\\\\s+)?\\\\s+douzaine)|(${AllIntRegex}\\\\s+douzaines?))(?=\\\\b)`;\n\texport const SimpleRoundOrdinalRegex = `(centi[eè]me|milli[eè]me|millioni[eè]me|milliardi[eè]me|billioni[eè]me)`;\n\texport const OneToNineOrdinalRegex = `(premier|premi[eè]re|deuxi[eè]me|second[e]|troisi[eè]me|tiers|tierce|quatri[eè]me|cinqui[eè]me|sixi[eè]me|septi[eè]me|huiti[eè]me|neuvi[eè]me)`;\n\texport const SpecialUnderHundredOrdinalRegex = `(onzi[eè]me|douzi[eè]me)`;\n\texport const TensOrdinalRegex = `(quatre-vingt-dixi[eè]me|quatre-vingti[eè]me|huitanti[eè]me|octanti[eè]me|soixante-dixi[eè]me|septanti[eè]me|soixanti[eè]me|cinquanti[eè]me|quaranti[eè]me|trenti[eè]me|vingti[eè]me)`;\n\texport const HundredOrdinalRegex = `(${AllIntRegex}(\\\\s+(centi[eè]me\\\\s)))`;\n\texport const UnderHundredOrdinalRegex = `(((${AllIntRegex}(\\\\W)?)?${OneToNineOrdinalRegex})|(${TensNumberIntegerRegex}(\\\\W)?)?${OneToNineOrdinalRegex}|${TensOrdinalRegex}|${SpecialUnderHundredOrdinalRegex})`;\n\texport const UnderThousandOrdinalRegex = `(((${HundredOrdinalRegex}(\\\\s)?)?${UnderHundredOrdinalRegex})|((${AllIntRegex}(\\\\W)?)?${SimpleRoundOrdinalRegex})|${HundredOrdinalRegex})`;\n\texport const OverThousandOrdinalRegex = `((${AllIntRegex})(i[eè]me))`;\n\texport const ComplexOrdinalRegex = `((${OverThousandOrdinalRegex}(\\\\s)?)?${UnderThousandOrdinalRegex}|${OverThousandOrdinalRegex}|${UnderHundredOrdinalRegex})`;\n\texport const SuffixOrdinalRegex = `((${AllIntRegex})(${SimpleRoundOrdinalRegex}))`;\n\texport const ComplexRoundOrdinalRegex = `(((${SuffixOrdinalRegex}(\\\\s)?)?${ComplexOrdinalRegex})|${SuffixOrdinalRegex})`;\n\texport const AllOrdinalRegex = `(${ComplexOrdinalRegex}|${SimpleRoundOrdinalRegex}|${ComplexRoundOrdinalRegex})`;\n\texport const PlaceHolderPureNumber = `\\\\b`;\n\texport const PlaceHolderDefault = `\\\\D|\\\\b`;\n\texport const OrdinalSuffixRegex = `(?<=\\\\b)((\\\\d*(1er|2e|2eme|3e|3eme|4e|4eme|5e|5eme|6e|6eme|7e|7eme|8e|8eme|9e|9eme|0e|0eme))|(11e|11eme|12e|12eme))(?=\\\\b)`;\n\texport const OrdinalFrenchRegex = `(?<=\\\\b)${AllOrdinalRegex}(?=\\\\b)`;\n\texport const FractionNotationWithSpacesRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s+\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNotationRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+[/]\\\\d+(?=(\\\\b[^/]|$))`;\n\texport const FractionNounRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+((et)\\\\s+)?)?(${AllIntRegex})(\\\\s+((et)\\\\s)?)(((${AllOrdinalRegex})s?|(${SuffixOrdinalRegex})s?)|demis?|tiers?|quarts?)(?=\\\\b)`;\n\texport const FractionNounWithArticleRegex = `(?<=\\\\b)(${AllIntRegex}\\\\s+(et\\\\s+)?)?(un|une)(\\\\s+)((${AllOrdinalRegex})|(${SuffixOrdinalRegex})|(et\\\\s+)?demis?)(?=\\\\b)`;\n\texport const FractionPrepositionRegex = `(?<=\\\\b)((${AllIntRegex})|((?<!\\\\.)\\\\d+))\\\\s+sur\\\\s+((${AllIntRegex})|((\\\\d+)(?!\\\\.)))(?=\\\\b)`;\n\texport const AllPointRegex = `((\\\\s+${ZeroToNineIntegerRegex})+|(\\\\s+${SeparaIntRegex}))`;\n\texport const AllFloatRegex = `(${AllIntRegex}(\\\\s+(virgule|point))${AllPointRegex})`;\n\texport const DoubleDecimalPointRegex = (placeholder: string) => { return `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))\\\\d+,\\\\d+(?!(,\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithoutIntegralRegex = (placeholder: string) => { return `(?<=\\\\s|^)(?<!(\\\\d+)),\\\\d+(?!(,\\\\d+))(?=${placeholder})`; }\n\texport const DoubleWithMultiplierRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\,)))\\\\d+,\\\\d+\\\\s*(K|k|M|G|T)(?=\\\\b)`;\n\texport const DoubleWithRoundNumber = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+\\\\,)))\\\\d+,\\\\d+\\\\s+${RoundNumberIntegerRegex}(?=\\\\b)`;\n\texport const DoubleAllFloatRegex = `((?<=\\\\b)${AllFloatRegex}(?=\\\\b))`;\n\texport const DoubleExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))(\\\\d+(,\\\\d+)?)e([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const DoubleCaretExponentialNotationRegex = `(((?<!\\\\d+\\\\s*)-\\\\s*)|((?<=\\\\b)(?<!\\\\d+,)))(\\\\d+(,\\\\d+)?)\\\\^([+-]*[1-9]\\\\d*)(?=\\\\b)`;\n\texport const CurrencyRegex = `(((?<=\\\\W|^)-\\\\s*)|(?<=\\\\b))\\\\d+\\\\s*(B|b|m|t|g)(?=\\\\b)`;\n\texport const NumberWithSuffixPercentage = `(${BaseNumbers.NumberReplaceToken})(\\\\s*)(%|pourcentages|pourcents|pourcentage|pourcent)`;\n\texport const NumberWithPrefixPercentage = `(%|pourcent|pourcent des|pourcentage de)(\\\\s*)(${BaseNumbers.NumberReplaceToken})`;\n\texport const DecimalSeparatorChar = ',';\n\texport const FractionMarkerToken = 'sur';\n\texport const NonDecimalSeparatorChar = '.';\n\texport const HalfADozenText = 'six';\n\texport const WordSeparatorToken = 'et';\n\texport const WrittenDecimalSeparatorTexts = [ 'virgule' ];\n\texport const WrittenGroupSeparatorTexts = [ 'point','points' ];\n\texport const WrittenIntegerSeparatorTexts = [ 'et','-' ];\n\texport const WrittenFractionSeparatorTexts = [ 'et','sur' ];\n\texport const HalfADozenRegex = `(?<=\\\\b)+demi\\\\s+douzaine`;\n\texport const DigitalNumberRegex = `((?<=\\\\b)(cent|mille|million|millions|milliard|milliards|billions|billion|douzaine(s)?)(?=\\\\b))|((?<=(\\\\d|\\\\b))(k|t|m|g|b)(?=\\\\b))`;\n\texport const SignMap: ReadonlyMap<string, number> = new Map<string, number>([[\"negative\", -1],[\"minus\", -1]]);\n\texport const CardinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"zéro\", 0],[\"zero\", 0],[\"un\", 1],[\"une\", 1],[\"deux\", 2],[\"trois\", 3],[\"quatre\", 4],[\"cinq\", 5],[\"six\", 6],[\"sept\", 7],[\"huit\", 8],[\"neuf\", 9],[\"dix\", 10],[\"onze\", 11],[\"douze\", 12],[\"treize\", 13],[\"quatorze\", 14],[\"quinze\", 15],[\"seize\", 16],[\"dix-sept\", 17],[\"dix-huit\", 18],[\"dix-neuf\", 19],[\"vingt\", 20],[\"trente\", 30],[\"quarante\", 40],[\"cinquante\", 50],[\"soixante\", 60],[\"soixante-dix\", 70],[\"septante\", 70],[\"quatre-vingts\", 80],[\"quatre-vingts-dix\", 90],[\"quatre-vingts-onze\", 91],[\"quatre-vingts-douze\", 92],[\"quatre-vingts-treize\", 93],[\"quatre-vingts-quatorze\", 94],[\"quatre-vingts-quinze\", 95],[\"quatre-vingts-seize\", 96],[\"quatre-vingt-dix-sept\", 97],[\"quatre-vingt-dix-neuf\", 98],[\"nonante\", 90],[\"cent\", 100],[\"mille\", 1000],[\"un million\", 1000000],[\"million\", 1000000],[\"millions\", 1000000],[\"un milliard\", 1000000000],[\"milliard\", 1000000000],[\"milliards\", 1000000000],[\"un mille milliards\", 1000000000000],[\"un billion\", 1000000000000]]);\n\texport const OrdinalNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"premier\", 1],[\"première\", 1],[\"premiere\", 1],[\"deuxième\", 2],[\"deuxieme\", 2],[\"second\", 2],[\"seconde\", 2],[\"troisième\", 3],[\"demi\", 2],[\"tiers\", 3],[\"tierce\", 3],[\"quart\", 4],[\"quarts\", 4],[\"troisieme\", 3],[\"quatrième\", 4],[\"quatrieme\", 4],[\"cinquième\", 5],[\"cinquieme\", 5],[\"sixième\", 6],[\"sixieme\", 6],[\"septième\", 7],[\"septieme\", 7],[\"huitième\", 8],[\"huitieme\", 8],[\"neuvième\", 9],[\"neuvieme\", 9],[\"dixième\", 10],[\"dixieme\", 10],[\"onzième\", 11],[\"onzieme\", 11],[\"douzième\", 12],[\"douzieme\", 12],[\"treizième\", 13],[\"treizieme\", 13],[\"quatorzième\", 14],[\"quatorizieme\", 14],[\"quinzième\", 15],[\"quinzieme\", 15],[\"seizième\", 16],[\"seizieme\", 16],[\"dix-septième\", 17],[\"dix-septieme\", 17],[\"dix-huitième\", 18],[\"dix-huitieme\", 18],[\"dix-neuvième\", 19],[\"dix-neuvieme\", 19],[\"vingtième\", 20],[\"vingtieme\", 20],[\"trentième\", 30],[\"trentieme\", 30],[\"quarantième\", 40],[\"quarantieme\", 40],[\"cinquantième\", 50],[\"cinquantieme\", 50],[\"soixantième\", 60],[\"soixantieme\", 60],[\"soixante-dixième\", 70],[\"soixante-dixieme\", 70],[\"septantième\", 70],[\"septantieme\", 70],[\"quatre-vingtième\", 80],[\"quatre-vingtieme\", 80],[\"huitantième\", 80],[\"huitantieme\", 80],[\"octantième\", 80],[\"octantieme\", 80],[\"quatre-vingt-dixième\", 90],[\"quatre-vingt-dixieme\", 90],[\"nonantième\", 90],[\"nonantieme\", 90],[\"centième\", 100],[\"centieme\", 100],[\"millième\", 1000],[\"millieme\", 1000],[\"millionième\", 1000000],[\"millionieme\", 1000000],[\"milliardième\", 1000000000],[\"milliardieme\", 1000000000],[\"billionieme\", 1000000000000],[\"billionième\", 1000000000000],[\"trillionième\", 1000000000000000000],[\"trillionieme\", 1000000000000000000]]);\n\texport const PrefixCardinalDictionary: ReadonlyMap<string, number> = new Map<string, number>([[\"deux\", 2],[\"trois\", 3],[\"quatre\", 4],[\"cinq\", 5],[\"six\", 6],[\"sept\", 7],[\"huit\", 8],[\"neuf\", 9],[\"dix\", 10],[\"onze\", 11],[\"douze\", 12],[\"treize\", 13],[\"quatorze\", 14],[\"quinze\", 15],[\"seize\", 16],[\"dix sept\", 17],[\"dix-sept\", 17],[\"dix-huit\", 18],[\"dix huit\", 18],[\"dix-neuf\", 19],[\"dix neuf\", 19],[\"vingt\", 20],[\"vingt-et-un\", 21],[\"vingt et un\", 21],[\"vingt-deux\", 21],[\"vingt deux\", 22],[\"vingt-trois\", 23],[\"vingt trois\", 23],[\"vingt-quatre\", 24],[\"vingt quatre\", 24],[\"vingt-cinq\", 25],[\"vingt cinq\", 25],[\"vingt-six\", 26],[\"vingt six\", 26],[\"vingt-sept\", 27],[\"vingt sept\", 27],[\"vingt-huit\", 28],[\"vingt huit\", 28],[\"vingt-neuf\", 29],[\"vingt neuf\", 29],[\"trente\", 30],[\"quarante\", 40],[\"cinquante\", 50],[\"soixante\", 60],[\"soixante-dix\", 70],[\"soixante dix\", 70],[\"septante\", 70],[\"quatre-vingt\", 80],[\"quatre vingt\", 80],[\"quatre vingt dix\", 90],[\"quatre-vingt-dix\", 90],[\"cent\", 100],[\"deux cent\", 200],[\"trois cents\", 300],[\"quatre cents\", 400],[\"cinq cent\", 500],[\"six cent\", 600],[\"sept cent\", 700],[\"huit cent\", 800],[\"neuf cent\", 900]]);\n\texport const SufixOrdinalDictionary: ReadonlyMap<string, number> = new Map<string, number>([[\"millième\", 1000],[\"million\", 1000000],[\"milliardième\", 1000000000000]]);\n\texport const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"cent\", 100],[\"mille\", 1000],[\"million\", 1000000],[\"millions\", 1000000],[\"milliard\", 1000000000],[\"milliards\", 1000000000],[\"billion\", 1000000000000],[\"billions\", 1000000000000],[\"centieme\", 100],[\"centième\", 100],[\"millieme\", 1000],[\"millième\", 1000],[\"millionième\", 1000000],[\"millionieme\", 1000000],[\"milliardième\", 1000000000],[\"milliardieme\", 1000000000],[\"billionième\", 1000000000000],[\"billionieme\", 1000000000000],[\"centiemes\", 100],[\"centièmes\", 100],[\"millièmes\", 1000],[\"milliemes\", 1000],[\"millionièmes\", 1000000],[\"millioniemes\", 1000000],[\"milliardièmes\", 1000000000],[\"milliardiemes\", 1000000000],[\"billionièmes\", 1000000000000],[\"billioniemes\", 1000000000000],[\"douzaine\", 12],[\"douzaines\", 12],[\"k\", 1000],[\"m\", 1000000],[\"g\", 1000000000],[\"b\", 1000000000],[\"t\", 1000000000000]]);\n}\n","import { ParseResult } from \"recognizers-text\";\nimport { INumberParserConfiguration } from \"../parsers\";\nimport { CultureInfo, Culture } from \"../../culture\";\nimport { FrenchNumeric } from \"../../resources/frenchNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class FrenchNumberParserConfiguration implements INumberParserConfiguration {\n\n    readonly signMap: ReadonlyMap<string, number>;//add by qiuqian , 2018.2.11\n    readonly cardinalNumberMap: ReadonlyMap<string, number>;\n    readonly ordinalNumberMap: ReadonlyMap<string, number>;\n    readonly roundNumberMap: ReadonlyMap<string, number>;\n    readonly cultureInfo: CultureInfo;\n    readonly digitalNumberRegex: RegExp;\n    readonly fractionMarkerToken: string;\n    readonly halfADozenRegex: RegExp;\n    readonly halfADozenText: string;\n    readonly langMarker: string;\n    readonly nonDecimalSeparatorChar: string;\n    readonly decimalSeparatorChar: string;\n    readonly wordSeparatorToken: string;\n    readonly writtenDecimalSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenGroupSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenIntegerSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenFractionSeparatorTexts: ReadonlyArray<string>;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        this.cultureInfo = ci;\n\n        this.langMarker = FrenchNumeric.LangMarker;\n        this.decimalSeparatorChar = FrenchNumeric.DecimalSeparatorChar;\n        this.fractionMarkerToken = FrenchNumeric.FractionMarkerToken;\n        this.nonDecimalSeparatorChar = FrenchNumeric.NonDecimalSeparatorChar;\n        this.halfADozenText = FrenchNumeric.HalfADozenText;\n        this.wordSeparatorToken = FrenchNumeric.WordSeparatorToken;\n\n        this.writtenDecimalSeparatorTexts = FrenchNumeric.WrittenDecimalSeparatorTexts;\n        this.writtenGroupSeparatorTexts = FrenchNumeric.WrittenGroupSeparatorTexts;\n        this.writtenIntegerSeparatorTexts = FrenchNumeric.WrittenIntegerSeparatorTexts;\n        this.writtenFractionSeparatorTexts = FrenchNumeric.WrittenFractionSeparatorTexts;\n\n        this.cardinalNumberMap = FrenchNumeric.CardinalNumberMap;\n        this.ordinalNumberMap = FrenchNumeric.OrdinalNumberMap;\n        this.roundNumberMap = FrenchNumeric.RoundNumberMap;\n        this.halfADozenRegex = RegExpUtility.getSafeRegExp(FrenchNumeric.HalfADozenRegex);\n        this.digitalNumberRegex = RegExpUtility.getSafeRegExp(FrenchNumeric.DigitalNumberRegex);\n    }\n\n    normalizeTokenSet(tokens: ReadonlyArray<string>, context: ParseResult): ReadonlyArray<string> {\n        return tokens;\n    }\n\n    resolveCompositeNumber(numberStr: string): number {\n        if (this.ordinalNumberMap.has(numberStr)) {\n            return this.ordinalNumberMap.get(numberStr);\n        }\n\n        if (this.cardinalNumberMap.has(numberStr)) {\n            return this.cardinalNumberMap.get(numberStr);\n        }\n\n        let value = 0;\n        let finalValue = 0;\n        let strBuilder = \"\";\n        let lastGoodChar = 0;\n        for (let i = 0; i < numberStr.length; i++) {\n            strBuilder = strBuilder.concat(numberStr[i]);\n            if (this.cardinalNumberMap.has(strBuilder) && this.cardinalNumberMap.get(strBuilder) > value) {\n                lastGoodChar = i;\n                value = this.cardinalNumberMap.get(strBuilder);\n            }\n\n            if ((i + 1) === numberStr.length) {\n                finalValue += value;\n                strBuilder = \"\";\n                i = lastGoodChar++;\n                value = 0;\n            }\n        }\n        \n        return finalValue;\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace ChineseNumeric {\n\texport const LangMarker = 'Chs';\n\texport const DecimalSeparatorChar = '.';\n\texport const FractionMarkerToken = '';\n\texport const NonDecimalSeparatorChar = ' ';\n\texport const HalfADozenText = '';\n\texport const WordSeparatorToken = '';\n\texport const RoundNumberMap: ReadonlyMap<string, number> = new Map<string, number>([[\"k\", 1000],[\"m\", 1000000],[\"g\", 1000000000],[\"t\", 1000000000000]]);\n\texport const RoundNumberMapChs: ReadonlyMap<string, number> = new Map<string, number>([[\"十\", 10],[\"百\", 100],[\"千\", 1000],[\"万\", 10000],[\"亿\", 100000000],[\"兆\", 1000000000000],[\"拾\", 10],[\"佰\", 100],[\"仟\", 1000],[\"萬\", 10000],[\"億\", 100000000]]);\n\texport const ZeroToNineMapChs: ReadonlyMap<string, number> = new Map<string, number>([[\"0\", 0],[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"6\", 6],[\"7\", 7],[\"8\", 8],[\"9\", 9],[\"零\", 0],[\"一\", 1],[\"二\", 2],[\"三\", 3],[\"四\", 4],[\"五\", 5],[\"六\", 6],[\"七\", 7],[\"八\", 8],[\"九\", 9],[\"〇\", 0],[\"壹\", 1],[\"贰\", 2],[\"貳\", 2],[\"叁\", 3],[\"肆\", 4],[\"伍\", 5],[\"陆\", 6],[\"陸\", 6],[\"柒\", 7],[\"捌\", 8],[\"玖\", 9],[\"０\", 0],[\"１\", 1],[\"２\", 2],[\"３\", 3],[\"４\", 4],[\"５\", 5],[\"６\", 6],[\"７\", 7],[\"８\", 8],[\"９\", 9],[\"半\", 0.5],[\"两\", 2],[\"兩\", 2],[\"俩\", 2],[\"倆\", 2],[\"仨\", 3]]);\n\texport const FullToHalfMapChs: ReadonlyMap<string, string> = new Map<string, string>([[\"０\", \"0\"],[\"１\", \"1\"],[\"２\", \"2\"],[\"３\", \"3\"],[\"４\", \"4\"],[\"５\", \"5\"],[\"６\", \"6\"],[\"７\", \"7\"],[\"８\", \"8\"],[\"９\", \"9\"],[\"／\", \"/\"],[\"－\", \"-\"],[\"，\", \"\\\\'\"],[\"Ｇ\", \"G\"],[\"Ｍ\", \"M\"],[\"Ｔ\", \"T\"],[\"Ｋ\", \"K\"],[\"ｋ\", \"k\"],[\"．\", \".\"]]);\n\texport const TratoSimMapChs: ReadonlyMap<string, string> = new Map<string, string>([[\"佰\", \"百\"],[\"點\", \"点\"],[\"個\", \"个\"],[\"幾\", \"几\"],[\"對\", \"对\"],[\"雙\", \"双\"]]);\n\texport const UnitMapChs: ReadonlyMap<string, string> = new Map<string, string>([[\"萬萬\", \"億\"],[\"億萬\", \"兆\"],[\"萬億\", \"兆\"],[\"万万\", \"亿\"],[\"万亿\", \"兆\"],[\"亿万\", \"兆\"],[\" \", \"\"],[\"多\", \"\"],[\"余\", \"\"],[\"几\", \"\"]]);\n\texport const RoundDirectListChs = [ '万','萬','亿','兆','億' ];\n\texport const DigitalNumberRegex = `((?<=(\\\\d|\\\\b))(k|t|m|g)(?=\\\\b))`;\n\texport const ZeroToNineChsFullHalfRegexChs = `[\\\\d１２３４５６７８９０]`;\n\texport const DigitNumRegex = `${ZeroToNineChsFullHalfRegexChs}+`;\n\texport const DozenRegex = `.*打$`;\n\texport const PercentageRegex = `(?<=百\\\\s*分\\\\s*之).+|.+(?=个\\\\s*百\\\\s*分\\\\s*点)|.*(?=[％%])`;\n\texport const DoubleAndRoundChsRegex = `${ZeroToNineChsFullHalfRegexChs}+(\\\\.${ZeroToNineChsFullHalfRegexChs}+)?\\\\s*[多几余]?[万亿萬億]{1,2}`;\n\texport const FracSplitRegex = `又|分\\\\s*之`;\n\texport const ZeroToNineIntegerRegexChs = `[一二三四五六七八九零壹贰貳叁肆伍陆陸柒捌玖〇两兩俩倆仨]`;\n\texport const SignSymbolRegexChs = `[负負]`;\n\texport const SignSymbolRegexNum = `(?<![-－])[-－]`;\n\texport const SymbolRegex = `^${SignSymbolRegexChs}.*|^${SignSymbolRegexNum}.*`;\n\texport const SpeGetNumberRegex = `${ZeroToNineChsFullHalfRegexChs}|${ZeroToNineIntegerRegexChs}|[十拾半对對]`;\n\texport const PairRegex = '.*[双对雙對]$';\n\texport const RoundNumberIntegerRegexChs = `[十百千万亿兆拾佰仟萬億]`;\n\texport const WhiteListRegex = `(。|，|、|（|）|“｜”｜[国國]|周|夜|[点點]|[个個]|倍|票|[项項]|[亩畝]|分|元|角|天|加|[减減]|乘|除|是|[對对]|打|公[里裏]|公[顷頃]|公分|平方|方|米|厘|毫|[条條]|船|[车車]|[辆輛]|群|[页頁]|杯|人|[张張]|次|位|份|批|[届屆]|[级級]|[种種]|套|[笔筆]|根|[块塊]|件|座|步|[颗顆]|棵|[节節]|支|只|名|年|月|日|[号號]|朵|克|[吨噸]|磅|[码碼]|英尺|英寸|升|加[仑侖]|立方|[台臺]|套|[罗羅]|令|卷|[头頭]|箱|包|桶|袋|[块塊]|家|行|期|[层層]|度|面|所|架|把|片|[阵陣]|[间間]|等|[叠疊]|碟|下|起|手|季|部|人|小[时時]|[时時]|秒|[样樣]|章|段|星|州|款|代|维|重|[户戸]|楼|路|篇|句|键|本|生|者|字|郎|道|边|场|口|线|世|岸|金|类|番|组|卦|眼|系|声|更|带|色|战|成|轮|食|首|幡|站|股|井|流|开|刻|洲|回|宮|集|练|週|和|环|甲|处|省|里|海|遍|品|体|王|尾|新|隻|版|阶|板|侧|波|身|则|扫|房|彩|木|军|居|晚|岛|课|式|通|相|区|文|端|味|田|心|胎|班|出|连|单|事|丝|副|岁|旁|幕|些|枚|招|卡|幅|言|街|指|辈|室|堆|作|封|厢|声|城|族|圈|脸|目|排|模|夕|网|市|向|极|驱|科|提|核|村|审|刀|册|例|关|粒|局|山|寸|碗|瞬|联|游|脚|宅|线|格|入|趟|貫|界|社|肢|技|滴|问|笑|院|堂|尺|寨|档|举|盘|门|客|餐|艘|毛|丈|剑|曲|任|叶|团|派|嘴|桥|抹|枝|贯|伏|拳|列|机|盒|队|进制|栋|席|斤|词|击|题|型|宗|柱|钱|拍|剧|旬|命|扇|匹|湖|壶|觉|叉|校|泉|具|串|射|证|大批|球|横|竖|尊|轴|观|审|石|束|弹|株|领|委|栏|炮|鼎|町|帆|斗|缕|桌|针|帧|转|落|足|梯|县|投|试|帮|掌|箭|盏|锅|计|大片|学期|截|顶|屋|介|剑|桂|旗|巷|挥|晃|员|翼|池|围|勺|宿|库|棒|冠|树|缸|伙|签|揽|坨|匙|桩|顿|纸|隅|诺|案|刊|厂|杆|袭|仓|床|担|帖|屏|盏|腔|贴|窍|洞|円|坪|泡|园|馆|湾|拨|枪|职|亭|背|維|[護护戸]|樓|鍵|邊|場|線|類|組|聲|帶|戰|輪|開|練|環|處|裏|體|隻|階|側|則|掃|軍|居|島|課|式|區|連|單|絲|歲|廂|聲|臉|網|極|驅|審|冊|關|聯|遊|腳|線|貫|問|檔|舉|盤|門|劍|曲|任|葉|團|派|嘴|橋|抹|枝|貫|伏|拳|列|機|盒|隊|進制|棟|詞|擊|題|錢|壺|覺|證|大批|球|橫|豎|尊|軸|觀|審|彈|領|委|欄|釘|鬥|縷|針|幀|轉|縣|試|幫|盞|鍋|計|學期|截|頂|介|劍|桂|旗|巷|揮|晃|員|圍|勺|宿|庫|棒|冠|樹|缸|夥|簽|攬|樁|頓|紙|隅|諾|廠|桿|襲|倉|擔|盞|貼|竅|洞|坪|泡|員|館|灣|撥|槍|職|\\\\s|$)`;\n\texport const NotSingleRegexChs = `((${ZeroToNineIntegerRegexChs}|${ZeroToNineChsFullHalfRegexChs}|[十拾])\\\\s*(\\\\s*[多几幾余]?\\\\s*${RoundNumberIntegerRegexChs}){1,2}|[十拾]|${RoundNumberIntegerRegexChs}\\\\s*(${ZeroToNineIntegerRegexChs}|${ZeroToNineChsFullHalfRegexChs}|零))\\\\s*(((${ZeroToNineIntegerRegexChs}|${ZeroToNineChsFullHalfRegexChs})\\\\s*(\\\\s*[多几幾余]?\\\\s*${RoundNumberIntegerRegexChs}){1,2}|零)\\\\s*)*${ZeroToNineIntegerRegexChs}?`;\n\texport const SingleRegexChs = `(?<!${ZeroToNineIntegerRegexChs})${ZeroToNineIntegerRegexChs}(?=${WhiteListRegex})`;\n\texport const AllIntRegexChs = `(((${ZeroToNineIntegerRegexChs}|${ZeroToNineChsFullHalfRegexChs}|[十拾])\\\\s*(\\\\s*[多几幾余]?\\\\s*${RoundNumberIntegerRegexChs}){1,2}|[十拾]|${RoundNumberIntegerRegexChs}\\\\s*(${ZeroToNineIntegerRegexChs}|${ZeroToNineChsFullHalfRegexChs}|零))\\\\s*(((${ZeroToNineIntegerRegexChs}|${ZeroToNineChsFullHalfRegexChs})\\\\s*(\\\\s*[多几幾余]?\\\\s*${RoundNumberIntegerRegexChs}){1,2}|零)\\\\s*)*${ZeroToNineIntegerRegexChs}?|${ZeroToNineIntegerRegexChs})`;\n\texport const NumbersSpecialsChars = `(${SignSymbolRegexNum}\\\\s*)?${ZeroToNineChsFullHalfRegexChs}+`;\n\texport const NumbersSpecialsCharsWithSuffix = `${SignSymbolRegexNum}?${ZeroToNineChsFullHalfRegexChs}+\\\\s*(K|k|M|G|T|Ｍ|Ｋ|ｋ|Ｇ|Ｔ)`;\n\texport const DottedNumbersSpecialsChar = `${SignSymbolRegexNum}?${ZeroToNineChsFullHalfRegexChs}{1,3}([,，]${ZeroToNineChsFullHalfRegexChs}{3})+`;\n\texport const NumbersWithHalfDozen = `半(${RoundNumberIntegerRegexChs}|打)`;\n\texport const NumbersWithDozen = `${AllIntRegexChs}[双雙对對打](?!${AllIntRegexChs})`;\n\texport const PointRegexChsStr = `[点點\\\\.．]`;\n\texport const AllFloatRegexChs = `${SignSymbolRegexChs}?${AllIntRegexChs}\\\\s*${PointRegexChsStr}\\\\s*[一二三四五六七八九零壹贰貳叁肆伍陆陸柒捌玖〇](\\\\s*${ZeroToNineIntegerRegexChs})*`;\n\texport const NumbersWithoutPercent = `(?<![百佰]\\\\s*分\\\\s*之\\\\s*(${AllIntRegexChs}[点點]*|${AllFloatRegexChs})*)${SignSymbolRegexChs}?(${NotSingleRegexChs}|${SingleRegexChs})(?!(${AllIntRegexChs}*([点點]${ZeroToNineIntegerRegexChs}+)*|${AllFloatRegexChs})*\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點])`;\n\texport const NumbersWithPercent = `(?<![百佰]\\\\s*分\\\\s*之\\\\s*(${AllIntRegexChs}[点點]*|${AllFloatRegexChs})*)${SignSymbolRegexChs}?${AllIntRegexChs}(?!(${AllIntRegexChs}*([点點]${ZeroToNineIntegerRegexChs}+)*|${AllFloatRegexChs})*\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點])`;\n\texport const PointRegexChs = `${PointRegexChsStr}`;\n\texport const DoubleSpecialsChars = `(?<!(${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}*))(${SignSymbolRegexNum}\\\\s*)?${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+(?!${ZeroToNineChsFullHalfRegexChs}*[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+)`;\n\texport const DoubleSpecialsCharsWithNegatives = `(?<!(${ZeroToNineChsFullHalfRegexChs}+|\\\\.\\\\.|．．))(${SignSymbolRegexNum}\\\\s*)?[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+(?!${ZeroToNineChsFullHalfRegexChs}*([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+))`;\n\texport const SimpleDoubleSpecialsChars = `(${SignSymbolRegexNum}\\\\s*)?${ZeroToNineChsFullHalfRegexChs}{1,3}([,，]${ZeroToNineChsFullHalfRegexChs}{3})+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+`;\n\texport const DoubleWithMultiplierRegex = `(${SignSymbolRegexNum}\\\\s*)?${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+\\\\s*(K|k|M|G|T|Ｍ|Ｋ|ｋ|Ｇ|Ｔ)`;\n\texport const DoubleWithThousandsRegex = `${SignSymbolRegexChs}?${ZeroToNineChsFullHalfRegexChs}+([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+)?\\\\s*[多几幾余]?[万亿萬億]{1,2}`;\n\texport const DoubleAllFloatRegex = `(?<![百佰]\\\\s*分\\\\s*之\\\\s*((${AllIntRegexChs}[点點]*)|${AllFloatRegexChs})*)${AllFloatRegexChs}(?!${ZeroToNineIntegerRegexChs}*\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點])`;\n\texport const DoubleExponentialNotationRegex = `(?<!${ZeroToNineChsFullHalfRegexChs}+[\\\\.．])(${SignSymbolRegexNum}\\\\s*)?${ZeroToNineChsFullHalfRegexChs}+([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+)?e(([-－+＋]*[1-9１２３４５６７８９]${ZeroToNineChsFullHalfRegexChs}*)|[0０](?!${ZeroToNineChsFullHalfRegexChs}+))`;\n\texport const DoubleScientificNotationRegex = `(?<!${ZeroToNineChsFullHalfRegexChs}+[\\\\.．])(${SignSymbolRegexNum}\\\\s*)?(${ZeroToNineChsFullHalfRegexChs}+([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+)?)\\\\^([-－+＋]*[1-9１２３４５６７８９]${ZeroToNineChsFullHalfRegexChs}*)`;\n\texport const OrdinalRegexChs = `第${AllIntRegexChs}`;\n\texport const OrdinalNumbersRegex = `第${ZeroToNineChsFullHalfRegexChs}+`;\n\texport const AllFractionNumber = `${SignSymbolRegexChs}?((${ZeroToNineChsFullHalfRegexChs}+|${AllIntRegexChs})\\\\s*又\\\\s*)?${SignSymbolRegexChs}?(${ZeroToNineChsFullHalfRegexChs}+|${AllIntRegexChs})\\\\s*分\\\\s*之\\\\s*${SignSymbolRegexChs}?(${ZeroToNineChsFullHalfRegexChs}+|${AllIntRegexChs})`;\n\texport const FractionNotationSpecialsCharsRegex = `(${SignSymbolRegexNum}\\\\s*)?${ZeroToNineChsFullHalfRegexChs}+\\\\s+${ZeroToNineChsFullHalfRegexChs}+[/／]${ZeroToNineChsFullHalfRegexChs}+`;\n\texport const FractionNotationRegex = `(${SignSymbolRegexNum}\\\\s*)?${ZeroToNineChsFullHalfRegexChs}+[/／]${ZeroToNineChsFullHalfRegexChs}+`;\n\texport const PercentagePointRegex = `(?<!${AllIntRegexChs})(${AllFloatRegexChs}|${AllIntRegexChs})\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點]`;\n\texport const SimplePercentageRegex = `(?<!${ZeroToNineIntegerRegexChs})[百佰]\\\\s*分\\\\s*之\\\\s*(${AllFloatRegexChs}|${AllIntRegexChs}|[百佰])(?!${AllIntRegexChs})`;\n\texport const NumbersPercentagePointRegex = `(?<!${ZeroToNineIntegerRegexChs})[百佰]\\\\s*分\\\\s*之\\\\s*${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+(?!([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+))`;\n\texport const NumbersPercentageWithSeparatorRegex = `(?<!${ZeroToNineIntegerRegexChs})[百佰]\\\\s*分\\\\s*之\\\\s*${ZeroToNineChsFullHalfRegexChs}{1,3}([,，]${ZeroToNineChsFullHalfRegexChs}{3})+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+`;\n\texport const NumbersPercentageWithMultiplierRegex = `(?<!${ZeroToNineIntegerRegexChs})[百佰]\\\\s*分\\\\s*之\\\\s*${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+\\\\s*(K|k|M|G|T|Ｍ|Ｋ|ｋ|Ｇ|Ｔ)`;\n\texport const FractionPercentagePointRegex = `(?<!(${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]))${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+(?!([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+))\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點]`;\n\texport const FractionPercentageWithSeparatorRegex = `${ZeroToNineChsFullHalfRegexChs}{1,3}([,，]${ZeroToNineChsFullHalfRegexChs}{3})+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點]`;\n\texport const FractionPercentageWithMultiplierRegex = `${ZeroToNineChsFullHalfRegexChs}+[\\\\.．]${ZeroToNineChsFullHalfRegexChs}+\\\\s*(K|k|M|G|T|Ｍ|Ｋ|ｋ|Ｇ|Ｔ)\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點]`;\n\texport const SimpleNumbersPercentageRegex = `(?<!${ZeroToNineIntegerRegexChs})[百佰]\\\\s*分\\\\s*之\\\\s*${ZeroToNineChsFullHalfRegexChs}+(?!([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+))`;\n\texport const SimpleNumbersPercentageWithMultiplierRegex = `(?<!${ZeroToNineIntegerRegexChs})[百佰]\\\\s*分\\\\s*之\\\\s*${ZeroToNineChsFullHalfRegexChs}+\\\\s*(K|k|M|G|T|Ｍ|Ｋ|ｋ|Ｇ|Ｔ)`;\n\texport const SimpleNumbersPercentagePointRegex = `(?!${ZeroToNineIntegerRegexChs})[百佰]\\\\s*分\\\\s*之\\\\s*${ZeroToNineChsFullHalfRegexChs}{1,3}([,，]${ZeroToNineChsFullHalfRegexChs}{3})+`;\n\texport const IntegerPercentageRegex = `${ZeroToNineChsFullHalfRegexChs}+\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點]`;\n\texport const IntegerPercentageWithMultiplierRegex = `${ZeroToNineChsFullHalfRegexChs}+\\\\s*(K|k|M|G|T|Ｍ|Ｋ|ｋ|Ｇ|Ｔ)\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點]`;\n\texport const NumbersFractionPercentageRegex = `${ZeroToNineChsFullHalfRegexChs}{1,3}([,，]${ZeroToNineChsFullHalfRegexChs}{3})+\\\\s*[个個]\\\\s*[百佰]\\\\s*分\\\\s*[点點]`;\n\texport const SimpleIntegerPercentageRegex = `${SignSymbolRegexNum}?${ZeroToNineChsFullHalfRegexChs}+([\\\\.．]${ZeroToNineChsFullHalfRegexChs}+)?(\\\\s*)[％%]`;\n\texport const NumbersFoldsPercentageRegex = `${ZeroToNineChsFullHalfRegexChs}(([\\\\.．]?|\\\\s*)${ZeroToNineChsFullHalfRegexChs})?\\\\s*折`;\n\texport const FoldsPercentageRegex = `${ZeroToNineIntegerRegexChs}(\\\\s*[点點]?\\\\s*${ZeroToNineIntegerRegexChs})?\\\\s*折`;\n\texport const SimpleFoldsPercentageRegex = `${ZeroToNineChsFullHalfRegexChs}\\\\s*成(\\\\s*(半|${ZeroToNineChsFullHalfRegexChs}))?`;\n\texport const SpecialsPercentageRegex = `(${ZeroToNineIntegerRegexChs}|[十拾])\\\\s*成(\\\\s*(半|${ZeroToNineIntegerRegexChs}))?`;\n\texport const NumbersSpecialsPercentageRegex = `(${ZeroToNineChsFullHalfRegexChs}[\\\\.．]${ZeroToNineChsFullHalfRegexChs}|[1１][0０])\\\\s*成`;\n\texport const SimpleSpecialsPercentageRegex = `${ZeroToNineIntegerRegexChs}\\\\s*[点點]\\\\s*${ZeroToNineIntegerRegexChs}\\\\s*成`;\n\texport const SpecialsFoldsPercentageRegex = `半\\\\s*成|(?<=打)[对對]\\\\s*折|半\\\\s*折`;\n}\n","import { ParseResult } from \"recognizers-text\";\nimport { INumberParserConfiguration } from \"../parsers\";\nimport { CultureInfo, Culture } from \"../../culture\";\nimport { ChineseNumeric } from \"../../resources/chineseNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class ChineseNumberParserConfiguration implements INumberParserConfiguration {\n\n    readonly signMap: ReadonlyMap<string, number>;//add by qiuqian,2018.2.11\n    readonly cardinalNumberMap: ReadonlyMap<string, number>;\n    readonly ordinalNumberMap: ReadonlyMap<string, number>;\n    readonly roundNumberMap: ReadonlyMap<string, number>;\n    readonly cultureInfo: CultureInfo;\n    readonly digitalNumberRegex: RegExp;\n    readonly fractionMarkerToken: string;\n    readonly halfADozenRegex: RegExp;\n    readonly halfADozenText: string;\n    readonly langMarker: string;\n    readonly nonDecimalSeparatorChar: string;\n    readonly decimalSeparatorChar: string;\n    readonly wordSeparatorToken: string;\n    readonly writtenDecimalSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenGroupSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenIntegerSeparatorTexts: ReadonlyArray<string>;\n    readonly writtenFractionSeparatorTexts: ReadonlyArray<string>;\n    \n    readonly zeroToNineMapChs: ReadonlyMap<string, number>;\n    readonly roundNumberMapChs: ReadonlyMap<string, number>;\n    readonly fullToHalfMapChs: ReadonlyMap<string, string>;\n    readonly tratoSimMapChs: ReadonlyMap<string, string>;\n    readonly unitMapChs: ReadonlyMap<string, string>;\n    readonly roundDirectListChs: ReadonlyArray<string>;\n    readonly digitNumRegex: RegExp;\n    readonly dozenRegex: RegExp;\n    readonly percentageRegex: RegExp;\n    readonly doubleAndRoundChsRegex: RegExp;\n    readonly fracSplitRegex: RegExp;\n    readonly symbolRegex: RegExp;\n    readonly pointRegexChs: RegExp;\n    readonly speGetNumberRegex: RegExp;\n    readonly pairRegex: RegExp;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        this.cultureInfo = ci;\n\n        this.langMarker = ChineseNumeric.LangMarker;\n        this.decimalSeparatorChar = ChineseNumeric.DecimalSeparatorChar;\n        this.fractionMarkerToken = ChineseNumeric.FractionMarkerToken;\n        this.nonDecimalSeparatorChar = ChineseNumeric.NonDecimalSeparatorChar;\n        this.halfADozenText = ChineseNumeric.HalfADozenText;\n        this.wordSeparatorToken = ChineseNumeric.WordSeparatorToken;\n\n        this.writtenDecimalSeparatorTexts = [];\n        this.writtenGroupSeparatorTexts = [];\n        this.writtenIntegerSeparatorTexts = [];\n        this.writtenFractionSeparatorTexts = [];\n\n        this.cardinalNumberMap = new Map<string, number>();\n        this.ordinalNumberMap = new Map<string, number>();\n        this.roundNumberMap = ChineseNumeric.RoundNumberMap;\n        this.halfADozenRegex = null;\n        this.digitalNumberRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.DigitalNumberRegex, \"gis\");\n\n        this.zeroToNineMapChs = ChineseNumeric.ZeroToNineMapChs;\n        this.roundNumberMapChs = ChineseNumeric.RoundNumberMapChs;\n        this.fullToHalfMapChs = ChineseNumeric.FullToHalfMapChs;\n        this.tratoSimMapChs = ChineseNumeric.TratoSimMapChs;\n        this.unitMapChs = ChineseNumeric.UnitMapChs;\n        this.roundDirectListChs = ChineseNumeric.RoundDirectListChs;\n        this.digitNumRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.DigitNumRegex, \"gis\");\n        this.dozenRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.DozenRegex, \"gis\");\n        this.percentageRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.PercentageRegex, \"gis\");\n        this.doubleAndRoundChsRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleAndRoundChsRegex, \"gis\");\n        this.fracSplitRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.FracSplitRegex, \"gis\");\n        this.symbolRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.SymbolRegex, \"gis\");\n        this.pointRegexChs = RegExpUtility.getSafeRegExp(ChineseNumeric.PointRegexChs, \"gis\");\n        this.speGetNumberRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.SpeGetNumberRegex, \"gis\");\n        this.pairRegex = RegExpUtility.getSafeRegExp(ChineseNumeric.PairRegex, \"gis\");\n    }\n\n    normalizeTokenSet(tokens: ReadonlyArray<string>, context: ParseResult): ReadonlyArray<string> {\n        return tokens;\n    }\n\n    resolveCompositeNumber(numberStr: string): number {\n        return 0;\n    }\n}","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escapeRegExp('[lodash](https://lodash.com/)');\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n */\nfunction escapeRegExp(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string))\n    ? string.replace(reRegExpChar, '\\\\$&')\n    : string;\n}\n\nmodule.exports = escapeRegExp;\n","import { IExtractor, ExtractResult } from \"recognizers-text\";\nimport { Constants } from \"./constants\";\nimport { BaseNumbers } from \"../resources/baseNumbers\";\nimport { EnglishNumeric } from \"../resources/englishNumeric\";\nimport { Match, RegExpUtility } from \"recognizers-text\";\nimport { LongFormatType } from \"./models\";\nimport escapeRegExp = require(\"lodash.escaperegexp\");\n\nexport interface RegExpValue {\n    regExp: RegExp;\n    value: string;\n}\n\nexport abstract class BaseNumberExtractor implements IExtractor {\n\n    regexes: Array<RegExpValue>;\n\n    protected extractType: string = \"\";\n\n    extract(source: string): Array<ExtractResult> {\n        if (!source || source.trim().length === 0) {\n            return [];\n        }\n\n        let result = new Array<ExtractResult>();\n        let matchSource = new Map<Match, string>();\n        let matched = new Array<boolean>(source.length);\n        for (let i = 0; i < source.length; i++) {\n            matched[i] = false;\n        }\n\n        let collections = this.regexes\n            .map(o => ({ matches: RegExpUtility.getMatches(o.regExp, source), value: o.value }))\n            .filter(o => o.matches && o.matches.length);\n\n        collections.forEach(collection => {\n            collection.matches.forEach(m => {\n                for (let j = 0; j < m.length; j++) {\n                    matched[m.index + j] = true;\n                }\n\n                // Keep Source Data for extra information\n                matchSource.set(m, collection.value);\n            });\n        });\n\n        let last = -1;\n        for (let i = 0; i < source.length; i++) {\n            if (matched[i]) {\n                if (i + 1 === source.length || !matched[i + 1]) {\n                    let start = last + 1;\n                    let length = i - last;\n                    let substr = source.substring(start, start + length).trim();\n                    let srcMatch = Array.from(matchSource.keys()).find(m => m.index === start && m.length === length);\n                    if (srcMatch) {\n                        result.push({\n                            start: start,\n                            length: length,\n                            text: substr,\n                            type: this.extractType,\n                            data: matchSource.has(srcMatch) ? matchSource.get(srcMatch) : null\n                        });\n                    }\n                }\n            }\n            else {\n                last = i;\n            }\n        }\n\n        return result;\n    }\n\n    protected generateLongFormatNumberRegexes(type: LongFormatType, placeholder: string = BaseNumbers.PlaceHolderDefault): RegExp {\n\n        let thousandsMark = escapeRegExp(type.thousandsMark);\n        let decimalsMark = escapeRegExp(type.decimalsMark);\n\n        let  regexDefinition = type.decimalsMark === '\\0'\n            ? BaseNumbers.IntegerRegexDefinition(placeholder, thousandsMark)\n            : BaseNumbers.DoubleRegexDefinition(placeholder, thousandsMark, decimalsMark);\n\n        return RegExpUtility.getSafeRegExp(regexDefinition, \"gis\");\n    }\n}\n\nexport abstract class BasePercentageExtractor implements IExtractor {\n    regexes: Array<RegExp>;\n\n    protected static readonly numExtType: string = Constants.SYS_NUM;\n\n    protected extractType: string = Constants.SYS_NUM_PERCENTAGE;\n\n    private readonly numberExtractor: BaseNumberExtractor;\n\n    constructor(numberExtractor: BaseNumberExtractor) {\n        this.numberExtractor = numberExtractor;\n        this.regexes = this.initRegexes();\n    }\n\n    protected abstract initRegexes(): Array<RegExp>;\n\n    extract(source: string): ExtractResult[] {\n        let originSource = source;\n        let positionMap: Map<number, number>;\n        let numExtResults: Array<ExtractResult>;\n\n        // preprocess the source sentence via extracting and replacing the numbers in it\n        let preprocess = this.preprocessStrWithNumberExtracted(originSource);\n        source = preprocess.source;\n        positionMap = preprocess.positionMap;\n        numExtResults = preprocess.numExtResults;\n\n        let allMatches = this.regexes.map(rx => RegExpUtility.getMatches(rx, source));\n\n        let matched = new Array<boolean>(source.length);\n        for (let i = 0; i < source.length; i++) {\n            matched[i] = false;\n        }\n\n        for (let i = 0; i < allMatches.length; i++) {\n            allMatches[i].forEach(match => {\n                for (let j = 0; j < match.length; j++) {\n                    matched[j + match.index] = true;\n                }\n            });\n        }\n\n        let result = new Array<ExtractResult>();\n        let last = -1;\n        // get index of each matched results\n        for (let i = 0; i < source.length; i++) {\n            if (matched[i]) {\n                if (i + 1 === source.length || matched[i + 1] === false) {\n                    let start = last + 1;\n                    let length = i - last;\n                    let substr = source.substring(start, start + length);\n                    let er: ExtractResult = {\n                        start: start,\n                        length: length,\n                        text: substr,\n                        type: this.extractType\n                    } as ExtractResult;\n                    result.push(er);\n                }\n            }\n            else {\n                last = i;\n            }\n        }\n\n        // post-processing, restoring the extracted numbers\n        this.postProcessing(result, originSource, positionMap, numExtResults);\n\n        return result;\n    }\n\n    // get the number extractor results and convert the extracted numbers to @sys.num, so that the regexes can work\n    private preprocessStrWithNumberExtracted(str: string): {\n        source: string,\n        positionMap: Map<number, number>,\n        numExtResults: Array<ExtractResult>\n    } {\n        let positionMap = new Map<number, number>();\n\n        let numExtResults = this.numberExtractor.extract(str);\n        let replaceText = BaseNumbers.NumberReplaceToken;\n\n        let match = new Array<number>(str.length);\n        let strParts = new Array<Array<number>>();\n        let start: number;\n        let end: number;\n        for (let i = 0; i < str.length; i++) {\n            match[i] = -1;\n        }\n\n        for (let i = 0; i < numExtResults.length; i++) {\n            let extraction = numExtResults[i];\n            let subtext = extraction.text;\n            start = extraction.start;\n            end = extraction.length + start;\n            for (let j = start; j < end; j++) {\n                if (match[j] === -1) {\n                    match[j] = i;\n                }\n            }\n        }\n\n        start = 0;\n        for (let i = 1; i < str.length; i++) {\n            if (match[i] !== match[i - 1]) {\n                strParts.push([start, i - 1]);\n                start = i;\n            }\n        }\n        strParts.push([start, str.length - 1]);\n\n        let ret = \"\";\n        let index = 0;\n        strParts.forEach(strPart => {\n            start = strPart[0];\n            end = strPart[1];\n            let type = match[start];\n            if (type === -1) {\n                ret += str.substring(start, end + 1);\n                for (let i = start; i <= end; i++) {\n                    positionMap.set(index++, i);\n                }\n            }\n            else {\n                let originalText = str.substring(start, end + 1);\n                ret += replaceText;\n                for (let i = 0; i < replaceText.length; i++) {\n                    positionMap.set(index++, start);\n                }\n            }\n        });\n\n\n        positionMap.set(index++, str.length);\n\n        return {\n            numExtResults: numExtResults,\n            source: ret,\n            positionMap: positionMap\n        };\n    }\n\n    // replace the @sys.num to the real patterns, directly modifies the ExtractResult\n    private postProcessing(results: Array<ExtractResult>, originSource: string, positionMap: Map<number, number>, numExtResults: Array<ExtractResult>): void {\n        let replaceText = BaseNumbers.NumberReplaceToken;\n        for (let i = 0; i < results.length; i++) {\n            let start = results[i].start;\n            let end = start + results[i].length;\n            let str = results[i].text;\n            if (positionMap.has(start) && positionMap.has(end)) {\n                let originStart = positionMap.get(start);\n                let originLenth = positionMap.get(end) - originStart;\n                results[i].start = originStart;\n                results[i].length = originLenth;\n                results[i].text = originSource.substring(originStart, originStart + originLenth).trim();\n                let numStart = str.indexOf(replaceText);\n                if (numStart !== -1) {\n                    let numOriginStart = start + numStart;\n                    if (positionMap.has(numStart)) {\n                        let dataKey = originSource.substring(positionMap.get(numOriginStart), positionMap.get(numOriginStart + replaceText.length));\n\n                        for (let j = i; j < numExtResults.length; j++) {\n                            if (results[i].start === numExtResults[j].start && results[i].text.includes(numExtResults[j].text)) {\n                                results[i].data = [dataKey, numExtResults[j]];\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // read the rules\n    protected buildRegexes(regexStrs: Array<string>, ignoreCase: boolean = true): Array<RegExp> {\n        return regexStrs.map(regexStr => {\n            let options = \"gs\";\n            if (ignoreCase) {\n                options += \"i\";\n            }\n\n            return RegExpUtility.getSafeRegExp(regexStr, options);\n        });\n    }\n}","import { BaseNumberExtractor, RegExpValue, BasePercentageExtractor } from \"../extractors\";\nimport { Constants } from \"../constants\";\nimport { NumberMode, LongFormatType } from \"../models\";\nimport { EnglishNumeric } from \"../../resources/englishNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class EnglishNumberExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM;\n\n    constructor(mode: NumberMode = NumberMode.Default) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Cardinal\n        let cardExtract: EnglishCardinalExtractor | null = null;\n        switch (mode) {\n            case NumberMode.PureNumber:\n                cardExtract = new EnglishCardinalExtractor(EnglishNumeric.PlaceHolderPureNumber);\n                break;\n            case NumberMode.Currency:\n                regexes.push({ regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.CurrencyRegex, \"gs\"), value: \"IntegerNum\" });\n                break;\n            case NumberMode.Default:\n                break;\n        }\n\n        if (cardExtract === null) {\n            cardExtract = new EnglishCardinalExtractor();\n        }\n\n        cardExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Fraction\n        let fracExtract = new EnglishFractionExtractor();\n        fracExtract.regexes.forEach(r => regexes.push(r));\n        this.regexes = regexes;\n    }\n}\n\nexport class EnglishCardinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_CARDINAL;\n\n    constructor(placeholder: string = EnglishNumeric.PlaceHolderDefault) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Integer Regexes\n        let intExtract = new EnglishIntegerExtractor(placeholder);\n        intExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Double Regexes\n        let doubleExtract = new EnglishDoubleExtractor(placeholder);\n        doubleExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class EnglishIntegerExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_INTEGER;\n\n    constructor(placeholder: string = EnglishNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.NumbersWithPlaceHolder(placeholder), \"gi\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.NumbersWithSuffix, \"gs\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.integerNumComma, placeholder),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.RoundNumberIntegerRegexWithLocks, \"gis\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.NumbersWithDozenSuffix, \"gis\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.AllIntRegexWithLocks, \"gis\"),\n                value: \"IntegerEng\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.AllIntRegexWithDozenSuffixLocks, \"gis\"),\n                value: \"IntegerEng\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.SignSymbolRegexEng, \"gis\"),\n                value: \"IntegerEng\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class EnglishDoubleExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_DOUBLE;\n\n    constructor(placeholder: string = EnglishNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.DoubleDecimalPointRegex(placeholder), \"gis\"),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.DoubleWithoutIntegralRegex(placeholder), \"gis\"),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.doubleNumCommaDot, placeholder),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.DoubleWithMultiplierRegex, \"gs\"),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.DoubleWithRoundNumber, \"gis\"),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.DoubleAllFloatRegex, \"gis\"),\n                value: \"DoubleEng\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.DoubleExponentialNotationRegex, \"gis\"),\n                value: \"DoublePow\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.DoubleCaretExponentialNotationRegex, \"gis\"),\n                value: \"DoublePow\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class EnglishFractionExtractor extends BaseNumberExtractor {\n\n    protected extractType: string = Constants.SYS_NUM_FRACTION;\n\n    constructor() {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.FractionNotationWithSpacesRegex, \"gis\"),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.FractionNotationRegex, \"gis\"),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.FractionNounRegex, \"gis\"),\n                value: \"FracEng\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.FractionNounWithArticleRegex, \"gis\"),\n                value: \"FracEng\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.FractionPrepositionRegex, \"gis\"),\n                value: \"FracEng\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class EnglishOrdinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_ORDINAL;\n\n    constructor() {\n        super();\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.OrdinalSuffixRegex, \"gis\"),\n                value: \"OrdinalNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.OrdinalNumericRegex, \"gis\"),\n                value: \"OrdinalNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.OrdinalEnglishRegex, \"gis\"),\n                value: \"OrdEng\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(EnglishNumeric.OrdinalRoundNumberRegex, \"gis\"),\n                value: \"OrdEng\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class EnglishPercentageExtractor extends BasePercentageExtractor {\n    constructor() {\n        super(new EnglishNumberExtractor())\n    }\n\n    protected initRegexes(): Array<RegExp> {\n        let regexStrs = [\n            EnglishNumeric.NumberWithSuffixPercentage,\n            EnglishNumeric.NumberWithPrefixPercentage\n        ];\n\n        return this.buildRegexes(regexStrs);\n    }\n}","import { BaseNumberExtractor, RegExpValue, BasePercentageExtractor } from \"../extractors\";\nimport { Constants } from \"../constants\";\nimport { NumberMode, LongFormatType } from \"../models\";\nimport { SpanishNumeric } from \"../../resources/spanishNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class SpanishNumberExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM;\n\n    constructor(mode: NumberMode = NumberMode.Default) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Cardinal\n        let cardExtract: SpanishCardinalExtractor | null = null;\n        switch (mode) {\n            case NumberMode.PureNumber:\n                cardExtract = new SpanishCardinalExtractor(SpanishNumeric.PlaceHolderPureNumber);\n                break;\n            case NumberMode.Currency:\n                regexes.push({ regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.CurrencyRegex, \"gs\"), value: \"IntegerNum\" });\n                break;\n            case NumberMode.Default:\n                break;\n        }\n\n        if (cardExtract === null) {\n            cardExtract = new SpanishCardinalExtractor();\n        }\n\n        cardExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Fraction\n        let fracExtract = new SpanishFractionExtractor();\n        fracExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class SpanishCardinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_CARDINAL;\n\n    constructor(placeholder: string = SpanishNumeric.PlaceHolderDefault) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Integer Regexes\n        let intExtract = new SpanishIntegerExtractor(placeholder);\n        intExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Double Regexes\n        let doubleExtract = new SpanishDoubleExtractor(placeholder);\n        doubleExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class SpanishIntegerExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_INTEGER;\n\n    constructor(placeholder: string = SpanishNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.NumbersWithPlaceHolder(placeholder), \"gi\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.NumbersWithSuffix, \"gs\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.integerNumDot, placeholder),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.RoundNumberIntegerRegexWithLocks),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.NumbersWithDozenSuffix),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.AllIntRegexWithLocks),\n                value: \"IntegerSpa\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.AllIntRegexWithDozenSuffixLocks),\n                value: \"IntegerSpa\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class SpanishDoubleExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_DOUBLE;\n\n    constructor(placeholder: string = SpanishNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.DoubleDecimalPointRegex(placeholder)),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.DoubleWithoutIntegralRegex(placeholder)),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.DoubleWithMultiplierRegex, \"gs\"),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.DoubleWithRoundNumber),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.DoubleAllFloatRegex),\n                value: \"DoubleSpa\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.DoubleExponentialNotationRegex),\n                value: \"DoublePow\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.DoubleCaretExponentialNotationRegex),\n                value: \"DoublePow\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.doubleNumDotComma, placeholder),\n                value: \"DoubleNum\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class SpanishFractionExtractor extends BaseNumberExtractor {\n\n    protected extractType: string = Constants.SYS_NUM_FRACTION;\n\n    constructor() {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.FractionNotationRegex),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.FractionNotationWithSpacesRegex),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.FractionNounRegex),\n                value: \"FracSpa\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.FractionNounWithArticleRegex),\n                value: \"FracSpa\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.FractionPrepositionRegex),\n                value: \"FracSpa\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class SpanishOrdinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_ORDINAL;\n\n    constructor() {\n        super();\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.OrdinalSuffixRegex),\n                value: \"OrdinalNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(SpanishNumeric.OrdinalNounRegex),\n                value: \"OrdSpa\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class SpanishPercentageExtractor extends BasePercentageExtractor {\n    constructor() {\n        super(new SpanishNumberExtractor())\n    }\n\n    protected initRegexes(): Array<RegExp> {\n        let regexStrs = [\n            SpanishNumeric.NumberWithPrefixPercentage\n        ];\n\n        return this.buildRegexes(regexStrs);\n    }\n}","import { BaseNumberExtractor, RegExpValue, BasePercentageExtractor } from \"../extractors\";\nimport { Constants } from \"../constants\";\nimport { NumberMode, LongFormatType } from \"../models\";\nimport { PortugueseNumeric } from \"../../resources/portugueseNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class PortugueseNumberExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM;\n\n    constructor(mode: NumberMode = NumberMode.Default) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Cardinal\n        let cardExtract: PortugueseCardinalExtractor | null = null;\n        switch (mode) {\n            case NumberMode.PureNumber:\n                cardExtract = new PortugueseCardinalExtractor(PortugueseNumeric.PlaceHolderPureNumber);\n                break;\n            case NumberMode.Currency:\n                regexes.push({ regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.CurrencyRegex, \"gs\"), value: \"IntegerNum\" });\n                break;\n            case NumberMode.Default:\n                break;\n        }\n\n        if (cardExtract === null) {\n            cardExtract = new PortugueseCardinalExtractor();\n        }\n\n        cardExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Fraction\n        let fracExtract = new PortugueseFractionExtractor();\n        fracExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class PortugueseCardinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_CARDINAL;\n\n    constructor(placeholder: string = PortugueseNumeric.PlaceHolderDefault) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Integer Regexes\n        let intExtract = new PortugueseIntegerExtractor(placeholder);\n        intExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Double Regexes\n        let doubleExtract = new PortugueseDoubleExtractor(placeholder);\n        doubleExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class PortugueseIntegerExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_INTEGER;\n\n    constructor(placeholder: string = PortugueseNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.NumbersWithPlaceHolder(placeholder), \"gi\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.NumbersWithSuffix, \"gs\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.integerNumDot, placeholder),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.RoundNumberIntegerRegexWithLocks),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.NumbersWithDozen2Suffix),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.NumbersWithDozenSuffix),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.AllIntRegexWithLocks),\n                value: \"IntegerPor\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.AllIntRegexWithDozenSuffixLocks),\n                value: \"IntegerPor\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class PortugueseDoubleExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_DOUBLE;\n\n    constructor(placeholder: string = PortugueseNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.DoubleDecimalPointRegex(placeholder)),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.DoubleWithoutIntegralRegex(placeholder)),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.DoubleWithMultiplierRegex, \"gs\"),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.DoubleWithRoundNumber),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.DoubleAllFloatRegex),\n                value: \"DoublePor\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.DoubleExponentialNotationRegex),\n                value: \"DoublePow\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.DoubleCaretExponentialNotationRegex),\n                value: \"DoublePow\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.doubleNumDotComma, placeholder),\n                value: \"DoubleNum\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class PortugueseFractionExtractor extends BaseNumberExtractor {\n\n    protected extractType: string = Constants.SYS_NUM_FRACTION;\n\n    constructor() {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.FractionNotationRegex),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.FractionNotationWithSpacesRegex),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.FractionNounRegex),\n                value: \"FracPor\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.FractionNounWithArticleRegex),\n                value: \"FracPor\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.FractionPrepositionRegex),\n                value: \"FracPor\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class PortugueseOrdinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_ORDINAL;\n\n    constructor() {\n        super();\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.OrdinalSuffixRegex),\n                value: \"OrdinalNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(PortugueseNumeric.OrdinalEnglishRegex),\n                value: \"OrdinalPor\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class PortuguesePercentageExtractor extends BasePercentageExtractor {\n    constructor() {\n        super(new PortugueseNumberExtractor())\n    }\n\n    protected initRegexes(): Array<RegExp> {\n        let regexStrs = [\n            PortugueseNumeric.NumberWithSuffixPercentage\n        ];\n\n        return this.buildRegexes(regexStrs);\n    }\n}","import { BaseNumberExtractor, RegExpValue, BasePercentageExtractor } from \"../extractors\";\nimport { Constants } from \"../constants\";\nimport { NumberMode, LongFormatType } from \"../models\";\nimport { FrenchNumeric } from \"../../resources/frenchNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport class FrenchNumberExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM;\n\n    constructor(mode: NumberMode = NumberMode.Default) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Cardinal\n        let cardExtract: FrenchCardinalExtractor | null = null;\n        switch (mode) {\n            case NumberMode.PureNumber:\n                cardExtract = new FrenchCardinalExtractor(FrenchNumeric.PlaceHolderPureNumber);\n                break;\n            case NumberMode.Currency:\n                regexes.push({ regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.CurrencyRegex, \"gs\"), value: \"IntegerNum\" });\n                break;\n            case NumberMode.Default:\n                break;\n        }\n\n        if (cardExtract === null) {\n            cardExtract = new FrenchCardinalExtractor();\n        }\n\n        cardExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Fraction\n        let fracExtract = new FrenchFractionExtractor();\n        fracExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class FrenchCardinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_CARDINAL;\n\n    constructor(placeholder: string = FrenchNumeric.PlaceHolderDefault) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Integer Regexes\n        let intExtract = new FrenchIntegerExtractor(placeholder);\n        intExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Double Regexes\n        let doubleExtract = new FrenchDoubleExtractor(placeholder);\n        doubleExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class FrenchIntegerExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_INTEGER;\n\n    constructor(placeholder: string = FrenchNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.NumbersWithPlaceHolder(placeholder), \"gi\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.NumbersWithSuffix, \"gs\"),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.integerNumDot, placeholder),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.RoundNumberIntegerRegexWithLocks),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.NumbersWithDozenSuffix),\n                value: \"IntegerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.AllIntRegexWithLocks),\n                value: \"IntegerFr\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.AllIntRegexWithDozenSuffixLocks),\n                value: \"IntegerFr\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class FrenchDoubleExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_DOUBLE;\n\n    constructor(placeholder: string = FrenchNumeric.PlaceHolderDefault) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.DoubleDecimalPointRegex(placeholder)),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.DoubleWithoutIntegralRegex(placeholder)),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.DoubleWithMultiplierRegex, \"gs\"),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.DoubleWithRoundNumber),\n                value: \"DoubleNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.DoubleAllFloatRegex),\n                value: \"DoubleFr\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.DoubleExponentialNotationRegex),\n                value: \"DoublePow\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.DoubleCaretExponentialNotationRegex),\n                value: \"DoublePow\"\n            },\n            {\n                regExp: this.generateLongFormatNumberRegexes(LongFormatType.doubleNumDotComma, placeholder),\n                value: \"DoubleNum\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class FrenchFractionExtractor extends BaseNumberExtractor {\n\n    protected extractType: string = Constants.SYS_NUM_FRACTION;\n\n    constructor() {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.FractionNotationRegex),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.FractionNotationWithSpacesRegex),\n                value: \"FracNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.FractionNounRegex),\n                value: \"FracFr\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.FractionNounWithArticleRegex),\n                value: \"FracFr\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.FractionPrepositionRegex),\n                value: \"FracFr\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class FrenchOrdinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_ORDINAL;\n\n    constructor() {\n        super();\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.OrdinalSuffixRegex),\n                value: \"OrdinalNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(FrenchNumeric.OrdinalFrenchRegex),\n                value: \"OrdFr\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class FrenchPercentageExtractor extends BasePercentageExtractor {\n    constructor() {\n        super(new FrenchNumberExtractor())\n    }\n\n    protected initRegexes(): Array<RegExp> {\n        let regexStrs = [\n            FrenchNumeric.NumberWithSuffixPercentage,\n            FrenchNumeric.NumberWithPrefixPercentage\n        ];\n\n        return this.buildRegexes(regexStrs);\n    }\n}","import { BaseNumberExtractor, RegExpValue, BasePercentageExtractor } from \"../extractors\";\nimport { Constants } from \"../constants\";\nimport { LongFormatType } from \"../models\";\nimport { ChineseNumeric } from \"../../resources/chineseNumeric\";\nimport { RegExpUtility } from \"recognizers-text\"\n\nexport enum ChineseNumberMode {\n    // for number with white list\n    Default,\n    // for number without white list\n    ExtractAll,\n}\n\nexport class ChineseNumberExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM;\n\n    constructor(mode: ChineseNumberMode = ChineseNumberMode.Default) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Cardinal\n        let cardExtract = new ChineseCardinalExtractor(mode);\n        cardExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Fraction\n        let fracExtract = new ChineseFractionExtractor();\n        fracExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class ChineseCardinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_CARDINAL;\n\n    constructor(mode: ChineseNumberMode = ChineseNumberMode.Default) {\n        super();\n        let regexes = new Array<RegExpValue>();\n\n        // Add Integer Regexes\n        let intExtract = new ChineseIntegerExtractor(mode);\n        intExtract.regexes.forEach(r => regexes.push(r));\n\n        // Add Double Regexes\n        let doubleExtract = new ChineseDoubleExtractor();\n        doubleExtract.regexes.forEach(r => regexes.push(r));\n\n        this.regexes = regexes;\n    }\n}\n\nexport class ChineseIntegerExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_INTEGER;\n\n    constructor(mode: ChineseNumberMode = ChineseNumberMode.Default) {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            { // 123456,  －１２３４５６\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersSpecialsChars, \"gi\"),\n                value: \"IntegerNum\"\n            },\n            { // 15k,  16 G\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersSpecialsCharsWithSuffix, \"gs\"),\n                value: \"IntegerNum\"\n            },\n            { // 1,234,  ２，３３２，１１１\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DottedNumbersSpecialsChar, \"gis\"),\n                value: \"IntegerNum\"\n            },\n            { // 半百  半打\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersWithHalfDozen, \"gis\"),\n                value: \"IntegerChs\"\n            },\n            { // 一打  五十打\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersWithDozen, \"gis\"),\n                value: \"IntegerChs\"\n            }\n        );\n\n        switch (mode) {\n            case ChineseNumberMode.Default:\n                regexes.push({ // 一百五十五,  负一亿三百二十二, avoid 五十五点五个百分点\n                    regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersWithoutPercent, \"gi\"),\n                    value: \"IntegerChs\"\n                });\n                break;\n            case ChineseNumberMode.ExtractAll:\n                regexes.push({ // 一百五十五,  负一亿三百二十二, avoid 五十五点五个百分点\n                    regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersWithPercent, \"gi\"),\n                    value: \"IntegerChs\"\n                });\n                break;\n        }\n\n        this.regexes = regexes;\n    }\n}\n\nexport class ChineseDoubleExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_DOUBLE;\n\n    constructor() {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            {\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleSpecialsChars, \"gis\"),\n                value: \"DoubleNum\"\n            },\n            { // (-)2.5, can avoid cases like ip address xx.xx.xx.xx\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleSpecialsCharsWithNegatives, \"gis\"),\n                value: \"DoubleNum\"\n            },\n            { // (-).2 \n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimpleDoubleSpecialsChars, \"gis\"),\n                value: \"DoubleNum\"\n            },\n            { // 1.0 K\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleWithMultiplierRegex, \"gi\"),\n                value: \"DoubleNum\"\n            },\n            { // １５.２万\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleWithThousandsRegex, \"gi\"),\n                value: \"DoubleChs\"\n            },\n            { // 四十五点三三\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleAllFloatRegex, \"gi\"),\n                value: \"DoubleChs\"\n            },\n            { // 2e6, 21.2e0\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleExponentialNotationRegex, \"gis\"),\n                value: \"DoublePow\"\n            },\n            { // 2^5\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.DoubleScientificNotationRegex, \"gis\"),\n                value: \"DoublePow\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class ChineseFractionExtractor extends BaseNumberExtractor {\n\n    protected extractType: string = Constants.SYS_NUM_FRACTION;\n\n    constructor() {\n        super();\n\n        let regexes = new Array<RegExpValue>(\n            { // -4 5/2, ４ ６／３\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.FractionNotationSpecialsCharsRegex, \"gis\"),\n                value: \"FracNum\"\n            },\n            { // 8/3 \n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.FractionNotationRegex, \"gis\"),\n                value: \"FracNum\"\n            },\n            { // 四分之六十五\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.AllFractionNumber, \"gi\"),\n                value: \"FracChs\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class ChineseOrdinalExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_ORDINAL;\n\n    constructor() {\n        super();\n        let regexes = new Array<RegExpValue>(\n            { // 第一百五十四\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.OrdinalRegexChs, \"gi\"),\n                value: \"OrdinalChs\"\n            },\n            { // 第２５６５,  第1234\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.OrdinalNumbersRegex, \"gi\"),\n                value: \"OrdinalChs\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}\n\nexport class ChinesePercentageExtractor extends BaseNumberExtractor {\n    protected extractType: string = Constants.SYS_NUM_PERCENTAGE;\n\n    constructor() {\n        super();\n        let regexes = new Array<RegExpValue>(\n            { // 二十个百分点,  四点五个百分点\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.PercentagePointRegex, \"gi\"),\n                value: \"PerChs\"\n            },\n            { // 百分之五十  百分之一点五\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimplePercentageRegex, \"gi\"),\n                value: \"PerChs\"\n            },\n            { // 百分之５６.２　百分之１２\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersPercentagePointRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 百分之3,000  百分之１，１２３\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersPercentageWithSeparatorRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 百分之3.2 k \n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersPercentageWithMultiplierRegex, \"gi\"),\n                value: \"PerNum\"\n            },\n            { // 12.56个百分点  ０.４个百分点\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.FractionPercentagePointRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 15,123个百分点  １１１，１１１个百分点\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.FractionPercentageWithSeparatorRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 12.1k个百分点  １５.1k个百分点\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.FractionPercentageWithMultiplierRegex, \"gi\"),\n                value: \"PerNum\"\n            },\n            { // 百分之22  百分之１２０\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimpleNumbersPercentageRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 百分之15k \n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimpleNumbersPercentageWithMultiplierRegex, \"gi\"),\n                value: \"PerNum\"\n            },\n            { // 百分之1,111  百分之９，９９９\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimpleNumbersPercentagePointRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 12个百分点\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.IntegerPercentageRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 12k个百分点\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.IntegerPercentageWithMultiplierRegex, \"gi\"),\n                value: \"PerNum\"\n            },\n            { // 2,123个百分点\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersFractionPercentageRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimpleIntegerPercentageRegex, \"gis\"),\n                value: \"PerNum\"\n            },\n            { // 2折 ２.５折\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersFoldsPercentageRegex, \"gis\"),\n                value: \"PerSpe\"\n            },\n            { // 三折 六点五折 七五折\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.FoldsPercentageRegex, \"gis\"),\n                value: \"PerSpe\"\n            },\n            { // 5成 6成半 6成4\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimpleFoldsPercentageRegex, \"gis\"),\n                value: \"PerSpe\"\n            },\n            { // 七成半 七成五\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SpecialsPercentageRegex, \"gis\"),\n                value: \"PerSpe\"\n            },\n            { // 2成 ２.５成\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.NumbersSpecialsPercentageRegex, \"gis\"),\n                value: \"PerSpe\"\n            },\n            { // 三成 六点五成\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SimpleSpecialsPercentageRegex, \"gis\"),\n                value: \"PerSpe\"\n            },\n            {\n                regExp: RegExpUtility.getSafeRegExp(ChineseNumeric.SpecialsFoldsPercentageRegex, \"gis\"),\n                value: \"PerSpe\"\n            }\n        );\n\n        this.regexes = regexes;\n    }\n}","import { IModel } from \"recognizers-text\";\nimport { Recognizer } from \"recognizers-text\";\nimport { Culture } from \"../culture\";\nimport { NumberMode, NumberModel, OrdinalModel, PercentModel } from \"./models\";\nimport { AgnosticNumberParserType, AgnosticNumberParserFactory } from \"./agnosticNumberParser\";\nimport { EnglishNumberParserConfiguration } from \"./english/parserConfiguration\";\nimport { SpanishNumberParserConfiguration } from \"./spanish/parserConfiguration\";\nimport { PortugueseNumberParserConfiguration } from \"./portuguese/parserConfiguration\";\nimport { FrenchNumberParserConfiguration } from \"./french/parserConfiguration\";\nimport { ChineseNumberParserConfiguration } from \"./chinese/parserConfiguration\";\nimport { EnglishNumberExtractor, EnglishOrdinalExtractor, EnglishPercentageExtractor } from \"./english/extractors\";\nimport { SpanishNumberExtractor, SpanishOrdinalExtractor, SpanishPercentageExtractor } from \"./spanish/extractors\";\nimport { PortugueseNumberExtractor, PortugueseOrdinalExtractor, PortuguesePercentageExtractor } from \"./portuguese/extractors\";\nimport { FrenchNumberExtractor, FrenchOrdinalExtractor, FrenchPercentageExtractor } from \"./french/extractors\";\nimport { ChineseNumberExtractor, ChineseOrdinalExtractor, ChinesePercentageExtractor } from \"./chinese/extractors\";\n\nexport default class NumberRecognizer extends Recognizer {\n    static readonly instance: NumberRecognizer = new NumberRecognizer();\n\n    private constructor() {\n        super();\n\n        // English models\n        this.registerModel(\"NumberModel\", Culture.English, new NumberModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new EnglishNumberParserConfiguration()),\n            new EnglishNumberExtractor(NumberMode.PureNumber)));\n        this.registerModel(\"OrdinalModel\", Culture.English, new OrdinalModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Ordinal, new EnglishNumberParserConfiguration()),\n            new EnglishOrdinalExtractor()));\n        this.registerModel(\"PercentModel\", Culture.English, new PercentModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Percentage, new EnglishNumberParserConfiguration()),\n            new EnglishPercentageExtractor()));\n\n        // Spanish models\n        this.registerModel(\"NumberModel\", Culture.Spanish, new NumberModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new SpanishNumberParserConfiguration()),\n            new SpanishNumberExtractor(NumberMode.PureNumber)));\n        this.registerModel(\"OrdinalModel\", Culture.Spanish, new OrdinalModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Ordinal, new SpanishNumberParserConfiguration()),\n            new SpanishOrdinalExtractor()));\n        this.registerModel(\"PercentModel\", Culture.Spanish, new PercentModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Percentage, new SpanishNumberParserConfiguration()),\n            new SpanishPercentageExtractor()));\n                \n        // Portuguese models\n        this.registerModel(\"NumberModel\", Culture.Portuguese, new NumberModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new PortugueseNumberParserConfiguration()),\n            new PortugueseNumberExtractor(NumberMode.PureNumber)));\n        this.registerModel(\"OrdinalModel\", Culture.Portuguese, new OrdinalModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Ordinal, new PortugueseNumberParserConfiguration()),\n            new PortugueseOrdinalExtractor()));\n        this.registerModel(\"PercentModel\", Culture.Portuguese, new PercentModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Percentage, new PortugueseNumberParserConfiguration()),\n            new PortuguesePercentageExtractor()));\n\n        // Chinese models\n        this.registerModel(\"NumberModel\", Culture.Chinese, new NumberModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new ChineseNumberParserConfiguration()),\n            new ChineseNumberExtractor()));\n        this.registerModel(\"OrdinalModel\", Culture.Chinese, new OrdinalModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Ordinal, new ChineseNumberParserConfiguration()),\n            new ChineseOrdinalExtractor()));\n        this.registerModel(\"PercentModel\", Culture.Chinese, new PercentModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Percentage, new ChineseNumberParserConfiguration()),\n            new ChinesePercentageExtractor()));\n\n        // French models\n        this.registerModel(\"NumberModel\", Culture.French, new NumberModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new FrenchNumberParserConfiguration()),\n            new FrenchNumberExtractor(NumberMode.PureNumber)));\n        this.registerModel(\"OrdinalModel\", Culture.French, new OrdinalModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Ordinal, new FrenchNumberParserConfiguration()),\n            new FrenchOrdinalExtractor()));\n        this.registerModel(\"PercentModel\", Culture.French, new PercentModel(\n            AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Percentage, new FrenchNumberParserConfiguration()),\n            new FrenchPercentageExtractor()));\n    }\n\n    getNumberModel(culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        return this.getModel(\"NumberModel\", culture, fallbackToDefaultCulture);\n    }\n\n    getOrdinalModel(culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        return this.getModel(\"OrdinalModel\", culture, fallbackToDefaultCulture);\n    }\n\n    getPercentageModel(culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        return this.getModel(\"PercentModel\", culture, fallbackToDefaultCulture);\n    }\n}","export { default as NumberRecognizer } from \"./number/numberRecognizer\";\nexport { Culture, CultureInfo } from \"./culture\";\nexport { FormatUtility, StringUtility, Match, RegExpUtility } from \"recognizers-text\";\nexport { BaseNumbers } from \"./resources/baseNumbers\";\nexport { EnglishNumeric } from \"./resources/englishNumeric\";\nexport { SpanishNumeric } from \"./resources/spanishNumeric\";\nexport { FrenchNumeric } from \"./resources/frenchNumeric\";\nexport { ChineseNumeric } from \"./resources/chineseNumeric\";\nexport { Constants } from \"./number/constants\";\nexport { RegExpValue, BaseNumberExtractor, BasePercentageExtractor } from \"./number/extractors\";\nexport { NumberMode, LongFormatType, AbstractNumberModel, NumberModel, OrdinalModel, PercentModel } from \"./number/models\";\nexport { AgnosticNumberParserType, AgnosticNumberParserFactory } from \"./number/agnosticNumberParser\";\nexport { INumberParserConfiguration, BaseNumberParser, BasePercentageParser } from \"./number/parsers\";\nexport { EnglishCardinalExtractor, EnglishDoubleExtractor, EnglishFractionExtractor, EnglishIntegerExtractor, EnglishNumberExtractor, EnglishOrdinalExtractor, EnglishPercentageExtractor } from \"./number/english/extractors\";\nexport { EnglishNumberParserConfiguration } from \"./number/english/parserConfiguration\";\nexport { SpanishCardinalExtractor, SpanishDoubleExtractor, SpanishFractionExtractor, SpanishIntegerExtractor, SpanishNumberExtractor, SpanishOrdinalExtractor, SpanishPercentageExtractor } from \"./number/spanish/extractors\";\nexport { SpanishNumberParserConfiguration } from \"./number/spanish/parserConfiguration\";\nexport { PortugueseCardinalExtractor, PortugueseDoubleExtractor, PortugueseFractionExtractor, PortugueseIntegerExtractor, PortugueseNumberExtractor, PortugueseOrdinalExtractor, PortuguesePercentageExtractor } from \"./number/portuguese/extractors\";\nexport { PortugueseNumberParserConfiguration } from \"./number/portuguese/parserConfiguration\";\nexport { FrenchCardinalExtractor, FrenchDoubleExtractor, FrenchFractionExtractor, FrenchIntegerExtractor, FrenchNumberExtractor, FrenchOrdinalExtractor, FrenchPercentageExtractor } from \"./number/french/extractors\";\nexport { FrenchNumberParserConfiguration } from \"./number/french/parserConfiguration\";\nexport { ChineseCardinalExtractor, ChineseDoubleExtractor, ChineseFractionExtractor, ChineseIntegerExtractor, ChineseNumberExtractor, ChineseOrdinalExtractor, ChinesePercentageExtractor, ChineseNumberMode } from \"./number/chinese/extractors\";\nexport { ChineseNumberParserConfiguration } from \"./number/chinese/parserConfiguration\";\nexport { ChineseNumberParser } from \"./number/chinese/parsers\";","import { IModel, ModelResult, IExtractor, ParseResult, FormatUtility } from \"recognizers-text\";\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\";\nimport { IDateTimeExtractor } from \"./baseDateTime\";\n\nexport class DateTimeModelResult extends ModelResult {\n    timexStr: string\n}\n\nexport interface IDateTimeModel extends IModel {\n    parse(query: string, referenceDate?: Date): ModelResult[]\n}\n\nexport class DateTimeModel implements IDateTimeModel {\n    modelTypeName: string = \"datetime\";\n\n    protected readonly extractor: IDateTimeExtractor;\n    protected readonly parser: IDateTimeParser;\n\n    constructor(parser: IDateTimeParser, extractor: IDateTimeExtractor) {\n        this.extractor = extractor;\n        this.parser = parser;\n    }\n\n    parse(query: string, referenceDate: Date = new Date()): ModelResult[] {\n        query = FormatUtility.preProcess(query);\n\n        let extractResults = this.extractor.extract(query, referenceDate);\n        let parseDates = new Array<DateTimeParseResult>();\n        for (let result of extractResults) {\n            let parseResult = this.parser.parse(result, referenceDate);\n            if (Array.isArray(parseResult.value)) {\n                parseDates.push(...parseResult.value);\n            } else { parseDates.push(parseResult); }\n        }\n\n        return parseDates\n            .map(o => ({\n                start: o.start,\n                end: o.start + o.length - 1,\n                resolution: o.value, // TODO: convert to proper resolution\n                text: o.text,\n                typeName: o.type\n            }));\n    }\n}","export class Constants {\n    static readonly SYS_DATETIME_DATE: string = \"date\";\n    static readonly SYS_DATETIME_TIME: string = \"time\";\n    static readonly SYS_DATETIME_DATEPERIOD: string = \"daterange\";\n    static readonly SYS_DATETIME_DATETIME: string = \"datetime\";\n    static readonly SYS_DATETIME_TIMEPERIOD: string = \"timerange\";\n    static readonly SYS_DATETIME_DATETIMEPERIOD: string = \"datetimerange\";\n    static readonly SYS_DATETIME_DURATION: string = \"duration\";\n    static readonly SYS_DATETIME_SET: string = \"set\";\n\n    // key\n    static readonly TimexKey: string = \"timex\";\n    static readonly CommentKey: string = \"Comment\";\n    static readonly ModKey: string = \"Mod\";\n    static readonly TypeKey: string = \"type\";\n    static readonly IsLunarKey: string = \"isLunar\";\n    static readonly ResolveKey: string = \"resolve\";\n    static readonly ResolveToPastKey: string = \"resolveToPast\";\n    static readonly ResolveToFutureKey: string = \"resolveToFuture\";\n}\n\nexport class TimeTypeConstants {\n    static readonly DATE: string = \"date\";\n    static readonly START_DATE: string = \"startDate\";\n    static readonly END_DATE: string = \"endDate\";\n    static readonly DATETIME: string = \"dateTime\";\n    static readonly START_DATETIME: string = \"startDateTime\";\n    static readonly END_DATETIME: string = \"endDateTime\";\n    static readonly DURATION: string = \"duration\";\n    static readonly SET: string = \"set\";\n    static readonly TIME: string = \"time\";\n    static readonly VALUE: string = \"value\";\n    static readonly START_TIME: string = \"startTime\";\n    static readonly END_TIME: string = \"endTime\";\n\n    static readonly START: string = \"start\";\n    static readonly END: string = \"end\";\n\n    static readonly beforeMod: string = \"before\";\n    static readonly afterMod: string = \"after\";\n    static readonly sinceMod: string = \"since\";\n}","import { IExtractor, ExtractResult } from \"recognizers-text\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../dateTime/parsers\"\nimport { TimeTypeConstants } from \"../dateTime/constants\"\nimport { IDateTimeExtractor } from \"./baseDateTime\";\n\nexport class Token {\n    constructor(start: number, end: number) {\n        this.start = start;\n        this.end = end;\n    }\n\n    start: number;\n    end: number;\n\n    get length(): number {\n        return this.end - this.start;\n    }\n\n    static mergeAllTokens(tokens: Token[], source: string, extractorName: string): Array<ExtractResult> {\n        let ret: Array<ExtractResult> = [];\n        let mergedTokens: Array<Token> = [];\n        tokens = tokens.sort((a, b) => { return a.start < b.start ? -1 : 1 });\n        tokens.forEach(token => {\n            if (token) {\n                let bAdd = true;\n                for (let index = 0; index < mergedTokens.length && bAdd; index++) {\n                    let mergedToken = mergedTokens[index];\n                    if (token.start >= mergedToken.start && token.end <= mergedToken.end) {\n                        bAdd = false;\n                    }\n                    if (token.start > mergedToken.start && token.start < mergedToken.end) {\n                        bAdd = false;\n                    }\n                    if (token.start <= mergedToken.start && token.end >= mergedToken.end) {\n                        bAdd = false;\n                        mergedTokens[index] = token;\n                    }\n                }\n                if (bAdd) {\n                    mergedTokens.push(token);\n                }\n            }\n        });\n        mergedTokens.forEach(token => {\n            ret.push({\n                start: token.start,\n                length: token.length,\n                text: source.substr(token.start, token.length),\n                type: extractorName\n            });\n        });\n        return ret;\n    }\n}\n\nexport interface IDateTimeUtilityConfiguration {\n    agoRegex: RegExp\n    laterRegex: RegExp\n    inConnectorRegex: RegExp\n    rangeUnitRegex: RegExp\n    amDescRegex: RegExp\n    pmDescRegex: RegExp\n    amPmDescRegex: RegExp\n}\n\nexport enum AgoLaterMode {\n    Date, DateTime\n}\n\nexport class AgoLaterUtil {\n    static extractorDurationWithBeforeAndAfter(source: string, er: ExtractResult, ret: Token[], config: IDateTimeUtilityConfiguration): Array<Token> {\n        let pos = er.start + er.length;\n        if (pos <= source.length) {\n            let afterString = source.substring(pos);\n            let beforeString = source.substring(0, er.start);\n            let index = -1;\n            let value = MatchingUtil.getAgoLaterIndex(afterString, config.agoRegex);\n            if (value.matched) {\n                ret.push(new Token(er.start, er.start + er.length + value.index));\n            }\n            else {\n                value = MatchingUtil.getAgoLaterIndex(afterString, config.laterRegex);\n                if (value.matched) {\n                    ret.push(new Token(er.start, er.start + er.length + value.index));\n                }\n                else {\n                    value = MatchingUtil.getInIndex(beforeString, config.inConnectorRegex);\n                    // for range unit like \"week, month, year\", it should output dateRange or datetimeRange\n                    if (RegExpUtility.getMatches(config.rangeUnitRegex, er.text).length > 0) return ret;\n                    if (value.matched && er.start && er.length && er.start >= value.index) {\n                        ret.push(new Token(er.start - value.index, er.start + er.length));\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\n    static parseDurationWithAgoAndLater(source: string, referenceDate: Date, durationExtractor: IDateTimeExtractor, durationParser: IDateTimeParser, unitMap: ReadonlyMap<string, string>, unitRegex: RegExp, utilityConfiguration: IDateTimeUtilityConfiguration, mode: AgoLaterMode): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let duration = durationExtractor.extract(source, referenceDate).pop();\n        if (!duration) return result;\n        let pr = durationParser.parse(duration, referenceDate);\n        if (!pr) return result;\n        let match = RegExpUtility.getMatches(unitRegex, source).pop();\n        if (!match) return result;\n        let afterStr = source.substr(duration.start + duration.length);\n        let beforeStr = source.substr(0, duration.start);\n        let srcUnit = match.groups('unit').value;\n        let durationResult: DateTimeResolutionResult = pr.value;\n        let numStr = durationResult.timex.substr(0, durationResult.timex.length - 1)\n            .replace('P', '')\n            .replace('T', '');\n        let num = Number.parseInt(numStr, 10);\n        if (!num) return result;\n        return AgoLaterUtil.getAgoLaterResult(pr, num, unitMap, srcUnit, afterStr, beforeStr, referenceDate, utilityConfiguration, mode);\n    }\n\n    static getAgoLaterResult(durationParseResult: DateTimeParseResult, num: number, unitMap: ReadonlyMap<string, string>, srcUnit: string, afterStr: string, beforeStr: string, referenceDate: Date, utilityConfiguration: IDateTimeUtilityConfiguration, mode: AgoLaterMode) {\n        let result = new DateTimeResolutionResult();\n        let unitStr = unitMap.get(srcUnit);\n        if (!unitStr) return result;\n        let numStr = num.toString();\n        let containsAgo = MatchingUtil.containsAgoLaterIndex(afterStr, utilityConfiguration.agoRegex);\n        let containsLaterOrIn = MatchingUtil.containsAgoLaterIndex(afterStr, utilityConfiguration.laterRegex) || MatchingUtil.containsInIndex(beforeStr, utilityConfiguration.inConnectorRegex);\n        if (containsAgo) {\n            result = AgoLaterUtil.getDateResult(unitStr, num, referenceDate, false, mode);\n            durationParseResult.value.mod = TimeTypeConstants.beforeMod;\n            result.subDateTimeEntities = [durationParseResult];\n            return result;\n        }\n        if (containsLaterOrIn) {\n            result = AgoLaterUtil.getDateResult(unitStr, num, referenceDate, true, mode);\n            durationParseResult.value.mod = TimeTypeConstants.afterMod;\n            result.subDateTimeEntities = [durationParseResult];\n            return result;\n        }\n        return result;\n    }\n\n    static getDateResult(unitStr: string, num: number, referenceDate: Date, isFuture: boolean, mode: AgoLaterMode): DateTimeResolutionResult {\n        let value = new Date(referenceDate);\n        let result = new DateTimeResolutionResult();\n        let swift = isFuture ? 1 : -1;\n        switch (unitStr) {\n            case 'D': value.setDate(referenceDate.getDate() + (num * swift)); break;\n            case 'W': value.setDate(referenceDate.getDate() + (num * swift * 7)); break;\n            case 'MON': value.setMonth(referenceDate.getMonth() + (num * swift)); break;\n            case 'Y': value.setFullYear(referenceDate.getFullYear() + (num * swift)); break;\n            case 'H': value.setHours(referenceDate.getHours() + (num * swift)); break;\n            case 'M': value.setMinutes(referenceDate.getMinutes() + (num * swift)); break;\n            case 'S': value.setSeconds(referenceDate.getSeconds() + (num * swift)); break;\n            default: return result;\n        }\n        result.timex = mode === AgoLaterMode.Date ? FormatUtil.luisDateFromDate(value) : FormatUtil.luisDateTime(value);\n        result.futureValue = value;\n        result.pastValue = value;\n        result.success = true;\n        return result;\n    }\n}\n\nexport interface MatchedIndex {\n    matched: boolean,\n    index: number\n}\n\nexport class MatchingUtil {\n    public static getAgoLaterIndex(source: string, regex: RegExp): MatchedIndex {\n        let result: MatchedIndex = { matched: false, index: -1 };\n        let referencedMatches = RegExpUtility.getMatches(regex, source.trim().toLowerCase());\n        if (referencedMatches && referencedMatches.length > 0) {\n            result.index = source.toLowerCase().lastIndexOf(referencedMatches[0].value) + referencedMatches[0].length;\n            result.matched = true;\n        }\n        return result;\n    }\n\n    public static getInIndex(source: string, regex: RegExp): MatchedIndex {\n        let result: MatchedIndex = { matched: false, index: -1 };\n        let referencedMatch = RegExpUtility.getMatches(regex, source.trim().toLowerCase().split(' ').pop());\n        if (referencedMatch && referencedMatch.length > 0) {\n            result.index = source.length - source.toLowerCase().lastIndexOf(referencedMatch[0].value);\n            result.matched = true;\n        }\n        return result;\n    }\n\n    public static containsAgoLaterIndex(source: string, regex: RegExp): boolean {\n        return this.getAgoLaterIndex(source, regex).matched;\n    }\n\n    public static containsInIndex(source: string, regex: RegExp): boolean {\n        return this.getInIndex(source, regex).matched;\n    }\n}\n\nexport class FormatUtil {\n    public static readonly HourTimexRegex = RegExpUtility.getSafeRegExp(String.raw`(?<!P)T\\d{2}`, \"gis\");\n\n    // Emulates .NET ToString(\"D{size}\")\n    public static toString(num: number, size: number): string {\n        let s = \"000000\" + (num || \"\");\n        return s.substr(s.length - size);\n    }\n\n    public static luisDate(year: number, month: number, day: number): string {\n        if (year === -1) {\n            if (month === -1) {\n                return new Array(\"XXXX\", \"XX\", FormatUtil.toString(day, 2)).join(\"-\");\n            }\n\n            return new Array(\"XXXX\", FormatUtil.toString(month + 1, 2), FormatUtil.toString(day, 2)).join(\"-\");\n        }\n\n        return new Array(FormatUtil.toString(year, 4), FormatUtil.toString(month + 1, 2), FormatUtil.toString(day, 2)).join(\"-\");\n    }\n\n    public static luisDateFromDate(date: Date): string {\n        return FormatUtil.luisDate(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    public static luisTime(hour: number, min: number, second: number): string {\n        return new Array(FormatUtil.toString(hour, 2), FormatUtil.toString(min, 2), FormatUtil.toString(second, 2)).join(\":\");\n    }\n\n    public static luisTimeFromDate(time: Date): string {\n        return FormatUtil.luisTime(time.getHours(), time.getMinutes(), time.getSeconds());\n    }\n\n    public static luisDateTime(time: Date): string {\n        return `${FormatUtil.luisDateFromDate(time)}T${FormatUtil.luisTimeFromDate(time)}`;\n    }\n\n    public static formatDate(date: Date): string {\n        return new Array(FormatUtil.toString(date.getFullYear(), 4),\n            FormatUtil.toString(date.getMonth() + 1, 2),\n            FormatUtil.toString(date.getDate(), 2)).join(\"-\");\n    }\n\n    public static formatTime(time: Date) {\n        return new Array(FormatUtil.toString(time.getHours(), 2),\n            FormatUtil.toString(time.getMinutes(), 2),\n            FormatUtil.toString(time.getSeconds(), 2)).join(\":\");\n    }\n\n    public static formatDateTime(datetime: Date): string {\n        return `${FormatUtil.formatDate(datetime)} ${FormatUtil.formatTime(datetime)}`;\n    }\n\n    public static allStringToPm(timeStr: string): string {\n        let matches = RegExpUtility.getMatches(FormatUtil.HourTimexRegex, timeStr);\n        let split = Array<string>();\n        let lastPos = 0;\n        matches.forEach(match => {\n            if (lastPos !== match.index) split.push(timeStr.substring(lastPos, match.index));\n            split.push(timeStr.substring(match.index, match.index + match.length));\n            lastPos = match.index + match.length;\n        });\n\n        if (timeStr.substring(lastPos)) {\n            split.push(timeStr.substring(lastPos));\n        }\n\n        for (let i = 0; i < split.length; i += 1) {\n            if (RegExpUtility.getMatches(FormatUtil.HourTimexRegex, split[i]).length > 0) {\n                split[i] = FormatUtil.toPm(split[i]);\n            }\n        }\n\n        return split.join('');\n    }\n\n    public static toPm(timeStr: string): string {\n        let hasT = false;\n        if (timeStr.startsWith(\"T\")) {\n            hasT = true;\n            timeStr = timeStr.substring(1);\n        }\n\n        let split = timeStr.split(':');\n        let hour = parseInt(split[0], 10);\n        hour = (hour === 12) ? 0 : hour + 12;\n        split[0] = FormatUtil.toString(hour, 2);\n\n        return (hasT ? \"T\" : \"\") + split.join(\":\");\n    }\n}\n\nexport class StringMap {\n    [key: string]: string;\n}\n\nexport class DateTimeResolutionResult {\n    success: boolean;\n    timex: string;\n    isLunar: boolean;\n    mod: string;\n    comment: string;\n    futureResolution: StringMap;\n    pastResolution: StringMap;\n    futureValue: any;\n    pastValue: any;\n    subDateTimeEntities: Array<any>;\n\n    constructor() {\n        this.success = false;\n    }\n}\n\nexport enum DayOfWeek {\n    Sunday = 0,\n    Monday = 1,\n    Tuesday = 2,\n    Wednesday = 3,\n    Thursday = 4,\n    Friday = 5,\n    Saturday = 6\n}\n\nexport class DateUtils {\n    private static readonly oneDay = 24 * 60 * 60 * 1000;\n    private static readonly oneHour = 60 * 60 * 1000;\n    private static readonly oneSecond = 1000;\n\n    static next(from: Date, dayOfWeek: DayOfWeek): Date {\n        let start = from.getDay();\n        let target = dayOfWeek;\n        if (start === 0) start = 7;\n        if (target === 0) target = 7;\n        let result = new Date(from);\n        result.setDate(from.getDate() + target - start + 7);\n        return result;\n    }\n\n    static this(from: Date, dayOfWeek: DayOfWeek): Date {\n        let start = from.getDay();\n        let target = dayOfWeek;\n        if (start === 0) start = 7;\n        if (target === 0) target = 7;\n        let result = new Date(from);\n        result.setDate(from.getDate() + target - start);\n        return result;\n    }\n\n    static last(from: Date, dayOfWeek: DayOfWeek): Date {\n        let start = from.getDay();\n        let target = dayOfWeek;\n        if (start === 0) start = 7;\n        if (target === 0) target = 7;\n        let result = new Date(from);\n        result.setDate(from.getDate() + target - start - 7);\n        return result;\n    }\n\n    static diffDays(from: Date, to: Date): number {\n        return Math.round(Math.abs((from.getTime() - to.getTime()) / this.oneDay));\n    }\n\n    static totalHours(from: Date, to: Date): number {\n        // Fix to mimic .NET's Convert.ToInt32()\n        // C#: Math.Round(4.5) == 4\n        // C#: Convert.ToInt32(4.5) == 4\n        // JS: Math.round(4.5) == 5 !!\n        let fromEpoch = from.getTime() - (from.getTimezoneOffset() * 60 * 1000);\n        let toEpoch = to.getTime() - (to.getTimezoneOffset() * 60 * 1000);\n        return Math.round(Math.abs(fromEpoch - toEpoch - 0.00001) / this.oneHour);\n    }\n\n    static totalSeconds(from: Date, to: Date): number {\n        let fromEpoch = from.getTime() - (from.getTimezoneOffset() * 60 * 1000);\n        let toEpoch = to.getTime() - (to.getTimezoneOffset() * 60 * 1000);\n        return Math.round(Math.abs(fromEpoch - toEpoch) / this.oneSecond);\n    }\n\n    static addTime(seedDate: Date, timeToAdd: Date): Date {\n        let date = new Date(seedDate);\n        date.setHours(seedDate.getHours() + timeToAdd.getHours());\n        date.setMinutes(seedDate.getMinutes() + timeToAdd.getMinutes());\n        date.setSeconds(seedDate.getSeconds() + timeToAdd.getSeconds());\n        return date;\n    }\n\n    static addSeconds(seedDate: Date, secondsToAdd: number): Date {\n        let date = new Date(seedDate);\n        date.setSeconds(seedDate.getSeconds() + secondsToAdd);\n        return date;\n    }\n\n    static addMinutes(seedDate: Date, minutesToAdd: number): Date {\n        let date = new Date(seedDate);\n        date.setMinutes(seedDate.getMinutes() + minutesToAdd);\n        return date;\n    }\n\n    static addHours(seedDate: Date, hoursToAdd: number): Date {\n        let date = new Date(seedDate);\n        date.setHours(seedDate.getHours() + hoursToAdd);\n        return date;\n    }\n\n    static addDays(seedDate: Date, daysToAdd: number): Date {\n        let date = new Date(seedDate);\n        date.setDate(seedDate.getDate() + daysToAdd);\n        return date;\n    }\n\n    static addMonths(seedDate: Date, monthsToAdd: number): Date {\n        let date = new Date(seedDate);\n        date.setMonth(seedDate.getMonth() + monthsToAdd);\n        return date;\n    }\n\n    static addYears(seedDate: Date, yearsToAdd: number): Date {\n        let date = new Date(seedDate);\n        date.setFullYear(seedDate.getFullYear() + yearsToAdd);\n        return date;\n    }\n\n    static getWeekNumber(referenceDate: Date): { weekNo: number, year: number } {\n        // Create a copy of this date object\n\t    let target  = new Date(referenceDate.valueOf());\n    \n        // ISO week date weeks start on monday\n        // so correct the day number\n        let dayNr   = (referenceDate.getDay() + 6) % 7;\n    \n        // ISO 8601 states that week 1 is the week\n        // with the first thursday of that year.\n        // Set the target date to the thursday in the target week\n        target.setDate(target.getDate() - dayNr + 3);\n    \n        // Store the millisecond value of the target date\n        let firstThursday = target.valueOf();\n    \n        // Set the target to the first thursday of the year\n        // First set the target to january first\n        target.setMonth(0, 1);\n        // Not a thursday? Correct the date to the next thursday\n        if (target.getDay() !== 4) {\n            target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);\n        }\n    \n        // The weeknumber is the number of weeks between the \n        // first thursday of the year and the thursday in the target week\n        let weekNo = 1 + Math.ceil((firstThursday - target.valueOf()) / 604800000); // 604800000 = 7 * 24 * 3600 * 1000\n        return { weekNo: weekNo, year: referenceDate.getUTCFullYear() }\n    }\n\n    static minValue(): Date {\n        let date = new Date(1, 0, 1, 0, 0, 0, 0);\n        date.setFullYear(1);\n        return date;\n    }\n\n    static safeCreateFromValue(seedDate: Date, year: number, month: number, day: number, hour = 0, minute = 0, second = 0) {\n        if (this.isValidDate(year, month, day) && this.isValidTime(hour, minute, second)) {\n            return new Date(year, month, day, hour, minute, second, 0);\n        }\n        return seedDate;\n    }\n\n    static safeCreateFromMinValue(year: number, month: number, day: number, hour = 0, minute = 0, second = 0) {\n        return this.safeCreateFromValue(this.minValue(), year, month, day, hour, minute, second);\n    }\n\n    static safeCreateFromMinValueWithDateAndTime(date: Date, time?: Date): Date {\n        return this.safeCreateFromMinValue(\n            date.getFullYear(), date.getMonth(), date.getDate(),\n            time ? time.getHours() : 0, time ? time.getMinutes() : 0, time ? time.getSeconds() : 0\n        );\n    }\n\n    static isLeapYear(year: number): boolean {\n        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n    }\n\n    static dayOfYear(date: Date): number {\n        let start = new Date(date.getFullYear(), 0, 1);\n        let diffDays = date.valueOf() - start.valueOf();\n        return Math.floor(diffDays / DateUtils.oneDay);\n    }\n\n    private static validDays(year: number) { return [31, this.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] }\n\n    private static isValidDate(year: number, month: number, day: number): boolean {\n        return year > 0 && year <= 9999\n            && month >= 0 && month < 12\n            && day > 0 && day <= this.validDays(year)[month];\n    }\n\n    private static isValidTime(hour: number, minute: number, second: number) {\n        return hour >= 0 && hour < 24\n            && minute >= 0 && minute < 60\n            && second >= 0 && minute < 60;\n    }\n}","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","import { IExtractor, ExtractResult } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { RegExpUtility, StringUtility, BaseNumberExtractor } from \"recognizers-text-number\"\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { FormatUtil, DateUtils, DateTimeResolutionResult, Token, StringMap } from \"./utilities\"\nimport { BaseDateExtractor, BaseDateParser } from \"./baseDate\"\nimport { BaseTimeExtractor, BaseTimeParser } from \"./baseTime\"\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"./baseDatePeriod\"\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"./baseTimePeriod\"\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser } from \"./baseDateTime\"\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"./baseDateTimePeriod\"\nimport { BaseSetExtractor, BaseSetParser } from \"./baseSet\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"./baseDuration\"\nimport { BaseHolidayExtractor, BaseHolidayParser } from \"./baseHoliday\"\nimport isEqual = require('lodash.isequal');\nimport { DateTimeOptions } from \"./dateTimeRecognizer\";\n\nexport interface IMergedExtractorConfiguration {\n    dateExtractor: IDateTimeExtractor\n    timeExtractor: IDateTimeExtractor\n    dateTimeExtractor: IDateTimeExtractor\n    datePeriodExtractor: IDateTimeExtractor\n    timePeriodExtractor: IDateTimeExtractor\n    dateTimePeriodExtractor: IDateTimeExtractor\n    holidayExtractor: IDateTimeExtractor\n    durationExtractor: IDateTimeExtractor\n    setExtractor: IDateTimeExtractor\n    integerExtractor: BaseNumberExtractor\n    afterRegex: RegExp\n    beforeRegex: RegExp\n    sinceRegex: RegExp\n    fromToRegex: RegExp\n    singleAmbiguousMonthRegex: RegExp\n    prepositionSuffixRegex: RegExp\n    numberEndingPattern: RegExp\n    filterWordRegexList: RegExp[]\n}\n\nexport class BaseMergedExtractor implements IDateTimeExtractor {\n    protected readonly config: IMergedExtractorConfiguration;\n    protected readonly options: DateTimeOptions;\n\n    constructor(config: IMergedExtractorConfiguration, options: DateTimeOptions) {\n        this.config = config;\n        this.options = options;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let result: Array<ExtractResult> = new Array<ExtractResult>();\n        this.addTo(result, this.config.dateExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.timeExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.durationExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.datePeriodExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.dateTimeExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.timePeriodExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.dateTimePeriodExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.setExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.holidayExtractor.extract(source, referenceDate), source);\n\n        // this should be at the end since if need the extractor to determine the previous text contains time or not\n        this.addTo(result, this.numberEndingRegexMatch(source, result), source);\n\n        this.addMod(result, source);\n\n        //filtering\n        if ((this.options & DateTimeOptions.Calendar) != 0) {\n            this.checkCalendarFilterList(result, source);\n        }\n\n        result = result.sort((a, b) => a.start - b.start);\n        return result;\n    }\n\n    private checkCalendarFilterList(ers: ExtractResult[], text: string) {\n        for (let er of ers.reverse()) {\n            for (let negRegex of this.config.filterWordRegexList) {\n                var match = RegExpUtility.getMatches(negRegex, er.text).pop();\n                if (match) {\n                    ers.splice(ers.indexOf(er));\n                }\n            }\n        }\n    }\n\n    // handle cases like \"move 3pm appointment to 4\"\n    private numberEndingRegexMatch(text: string, extractResults: ExtractResult[]): ExtractResult[] {\n        let tokens = new Array<Token>();\n\n        extractResults.forEach(extractResult => {\n            if (extractResult.type === Constants.SYS_DATETIME_TIME\n                || extractResult.type === Constants.SYS_DATETIME_DATETIME) {\n                let stringAfter = text.substring(extractResult.start + extractResult.length);\n                let match = RegExpUtility.getMatches(this.config.numberEndingPattern, stringAfter);\n                if (match != null && match.length) {\n                    let newTime = match[0].groups(\"newTime\");\n                    let numRes = this.config.integerExtractor.extract(newTime.value);\n                    if (numRes.length === 0) {\n                        return;\n                    }\n\n                    let startPosition = extractResult.start + extractResult.length + newTime.index;\n                    tokens.push(new Token(startPosition, startPosition + newTime.length));\n                }\n            }\n        });\n\n        return Token.mergeAllTokens(tokens, text, Constants.SYS_DATETIME_TIME);\n    }\n\n    protected addTo(destination: ExtractResult[], source: ExtractResult[], text: string) {\n        source.forEach(value => {\n            if (this.options === DateTimeOptions.SkipFromToMerge && this.shouldSkipFromMerge(value)) return;\n\n            let isFound = false;\n            let overlapIndexes = new Array<number>();\n            let firstIndex = -1;\n            destination.forEach((dest, index) => {\n                if (ExtractResult.isOverlap(dest, value)) {\n                    isFound = true;\n                    if (ExtractResult.isCover(dest, value)) {\n                        if (firstIndex === -1) {\n                            firstIndex = index;\n                        }\n                        overlapIndexes.push(index);\n                    } else {\n                        return;\n                    }\n                }\n            });\n            if (!isFound) {\n                destination.push(value)\n            } else if (overlapIndexes.length) {\n                let tempDst = new Array<ExtractResult>();\n                for (let i = 0; i < destination.length; i++) {\n                    if (overlapIndexes.indexOf(i) === -1) {\n                        tempDst.push(destination[i]);\n                    }\n                }\n\n                // insert at the first overlap occurence to keep the order\n                tempDst.splice(firstIndex, 0, value);\n                destination.length = 0;\n                destination.push.apply(destination, tempDst);\n            }\n        });\n    }\n\n    private shouldSkipFromMerge(er: ExtractResult): boolean {\n        return RegExpUtility.getMatches(this.config.fromToRegex, er.text).length > 0;\n    }\n\n    private filterAmbiguousSingleWord(er: ExtractResult, text: string): boolean {\n        let matches = RegExpUtility.getMatches(this.config.singleAmbiguousMonthRegex, er.text.toLowerCase())\n        if (matches.length) {\n            let stringBefore = text.substring(0, er.start).replace(/\\s+$/, '');\n            matches = RegExpUtility.getMatches(this.config.prepositionSuffixRegex, stringBefore);\n            if (!matches.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    protected addMod(ers: ExtractResult[], source: string) {\n        let lastEnd = 0;\n        ers.forEach(er => {\n            let beforeStr = source.substr(lastEnd, er.start).toLowerCase();\n            let before = this.hasTokenIndex(beforeStr.trim(), this.config.beforeRegex);\n            if (before.matched) {\n                let modLength = beforeStr.length - before.index;\n                er.length += modLength;\n                er.start -= modLength;\n                er.text = source.substr(er.start, er.length);\n            }\n            let after = this.hasTokenIndex(beforeStr.trim(), this.config.afterRegex);\n            if (after.matched) {\n                let modLength = beforeStr.length - after.index;\n                er.length += modLength;\n                er.start -= modLength;\n                er.text = source.substr(er.start, er.length);\n            }\n            let since = this.hasTokenIndex(beforeStr.trim(), this.config.sinceRegex);\n            if (since.matched) {\n                let modLength = beforeStr.length - since.index;\n                er.length += modLength;\n                er.start -= modLength;\n                er.text = source.substr(er.start, er.length);\n            }\n        });\n    }\n\n    private hasTokenIndex(source: string, regex: RegExp): { matched: boolean, index: number } {\n        let result = { matched: false, index: -1 };\n        let match = RegExpUtility.getMatches(regex, source).pop();\n        if (match) {\n            result.matched = true\n            result.index = match.index\n        }\n        return result;\n    }\n}\n\nexport interface IMergedParserConfiguration {\n    beforeRegex: RegExp\n    afterRegex: RegExp\n    sinceRegex: RegExp\n    dateParser: BaseDateParser\n    holidayParser: BaseHolidayParser\n    timeParser: BaseTimeParser\n    dateTimeParser: BaseDateTimeParser\n    datePeriodParser: BaseDatePeriodParser\n    timePeriodParser: BaseTimePeriodParser\n    dateTimePeriodParser: BaseDateTimePeriodParser\n    durationParser: BaseDurationParser\n    setParser: BaseSetParser\n}\n\nexport class BaseMergedParser implements IDateTimeParser {\n    readonly parserTypeName = 'datetimeV2';\n\n    protected readonly config: IMergedParserConfiguration;\n    private readonly options: DateTimeOptions;\n\n    private readonly dateMinValue = FormatUtil.formatDate(DateUtils.minValue());\n    private readonly dateTimeMinValue = FormatUtil.formatDateTime(DateUtils.minValue());\n\n    constructor(config: IMergedParserConfiguration, options: DateTimeOptions) {\n        this.config = config;\n        this.options = options;\n    }\n\n    parse(er: ExtractResult, refTime?: Date): DateTimeParseResult | null {\n        let referenceTime = refTime || new Date();\n        let pr: DateTimeParseResult = null;\n\n        // push, save teh MOD string\n        let hasBefore = false;\n        let hasAfter = false;\n        let hasSince = false;\n        let modStr = \"\";\n        let beforeMatch = RegExpUtility.getMatches(this.config.beforeRegex, er.text).shift();\n        let afterMatch = RegExpUtility.getMatches(this.config.afterRegex, er.text).shift();\n        let sinceMatch = RegExpUtility.getMatches(this.config.sinceRegex, er.text).shift();\n        if (beforeMatch && beforeMatch.index === 0) {\n            hasBefore = true;\n            er.start += beforeMatch.length;\n            er.length -= beforeMatch.length;\n            er.text = er.text.substring(beforeMatch.length);\n            modStr = beforeMatch.value;\n        }\n        else if (afterMatch && afterMatch.index === 0) {\n            hasAfter = true;\n            er.start += afterMatch.length;\n            er.length -= afterMatch.length;\n            er.text = er.text.substring(afterMatch.length);\n            modStr = afterMatch.value;\n        }\n        else if (sinceMatch && sinceMatch.index === 0) {\n            hasSince = true;\n            er.start += sinceMatch.length;\n            er.length -= sinceMatch.length;\n            er.text = er.text.substring(sinceMatch.length);\n            modStr = sinceMatch.value;\n        }\n\n        if (er.type === Constants.SYS_DATETIME_DATE) {\n            pr = this.config.dateParser.parse(er, referenceTime);\n            if (pr.value === null || pr.value === undefined) {\n                pr = this.config.holidayParser.parse(er, referenceTime);\n            }\n        }\n        else if (er.type === Constants.SYS_DATETIME_TIME) {\n            pr = this.config.timeParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATETIME) {\n            pr = this.config.dateTimeParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATEPERIOD) {\n            pr = this.config.datePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_TIMEPERIOD) {\n            pr = this.config.timePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATETIMEPERIOD) {\n            pr = this.config.dateTimePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DURATION) {\n            pr = this.config.durationParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_SET) {\n            pr = this.config.setParser.parse(er, referenceTime);\n        }\n        else {\n            return null;\n        }\n\n        // pop, restore the MOD string\n        if (hasBefore && pr.value !== null) {\n            pr.length += modStr.length;\n            pr.start -= modStr.length;\n            pr.text = modStr + pr.text;\n            let val = pr.value;\n            val.mod = TimeTypeConstants.beforeMod;\n            pr.value = val;\n        }\n\n        if (hasAfter && pr.value !== null) {\n            pr.length += modStr.length;\n            pr.start -= modStr.length;\n            pr.text = modStr + pr.text;\n            let val = pr.value;\n            val.mod = TimeTypeConstants.afterMod;\n            pr.value = val;\n        }\n\n        if (hasSince && pr.value !== null) {\n            pr.length += modStr.length;\n            pr.start -= modStr.length;\n            pr.text = modStr + pr.text;\n            let val = pr.value;\n            val.mod = TimeTypeConstants.sinceMod;\n            pr.value = val;\n        }\n\n        if ((this.options & DateTimeOptions.SplitDateAndTime) === DateTimeOptions.SplitDateAndTime\n            && pr.value && pr.value.subDateTimeEntities != null) {\n            pr.value = this.dateTimeResolutionForSplit(pr);\n        }\n        else {\n            pr = this.setParseResult(pr, hasBefore, hasAfter, hasSince);\n        }\n\n        return pr;\n    }\n\n    public setParseResult(slot: DateTimeParseResult, hasBefore: boolean, hasAfter: boolean, hasSince: boolean): DateTimeParseResult {\n        slot.value = this.dateTimeResolution(slot, hasBefore, hasAfter, hasSince);\n        // change the type at last for the after or before mode\n        slot.type = `${this.parserTypeName}.${this.determineDateTimeType(slot.type, hasBefore, hasAfter, hasSince)}`;\n        return slot;\n    }\n\n    protected getParseResult(extractorResult: ExtractResult, referenceDate: Date): DateTimeParseResult | null {\n        let extractorType = extractorResult.type;\n        if (extractorType === Constants.SYS_DATETIME_DATE) {\n            let pr = this.config.dateParser.parse(extractorResult, referenceDate);\n            if (!pr || !pr.value) return this.config.holidayParser.parse(extractorResult, referenceDate);\n            return pr;\n        }\n        if (extractorType === Constants.SYS_DATETIME_TIME) {\n            return this.config.timeParser.parse(extractorResult, referenceDate);\n        }\n        if (extractorType === Constants.SYS_DATETIME_DATETIME) {\n            return this.config.dateTimeParser.parse(extractorResult, referenceDate);\n        }\n        if (extractorType === Constants.SYS_DATETIME_DATEPERIOD) {\n            return this.config.datePeriodParser.parse(extractorResult, referenceDate);\n        }\n        if (extractorType === Constants.SYS_DATETIME_TIMEPERIOD) {\n            return this.config.timePeriodParser.parse(extractorResult, referenceDate);\n        }\n        if (extractorType === Constants.SYS_DATETIME_DATETIMEPERIOD) {\n            return this.config.dateTimePeriodParser.parse(extractorResult, referenceDate);\n        }\n        if (extractorType === Constants.SYS_DATETIME_DURATION) {\n            return this.config.durationParser.parse(extractorResult, referenceDate);\n        }\n        if (extractorType === Constants.SYS_DATETIME_SET) {\n            return this.config.setParser.parse(extractorResult, referenceDate);\n        }\n        return null;\n    }\n\n    protected determineDateTimeType(type: string, hasBefore: boolean, hasAfter: boolean, hasSince: boolean): string {\n        if ((this.options & DateTimeOptions.SplitDateAndTime) === DateTimeOptions.SplitDateAndTime) {\n            if (type === Constants.SYS_DATETIME_DATETIME) {\n                return Constants.SYS_DATETIME_TIME;\n            }\n        }\n        else {\n            if (hasBefore || hasAfter || hasSince) {\n                if (type === Constants.SYS_DATETIME_DATE) return Constants.SYS_DATETIME_DATEPERIOD;\n                if (type === Constants.SYS_DATETIME_TIME) return Constants.SYS_DATETIME_TIMEPERIOD;\n                if (type === Constants.SYS_DATETIME_DATETIME) return Constants.SYS_DATETIME_DATETIMEPERIOD;\n            }\n        }\n        return type;\n    }\n\n    public dateTimeResolutionForSplit(slot: DateTimeParseResult): Array<DateTimeParseResult> {\n        let results = new Array<DateTimeParseResult>();\n        if (slot.value.subDateTimeEntities != null) {\n            let subEntities = slot.value.subDateTimeEntities;\n            for (let subEntity of subEntities) {\n                let result = subEntity;\n                results.push(...this.dateTimeResolutionForSplit(result));\n            }\n        }\n        else {\n            slot.value = this.dateTimeResolution(slot, false, false, false);\n            slot.type = `${this.parserTypeName}.${this.determineDateTimeType(slot.type, false, false, false)}`;\n            results.push(slot);\n        }\n        return results;\n    }\n\n    protected dateTimeResolution(slot: DateTimeParseResult, hasBefore: boolean, hasAfter: boolean, hasSince: boolean): { [s: string]: Array<StringMap>; } {\n        if (!slot) return null;\n\n        let result = new Map<string, any>();\n        let resolutions = new Array<StringMap>();\n\n        let type = slot.type;\n        let outputType = this.determineDateTimeType(type, hasBefore, hasAfter, hasSince);\n        let timex = slot.timexStr;\n\n        let value: DateTimeResolutionResult = slot.value;\n        if (!value) return null;\n\n        let isLunar = value.isLunar;\n        let mod = value.mod;\n        let comment = value.comment;\n\n        // the following should added to res first since the ResolveAmPm is using these fields\n        this.addResolutionFieldsAny(result, Constants.TimexKey, timex);\n        this.addResolutionFieldsAny(result, Constants.CommentKey, comment);\n        this.addResolutionFieldsAny(result, Constants.ModKey, mod);\n        this.addResolutionFieldsAny(result, Constants.TypeKey, outputType);\n        this.addResolutionFieldsAny(result, Constants.IsLunarKey, isLunar ? String(isLunar) : \"\");\n\n        let futureResolution = value.futureResolution;\n        let pastResolution = value.pastResolution;\n\n        let future = this.generateFromResolution(type, futureResolution, mod);\n        let past = this.generateFromResolution(type, pastResolution, mod);\n\n        let futureValues = Array.from(this.getValues(future)).sort();\n        let pastValues = Array.from(this.getValues(past)).sort();\n        if (isEqual(futureValues, pastValues)) {\n            if (pastValues.length > 0) this.addResolutionFieldsAny(result, Constants.ResolveKey, past);\n        } else {\n            if (pastValues.length > 0) this.addResolutionFieldsAny(result, Constants.ResolveToPastKey, past);\n            if (futureValues.length > 0) this.addResolutionFieldsAny(result, Constants.ResolveToFutureKey, future);\n        }\n\n        if (comment && comment === 'ampm') {\n            if (result.has('resolve')) {\n                this.resolveAMPM(result, 'resolve');\n            } else {\n                this.resolveAMPM(result, 'resolveToPast');\n                this.resolveAMPM(result, 'resolveToFuture');\n            }\n        }\n\n        result.forEach((value, key) => {\n            if (this.isObject(value)) {\n                // is \"StringMap\"\n                let newValues = {};\n\n                this.addResolutionFields(newValues, Constants.TimexKey, timex);\n                this.addResolutionFields(newValues, Constants.ModKey, mod);\n                this.addResolutionFields(newValues, Constants.TypeKey, outputType);\n                this.addResolutionFields(newValues, Constants.IsLunarKey, isLunar ? String(isLunar) : \"\");\n\n                Object.keys(value).forEach((innerKey) => {\n                    newValues[innerKey] = value[innerKey];\n                });\n\n                resolutions.push(newValues);\n            }\n        });\n\n        if (Object.keys(past).length === 0 && Object.keys(future).length === 0) {\n            let o = {};\n            o['timex'] = timex;\n            o['type'] = outputType;\n            o['value'] = 'not resolved';\n            resolutions.push(o);\n        }\n        return {\n            values: resolutions\n        };\n    }\n\n    protected isObject(o: any) {\n        return (!!o) && (o.constructor === Object);\n    }\n\n    protected addResolutionFieldsAny(dic: Map<string, any>, key: string, value: any) {\n        if (value instanceof String) {\n            if (!StringUtility.isNullOrEmpty(value as string)) {\n                dic.set(key, value);\n            }\n        }\n        else {\n            dic.set(key, value);\n        }\n    }\n\n    protected addResolutionFields(dic: StringMap, key: string, value: string) {\n        if (!StringUtility.isNullOrEmpty(value)) {\n            dic[key] = value;\n        }\n    }\n\n    protected generateFromResolution(type: string, resolutions: StringMap, mod: string): StringMap {\n        let result = {};\n        switch (type) {\n            case Constants.SYS_DATETIME_DATETIME:\n                this.addSingleDateTimeToResolution(resolutions, TimeTypeConstants.DATETIME, mod, result);\n                break;\n\n            case Constants.SYS_DATETIME_TIME:\n                this.addSingleDateTimeToResolution(resolutions, TimeTypeConstants.TIME, mod, result);\n                break;\n\n            case Constants.SYS_DATETIME_DATE:\n                this.addSingleDateTimeToResolution(resolutions, TimeTypeConstants.DATE, mod, result);\n                break;\n\n            case Constants.SYS_DATETIME_DURATION:\n                if (resolutions.hasOwnProperty(TimeTypeConstants.DURATION)) {\n                    result[TimeTypeConstants.VALUE] = resolutions[TimeTypeConstants.DURATION];\n                }\n\n                break;\n\n            case Constants.SYS_DATETIME_TIMEPERIOD:\n                this.addPeriodToResolution(resolutions, TimeTypeConstants.START_TIME, TimeTypeConstants.END_TIME, mod, result);\n                break;\n\n            case Constants.SYS_DATETIME_DATEPERIOD:\n                this.addPeriodToResolution(resolutions, TimeTypeConstants.START_DATE, TimeTypeConstants.END_DATE, mod, result);\n                break;\n\n            case Constants.SYS_DATETIME_DATETIMEPERIOD:\n                this.addPeriodToResolution(resolutions, TimeTypeConstants.START_DATETIME, TimeTypeConstants.END_DATETIME, mod, result);\n                break;\n        }\n        return result;\n    }\n\n    private addSingleDateTimeToResolution(resolutions: StringMap, type: string, mod: string, result: StringMap) {\n        let key = TimeTypeConstants.VALUE;\n        let value = resolutions[type];\n        if (!value || this.dateMinValue === value || this.dateTimeMinValue === value) return;\n\n        if (!StringUtility.isNullOrEmpty(mod)) {\n            if (mod === TimeTypeConstants.beforeMod) {\n                key = TimeTypeConstants.END;\n            } else if (mod === TimeTypeConstants.afterMod) {\n                key = TimeTypeConstants.START;\n            } else if (mod === TimeTypeConstants.sinceMod) {\n                key = TimeTypeConstants.START;\n            }\n        }\n\n        result[key] = value;\n    }\n\n    private addPeriodToResolution(resolutions: StringMap, startType: string, endType: string, mod: string, result: StringMap) {\n        let start = resolutions[startType];\n        let end = resolutions[endType];\n        if (!StringUtility.isNullOrEmpty(mod)) {\n            if (mod === TimeTypeConstants.beforeMod) {\n                result[TimeTypeConstants.END] = start;\n                return;\n            }\n\n            if (mod === TimeTypeConstants.afterMod) {\n                result[TimeTypeConstants.START] = end;\n                return;\n            }\n\n            if (mod === TimeTypeConstants.sinceMod) {\n                result[TimeTypeConstants.START] = start;\n                return;\n            }\n        }\n\n        if (StringUtility.isNullOrEmpty(start) || StringUtility.isNullOrEmpty(end)) return;\n\n        result[TimeTypeConstants.START] = start;\n        result[TimeTypeConstants.END] = end;\n    }\n\n    protected getValues(obj: any): Array<any> {\n        return Object.keys(obj).map(key => obj[key]);\n    }\n\n    protected resolveAMPM(valuesMap: Map<string, any>, keyName: string) {\n        if (!valuesMap.has(keyName)) return;\n\n        let resolution: StringMap = valuesMap.get(keyName);\n        if (!valuesMap.has('timex')) return;\n\n        let timex = valuesMap.get('timex');\n        valuesMap.delete(keyName);\n        valuesMap.set(keyName + 'Am', resolution);\n\n        let resolutionPm: StringMap = {};\n        switch (valuesMap.get('type')) {\n            case Constants.SYS_DATETIME_TIME:\n                resolutionPm[TimeTypeConstants.VALUE] = FormatUtil.toPm(resolution[TimeTypeConstants.VALUE]);\n                resolutionPm['timex'] = FormatUtil.toPm(timex);\n                break;\n\n            case Constants.SYS_DATETIME_DATETIME:\n                let splitValue = resolution[TimeTypeConstants.VALUE].split(' ');\n                resolutionPm[TimeTypeConstants.VALUE] = `${splitValue[0]} ${FormatUtil.toPm(splitValue[1])}`;\n                resolutionPm['timex'] = FormatUtil.allStringToPm(timex);\n                break;\n\n            case Constants.SYS_DATETIME_TIMEPERIOD:\n                if (resolution.hasOwnProperty(TimeTypeConstants.START)) resolutionPm[TimeTypeConstants.START] = FormatUtil.toPm(resolution[TimeTypeConstants.START]);\n                if (resolution.hasOwnProperty(TimeTypeConstants.END)) resolutionPm[TimeTypeConstants.END] = FormatUtil.toPm(resolution[TimeTypeConstants.END]);\n                resolutionPm['timex'] = FormatUtil.allStringToPm(timex);\n                break;\n\n            case Constants.SYS_DATETIME_DATETIMEPERIOD:\n                if (resolution.hasOwnProperty(TimeTypeConstants.START)) {\n                    let splitValue = resolution[TimeTypeConstants.START].split(' ');\n                    resolutionPm[TimeTypeConstants.START] = `${splitValue[0]} ${FormatUtil.toPm(splitValue[1])}`;\n                }\n\n                if (resolution.hasOwnProperty(TimeTypeConstants.END)) {\n                    let splitValue = resolution[TimeTypeConstants.END].split(' ');\n                    resolutionPm[TimeTypeConstants.END] = `${splitValue[0]} ${FormatUtil.toPm(splitValue[1])}`;\n                }\n\n                resolutionPm['timex'] = FormatUtil.allStringToPm(timex);\n                break;\n        }\n\n        valuesMap.set(keyName + 'Pm', resolutionPm);\n    }\n}\n","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nexport namespace BaseDateTime {\n\texport const HourRegex = `(?<hour>00|01|02|03|04|05|06|07|08|09|0|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|1|2|3|4|5|6|7|8|9)`;\n\texport const MinuteRegex = `(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|0|1|2|3|4|5|6|7|8|9)`;\n\texport const DeltaMinuteRegex = `(?<deltamin>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|0|1|2|3|4|5|6|7|8|9)`;\n\texport const SecondRegex = `(?<sec>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|0|1|2|3|4|5|6|7|8|9)`;\n\texport const DayOfMonthDictionary: ReadonlyMap<string, number> = new Map<string, number>([[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"6\", 6],[\"7\", 7],[\"8\", 8],[\"9\", 9],[\"10\", 10],[\"11\", 11],[\"12\", 12],[\"13\", 13],[\"14\", 14],[\"15\", 15],[\"16\", 16],[\"17\", 17],[\"18\", 18],[\"19\", 19],[\"20\", 20],[\"21\", 21],[\"22\", 22],[\"23\", 23],[\"24\", 24],[\"25\", 25],[\"26\", 26],[\"27\", 27],[\"28\", 28],[\"29\", 29],[\"30\", 30],[\"31\", 31],[\"01\", 1],[\"02\", 2],[\"03\", 3],[\"04\", 4],[\"05\", 5],[\"06\", 6],[\"07\", 7],[\"08\", 8],[\"09\", 9]]);\n\texport const VariableHolidaysTimexDictionary: ReadonlyMap<string, string> = new Map<string, string>([[\"fathers\", \"-06-WXX-7-3\"],[\"mothers\", \"-05-WXX-7-2\"],[\"thanksgiving\", \"-11-WXX-4-4\"],[\"martinlutherking\", \"-01-WXX-1-3\"],[\"washingtonsbirthday\", \"-02-WXX-1-3\"],[\"canberra\", \"-03-WXX-1-1\"],[\"labour\", \"-09-WXX-1-1\"],[\"columbus\", \"-10-WXX-1-2\"],[\"memorial\", \"-05-WXX-1-4\"]]);\n}\n","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseDateTime } from \"./baseDateTime\";\nexport namespace EnglishDateTime {\n\texport const TillRegex = `(?<till>to|till|til|until|thru|through|--|-|—|——)`;\n\texport const RangeConnectorRegex = `(?<and>and|through|to|--|-|—|——)`;\n\texport const RelativeRegex = `(?<order>next|upcoming|this|last|past|previous|current|the|my)`;\n\texport const StrictRelativeRegex = `(?<order>next|upcoming|this|last|past|previous|current)`;\n\texport const NextPrefixRegex = `(next|upcoming)\\\\b`;\n\texport const PastPrefixRegex = `(last|past|previous)\\\\b`;\n\texport const ThisPrefixRegex = `(this|current)\\\\b`;\n\texport const DayRegex = `(the\\\\s*)?(?<day>01|02|03|04|05|06|07|08|09|10th|10|11th|11st|11|12nd|12th|12|13rd|13th|13|14th|14|15th|15|16th|16|17th|17|18th|18|19th|19|1st|1|20th|20|21st|21|22nd|22|23rd|23|24th|24|25th|25|26th|26|27th|27|28th|28|29th|29|2nd|2|30th|30|31st|31|3rd|3|4th|4|5th|5|6th|6|7th|7|8th|8|9th|9)(?=\\\\b|t)`;\n\texport const MonthNumRegex = `(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\\\b`;\n\texport const PeriodYearRegex = `\\\\b(?<year>19\\\\d{2}|20\\\\d{2})\\\\b`;\n\texport const WeekDayRegex = `\\\\b(?<weekday>Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Mon|Tues|Tue|Wedn|Weds|Wed|Thurs|Thur|Thu|Fri|Sat|Sun)\\\\b`;\n\texport const SingleWeekDayRegex = `\\\\b(?<weekday>Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Mon|Tue|Tues|Wedn|Weds|Wed|Thurs|Thur|Thu|Fri|((?<=on)\\\\s+(Sat|Sun)))\\\\b`;\n\texport const RelativeMonthRegex = `(?<relmonth>(of\\\\s+)?${RelativeRegex}\\\\s+month)\\\\b`;\n\texport const EngMonthRegex = `(((the\\\\s+)?month of\\\\s+)?(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sept|Sep))`;\n\texport const MonthSuffixRegex = `(?<msuf>(in\\\\s+|of\\\\s+|on\\\\s+)?(${RelativeMonthRegex}|${EngMonthRegex}))`;\n\texport const DateUnitRegex = `(?<unit>years|year|months|month|weeks|week|days|day)\\\\b`;\n\texport const SimpleCasesRegex = `\\\\b((from|between)\\\\s+)?(${DayRegex})\\\\s*${TillRegex}\\\\s*(${DayRegex})\\\\s+${MonthSuffixRegex}((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const MonthFrontSimpleCasesRegex = `\\\\b((from|between)\\\\s+)?${MonthSuffixRegex}\\\\s+((from|between)\\\\s+)?(${DayRegex})\\\\s*${TillRegex}\\\\s*(${DayRegex})((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const MonthFrontBetweenRegex = `\\\\b${MonthSuffixRegex}\\\\s+(between\\\\s+)(${DayRegex})\\\\s*${RangeConnectorRegex}\\\\s*(${DayRegex})((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const BetweenRegex = `\\\\b(between\\\\s+)(${DayRegex})\\\\s*${RangeConnectorRegex}\\\\s*(${DayRegex})\\\\s+${MonthSuffixRegex}((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const MonthWithYear = `\\\\b((?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sep|Sept),?(\\\\s+of)?\\\\s+(${PeriodYearRegex}|(?<order>next|last|this)\\\\s+year))`;\n\texport const OneWordPeriodRegex = `\\\\b((((the\\\\s+)?month of\\\\s+)?(${RelativeRegex}\\\\s+)?(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sep|Sept))|(${RelativeRegex}\\\\s+)?(weekend|week|month|year)|weekend|(month|year) to date)\\\\b`;\n\texport const MonthNumWithYear = `(${PeriodYearRegex}[/\\\\-\\\\.]${MonthNumRegex})|(${MonthNumRegex}[/\\\\-]${PeriodYearRegex})`;\n\texport const WeekOfMonthRegex = `(?<wom>(the\\\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\\\\s+week\\\\s+${MonthSuffixRegex})`;\n\texport const WeekOfYearRegex = `(?<woy>(the\\\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\\\\s+week(\\\\s+of)?\\\\s+(${PeriodYearRegex}|${RelativeRegex}\\\\s+year))`;\n\texport const FollowedDateUnit = `^\\\\s*${DateUnitRegex}`;\n\texport const NumberCombinedWithDateUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)${DateUnitRegex}`;\n\texport const QuarterRegex = `(the\\\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th)\\\\s+quarter(\\\\s+of|\\\\s*,\\\\s*)?\\\\s+(${PeriodYearRegex}|${RelativeRegex}\\\\s+year)`;\n\texport const QuarterRegexYearFront = `(${PeriodYearRegex}|${RelativeRegex}\\\\s+year)\\\\s+(the\\\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th)\\\\s+quarter`;\n\texport const SeasonRegex = `\\\\b(?<season>(${RelativeRegex}\\\\s+)?(?<seas>spring|summer|fall|autumn|winter)((\\\\s+of|\\\\s*,\\\\s*)?\\\\s+(${PeriodYearRegex}|${RelativeRegex}\\\\s+year))?)\\\\b`;\n\texport const WhichWeekRegex = `(week)(\\\\s*)(?<number>\\\\d\\\\d|\\\\d|0\\\\d)`;\n\texport const WeekOfRegex = `(the\\\\s+)?(week)(\\\\s+of)`;\n\texport const MonthOfRegex = `(month)(\\\\s*)(of)`;\n\texport const MonthRegex = `(?<month>April|Apr|August|Aug|December|Dec|February|Feb|January|Jan|July|Jul|June|Jun|March|Mar|May|November|Nov|October|Oct|September|Sept|Sep)`;\n\texport const AmDescRegex = `(am\\\\b|a\\\\.m\\\\.|a m\\\\b|a\\\\. m\\\\.|a\\\\.m\\\\b|a\\\\. m\\\\b|a m\\\\b)`;\n\texport const PmDescRegex = `(pm\\\\b|p\\\\.m\\\\.|p\\\\b|p m\\\\b|p\\\\. m\\\\.|p\\\\.m\\\\b|p\\\\. m\\\\b|p m\\\\b)`;\n\texport const DateYearRegex = `(?<year>19\\\\d{2}|20\\\\d{2}|((9\\\\d|0\\\\d|1\\\\d|2\\\\d)(?!(\\\\s*((\\\\:)|${AmDescRegex}|${PmDescRegex})))))`;\n\texport const OnRegex = `(?<=\\\\bon\\\\s+)(${DayRegex}s?)\\\\b`;\n\texport const RelaxedOnRegex = `(?<=\\\\b(on|at|in)\\\\s+)((?<day>10th|11th|11st|12nd|12th|13rd|13th|14th|15th|16th|17th|18th|19th|1st|20th|21st|22nd|23rd|24th|25th|26th|27th|28th|29th|2nd|30th|31st|3rd|4th|5th|6th|7th|8th|9th)s?)\\\\b`;\n\texport const ThisRegex = `\\\\b((this(\\\\s*week)?(\\\\s*on)?\\\\s+)${WeekDayRegex})|(${WeekDayRegex}((\\\\s+of)?\\\\s+this\\\\s*week))\\\\b`;\n\texport const LastDateRegex = `\\\\b(${PastPrefixRegex}(\\\\s*week)?\\\\s+${WeekDayRegex})|(${WeekDayRegex}(\\\\s+last\\\\s*week))\\\\b`;\n\texport const NextDateRegex = `\\\\b(${NextPrefixRegex}(\\\\s*week(\\\\s*on)?)?\\\\s+${WeekDayRegex})|((on\\\\s+)?${WeekDayRegex}((\\\\s+of)?\\\\s+next\\\\s*week))\\\\b`;\n\texport const SpecialDayRegex = `\\\\b((the\\\\s+)?day before yesterday|(the\\\\s+)?day after (tomorrow|tmr)|((the\\\\s+)?${RelativeRegex}\\\\s+day)|yesterday|tomorrow|tmr|today)\\\\b`;\n\texport const RelativeDayRegex = `\\\\b(((the\\\\s+)?${RelativeRegex}\\\\s+day))\\\\b`;\n\texport const SetWeekDayRegex = `\\\\b(?<prefix>on\\\\s+)?(?<weekday>morning|afternoon|evening|night|Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday)s\\\\b`;\n\texport const WeekDayOfMonthRegex = `(?<wom>(the\\\\s+)?(?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th|fifth|5th|last)\\\\s+${WeekDayRegex}\\\\s+${MonthSuffixRegex})`;\n\texport const SpecialDate = `(?=\\\\b(on|at)\\\\s+the\\\\s+)${DayRegex}\\\\b`;\n\texport const DateExtractor1 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${MonthRegex}(\\\\.)?\\\\s*[/\\\\\\\\\\\\.\\\\-]?\\\\s*${DayRegex}(\\\\.)?\\\\b`;\n\texport const DateExtractor2 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${MonthRegex}(\\\\.)?\\\\s*[\\\\.\\\\-]?\\\\s*${DayRegex}(\\\\.)?(\\\\s+|\\\\s*,\\\\s*|\\\\s+of\\\\s+)${DateYearRegex}\\\\b`;\n\texport const DateExtractor3 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${DayRegex}(\\\\.)?(\\\\s+|\\\\s*,\\\\s*|\\\\s+of\\\\s+|\\\\s*-\\\\s*)${MonthRegex}(\\\\.)?((\\\\s+|\\\\s*,\\\\s*)${DateYearRegex})?\\\\b`;\n\texport const DateExtractor4 = `\\\\b${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DayRegex}(\\\\.)?\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DateYearRegex}`;\n\texport const DateExtractor5 = `\\\\b${DayRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DateYearRegex}`;\n\texport const DateExtractor6 = `(?<=\\\\b(on|in|at)\\\\s+)${MonthNumRegex}[\\\\-\\\\.]${DayRegex}\\\\b`;\n\texport const DateExtractor7 = `\\\\b${MonthNumRegex}\\\\s*/\\\\s*${DayRegex}((\\\\s+|\\\\s*,\\\\s*|\\\\s+of\\\\s+)${DateYearRegex})?\\\\b`;\n\texport const DateExtractor8 = `(?<=\\\\b(on|in|at)\\\\s+)${DayRegex}[\\\\\\\\\\\\-]${MonthNumRegex}\\\\b`;\n\texport const DateExtractor9 = `\\\\b${DayRegex}\\\\s*/\\\\s*${MonthNumRegex}((\\\\s+|\\\\s*,\\\\s*|\\\\s+of\\\\s+)${DateYearRegex})?\\\\b`;\n\texport const DateExtractorA = `\\\\b${DateYearRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DayRegex}`;\n\texport const OfMonth = `^\\\\s*of\\\\s*${MonthRegex}`;\n\texport const MonthEnd = `${MonthRegex}\\\\s*(the)?\\\\s*$`;\n\texport const RangeUnitRegex = `\\\\b(?<unit>years|year|months|month|weeks|week)\\\\b`;\n\texport const OclockRegex = `(?<oclock>o\\\\s*’\\\\s*clock|o\\\\s*‘\\\\s*clock|o\\\\s*'\\\\s*clock|o\\\\s*clock)`;\n\texport const DescRegex = `(((${OclockRegex}\\\\s+)?(?<desc>ampm|am\\\\b|a\\\\.m\\\\.|a m\\\\b|a\\\\. m\\\\.|a\\\\.m\\\\b|a\\\\. m\\\\b|a m\\\\b|pm\\\\b|p\\\\.m\\\\.|p m\\\\b|p\\\\. m\\\\.|p\\\\.m\\\\b|p\\\\. m\\\\b|p\\\\b|p m\\\\b))|${OclockRegex})`;\n\texport const HourNumRegex = `\\\\b(?<hournum>zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)\\\\b`;\n\texport const MinuteNumRegex = `(?<minnum>one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty)`;\n\texport const DeltaMinuteNumRegex = `(?<deltaminnum>one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|forty|fifty)`;\n\texport const PmRegex = `(?<pm>(((at|in|around|on|for)\\\\s+(the\\\\s+)?)?(afternoon|evening|midnight|lunchtime))|((at|in|around|on|for)\\\\s+(the\\\\s+)?night))`;\n\texport const PmRegexFull = `(?<pm>((at|in|around|on|for)\\\\s+(the\\\\s+)?)?(afternoon|evening|midnight|night|lunchtime))`;\n\texport const AmRegex = `(?<am>((at|in|around|on|for)\\\\s+(the\\\\s+)?)?(morning))`;\n\texport const LunchRegex = `\\\\b(lunchtime)\\\\b`;\n\texport const NightRegex = `\\\\b(midnight|night)\\\\b`;\n\texport const LessThanOneHour = `(?<lth>(a\\\\s+)?quarter|three quarter(s)?|half( an hour)?|${BaseDateTime.DeltaMinuteRegex}(\\\\s+(minute|minutes|min|mins))|${DeltaMinuteNumRegex}(\\\\s+(minute|minutes|min|mins)))`;\n\texport const EngTimeRegex = `(?<engtime>${HourNumRegex}\\\\s+(${MinuteNumRegex}|(?<tens>twenty|thirty|forty|fourty|fifty)\\\\s+${MinuteNumRegex}))`;\n\texport const TimePrefix = `(?<prefix>(${LessThanOneHour} past|${LessThanOneHour} to))`;\n\texport const TimeSuffix = `(?<suffix>${AmRegex}|${PmRegex}|${OclockRegex})`;\n\texport const TimeSuffixFull = `(?<suffix>${AmRegex}|${PmRegexFull}|${OclockRegex})`;\n\texport const BasicTime = `\\\\b(?<basictime>${EngTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex}:${BaseDateTime.MinuteRegex}(:${BaseDateTime.SecondRegex})?|${BaseDateTime.HourRegex})`;\n\texport const MidnightRegex = `(?<midnight>midnight|mid-night|mid night)`;\n\texport const MidmorningRegex = `(?<midmorning>midmorning|mid-morning|mid morning)`;\n\texport const MidafternoonRegex = `(?<midafternoon>midafternoon|mid-afternoon|mid afternoon)`;\n\texport const MiddayRegex = `(?<midday>midday|mid-day|mid day|((12\\\\s)?noon))`;\n\texport const MidTimeRegex = `(?<mid>(${MidnightRegex}|${MidmorningRegex}|${MidafternoonRegex}|${MiddayRegex}))`;\n\texport const AtRegex = `\\\\b(((?<=\\\\bat\\\\s+)(${EngTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex}|${MidTimeRegex}))|${MidTimeRegex})\\\\b`;\n\texport const IshRegex = `\\\\b(${BaseDateTime.HourRegex}(-|——)?ish|noonish|noon)\\\\b`;\n\texport const TimeUnitRegex = `(?<unit>hours|hour|hrs|hr|h|minutes|minute|mins|min|seconds|second|secs|sec)\\\\b`;\n\texport const RestrictedTimeUnitRegex = `(?<unit>hour|minute)\\\\b`;\n\texport const FivesRegex = `(?<tens>(fifteen|twenty(\\\\s*five)?|thirty(\\\\s*five)?|forty(\\\\s*five)?|fourty(\\\\s*five)?|fifty(\\\\s*five)?|ten|five))\\\\b`;\n\texport const HourRegex = `\\\\b(?<hour>00|01|02|03|04|05|06|07|08|09|0|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|1|2|3|4|5|6|7|8|9)`;\n\texport const PeriodHourNumRegex = `\\\\b(?<hour>twenty one|twenty two|twenty three|twenty four|zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty)\\\\b`;\n\texport const ConnectNumRegex = `${BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\\\\s*${DescRegex}`;\n\texport const TimeRegex1 = `\\\\b(${TimePrefix}\\\\s+)?(${EngTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex})\\\\s*${DescRegex}`;\n\texport const TimeRegex2 = `(\\\\b${TimePrefix}\\\\s+)?(T)?${BaseDateTime.HourRegex}(\\\\s*)?:(\\\\s*)?${BaseDateTime.MinuteRegex}((\\\\s*)?:(\\\\s*)?${BaseDateTime.SecondRegex})?((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex3 = `(\\\\b${TimePrefix}\\\\s+)?${BaseDateTime.HourRegex}\\\\.${BaseDateTime.MinuteRegex}(\\\\s*${DescRegex})`;\n\texport const TimeRegex4 = `\\\\b${TimePrefix}\\\\s+${BasicTime}(\\\\s*${DescRegex})?\\\\s+${TimeSuffix}\\\\b`;\n\texport const TimeRegex5 = `\\\\b${TimePrefix}\\\\s+${BasicTime}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex6 = `${BasicTime}(\\\\s*${DescRegex})?\\\\s+${TimeSuffix}\\\\b`;\n\texport const TimeRegex7 = `\\\\b${TimeSuffixFull}\\\\s+at\\\\s+${BasicTime}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex8 = `\\\\b${TimeSuffixFull}\\\\s+${BasicTime}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex9 = `\\\\b${PeriodHourNumRegex}\\\\s+${FivesRegex}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const PureNumFromTo = `((from|between)\\\\s+)?(${HourRegex}|${PeriodHourNumRegex})(\\\\s*(?<leftDesc>${DescRegex}))?\\\\s*${TillRegex}\\\\s*(${HourRegex}|${PeriodHourNumRegex})\\\\s*(?<rightDesc>${PmRegex}|${AmRegex}|${DescRegex})?`;\n\texport const PureNumBetweenAnd = `(between\\\\s+)(${HourRegex}|${PeriodHourNumRegex})(\\\\s*(?<leftDesc>${DescRegex}))?\\\\s*${RangeConnectorRegex}\\\\s*(${HourRegex}|${PeriodHourNumRegex})\\\\s*(?<rightDesc>${PmRegex}|${AmRegex}|${DescRegex})?`;\n\texport const PrepositionRegex = `(?<prep>^(at|on|of)(\\\\s+the)?$)`;\n\texport const TimeOfDayRegex = `\\\\b(?<timeOfDay>((((in\\\\s+(the)?\\\\s+)?((?<early>early(\\\\s+|-))|(?<late>late(\\\\s+|-)))?(morning|afternoon|night|evening)))|(((in\\\\s+(the)?\\\\s+)?)(daytime)))s?)\\\\b`;\n\texport const SpecificTimeOfDayRegex = `\\\\b((${StrictRelativeRegex}\\\\s+${TimeOfDayRegex})\\\\b|\\\\btonight)s?\\\\b`;\n\texport const TimeFollowedUnit = `^\\\\s*${TimeUnitRegex}`;\n\texport const TimeNumberCombinedWithUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)${TimeUnitRegex}`;\n\texport const NowRegex = `\\\\b(?<now>(right\\\\s+)?now|as soon as possible|asap|recently|previously)\\\\b`;\n\texport const SuffixRegex = `^\\\\s*(in the\\\\s+)?(morning|afternoon|evening|night)\\\\b`;\n\texport const DateTimeTimeOfDayRegex = `\\\\b(?<timeOfDay>morning|afternoon|night|evening)\\\\b`;\n\texport const DateTimeSpecificTimeOfDayRegex = `\\\\b((${RelativeRegex}\\\\s+${DateTimeTimeOfDayRegex})\\\\b|\\\\btonight)\\\\b`;\n\texport const TimeOfTodayAfterRegex = `^\\\\s*(,\\\\s*)?(in\\\\s+)?${DateTimeSpecificTimeOfDayRegex}`;\n\texport const TimeOfTodayBeforeRegex = `${DateTimeSpecificTimeOfDayRegex}(\\\\s*,)?(\\\\s+(at|around|in|on))?\\\\s*$`;\n\texport const SimpleTimeOfTodayAfterRegex = `(${HourNumRegex}|${BaseDateTime.HourRegex})\\\\s*(,\\\\s*)?(in\\\\s+)?${DateTimeSpecificTimeOfDayRegex}`;\n\texport const SimpleTimeOfTodayBeforeRegex = `${DateTimeSpecificTimeOfDayRegex}(\\\\s*,)?(\\\\s+(at|around))?\\\\s*(${HourNumRegex}|${BaseDateTime.HourRegex})`;\n\texport const TheEndOfRegex = `(the\\\\s+)?end of(\\\\s+the)?\\\\s*$`;\n\texport const PeriodTimeOfDayRegex = `\\\\b((in\\\\s+(the)?\\\\s+)?((?<early>early(\\\\s+|-))|(?<late>late(\\\\s+|-)))?(?<timeOfDay>morning|afternoon|night|evening))\\\\b`;\n\texport const PeriodSpecificTimeOfDayRegex = `\\\\b((${StrictRelativeRegex}\\\\s+${PeriodTimeOfDayRegex})\\\\b|\\\\btonight)\\\\b`;\n\texport const PeriodTimeOfDayWithDateRegex = `\\\\b((${TimeOfDayRegex}(\\\\s+on)?))\\\\b`;\n\texport const DurationUnitRegex = `(?<unit>years|year|months|month|weeks|week|days|day|hours|hour|hrs|hr|h|minutes|minute|mins|min|seconds|second|secs|sec)\\\\b`;\n\texport const SuffixAndRegex = `(?<suffix>\\\\s*(and)\\\\s+((an|a)\\\\s+)?(?<suffix_num>half|quarter))`;\n\texport const PeriodicRegex = `\\\\b(?<periodic>daily|monthly|weekly|biweekly|yearly|annually|annual)\\\\b`;\n\texport const EachUnitRegex = `(?<each>(each|every)(?<other>\\\\s+other)?\\\\s*${DurationUnitRegex})`;\n\texport const EachPrefixRegex = `\\\\b(?<each>(each|(every))\\\\s*$)`;\n\texport const SetEachRegex = `\\\\b(?<each>(each|(every))\\\\s*)`;\n\texport const SetLastRegex = `(?<last>next|upcoming|this|last|past|previous|current)`;\n\texport const EachDayRegex = `^\\\\s*(each|every)\\\\s*day\\\\b`;\n\texport const DurationFollowedUnit = `^\\\\s*${SuffixAndRegex}?(\\\\s+|-)?${DurationUnitRegex}`;\n\texport const NumberCombinedWithDurationUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)(-)?${DurationUnitRegex}`;\n\texport const AnUnitRegex = `\\\\b(((?<half>half\\\\s+)?(an|a))|(an|a))\\\\s+${DurationUnitRegex}`;\n\texport const AllRegex = `\\\\b(?<all>all\\\\s+(?<unit>year|month|week|day))\\\\b`;\n\texport const HalfRegex = `(((a|an)\\\\s*)|\\\\b)(?<half>half\\\\s+(?<unit>year|month|week|day|hour))\\\\b`;\n\texport const ConjunctionRegex = `\\\\b((and(\\\\s+for)?)|with)\\\\b`;\n\texport const YearRegex = `\\\\b(?<year>19\\\\d{2}|20\\\\d{2})\\\\b`;\n\texport const HolidayRegex1 = `\\\\b(?<holiday>clean monday|good friday|ash wednesday|mardi gras|washington's birthday|mao's birthday|chinese new Year|new years' eve|new year's eve|new year 's eve|new years eve|new year eve|new years'|new year's|new year 's|new years|new year|mayday|yuan dan|april fools|christmas eve|christmas|xmas|thanksgiving|halloween|yuandan|easter)(\\\\s+(of\\\\s+)?(${YearRegex}|${RelativeRegex}\\\\s+year))?\\\\b`;\n\texport const HolidayRegex2 = `\\\\b(?<holiday>martin luther king|martin luther king jr|all saint's|tree planting day|white lover|st patrick|st george|cinco de mayo|independence|us independence|all hallow|all souls|guy fawkes)(\\\\s+(of\\\\s+)?(${YearRegex}|${RelativeRegex}\\\\s+year))?\\\\b`;\n\texport const HolidayRegex3 = `(?<holiday>(canberra|easter|columbus|thanks\\\\s*giving|christmas|xmas|labour|mother's|mother|mothers|father's|father|fathers|female|single|teacher's|youth|children|arbor|girls|chsmilbuild|lover|labor|inauguration|groundhog|valentine's|baptiste|bastille|halloween|veterans|memorial|mid(-| )autumn|moon|spring|lantern|qingming|dragon boat|new years'|new year's|new year 's|new years|new year)\\\\s+(day))(\\\\s+(of\\\\s+)?(${YearRegex}|${RelativeRegex}\\\\s+year))?`;\n\texport const DateTokenPrefix = 'on ';\n\texport const TimeTokenPrefix = 'at ';\n\texport const TokenBeforeDate = 'on ';\n\texport const TokenBeforeTime = 'at ';\n\texport const AMTimeRegex = `(?<am>morning)`;\n\texport const PMTimeRegex = `\\\\b(?<pm>afternoon|evening|night)\\\\b`;\n\texport const BeforeRegex = `\\\\b(before|in advance of|prior to)\\\\b`;\n\texport const AfterRegex = `\\\\b(after)\\\\b`;\n\texport const SinceRegex = `\\\\b(since)\\\\b`;\n\texport const AgoRegex = `\\\\b(ago)\\\\b`;\n\texport const LaterRegex = `\\\\b(later|from now)\\\\b`;\n\texport const InConnectorRegex = `\\\\b(in)\\\\b`;\n\texport const AmPmDescRegex = `(ampm)`;\n\texport const MorningStartEndRegex = `(^(morning))|((morning)$)`;\n\texport const AfternoonStartEndRegex = `(^(afternoon))|((afternoon)$)`;\n\texport const EveningStartEndRegex = `(^(evening))|((evening)$)`;\n\texport const NightStartEndRegex = `(^(overnight|tonight|night))|((overnight|tonight|night)$)`;\n\texport const InExactNumberRegex = `\\\\b(a few|few|some|several)\\\\b`;\n\texport const InExactNumberUnitRegex = `(${InExactNumberRegex})\\\\s+(${DurationUnitRegex})`;\n\texport const RelativeTimeUnitRegex = `(((${NextPrefixRegex}|${PastPrefixRegex}|${ThisPrefixRegex})\\\\s+(${TimeUnitRegex}))|((the|my))\\\\s+(${RestrictedTimeUnitRegex}))`;\n\texport const RelativeDurationUnitRegex = `(((?<=(${NextPrefixRegex}|${PastPrefixRegex}|${ThisPrefixRegex})\\\\s+)(${DurationUnitRegex}))|((the|my))\\\\s+(${RestrictedTimeUnitRegex}))`;\n\texport const ConnectorRegex = `^(-|,|for|t|around)$`;\n\texport const FromToRegex = `\\\\b(from).+(to)\\\\b.+`;\n\texport const SingleAmbiguousMonthRegex = `^(the\\\\s+)?(may|march)$`;\n\texport const PrepositionSuffixRegex = `\\\\b(on|in|at|around|from|to)$`;\n\texport const FlexibleDayRegex = `(?<DayOfMonth>([A-Za-z]+\\\\s)?[A-Za-z\\\\d]+)`;\n\texport const ForTheRegex = `\\\\b(((for the ${FlexibleDayRegex})|(on (the\\\\s+)?${FlexibleDayRegex}(?<=(st|nd|rd|th))))(?<end>\\\\s*(,|\\\\.|!|\\\\?|$)))`;\n\texport const WeekDayAndDayOfMothRegex = `\\\\b${WeekDayRegex}\\\\s+(the\\\\s+${FlexibleDayRegex})\\\\b`;\n\texport const RestOfDateRegex = `\\\\bRest\\\\s+(of\\\\s+)?((the|my|this|current)\\\\s+)?(?<duration>week|month|year)\\\\b`;\n\texport const RestOfDateTimeRegex = `\\\\bRest\\\\s+(of\\\\s+)?((the|my|this|current)\\\\s+)?(?<unit>day)\\\\b`;\n\texport const MealTimeRegex = `\\\\b(at\\\\s+)?(?<mealTime>lunchtime)\\\\b`;\n\texport const NumberEndingPattern = `^(\\\\s+(?<meeting>meeting|appointment|conference|call|skype call)\\\\s+to\\\\s+(?<newTime>${PeriodHourNumRegex}|${HourRegex})((\\\\.)?$|(\\\\.,|,|!|\\\\?)))`;\n\texport const OneOnOneRegex = `\\\\b(1\\\\s*:\\\\s*1)|(one (on )?one|one\\\\s*-\\\\s*one|one\\\\s*:\\\\s*one)\\\\b`;\n\texport const LaterEarlyPeriodRegex = `\\\\b((?<LatePrefix>late|later)|(?<EarlyPrefix>early))\\\\s+(?<suffix>${OneWordPeriodRegex})\\\\b`;\n\texport const WeekWithWeekDayRangeRegex = `\\\\b((?<week>(${NextPrefixRegex}|${PastPrefixRegex}|this)\\\\s+week)((\\\\s+between\\\\s+${WeekDayRegex}\\\\s+and\\\\s+${WeekDayRegex})|(\\\\s+from\\\\s+${WeekDayRegex}\\\\s+to\\\\s+${WeekDayRegex})))\\\\b`;\n\texport const GeneralEndingRegex = `^\\\\s*((\\\\.,)|\\\\.|,|!|\\\\?)?\\\\s*$`;\n\texport const MiddlePauseRegex = `\\\\s*(,)\\\\s*`;\n\texport const DurationConnectorRegex = `^\\\\s*(?<connector>\\\\s+|and|,)\\\\s*$`;\n\texport const PrefixArticleRegex = `\\\\bthe\\\\s+`;\n\texport const UnitMap: ReadonlyMap<string, string> = new Map<string, string>([[\"years\", \"Y\"],[\"year\", \"Y\"],[\"months\", \"MON\"],[\"month\", \"MON\"],[\"weeks\", \"W\"],[\"week\", \"W\"],[\"days\", \"D\"],[\"day\", \"D\"],[\"hours\", \"H\"],[\"hour\", \"H\"],[\"hrs\", \"H\"],[\"hr\", \"H\"],[\"h\", \"H\"],[\"minutes\", \"M\"],[\"minute\", \"M\"],[\"mins\", \"M\"],[\"min\", \"M\"],[\"seconds\", \"S\"],[\"second\", \"S\"],[\"secs\", \"S\"],[\"sec\", \"S\"]]);\n\texport const UnitValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"years\", 31536000],[\"year\", 31536000],[\"months\", 2592000],[\"month\", 2592000],[\"weeks\", 604800],[\"week\", 604800],[\"days\", 86400],[\"day\", 86400],[\"hours\", 3600],[\"hour\", 3600],[\"hrs\", 3600],[\"hr\", 3600],[\"h\", 3600],[\"minutes\", 60],[\"minute\", 60],[\"mins\", 60],[\"min\", 60],[\"seconds\", 1],[\"second\", 1],[\"secs\", 1],[\"sec\", 1]]);\n\texport const SeasonMap: ReadonlyMap<string, string> = new Map<string, string>([[\"spring\", \"SP\"],[\"summer\", \"SU\"],[\"fall\", \"FA\"],[\"autumn\", \"FA\"],[\"winter\", \"WI\"]]);\n\texport const SeasonValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"SP\", 3],[\"SU\", 6],[\"FA\", 9],[\"WI\", 12]]);\n\texport const CardinalMap: ReadonlyMap<string, number> = new Map<string, number>([[\"first\", 1],[\"1st\", 1],[\"second\", 2],[\"2nd\", 2],[\"third\", 3],[\"3rd\", 3],[\"fourth\", 4],[\"4th\", 4],[\"fifth\", 5],[\"5th\", 5]]);\n\texport const DayOfWeek: ReadonlyMap<string, number> = new Map<string, number>([[\"monday\", 1],[\"tuesday\", 2],[\"wednesday\", 3],[\"thursday\", 4],[\"friday\", 5],[\"saturday\", 6],[\"sunday\", 0],[\"mon\", 1],[\"tue\", 2],[\"tues\", 2],[\"wed\", 3],[\"wedn\", 3],[\"weds\", 3],[\"thu\", 4],[\"thur\", 4],[\"thurs\", 4],[\"fri\", 5],[\"sat\", 6],[\"sun\", 0]]);\n\texport const MonthOfYear: ReadonlyMap<string, number> = new Map<string, number>([[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"6\", 6],[\"7\", 7],[\"8\", 8],[\"9\", 9],[\"10\", 10],[\"11\", 11],[\"12\", 12],[\"january\", 1],[\"february\", 2],[\"march\", 3],[\"april\", 4],[\"may\", 5],[\"june\", 6],[\"july\", 7],[\"august\", 8],[\"september\", 9],[\"october\", 10],[\"november\", 11],[\"december\", 12],[\"jan\", 1],[\"feb\", 2],[\"mar\", 3],[\"apr\", 4],[\"jun\", 6],[\"jul\", 7],[\"aug\", 8],[\"sep\", 9],[\"sept\", 9],[\"oct\", 10],[\"nov\", 11],[\"dec\", 12],[\"01\", 1],[\"02\", 2],[\"03\", 3],[\"04\", 4],[\"05\", 5],[\"06\", 6],[\"07\", 7],[\"08\", 8],[\"09\", 9]]);\n\texport const Numbers: ReadonlyMap<string, number> = new Map<string, number>([[\"zero\", 0],[\"one\", 1],[\"a\", 1],[\"an\", 1],[\"two\", 2],[\"three\", 3],[\"four\", 4],[\"five\", 5],[\"six\", 6],[\"seven\", 7],[\"eight\", 8],[\"nine\", 9],[\"ten\", 10],[\"eleven\", 11],[\"twelve\", 12],[\"thirteen\", 13],[\"fourteen\", 14],[\"fifteen\", 15],[\"sixteen\", 16],[\"seventeen\", 17],[\"eighteen\", 18],[\"nineteen\", 19],[\"twenty\", 20],[\"twenty one\", 21],[\"twenty two\", 22],[\"twenty three\", 23],[\"twenty four\", 24],[\"twenty five\", 25],[\"twenty six\", 26],[\"twenty seven\", 27],[\"twenty eight\", 28],[\"twenty nine\", 29],[\"thirty\", 30],[\"thirty one\", 31],[\"thirty two\", 32],[\"thirty three\", 33],[\"thirty four\", 34],[\"thirty five\", 35],[\"thirty six\", 36],[\"thirty seven\", 37],[\"thirty eight\", 38],[\"thirty nine\", 39],[\"forty\", 40],[\"forty one\", 41],[\"forty two\", 42],[\"forty three\", 43],[\"forty four\", 44],[\"forty five\", 45],[\"forty six\", 46],[\"forty seven\", 47],[\"forty eight\", 48],[\"forty nine\", 49],[\"fifty\", 50],[\"fifty one\", 51],[\"fifty two\", 52],[\"fifty three\", 53],[\"fifty four\", 54],[\"fifty five\", 55],[\"fifty six\", 56],[\"fifty seven\", 57],[\"fifty eight\", 58],[\"fifty nine\", 59],[\"sixty\", 60],[\"sixty one\", 61],[\"sixty two\", 62],[\"sixty three\", 63],[\"sixty four\", 64],[\"sixty five\", 65],[\"sixty six\", 66],[\"sixty seven\", 67],[\"sixty eight\", 68],[\"sixty nine\", 69],[\"seventy\", 70],[\"seventy one\", 71],[\"seventy two\", 72],[\"seventy three\", 73],[\"seventy four\", 74],[\"seventy five\", 75],[\"seventy six\", 76],[\"seventy seven\", 77],[\"seventy eight\", 78],[\"seventy nine\", 79],[\"eighty\", 80],[\"eighty one\", 81],[\"eighty two\", 82],[\"eighty three\", 83],[\"eighty four\", 84],[\"eighty five\", 85],[\"eighty six\", 86],[\"eighty seven\", 87],[\"eighty eight\", 88],[\"eighty nine\", 89],[\"ninety\", 90],[\"ninety one\", 91],[\"ninety two\", 92],[\"ninety three\", 93],[\"ninety four\", 94],[\"ninety five\", 95],[\"ninety six\", 96],[\"ninety seven\", 97],[\"ninety eight\", 98],[\"ninety nine\", 99],[\"one hundred\", 100]]);\n\texport const DayOfMonth: ReadonlyMap<string, number> = new Map<string, number>([[\"1st\", 1],[\"2nd\", 2],[\"3rd\", 3],[\"4th\", 4],[\"5th\", 5],[\"6th\", 6],[\"7th\", 7],[\"8th\", 8],[\"9th\", 9],[\"10th\", 10],[\"11th\", 11],[\"11st\", 11],[\"12th\", 12],[\"12nd\", 12],[\"13th\", 13],[\"13rd\", 13],[\"14th\", 14],[\"15th\", 15],[\"16th\", 16],[\"17th\", 17],[\"18th\", 18],[\"19th\", 19],[\"20th\", 20],[\"21st\", 21],[\"22nd\", 22],[\"23rd\", 23],[\"24th\", 24],[\"25th\", 25],[\"26th\", 26],[\"27th\", 27],[\"28th\", 28],[\"29th\", 29],[\"30th\", 30],[\"31st\", 31]]);\n\texport const DoubleNumbers: ReadonlyMap<string, number> = new Map<string, number>([[\"half\", 0.5],[\"quarter\", 0.25]]);\n\texport const HolidayNames: ReadonlyMap<string, string[]> = new Map<string, string[]>([[\"easterday\", [\"easterday\",\"easter\"]],[\"fathers\", [\"fatherday\",\"fathersday\"]],[\"mothers\", [\"motherday\",\"mothersday\"]],[\"thanksgiving\", [\"thanksgivingday\",\"thanksgiving\"]],[\"martinlutherking\", [\"martinlutherkingday\",\"martinlutherkingjrday\"]],[\"washingtonsbirthday\", [\"washingtonsbirthday\",\"washingtonbirthday\"]],[\"canberra\", [\"canberraday\"]],[\"labour\", [\"labourday\",\"laborday\"]],[\"columbus\", [\"columbusday\"]],[\"memorial\", [\"memorialday\"]],[\"yuandan\", [\"yuandan\"]],[\"maosbirthday\", [\"maosbirthday\"]],[\"teachersday\", [\"teachersday\",\"teacherday\"]],[\"singleday\", [\"singleday\"]],[\"allsaintsday\", [\"allsaintsday\"]],[\"youthday\", [\"youthday\"]],[\"childrenday\", [\"childrenday\",\"childday\"]],[\"femaleday\", [\"femaleday\"]],[\"treeplantingday\", [\"treeplantingday\"]],[\"arborday\", [\"arborday\"]],[\"girlsday\", [\"girlsday\"]],[\"whiteloverday\", [\"whiteloverday\"]],[\"loverday\", [\"loverday\"]],[\"christmas\", [\"christmasday\",\"christmas\"]],[\"xmas\", [\"xmasday\",\"xmas\"]],[\"newyear\", [\"newyear\"]],[\"newyearday\", [\"newyearday\"]],[\"newyearsday\", [\"newyearsday\"]],[\"inaugurationday\", [\"inaugurationday\"]],[\"groundhougday\", [\"groundhougday\"]],[\"valentinesday\", [\"valentinesday\"]],[\"stpatrickday\", [\"stpatrickday\"]],[\"aprilfools\", [\"aprilfools\"]],[\"stgeorgeday\", [\"stgeorgeday\"]],[\"mayday\", [\"mayday\"]],[\"cincodemayoday\", [\"cincodemayoday\"]],[\"baptisteday\", [\"baptisteday\"]],[\"usindependenceday\", [\"usindependenceday\"]],[\"independenceday\", [\"independenceday\"]],[\"bastilleday\", [\"bastilleday\"]],[\"halloweenday\", [\"halloweenday\"]],[\"allhallowday\", [\"allhallowday\"]],[\"allsoulsday\", [\"allsoulsday\"]],[\"guyfawkesday\", [\"guyfawkesday\"]],[\"veteransday\", [\"veteransday\"]],[\"christmaseve\", [\"christmaseve\"]],[\"newyeareve\", [\"newyearseve\",\"newyeareve\"]]]);\n}\n","import { IParser, ParseResult, ExtractResult, RegExpUtility, Match, StringUtility } from \"recognizers-text\";\nimport { BaseNumberParser, BaseNumberExtractor } from \"recognizers-text-number\";\nimport { IDateTimeUtilityConfiguration, FormatUtil, DateTimeResolutionResult, DateUtils, DayOfWeek, MatchingUtil, AgoLaterUtil } from \"./utilities\";\nimport { BaseDateTime } from \"../resources/baseDateTime\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { BaseDateExtractor, BaseDateParser} from \"./baseDate\"\nimport { BaseTimeExtractor, BaseTimeParser} from \"./baseTime\"\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser} from \"./baseDatePeriod\"\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser} from \"./baseTimePeriod\"\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser} from \"./baseDateTime\"\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser} from \"./baseDateTimePeriod\"\nimport { BaseSetExtractor, BaseSetParser} from \"./baseSet\"\nimport { BaseDurationExtractor, BaseDurationParser} from \"./baseDuration\"\nimport { BaseHolidayExtractor, BaseHolidayParser} from \"./baseHoliday\"\n\nexport class DateTimeParseResult extends ParseResult {\n    // TimexStr is only used in extractors related with date and time\n    // It will output the TIMEX representation of a time string.\n    timexStr: string\n}\n\nexport interface IDateTimeParser extends IParser {\n    parse(extResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null;\n}\n\nexport interface ICommonDateTimeParserConfiguration {\n    cardinalExtractor: BaseNumberExtractor;\n    integerExtractor: BaseNumberExtractor;\n    ordinalExtractor: BaseNumberExtractor;\n    numberParser: BaseNumberParser;\n    dateExtractor: IDateTimeExtractor;\n    timeExtractor: IDateTimeExtractor;\n    dateTimeExtractor: IDateTimeExtractor;\n    durationExtractor: IDateTimeExtractor;\n    datePeriodExtractor: IDateTimeExtractor;\n    timePeriodExtractor: IDateTimeExtractor;\n    dateTimePeriodExtractor: IDateTimeExtractor;\n    dateParser: BaseDateParser;\n    timeParser: BaseTimeParser;\n    dateTimeParser: BaseDateTimeParser;\n    durationParser: BaseDurationParser;\n    datePeriodParser: BaseDatePeriodParser;\n    timePeriodParser: BaseTimePeriodParser;\n    dateTimePeriodParser: BaseDateTimePeriodParser;\n    monthOfYear: ReadonlyMap<string, number>;\n    numbers: ReadonlyMap<string, number>;\n    unitValueMap: ReadonlyMap<string, number>;\n    seasonMap: ReadonlyMap<string, string>;\n    unitMap: ReadonlyMap<string, string>;\n    cardinalMap: ReadonlyMap<string, number>;\n    dayOfMonth: ReadonlyMap<string, number>;\n    dayOfWeek: ReadonlyMap<string, number>;\n    doubleNumbers: ReadonlyMap<string, number>;\n    utilityConfiguration: IDateTimeUtilityConfiguration;\n}\n\nexport abstract class BaseDateParserConfiguration implements ICommonDateTimeParserConfiguration {\n    cardinalExtractor: BaseNumberExtractor;\n    integerExtractor: BaseNumberExtractor;\n    ordinalExtractor: BaseNumberExtractor;\n    numberParser: BaseNumberParser;\n    dateExtractor: IDateTimeExtractor;\n    timeExtractor: IDateTimeExtractor;\n    dateTimeExtractor: IDateTimeExtractor;\n    durationExtractor: IDateTimeExtractor;\n    datePeriodExtractor: IDateTimeExtractor;\n    timePeriodExtractor: IDateTimeExtractor;\n    dateTimePeriodExtractor: IDateTimeExtractor;\n    dateParser: BaseDateParser;\n    timeParser: BaseTimeParser;\n    dateTimeParser: BaseDateTimeParser;\n    durationParser: BaseDurationParser;\n    datePeriodParser: BaseDatePeriodParser;\n    timePeriodParser: BaseTimePeriodParser;\n    dateTimePeriodParser: BaseDateTimePeriodParser;\n    monthOfYear: ReadonlyMap<string, number>;\n    numbers: ReadonlyMap<string, number>;\n    unitValueMap: ReadonlyMap<string, number>;\n    seasonMap: ReadonlyMap<string, string>;\n    unitMap: ReadonlyMap<string, string>;\n    cardinalMap: ReadonlyMap<string, number>;\n    dayOfMonth: ReadonlyMap<string, number>;\n    dayOfWeek: ReadonlyMap<string, number>;\n    doubleNumbers: ReadonlyMap<string, number>;\n    utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor() {\n        this.dayOfMonth = BaseDateTime.DayOfMonthDictionary;\n    }\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","import { IExtractor, ExtractResult, RegExpUtility, Match, StringUtility } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\"\nimport { Constants as NumberConstants } from \"recognizers-text-number\"\nimport { BaseNumberExtractor, BaseNumberParser } from \"recognizers-text-number\"\nimport { Token, FormatUtil, DateTimeResolutionResult, IDateTimeUtilityConfiguration, AgoLaterUtil, AgoLaterMode, DateUtils, DayOfWeek, StringMap } from \"./utilities\";\nimport { IDateTimeExtractor } from \"./baseDateTime\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"./baseDuration\"\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport toNumber = require(\"lodash.tonumber\");\n\nexport interface IDateExtractorConfiguration {\n    dateRegexList: RegExp[],\n    implicitDateList: RegExp[],\n    monthEnd: RegExp,\n    ofMonth: RegExp,\n    dateUnitRegex: RegExp,\n    forTheRegex: RegExp,\n    weekDayAndDayOfMothRegex: RegExp,\n    relativeMonthRegex: RegExp,\n    weekDayRegex: RegExp,\n    dayOfWeek: ReadonlyMap<string, number>;\n    ordinalExtractor: BaseNumberExtractor,\n    integerExtractor: BaseNumberExtractor,\n    numberParser: BaseNumberParser,\n    durationExtractor: IDateTimeExtractor,\n    utilityConfiguration: IDateTimeUtilityConfiguration,\n}\n\nexport class BaseDateExtractor implements IDateTimeExtractor {\n    protected readonly extractorName = Constants.SYS_DATETIME_DATE;\n    protected readonly config: IDateExtractorConfiguration;\n\n    constructor(config: IDateExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>();\n        tokens = tokens.concat(this.basicRegexMatch(source));\n        tokens = tokens.concat(this.implicitDate(source));\n        tokens = tokens.concat(this.numberWithMonth(source, referenceDate));\n        tokens = tokens.concat(this.durationWithBeforeAndAfter(source, referenceDate));\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    protected basicRegexMatch(source: string): Array<Token> {\n        let ret = [];\n        this.config.dateRegexList.forEach(regexp => {\n            let matches = RegExpUtility.getMatches(regexp, source);\n            matches.forEach(match => {\n                ret.push(new Token(match.index, match.index + match.length));\n            });\n        });\n        return ret;\n    }\n\n    protected implicitDate(source: string): Array<Token> {\n        let ret = [];\n        this.config.implicitDateList.forEach(regexp => {\n            let matches = RegExpUtility.getMatches(regexp, source);\n            matches.forEach(match => {\n                ret.push(new Token(match.index, match.index + match.length));\n            });\n        });\n        return ret;\n    }\n\n    private numberWithMonth(source: string, refDate: Date): Array<Token> {\n        let ret = [];\n        let er = this.config.ordinalExtractor.extract(source).concat(this.config.integerExtractor.extract(source));\n        er.forEach(result => {\n            let num = toNumber(this.config.numberParser.parse(result).value);\n            if (num < 1 || num > 31) {\n                return;\n            }\n            if (result.start > 0) {\n                let frontString = source.substring(0, result.start | 0);\n                let match = RegExpUtility.getMatches(this.config.monthEnd, frontString)[0];\n                if (match && match.length) {\n                    ret.push(new Token(match.index, match.index + match.length + result.length));\n                    return;\n                }\n\n                // handling cases like 'for the 25th'\n                match = RegExpUtility.getMatches(this.config.forTheRegex, source).pop();\n                if (match) {\n                    let ordinalNum = match.groups('DayOfMonth').value;\n                    if (ordinalNum === result.text) {\n                        let length = match.groups('end').value.length;\n                        ret.push(new Token(match.index, match.index + match.length - length));\n                        return;\n                    }\n                }\n\n                // handling cases like 'Thursday the 21st', which both 'Thursday' and '21st' refer to a same date\n                match = RegExpUtility.getMatches(this.config.weekDayAndDayOfMothRegex, source).pop();\n                if (match) {\n                    let month = refDate.getMonth();\n                    let year = refDate.getFullYear();\n\n                    // get week of day for the ordinal number which is regarded as a date of reference month\n                    let date = DateUtils.safeCreateFromMinValue(year, month, num);\n                    let numWeekDayStr = DayOfWeek[date.getDay()].toString().toLowerCase();\n\n                    // get week day from text directly, compare it with the weekday generated above\n                    // to see whether they refer to a same week day\n                    let extractedWeekDayStr = match.groups(\"weekday\").value.toString().toLowerCase();\n                    if (date !== DateUtils.minValue() &&\n                        this.config.dayOfWeek.get(numWeekDayStr) == this.config.dayOfWeek.get(extractedWeekDayStr)) {\n                        ret.push(new Token(match.index, result.start + result.length));\n                        return;\n                    }\n                }\n\n                // handling cases like '20th of next month'\n                let suffixStr = source.substr(result.start + result.length).toLowerCase();\n                match = RegExpUtility.getMatches(this.config.relativeMonthRegex, suffixStr.trim()).pop();\n                if (match && match.index === 0) {\n                    let spaceLen = suffixStr.length - suffixStr.trim().length;\n                    ret.push(new Token(result.start, result.start + result.length + spaceLen + match.length));\n                }\n\n                // handling cases like 'second Sunday'\n                match = RegExpUtility.getMatches(this.config.weekDayRegex, suffixStr.trim()).pop();\n                if (match && match.index === 0 && num >= 1 && num <= 5\n                    && result.type === NumberConstants.SYS_NUM_ORDINAL) {\n                    let weekDayStr = match.groups('weekday').value;\n                    if (this.config.dayOfWeek.has(weekDayStr)) {\n                        let spaceLen = suffixStr.length - suffixStr.trim().length;\n                        ret.push(new Token(result.start, result.start + result.length + spaceLen + match.length));\n                    }\n                }\n            }\n            if (result.start + result.length < source.length) {\n                let afterString = source.substring(result.start + result.length);\n                let match = RegExpUtility.getMatches(this.config.ofMonth, afterString)[0];\n                if (match && match.length) {\n                    ret.push(new Token(result.start, result.start + result.length + match.length));\n                    return;\n                }\n            }\n        });\n        return ret;\n    }\n\n    protected durationWithBeforeAndAfter(source: string, refDate: Date): Array<Token> {\n        let ret = [];\n        let durEx = this.config.durationExtractor.extract(source, refDate);\n        durEx.forEach(er => {\n            let match = RegExpUtility.getMatches(this.config.dateUnitRegex, er.text).pop();\n            if (!match) return;\n            ret = AgoLaterUtil.extractorDurationWithBeforeAndAfter(source, er, ret, this.config.utilityConfiguration);\n        });\n        return ret;\n    }\n}\n\nexport interface IDateParserConfiguration {\n    ordinalExtractor: BaseNumberExtractor\n    integerExtractor: BaseNumberExtractor\n    cardinalExtractor: BaseNumberExtractor\n    durationExtractor: IDateTimeExtractor\n    durationParser: IDateTimeParser\n    numberParser: BaseNumberParser\n    monthOfYear: ReadonlyMap<string, number>\n    dayOfMonth: ReadonlyMap<string, number>\n    dayOfWeek: ReadonlyMap<string, number>\n    unitMap: ReadonlyMap<string, string>\n    cardinalMap: ReadonlyMap<string, number>\n    dateRegex: RegExp[]\n    onRegex: RegExp\n    specialDayRegex: RegExp\n    nextRegex: RegExp\n    unitRegex: RegExp\n    monthRegex: RegExp\n    weekDayRegex: RegExp\n    lastRegex: RegExp\n    thisRegex: RegExp\n    weekDayOfMonthRegex: RegExp\n    forTheRegex: RegExp\n    weekDayAndDayOfMothRegex: RegExp\n    relativeMonthRegex: RegExp\n    utilityConfiguration: IDateTimeUtilityConfiguration\n    dateTokenPrefix: string\n    getSwiftDay(source: string): number\n    getSwiftMonth(source: string): number\n    isCardinalLast(source: string): boolean\n}\n\nexport class BaseDateParser implements IDateTimeParser {\n    protected readonly parserName = Constants.SYS_DATETIME_DATE;\n    protected readonly config: IDateParserConfiguration;\n\n    constructor(config: IDateParserConfiguration) {\n        this.config = config;\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let source = extractorResult.text.toLowerCase();\n            let innerResult = this.parseBasicRegexMatch(source, referenceDate);\n            if (!innerResult.success) {\n                innerResult = this.parseImplicitDate(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseWeekdayOfMonth(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parserDurationWithAgoAndLater(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseNumberWithMonth(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseSingleNumber(source, referenceDate);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.futureValue);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.pastValue);\n                resultValue = innerResult;\n            }\n        }\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n\n    protected parseBasicRegexMatch(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        this.config.dateRegex.some(regex => {\n            let offset = 0;\n            let match = RegExpUtility.getMatches(regex, trimmedSource).pop();\n            if (!match) {\n                match = RegExpUtility.getMatches(regex, this.config.dateTokenPrefix + trimmedSource).pop();\n                offset = this.config.dateTokenPrefix.length;\n            }\n            if (match && match.index === offset && match.length === trimmedSource.length) {\n                result = this.matchToDate(match, referenceDate);\n                return true;\n            }\n        });\n        return result;\n    }\n\n    protected parseImplicitDate(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        // handle \"on 12\"\n        let match = RegExpUtility.getMatches(this.config.onRegex, this.config.dateTokenPrefix + trimmedSource).pop();\n        if (match && match.index === this.config.dateTokenPrefix.length && match.length === trimmedSource.length) {\n            let day = 0;\n            let month = referenceDate.getMonth();\n            let year = referenceDate.getFullYear();\n            let dayStr = match.groups('day').value;\n            day = this.config.dayOfMonth.get(dayStr);\n\n            result.timex = FormatUtil.luisDate(-1, -1, day);\n\n            let tryStr = FormatUtil.luisDate(year, month, day);\n            let tryDate = Date.parse(tryStr);\n            let futureDate: Date;\n            let pastDate: Date;\n\n            if (tryDate && !isNaN(tryDate)) {\n                futureDate = DateUtils.safeCreateFromMinValue(year, month, day);\n                pastDate = DateUtils.safeCreateFromMinValue(year, month, day);\n                if (futureDate < referenceDate) {\n                    futureDate.setMonth(futureDate.getMonth() + 1);\n                }\n\n                if (pastDate >= referenceDate) {\n                    pastDate.setMonth(pastDate.getMonth() - 1);\n                }\n            } else {\n                futureDate = DateUtils.safeCreateFromMinValue(year, month + 1, day);\n                pastDate = DateUtils.safeCreateFromMinValue(year, month - 1, day);\n            }\n\n            result.futureValue = futureDate;\n            result.pastValue = pastDate;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"today\", \"the day before yesterday\"\n        match = RegExpUtility.getMatches(this.config.specialDayRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let swift = this.config.getSwiftDay(match.value);\n            let value = DateUtils.addDays(referenceDate, swift);\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"next Sunday\"\n        match = RegExpUtility.getMatches(this.config.nextRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let value = DateUtils.next(referenceDate, this.config.dayOfWeek.get(weekdayStr));\n\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"this Friday\"\n        match = RegExpUtility.getMatches(this.config.thisRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let value = DateUtils.this(referenceDate, this.config.dayOfWeek.get(weekdayStr));\n\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"last Friday\", \"last mon\"\n        match = RegExpUtility.getMatches(this.config.lastRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let value = DateUtils.last(referenceDate, this.config.dayOfWeek.get(weekdayStr));\n\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"Friday\"\n        match = RegExpUtility.getMatches(this.config.weekDayRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let weekday = this.config.dayOfWeek.get(weekdayStr);\n            let value = DateUtils.this(referenceDate, this.config.dayOfWeek.get(weekdayStr));\n\n            if (weekday === 0) weekday = 7;\n            if (weekday < referenceDate.getDay()) value = DateUtils.next(referenceDate, weekday);\n            result.timex = 'XXXX-WXX-' + weekday;\n            let futureDate = new Date(value);\n            let pastDate = new Date(value);\n            if (futureDate < referenceDate) futureDate.setDate(value.getDate() + 7);\n            if (pastDate >= referenceDate) pastDate.setDate(value.getDate() - 7);\n\n            result.futureValue = futureDate;\n            result.pastValue = pastDate;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"for the 27th.\"\n        match = RegExpUtility.getMatches(this.config.forTheRegex, trimmedSource).pop();\n        if (match) {\n            let dayStr = match.groups('DayOfMonth').value;\n            let er = ExtractResult.getFromText(dayStr);\n            let day = Number.parseInt(this.config.numberParser.parse(er).value);\n\n            let month = referenceDate.getMonth();\n            let year = referenceDate.getFullYear();\n\n            result.timex = FormatUtil.luisDate(-1, -1, day)\n            let date = new Date(year, month, day);\n            result.futureValue = date;\n            result.pastValue = date;\n            result.success = true;\n\n            return result;\n        }\n\n        // handling cases like 'Thursday the 21st', which both 'Thursday' and '21st' refer to a same date\n        match = RegExpUtility.getMatches(this.config.weekDayAndDayOfMothRegex, trimmedSource).pop();\n        if (match) {\n            let dayStr = match.groups('DayOfMonth').value;\n            let er = ExtractResult.getFromText(dayStr);\n            let day = Number.parseInt(this.config.numberParser.parse(er).value);\n            let month = referenceDate.getMonth();\n            let year = referenceDate.getFullYear();\n\n            // the validity of the phrase is guaranteed in the Date Extractor\n            result.timex = FormatUtil.luisDate(year, month, day)\n            result.futureValue = new Date(year, month, day);\n            result.pastValue = new Date(year, month, day);\n            result.success = true;\n\n            return result;\n        }\n\n        return result;\n    }\n\n    private parseNumberWithMonth(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let ambiguous = true;\n        let result = new DateTimeResolutionResult();\n\n        let ers = this.config.ordinalExtractor.extract(trimmedSource);\n        if (!ers || ers.length === 0) {\n            ers = this.config.integerExtractor.extract(trimmedSource);\n        }\n        if (!ers || ers.length === 0) return result;\n\n        let num = Number.parseInt(this.config.numberParser.parse(ers[0]).value);\n        let day = 1;\n        let month = 0;\n\n        let match = RegExpUtility.getMatches(this.config.monthRegex, trimmedSource).pop();\n        if (match) {\n            month = this.config.monthOfYear.get(match.value) - 1;\n            day = num;\n        } else {\n            // handling relative month\n            match = RegExpUtility.getMatches(this.config.relativeMonthRegex, trimmedSource).pop();\n            if (match) {\n                let monthStr = match.groups('order').value;\n                let swift = this.config.getSwiftMonth(monthStr);\n                let date = new Date(referenceDate);\n                date.setMonth(referenceDate.getMonth() + swift);\n                month = date.getMonth();\n                day = num;\n                ambiguous = false;\n            }\n        }\n\n        // handling casesd like 'second Sunday'\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.weekDayRegex, trimmedSource).pop();\n            if (match) {\n                month = referenceDate.getMonth();\n                // resolve the date of wanted week day\n                let wantedWeekDay = this.config.dayOfWeek.get(match.groups('weekday').value);\n                let firstDate = DateUtils.safeCreateFromMinValue(referenceDate.getFullYear(), referenceDate.getMonth(), 1);\n                let firstWeekday = firstDate.getDay();\n                let firstWantedWeekDay = new Date(firstDate);\n                firstWantedWeekDay.setDate(firstDate.getDate() + ((wantedWeekDay > firstWeekday) ? wantedWeekDay - firstWeekday : wantedWeekDay - firstWeekday + 7));\n                day = firstWantedWeekDay.getDate() + ((num - 1) * 7);\n                ambiguous = false;\n            }\n        }\n\n        if (!match) return result;\n\n        let year = referenceDate.getFullYear();\n\n        // for LUIS format value string\n        let futureDate = DateUtils.safeCreateFromMinValue(year, month, day);\n        let pastDate = DateUtils.safeCreateFromMinValue(year, month, day);\n\n        if (ambiguous) {\n            result.timex = FormatUtil.luisDate(-1, month, day);\n            if (futureDate < referenceDate) futureDate.setFullYear(year + 1);\n            if (pastDate >= referenceDate) pastDate.setFullYear(year - 1);\n        } else {\n            result.timex = FormatUtil.luisDate(year, month, day);\n        }\n\n        result.futureValue = futureDate;\n        result.pastValue = pastDate;\n        result.success = true;\n        return result;\n    }\n\n    // handle cases like \"the 27th\". In the extractor, only the unmatched weekday and date will output this date.\n    private parseSingleNumber(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n\n        let er = this.config.ordinalExtractor.extract(trimmedSource).pop();\n        if (!er || StringUtility.isNullOrEmpty(er.text)) {\n            er = this.config.integerExtractor.extract(trimmedSource).pop();\n        }\n        if (!er || StringUtility.isNullOrEmpty(er.text)) return result;\n\n        let day = Number.parseInt(this.config.numberParser.parse(er).value);\n        let month = referenceDate.getMonth();\n        let year = referenceDate.getFullYear();\n\n        result.timex = FormatUtil.luisDate(-1, -1, day);\n        let pastDate = DateUtils.safeCreateFromMinValue(year, month, day);\n        let futureDate = DateUtils.safeCreateFromMinValue(year, month, day);\n\n        if (futureDate !== DateUtils.minValue() && futureDate < referenceDate) futureDate.setMonth(month + 1);\n        if (pastDate !== DateUtils.minValue() && pastDate >= referenceDate) pastDate.setMonth(month - 1);\n\n        result.futureValue = futureDate;\n        result.pastValue = pastDate;\n        result.success = true;\n        return result;\n    }\n\n    protected parserDurationWithAgoAndLater(source: string, referenceDate: Date): DateTimeResolutionResult {\n        return AgoLaterUtil.parseDurationWithAgoAndLater(\n            source,\n            referenceDate,\n            this.config.durationExtractor,\n            this.config.durationParser,\n            this.config.unitMap,\n            this.config.unitRegex,\n            this.config.utilityConfiguration,\n            AgoLaterMode.Date\n        );\n    }\n\n    protected parseWeekdayOfMonth(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.weekDayOfMonthRegex, trimmedSource).pop();\n        if (!match) return result;\n        let cardinalStr = match.groups('cardinal').value;\n        let weekdayStr = match.groups('weekday').value;\n        let monthStr = match.groups('month').value;\n        let noYear = false;\n        let cardinal = this.config.isCardinalLast(cardinalStr) ? 5 : this.config.cardinalMap.get(cardinalStr);\n        let weekday = this.config.dayOfWeek.get(weekdayStr);\n        let month = referenceDate.getMonth();\n        let year = referenceDate.getFullYear();\n        if (StringUtility.isNullOrEmpty(monthStr)) {\n            let swift = this.config.getSwiftMonth(trimmedSource);\n            let temp = new Date(referenceDate);\n            temp.setMonth(referenceDate.getMonth() + swift);\n            month = temp.getMonth();\n            year = temp.getFullYear();\n        } else {\n            month = this.config.monthOfYear.get(monthStr) - 1;\n            noYear = true;\n        }\n        let value = this.computeDate(cardinal, weekday, month, year);\n        if (value.getMonth() !== month) {\n            cardinal -= 1;\n            value.setDate(value.getDate() - 7);\n        }\n        let futureDate = value;\n        let pastDate = value;\n        if (noYear && futureDate < referenceDate) {\n            futureDate = this.computeDate(cardinal, weekday, month, year + 1);\n            if (futureDate.getMonth() !== month) futureDate.setDate(futureDate.getDate() - 7);\n        }\n        if (noYear && pastDate >= referenceDate) {\n            pastDate = this.computeDate(cardinal, weekday, month, year - 1);\n            if (pastDate.getMonth() !== month) pastDate.setDate(pastDate.getDate() - 7);\n        }\n        result.timex = ['XXXX', FormatUtil.toString(month + 1, 2), 'WXX', weekday, '#' + cardinal].join('-');\n        result.futureValue = futureDate;\n        result.pastValue = pastDate;\n        result.success = true;\n        return result;\n    }\n\n    protected matchToDate(match: Match, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let yearStr = match.groups('year').value;\n        let monthStr = match.groups('month').value;\n        let dayStr = match.groups('day').value;\n        let month = 0;\n        let day = 0;\n        let year = 0;\n        if (this.config.monthOfYear.has(monthStr) && this.config.dayOfMonth.has(dayStr)) {\n            month = this.config.monthOfYear.get(monthStr) - 1;\n            day = this.config.dayOfMonth.get(dayStr);\n            if (!StringUtility.isNullOrEmpty(yearStr)) {\n                year = Number.parseInt(yearStr, 10);\n                if (year < 100 && year >= 90) year += 1900;\n                else if (year < 100 && year < 20) year += 2000;\n            }\n        }\n        let noYear = false;\n        if (year === 0) {\n            year = referenceDate.getFullYear();\n            result.timex = FormatUtil.luisDate(-1, month, day);\n            noYear = true;\n        } else {\n            result.timex = FormatUtil.luisDate(year, month, day);\n        }\n        let futureDate = DateUtils.safeCreateFromMinValue(year, month, day);\n        let pastDate = DateUtils.safeCreateFromMinValue(year, month, day);\n        if (noYear && futureDate < referenceDate) {\n            futureDate = DateUtils.safeCreateFromMinValue(year + 1, month, day);\n        }\n        if (noYear && pastDate >= referenceDate) {\n            pastDate = DateUtils.safeCreateFromMinValue(year - 1, month, day);\n        }\n        result.futureValue = futureDate;\n        result.pastValue = pastDate;\n        result.success = true;\n        return result;\n    }\n\n    private computeDate(cardinal: number, weekday: number, month: number, year: number) {\n        let firstDay = new Date(year, month, 1);\n        let firstWeekday = DateUtils.this(firstDay, weekday);\n        if (weekday === 0) weekday = 7;\n        if (weekday < firstDay.getDay()) firstWeekday = DateUtils.next(firstDay, weekday);\n        firstWeekday.setDate(firstWeekday.getDate() + (7 * (cardinal - 1)));\n        return firstWeekday;\n    }\n}","import { IExtractor, ExtractResult } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { RegExpUtility, Match, StringUtility } from \"recognizers-text-number\"\nimport { Token, FormatUtil, DateTimeResolutionResult, IDateTimeUtilityConfiguration, DateUtils, StringMap } from \"./utilities\";\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { IDateTimeExtractor } from \"./baseDateTime\";\n\nexport interface ITimeExtractorConfiguration {\n    timeRegexList: RegExp[]\n    atRegex: RegExp\n    ishRegex: RegExp\n}\n\nexport class BaseTimeExtractor implements IDateTimeExtractor {\n    private readonly extractorName = Constants.SYS_DATETIME_TIME; // \"Time\";\n    private readonly config: ITimeExtractorConfiguration;\n\n    constructor(config: ITimeExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(text: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n        .concat(this.basicRegexMatch(text))\n        .concat(this.atRegexMatch(text))\n        .concat(this.specialsRegexMatch(text, referenceDate));\n\n        let result = Token.mergeAllTokens(tokens, text, this.extractorName);\n        return result;\n    }\n\n    basicRegexMatch(text: string): Array<Token> {\n        let ret = [];\n        this.config.timeRegexList.forEach(regexp => {\n            let matches = RegExpUtility.getMatches(regexp, text);\n            matches.forEach(match => {\n                ret.push(new Token(match.index, match.index + match.length));\n            });\n        });\n        return ret;\n    }\n\n    atRegexMatch(text: string): Array<Token> {\n        let ret = [];\n        // handle \"at 5\", \"at seven\"\n        let matches = RegExpUtility.getMatches(this.config.atRegex, text);\n        matches.forEach(match => {\n            if (match.index + match.length < text.length &&\n                text.charAt(match.index + match.length) === '%') {\n                    return;\n                }\n                ret.push(new Token(match.index, match.index + match.length));\n            });\n            return ret;\n        }\n\n    specialsRegexMatch(text: string, refDate: Date): Array<Token> {\n        let ret = [];\n        // handle \"ish\"\n        if (this.config.ishRegex !== null) {\n            let matches = RegExpUtility.getMatches(this.config.ishRegex, text);\n            matches.forEach(match => {\n                ret.push(new Token(match.index, match.index + match.length));\n            });\n        }\n        return ret;\n    }\n}\n\n    export interface ITimeParserConfiguration {\n        timeTokenPrefix: string;\n        atRegex: RegExp\n        timeRegexes: RegExp[];\n        numbers: ReadonlyMap<string, number>;\n        utilityConfiguration: IDateTimeUtilityConfiguration;\n        adjustByPrefix(prefix: string, adjust: { hour: number, min: number, hasMin: boolean });\n        adjustBySuffix(suffix: string, adjust: { hour: number, min: number, hasMin: boolean, hasAm: boolean, hasPm: boolean });\n    }\n\n    export class BaseTimeParser implements IDateTimeParser {\n        readonly ParserName = Constants.SYS_DATETIME_TIME; // \"Time\";\n        readonly config: ITimeParserConfiguration;\n\n        constructor(configuration: ITimeParserConfiguration) {\n            this.config = configuration;\n        }\n\n        public parse(er: ExtractResult, referenceTime?: Date): DateTimeParseResult | null {\n            if (!referenceTime) referenceTime = new Date();\n            let value = null;\n            if (er.type === this.ParserName) {\n                let innerResult = this.internalParse(er.text, referenceTime);\n                if (innerResult.success) {\n                    innerResult.futureResolution = {};\n                    innerResult.futureResolution[TimeTypeConstants.TIME] = FormatUtil.formatTime(innerResult.futureValue);\n                    innerResult.pastResolution = {};\n                    innerResult.pastResolution[TimeTypeConstants.TIME] = FormatUtil.formatTime(innerResult.pastValue);\n                    value = innerResult;\n                }\n            }\n\n            let ret = new DateTimeParseResult(er);\n            ret.value = value,\n            ret.timexStr = value === null ? \"\" : value.timex,\n            ret.resolutionStr = \"\"\n\n            return ret;\n        }\n\n        internalParse(text: string, referenceTime: Date): DateTimeResolutionResult {\n            let innerResult = this.parseBasicRegexMatch(text, referenceTime);\n            return innerResult;\n        }\n\n                // parse basic patterns in TimeRegexList\n                private parseBasicRegexMatch(text: string, referenceTime: Date): DateTimeResolutionResult {\n                    let trimmedText = text.trim().toLowerCase();\n                    let offset = 0;\n\n                    let matches = RegExpUtility.getMatches(this.config.atRegex, trimmedText);\n                    if (matches.length === 0) {\n                        matches = RegExpUtility.getMatches(this.config.atRegex, this.config.timeTokenPrefix + trimmedText);\n                        offset = this.config.timeTokenPrefix.length;\n                    }\n\n                    if (matches.length > 0 && matches[0].index === offset && matches[0].length === trimmedText.length) {\n                        return this.match2Time(matches[0], referenceTime);\n                    }\n\n                    // parse hour pattern, like \"twenty one\", \"16\"\n                    // create a extract result which content the pass-in text\n                    let hour = this.config.numbers.get(text) || Number(text);\n                    if (hour) {\n                        if (hour >= 0 && hour <= 24) {\n                            let ret = new DateTimeResolutionResult();\n\n                            if (hour === 24) {\n                                hour = 0;\n                            }\n\n                            if (hour <= 12 && hour !== 0) {\n                                ret.comment = \"ampm\";\n                            }\n\n                            ret.timex = \"T\" + FormatUtil.toString(hour, 2);\n                            ret.futureValue = ret.pastValue =\n                                DateUtils.safeCreateFromMinValue(referenceTime.getFullYear(), referenceTime.getMonth(), referenceTime.getDate(), hour, 0, 0);\n                            ret.success = true;\n                            return ret;\n                        }\n                    }\n\n                    for (let regex of this.config.timeRegexes) {\n                        offset = 0;\n                        matches = RegExpUtility.getMatches(regex, trimmedText);\n\n                        if (matches.length && matches[0].index === offset && matches[0].length === trimmedText.length) {\n                            return this.match2Time(matches[0], referenceTime);\n                        }\n                    }\n\n                    return new DateTimeResolutionResult();\n                }\n\n                private match2Time(match: Match, referenceTime: Date): DateTimeResolutionResult {\n                    let ret = new DateTimeResolutionResult();\n                    let hour = 0;\n                    let min = 0;\n                    let second = 0;\n                    let day = referenceTime.getDate();\n                    let month = referenceTime.getMonth();\n                    let year = referenceTime.getFullYear();\n                    let hasMin = false;\n                    let hasSec = false;\n                    let hasAm = false;\n                    let hasPm = false;\n                    let hasMid = false;\n\n                    let engTimeStr = match.groups('engtime').value;\n                    if (!StringUtility.isNullOrWhitespace(engTimeStr)) {\n                        // get hour\n                        let hourStr = match.groups('hournum').value.toLowerCase();\n                        hour = this.config.numbers.get(hourStr);\n\n                        // get minute\n                        let minStr = match.groups('minnum').value;\n                        let tensStr = match.groups('tens').value;\n\n                        if (!StringUtility.isNullOrWhitespace(minStr)) {\n                            min = this.config.numbers.get(minStr);\n                            if (tensStr) {\n                                min += this.config.numbers.get(tensStr);\n                            }\n                            hasMin = true;\n                        }\n                    }\n                    else if (!StringUtility.isNullOrWhitespace(match.groups('mid').value)) {\n                        hasMid = true;\n                        if (!StringUtility.isNullOrWhitespace(match.groups('midnight').value)) {\n                            hour = 0;\n                            min = 0;\n                            second = 0;\n                        }\n                        else if (!StringUtility.isNullOrWhitespace(match.groups('midmorning').value)) {\n                            hour = 10;\n                            min = 0;\n                            second = 0;\n                        }\n                        else if (!StringUtility.isNullOrWhitespace(match.groups('midafternoon').value)) {\n                            hour = 14;\n                            min = 0;\n                            second = 0;\n                        }\n                        else if (!StringUtility.isNullOrWhitespace(match.groups('midday').value)) {\n                            hour = 12;\n                            min = 0;\n                            second = 0;\n                        }\n                    }\n                    else {\n                        // get hour\n                        let hourStr = match.groups('hour').value;\n                        if (StringUtility.isNullOrWhitespace(hourStr)) {\n                            hourStr = match.groups('hournum').value.toLowerCase();\n                            hour = this.config.numbers.get(hourStr);\n                            if (!hour) {\n                                return ret;\n                            }\n                        }\n                        else {\n                            hour = Number.parseInt(hourStr, 10);\n                            if (!hour) {\n                                hour = this.config.numbers.get(hourStr);\n                                if (!hour) {\n                                    return ret;\n                                }\n                            }\n                        }\n\n                        // get minute\n                        let minStr = match.groups('min').value.toLowerCase();\n                        if (StringUtility.isNullOrWhitespace(minStr)) {\n                            minStr = match.groups('minnum').value;\n                            if (!StringUtility.isNullOrWhitespace(minStr)) {\n                                min = this.config.numbers.get(minStr);\n                                hasMin = true;\n                            }\n\n                            let tensStr = match.groups('tens').value;\n                            if (!StringUtility.isNullOrWhitespace(tensStr)) {\n                                min += this.config.numbers.get(tensStr);\n                                hasMin = true;\n                            }\n                        }\n                        else {\n                            min = Number.parseInt(minStr, 10);\n                            hasMin = true;\n                        }\n\n                        // get second\n                        let secStr = match.groups('sec').value.toLowerCase();\n                        if (!StringUtility.isNullOrWhitespace(secStr)) {\n                            second = Number.parseInt(secStr, 10);\n                            hasSec = true;\n                        }\n                    }\n\n                    // adjust by desc string\n                    let descStr = match.groups('desc').value.toLowerCase();\n                    if (!StringUtility.isNullOrWhitespace(descStr)) {\n                        if (RegExpUtility.getMatches(this.config.utilityConfiguration.amDescRegex, descStr).length > 0\n                         || RegExpUtility.getMatches(this.config.utilityConfiguration.amPmDescRegex, descStr).length > 0) {\n                            if (hour >= 12) {\n                                hour -= 12;\n                            }\n                            if (RegExpUtility.getMatches(this.config.utilityConfiguration.amPmDescRegex, descStr).length === 0) {\n                                hasAm = true;\n                            }\n                         }\n                        else if (RegExpUtility.getMatches(this.config.utilityConfiguration.pmDescRegex, descStr).length > 0) {\n                            if (hour < 12) {\n                                hour += 12;\n                            }\n                            hasPm = true;\n                        }\n                    }\n\n                    // adjust min by prefix\n                    let timePrefix = match.groups('prefix').value.toLowerCase();\n                    if (!StringUtility.isNullOrWhitespace(timePrefix)) {\n                        let adjust = { hour: hour, min: min, hasMin: hasMin };\n                        this.config.adjustByPrefix(timePrefix, adjust);\n                        hour = adjust.hour; min = adjust.min; hasMin = adjust.hasMin;\n                    }\n\n                    // adjust hour by suffix\n                    let timeSuffix = match.groups('suffix').value.toLowerCase();\n                    if (!StringUtility.isNullOrWhitespace(timeSuffix)) {\n                        let adjust = { hour: hour, min: min, hasMin: hasMin, hasAm: hasAm, hasPm: hasPm };\n                        this.config.adjustBySuffix(timeSuffix, adjust);\n                        hour = adjust.hour; min = adjust.min; hasMin = adjust.hasMin; hasAm = adjust.hasAm; hasPm = adjust.hasPm;\n                    }\n\n                    if (hour === 24) {\n                        hour = 0;\n                    }\n\n                    ret.timex = \"T\" + FormatUtil.toString(hour, 2);\n                    if (hasMin) {\n                        ret.timex += \":\" + FormatUtil.toString(min, 2);\n                    }\n\n                    if (hasSec) {\n                        ret.timex += \":\" + FormatUtil.toString(second, 2);\n                    }\n\n                    if (hour <= 12 && !hasPm && !hasAm && !hasMid) {\n                        ret.comment = \"ampm\";\n                    }\n\n                    ret.futureValue = ret.pastValue = new Date(year, month, day, hour, min, second);\n                    ret.success = true;\n\n                    return ret;\n                }\n            }\n","import { IExtractor, ExtractResult, RegExpUtility, Match, StringUtility } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { BaseNumberExtractor } from \"recognizers-text-number\"\nimport { Token, FormatUtil, DateTimeResolutionResult, DateUtils, DayOfWeek, StringMap } from \"./utilities\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"./baseDuration\"\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { BaseDateExtractor, BaseDateParser } from \"./baseDate\"\nimport { IDateTimeExtractor } from \"./baseDateTime\"\n\nexport interface IDatePeriodExtractorConfiguration {\n    simpleCasesRegexes: RegExp[]\n    tillRegex: RegExp\n    followedUnit: RegExp\n    numberCombinedWithUnit: RegExp\n    pastRegex: RegExp\n    futureRegex: RegExp\n    weekOfRegex: RegExp\n    monthOfRegex: RegExp\n    dateUnitRegex: RegExp\n    inConnectorRegex: RegExp\n    rangeUnitRegex: RegExp\n    datePointExtractor: IDateTimeExtractor\n    integerExtractor: BaseNumberExtractor\n    durationExtractor: IDateTimeExtractor\n    getFromTokenIndex(source: string): { matched: boolean, index: number };\n    getBetweenTokenIndex(source: string): { matched: boolean, index: number };\n    hasConnectorToken(source: string): boolean;\n}\n\nexport class BaseDatePeriodExtractor implements IDateTimeExtractor {\n    protected readonly extractorName = Constants.SYS_DATETIME_DATEPERIOD;\n    protected readonly config: IDatePeriodExtractorConfiguration;\n\n    constructor(config: IDatePeriodExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>();\n        tokens = tokens.concat(this.matchSimpleCases(source));\n        tokens = tokens.concat(this.mergeTwoTimePoints(source, referenceDate));\n        tokens = tokens.concat(this.matchDuration(source, referenceDate));\n        tokens = tokens.concat(this.singleTimePointWithPatterns(source, referenceDate));\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    protected matchSimpleCases(source: string): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        this.config.simpleCasesRegexes.forEach(regexp => {\n            RegExpUtility.getMatches(regexp, source).forEach(match => {\n                tokens.push(new Token(match.index, match.index + match.length));\n            });\n        });\n        return tokens;\n    }\n\n    protected mergeTwoTimePoints(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let er = this.config.datePointExtractor.extract(source, refDate);\n        if (er.length <= 1) {\n            return tokens;\n        }\n        let idx = 0;\n        while (idx < er.length - 1) {\n            let middleBegin = er[idx].start + (er[idx].length || 0);\n            let middleEnd = er[idx + 1].start || 0;\n            if (middleBegin >= middleEnd) {\n                idx++;\n                continue;\n            }\n            let middleStr = source.substr(middleBegin, middleEnd - middleBegin).trim().toLowerCase();\n            let match = RegExpUtility.getMatches(this.config.tillRegex, middleStr);\n            if (match && match.length > 0 && match[0].index === 0 && match[0].length === middleStr.length) {\n                let periodBegin = er[idx].start || 0;\n                let periodEnd = (er[idx + 1].start || 0) + (er[idx + 1].length || 0);\n\n                let beforeStr = source.substring(0, periodBegin).trim().toLowerCase();\n                let fromTokenIndex = this.config.getFromTokenIndex(beforeStr);\n                let betweenTokenIndex = this.config.getBetweenTokenIndex(beforeStr);\n                if (fromTokenIndex.matched || betweenTokenIndex.matched) {\n                    periodBegin = fromTokenIndex.matched ? fromTokenIndex.index : betweenTokenIndex.index;\n                }\n                tokens.push(new Token(periodBegin, periodEnd));\n                idx += 2;\n                continue;\n            }\n            if (this.config.hasConnectorToken(middleStr)) {\n                let periodBegin = er[idx].start || 0;\n                let periodEnd = (er[idx + 1].start || 0) + (er[idx + 1].length || 0);\n\n                let beforeStr = source.substring(0, periodBegin).trim().toLowerCase();\n                let betweenTokenIndex = this.config.getBetweenTokenIndex(beforeStr);\n                if (betweenTokenIndex.matched) {\n                    periodBegin = betweenTokenIndex.index;\n                    tokens.push(new Token(periodBegin, periodEnd));\n                    idx += 2;\n                    continue;\n                }\n            }\n            idx++;\n        }\n        return tokens;\n    }\n\n    private matchDuration(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let durations: Array<Token> = new Array<Token>();\n        this.config.durationExtractor.extract(source, refDate).forEach(durationEx => {\n            let match = RegExpUtility.getMatches(this.config.dateUnitRegex, durationEx.text).pop();\n            if (match) {\n                durations.push(new Token(durationEx.start, durationEx.start + durationEx.length))\n            }\n        });\n        durations.forEach(duration => {\n            let beforeStr = source.substring(0, duration.start).toLowerCase();\n            if (StringUtility.isNullOrWhitespace(beforeStr)) return;\n            let match = RegExpUtility.getMatches(this.config.pastRegex, beforeStr).pop();\n            if (this.matchRegexInPrefix(beforeStr, match)) {\n                tokens.push(new Token(match.index, duration.end));\n                return;\n            }\n            match = RegExpUtility.getMatches(this.config.futureRegex, beforeStr).pop();\n            if (this.matchRegexInPrefix(beforeStr, match)) {\n                tokens.push(new Token(match.index, duration.end));\n                return;\n            }\n            match = RegExpUtility.getMatches(this.config.inConnectorRegex, beforeStr).pop();\n            if (this.matchRegexInPrefix(beforeStr, match)) {\n                let rangeStr = source.substr(duration.start, duration.length);\n                let rangeMatch = RegExpUtility.getMatches(this.config.rangeUnitRegex, rangeStr).pop();\n                if (rangeMatch) {\n                    tokens.push(new Token(match.index, duration.end));\n                }\n                return;\n            }\n        });\n        return tokens;\n    }\n\n    private singleTimePointWithPatterns(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ers = this.config.datePointExtractor.extract(source, refDate);\n        if (ers.length < 1) return tokens;\n        ers.forEach(er => {\n            if (er.start && er.length) {\n                let beforeStr = source.substring(0, er.start);\n                tokens = tokens\n                    .concat(this.getTokenForRegexMatching(beforeStr, this.config.weekOfRegex, er))\n                    .concat(this.getTokenForRegexMatching(beforeStr, this.config.monthOfRegex, er))\n            }\n        });\n        return tokens;\n    }\n\n    private getTokenForRegexMatching(source: string, regexp: RegExp, er: ExtractResult): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let match = RegExpUtility.getMatches(regexp, source).shift();\n        if (match && source.trim().endsWith(match.value.trim())) {\n            let startIndex = source.lastIndexOf(match.value);\n            tokens.push(new Token(startIndex, er.start + er.length));\n        }\n        return tokens;\n    }\n\n    private matchRegexInPrefix(source: string, match: Match): boolean {\n        return (match && StringUtility.isNullOrWhitespace(source.substring(match.index + match.length)))\n    }\n}\n\nexport interface IDatePeriodParserConfiguration {\n    dateExtractor: IDateTimeExtractor\n    dateParser: BaseDateParser\n    durationExtractor: IDateTimeExtractor\n    durationParser: BaseDurationParser\n    monthFrontBetweenRegex: RegExp\n    betweenRegex: RegExp\n    monthFrontSimpleCasesRegex: RegExp\n    simpleCasesRegex: RegExp\n    oneWordPeriodRegex: RegExp\n    monthWithYear: RegExp\n    monthNumWithYear: RegExp\n    yearRegex: RegExp\n    pastRegex: RegExp\n    futureRegex: RegExp\n    inConnectorRegex: RegExp\n    weekOfMonthRegex: RegExp\n    weekOfYearRegex: RegExp\n    quarterRegex: RegExp\n    quarterRegexYearFront: RegExp\n    seasonRegex: RegExp\n    weekOfRegex: RegExp\n    monthOfRegex: RegExp\n    whichWeekRegex: RegExp\n    restOfDateRegex: RegExp\n    laterEarlyPeriodRegex: RegExp\n    weekWithWeekDayRangeRegex: RegExp\n    tokenBeforeDate: string\n    dayOfMonth: ReadonlyMap<string, number>\n    monthOfYear: ReadonlyMap<string, number>\n    cardinalMap: ReadonlyMap<string, number>\n    seasonMap: ReadonlyMap<string, string>\n    unitMap: ReadonlyMap<string, string>\n    getSwiftDayOrMonth(source: string): number\n    getSwiftYear(source: string): number\n    isFuture(source: string): boolean\n    isYearToDate(source: string): boolean\n    isMonthToDate(source: string): boolean\n    isWeekOnly(source: string): boolean\n    isWeekend(source: string): boolean\n    isMonthOnly(source: string): boolean\n    isYearOnly(source: string): boolean\n    isLastCardinal(source: string): boolean\n}\n\nexport class BaseDatePeriodParser implements IDateTimeParser {\n    protected readonly parserName = Constants.SYS_DATETIME_DATEPERIOD;\n    protected readonly config: IDatePeriodParserConfiguration;\n\n    protected readonly inclusiveEndPeriod;\n    private readonly weekOfComment = 'WeekOf';\n    private readonly monthOfComment = 'MonthOf';\n\n    constructor(config: IDatePeriodParserConfiguration, inclusiveEndPeriod = false) {\n        this.config = config;\n        this.inclusiveEndPeriod = inclusiveEndPeriod;\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let source = extractorResult.text.trim().toLowerCase();\n            let innerResult = this.parseMonthWithYear(source, referenceDate);\n            if (!innerResult.success) {\n                innerResult = this.parseSimpleCases(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseOneWordPeriod(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.mergeTwoTimePoints(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseYear(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseWeekOfMonth(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseWeekOfYear(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseQuarter(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseSeason(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseWhichWeek(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseWeekOfDate(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseMonthOfDate(source, referenceDate);\n            }\n\n            // parse duration should be at the end since it will extract \"the last week\" from \"the last week of July\"\n            if (!innerResult.success) {\n                innerResult = this.parseDuration(source, referenceDate);\n            }\n\n            if (innerResult.success) {\n                if (innerResult.futureValue && innerResult.pastValue) {\n\n                    innerResult.futureResolution = {};\n                    innerResult.futureResolution[TimeTypeConstants.START_DATE] = FormatUtil.formatDate(innerResult.futureValue[0]);\n                    innerResult.futureResolution[TimeTypeConstants.END_DATE] = FormatUtil.formatDate(innerResult.futureValue[1]);\n                    innerResult.pastResolution = {};\n                    innerResult.pastResolution[TimeTypeConstants.START_DATE] = FormatUtil.formatDate(innerResult.pastValue[0]);\n                    innerResult.pastResolution[TimeTypeConstants.END_DATE] = FormatUtil.formatDate(innerResult.pastValue[1]);\n\n                } else {\n                    innerResult.futureResolution = {};\n                    innerResult.pastResolution = {};\n                }\n                resultValue = innerResult;\n            }\n        }\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n\n    private parseMonthWithYear(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim().toLowerCase();\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.monthWithYear, trimmedSource).pop();\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.monthNumWithYear, trimmedSource).pop();\n        }\n        if (!match || match.length !== trimmedSource.length) return result;\n\n        let monthStr = match.groups('month').value;\n        let yearStr = match.groups('year').value;\n        let orderStr = match.groups('order').value;\n\n        let month = this.config.monthOfYear.get(monthStr) - 1;\n        let year = Number.parseInt(yearStr, 10);\n        if (!year || isNaN(year)) {\n            let swift = this.config.getSwiftYear(orderStr);\n            if (swift < -1) return result;\n            year = referenceDate.getFullYear() + swift;\n        }\n        let beginDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, month, 1);\n        let endDate = DateUtils.addDays(DateUtils.addMonths(beginDate, 1), this.inclusiveEndPeriod ? -1 : 0);\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.timex = `${FormatUtil.toString(year, 4)}-${FormatUtil.toString(month + 1, 2)}`;\n        result.success = true;\n        return result;\n    }\n\n    protected getMatchSimpleCase(source: string): Match {\n        let match = RegExpUtility.getMatches(this.config.monthFrontBetweenRegex, source).pop();\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.betweenRegex, source).pop();\n        }\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.monthFrontSimpleCasesRegex, source).pop();\n        }\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.simpleCasesRegex, source).pop();\n        }\n        return match;\n    }\n\n    protected parseSimpleCases(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let year = referenceDate.getFullYear();\n        let month = referenceDate.getMonth();\n        let noYear = false;\n\n        let match = this.getMatchSimpleCase(source);\n\n        if (!match || match.index !== 0 || match.length !== source.length) return result;\n        let days = match.groups('day');\n        let beginDay = this.config.dayOfMonth.get(days.captures[0]);\n        let endDay = this.config.dayOfMonth.get(days.captures[1]);\n        let monthStr = match.groups('month').value;\n        if (!StringUtility.isNullOrEmpty(monthStr)) {\n            month = this.config.monthOfYear.get(monthStr) - 1;\n            noYear = true;\n        } else {\n            monthStr = match.groups('relmonth').value;\n            month += this.config.getSwiftDayOrMonth(monthStr);\n            if (month < 0) {\n                month = 0;\n                year--;\n            } else if (month > 11) {\n                month = 11;\n                year++;\n            }\n        }\n        let beginDateLuis = FormatUtil.luisDate(this.config.isFuture(monthStr) ? year : -1, month, beginDay);\n        let endDateLuis = FormatUtil.luisDate(this.config.isFuture(monthStr) ? year : -1, month, endDay);\n\n        let yearStr = match.groups('year').value;\n        if (!StringUtility.isNullOrEmpty(yearStr)) {\n            year = Number.parseInt(yearStr, 10);\n            noYear = false;\n        }\n        let futureYear = year;\n        let pastYear = year;\n        let startDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, month, beginDay);\n        if (noYear && startDate < referenceDate) futureYear++;\n        if (noYear && startDate >= referenceDate) pastYear--;\n\n        result.timex = `(${beginDateLuis},${endDateLuis},P${endDay - beginDay}D)`;\n        result.futureValue = [\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), futureYear, month, beginDay),\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), futureYear, month, endDay),\n        ];\n        result.pastValue = [\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), pastYear, month, beginDay),\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), pastYear, month, endDay),\n        ];\n        result.success = true;\n        return result;\n    }\n\n    protected parseOneWordPeriod(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let year = referenceDate.getFullYear();\n        let month = referenceDate.getMonth();\n        let earlyPrefix = false;\n        let latePrefix = false;\n\n        if (this.config.isYearToDate(source)) {\n            result.timex = FormatUtil.toString(year, 4);\n            result.futureValue = [DateUtils.safeCreateFromValue(DateUtils.minValue(), year, 0, 1), referenceDate];\n            result.pastValue = [DateUtils.safeCreateFromValue(DateUtils.minValue(), year, 0, 1), referenceDate];\n            result.success = true;\n            return result;\n        }\n        if (this.config.isMonthToDate(source)) {\n            result.timex = `${FormatUtil.toString(year, 4)}-${FormatUtil.toString(month + 1, 2)}`;\n            result.futureValue = [DateUtils.safeCreateFromValue(DateUtils.minValue(), year, month, 1), referenceDate];\n            result.pastValue = [DateUtils.safeCreateFromValue(DateUtils.minValue(), year, month, 1), referenceDate];\n            result.success = true;\n            return result;\n        }\n\n        let futureYear = year;\n        let pastYear = year;\n        let trimedText = source.trim().toLowerCase();\n        let match = RegExpUtility.getMatches(this.config.oneWordPeriodRegex, trimedText).pop();\n\n        if (!(match && match.index == 0 && match.length == trimedText.length))\n        {\n            match = RegExpUtility.getMatches(this.config.laterEarlyPeriodRegex, trimedText).pop();\n        }\n\n        if (!match || match.index !== 0 || match.length !== trimedText.length) return result;\n\n        if (match.groups(\"EarlyPrefix\").value)\n        {\n            earlyPrefix = true;\n            trimedText = match.groups(\"suffix\").value;\n        }\n\n        if (match.groups(\"LatePrefix\").value)\n        {\n            latePrefix = true;\n            trimedText = match.groups(\"suffix\").value;\n        }\n\n        let monthStr = match.groups('month').value;\n        if (!StringUtility.isNullOrEmpty(monthStr)) {\n            let swift = this.config.getSwiftYear(trimedText);\n            month = this.config.monthOfYear.get(monthStr) - 1;\n            if (swift >= -1) {\n                result.timex = `${FormatUtil.toString(year + swift, 4)}-${FormatUtil.toString(month + 1, 2)}`;\n                year += swift;\n                futureYear = year;\n                pastYear = year;\n            } else {\n                result.timex = `XXXX-${FormatUtil.toString(month + 1, 2)}`;\n                if (month < referenceDate.getMonth()) futureYear++;\n                if (month >= referenceDate.getMonth()) pastYear--;\n            }\n        } else {\n            let swift = this.config.getSwiftDayOrMonth(trimedText);\n            if (this.config.isWeekOnly(trimedText)) {\n                let monday = DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Monday), 7 * swift);\n\n                result.timex = `${FormatUtil.toString(monday.getFullYear(), 4)}-W${FormatUtil.toString(DateUtils.getWeekNumber(monday).weekNo, 2)}`;\n\n                var beginDate = DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Monday), 7 * swift);\n                var endDate = this.inclusiveEndPeriod\n                    ? DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Sunday), 7 * swift)\n                    : DateUtils.addDays(\n                        DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Sunday), 7 * swift), 1);\n\n                if (earlyPrefix) {\n                    endDate = this.inclusiveEndPeriod\n                        ? DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Wednesday), 7 * swift)\n                        : DateUtils.addDays(\n                            DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Wednesday), 7 * swift), 1);\n                }\n\n                if (latePrefix) {\n                    beginDate = DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Thursday), 7 * swift);\n                }\n\n                result.futureValue = [beginDate, endDate];\n                result.pastValue = [beginDate, endDate];\n                result.success = true;\n                return result;\n            }\n            if (this.config.isWeekend(trimedText)) {\n                let beginDate = DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Saturday), 7 * swift);\n                let endDate = DateUtils.addDays(DateUtils.this(referenceDate, DayOfWeek.Sunday), (7 * swift) + (this.inclusiveEndPeriod ? 0 : 1));\n\n                result.timex = `${FormatUtil.toString(beginDate.getFullYear(), 4)}-W${FormatUtil.toString(DateUtils.getWeekNumber(beginDate).weekNo, 2)}-WE`;\n                result.futureValue = [beginDate, endDate];\n                result.pastValue = [beginDate, endDate];\n                result.success = true;\n                return result;\n            }\n            if (this.config.isMonthOnly(trimedText)) {\n                let tempDate = new Date(referenceDate);\n                tempDate.setMonth(referenceDate.getMonth() + swift);\n                month = tempDate.getMonth();\n                year = tempDate.getFullYear();\n                result.timex = `${FormatUtil.toString(year, 4)}-${FormatUtil.toString(month + 1, 2)}`;\n                futureYear = year;\n                pastYear = year;\n            } else if (this.config.isYearOnly(trimedText)) {\n                let tempDate = new Date(referenceDate);\n                tempDate.setFullYear(referenceDate.getFullYear() + swift);\n                year = tempDate.getFullYear();\n                var beginDate = DateUtils.safeCreateFromMinValue(year, 0, 1);\n                var endDate = this.inclusiveEndPeriod\n                    ? DateUtils.safeCreateFromMinValue(year, 11, 31)\n                    : DateUtils.addDays(\n                        DateUtils.safeCreateFromMinValue(year, 11, 31), 1);\n                if (earlyPrefix) {\n                    endDate = this.inclusiveEndPeriod\n                        ? DateUtils.safeCreateFromMinValue(year, 5, 30)\n                        : DateUtils.addDays(\n                            DateUtils.safeCreateFromMinValue(year, 5, 30), 1);\n                }\n                if (latePrefix) {\n                    beginDate = DateUtils.safeCreateFromMinValue(year, 6, 1);\n                }\n\n                result.timex = FormatUtil.toString(year, 4);\n                result.futureValue = [beginDate, endDate];\n                result.pastValue = [beginDate, endDate];\n                result.success = true;\n                return result;\n            }\n        }\n        \n        let futureStart = DateUtils.safeCreateFromMinValue(futureYear, month, 1);\n        let futureEnd = this.inclusiveEndPeriod\n            ? DateUtils.addDays(\n                DateUtils.addMonths(\n                    DateUtils.safeCreateFromMinValue(futureYear, month, 1), 1), -1)\n            : DateUtils.addMonths(\n                DateUtils.safeCreateFromMinValue(futureYear, month, 1), 1);\n        let pastStart = DateUtils.safeCreateFromMinValue(pastYear, month, 1);\n        let pastEnd = this.inclusiveEndPeriod\n            ? DateUtils.addDays(\n                DateUtils.addMonths(\n                    DateUtils.safeCreateFromMinValue(pastYear, month, 1), 1), -1)\n            : DateUtils.addMonths(\n                DateUtils.safeCreateFromMinValue(pastYear, month, 1), 1);\n        if (earlyPrefix) {\n            futureEnd = this.inclusiveEndPeriod\n                ? DateUtils.safeCreateFromMinValue(futureYear, month, 15)\n                : DateUtils.addDays(\n                    DateUtils.safeCreateFromMinValue(futureYear, month, 15), 1);\n            pastEnd = this.inclusiveEndPeriod\n                ? DateUtils.safeCreateFromMinValue(pastYear, month, 15)\n                : DateUtils.addDays(\n                    DateUtils.safeCreateFromMinValue(pastYear, month, 15), 1);\n        }\n        else if (latePrefix)\n        {\n            futureStart = DateUtils.safeCreateFromMinValue(futureYear, month, 16);\n            pastStart = DateUtils.safeCreateFromMinValue(pastYear, month, 16);\n        }\n\n        result.futureValue = [futureStart, futureEnd];\n        result.pastValue = [pastStart, pastEnd];\n        result.success = true;\n        return result;\n    }\n\n    protected mergeTwoTimePoints(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        let ers = this.config.dateExtractor.extract(trimmedSource, referenceDate);\n        if (!ers || ers.length < 2) {\n            ers = this.config.dateExtractor.extract(this.config.tokenBeforeDate + trimmedSource, referenceDate)\n                .map(er => {\n                    er.start -= this.config.tokenBeforeDate.length;\n                    return er;\n                });\n            if (!ers || ers.length < 2) return result;\n        }\n\n        let match = RegExpUtility.getMatches(this.config.weekWithWeekDayRangeRegex, source).pop();\n        let weekPrefix: string = null;\n        if (match)\n        {\n            weekPrefix = match.groups(\"week\").value;\n        }\n\n        if (! StringUtility.isNullOrWhitespace(weekPrefix))\n        {\n            ers[0].text = weekPrefix + \" \" + ers[0].text;\n            ers[1].text = weekPrefix + \" \" + ers[1].text;\n        }\n\n        let prs = ers.map(er => this.config.dateParser.parse(er, referenceDate)).filter(pr => pr);\n        if (prs.length < 2) return result;\n\n        let prBegin = prs[0];\n        let prEnd = prs[1];\n        let futureBegin = prBegin.value.futureValue;\n        let futureEnd = prEnd.value.futureValue;\n        let pastBegin = prBegin.value.pastValue;\n        let pastEnd = prEnd.value.pastValue;\n\n        result.subDateTimeEntities = prs;\n        result.timex = `(${prBegin.timexStr},${prEnd.timexStr},P${DateUtils.diffDays(futureEnd, futureBegin)}D)`;\n        result.futureValue = [futureBegin, futureEnd];\n        result.pastValue = [pastBegin, pastEnd];\n        result.success = true;\n        return result;\n    }\n\n    protected parseYear(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.yearRegex, trimmedSource).pop();\n        if (!match || match.length !== trimmedSource.length) return result;\n\n        let year = Number.parseInt(match.value, 10);\n        let beginDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, 0, 1);\n        let endDate = DateUtils.addDays(DateUtils.safeCreateFromValue(DateUtils.minValue(), year + 1, 0, 1), this.inclusiveEndPeriod ? -1 : 0);\n        result.timex = FormatUtil.toString(year, 4);\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.success = true;\n        return result;\n    }\n\n    protected parseDuration(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let ers = this.config.durationExtractor.extract(source, referenceDate);\n        let beginDate = new Date(referenceDate);\n        let endDate = new Date(referenceDate);\n        let restNowSunday = false;\n        let durationTimex = '';\n\n        if (ers.length === 1) {\n            let pr = this.config.durationParser.parse(ers[0]);\n            if (pr === null) return result;\n\n            let beforeStr = source.substr(0, pr.start).trim();\n            let mod: string;\n            let durationResult: DateTimeResolutionResult = pr.value;\n            if (StringUtility.isNullOrEmpty(durationResult.timex)) return result;\n\n            let prefixMatch = RegExpUtility.getMatches(this.config.pastRegex, beforeStr).pop();\n            if (prefixMatch) {\n                mod = TimeTypeConstants.beforeMod;\n                beginDate = this.getSwiftDate(endDate, durationResult.timex, false);\n            }\n            prefixMatch = RegExpUtility.getMatches(this.config.futureRegex, beforeStr).pop();\n            if (prefixMatch && prefixMatch.length === beforeStr.length) {\n                mod = TimeTypeConstants.afterMod;\n                // for future the beginDate should add 1 first\n                beginDate = new Date(referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() + 1);\n                endDate = this.getSwiftDate(beginDate, durationResult.timex, true);\n            }\n            prefixMatch = RegExpUtility.getMatches(this.config.inConnectorRegex, beforeStr).pop();\n            if (prefixMatch && prefixMatch.length === beforeStr.length) {\n                mod = TimeTypeConstants.afterMod\n                beginDate = new Date(referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() + 1);\n                endDate = this.getSwiftDate(beginDate, durationResult.timex, true);\n\n                let unit = durationResult.timex.substr(durationResult.timex.length - 1);\n                durationResult.timex = `P1${unit}`;\n                beginDate = this.getSwiftDate(endDate, durationResult.timex, false);\n            }\n\n            if (mod) {\n                pr.value.mod = mod;\n            }\n\n            durationTimex = durationResult.timex;\n            result.subDateTimeEntities = [pr];\n        }\n\n        // parse rest of\n        let match = RegExpUtility.getMatches(this.config.restOfDateRegex, source).pop();\n        if (match) {\n\n            let diffDays = 0;\n            let durationStr = match.groups('duration').value;\n            let durationUnit = this.config.unitMap.get(durationStr);\n            switch (durationUnit) {\n                case 'W':\n                    diffDays = 7 - ((beginDate.getDay() === 0) ? 7 : beginDate.getDay());\n                    endDate = DateUtils.addDays(referenceDate, diffDays);\n                    restNowSunday = (diffDays === 0);\n                    break;\n                case 'MON':\n                    endDate = DateUtils.safeCreateFromMinValue(beginDate.getFullYear(), beginDate.getMonth(), 1);\n                    endDate.setMonth(beginDate.getMonth() + 1);\n                    endDate.setDate(endDate.getDate() - 1);\n                    diffDays = endDate.getDate() - beginDate.getDate() + 1;\n                    break;\n                case 'Y':\n                    endDate = DateUtils.safeCreateFromMinValue(beginDate.getFullYear(), 11, 1);\n                    endDate.setMonth(endDate.getMonth() + 1);\n                    endDate.setDate(endDate.getDate() - 1);\n                    diffDays = DateUtils.dayOfYear(endDate) - DateUtils.dayOfYear(beginDate) + 1;\n                    break;\n            }\n            durationTimex = `P${diffDays}D`;\n        }\n\n        if (beginDate.getTime() !== endDate.getTime() || restNowSunday) {\n            endDate = DateUtils.addDays(endDate, this.inclusiveEndPeriod ? -1 : 0);\n            result.timex = `(${FormatUtil.luisDateFromDate(beginDate)},${FormatUtil.luisDateFromDate(endDate)},${durationTimex})`;\n            result.futureValue = [beginDate, endDate];\n            result.pastValue = [beginDate, endDate];\n            result.success = true;\n        }\n\n        return result;\n    }\n\n    private getSwiftDate(date: Date, timex: string, isPositiveSwift: boolean): Date {\n        let result = new Date(date);\n        let numStr = timex.replace('P', '').substr(0, timex.length - 2);\n        let unitStr = timex.substr(timex.length - 1);\n        let swift = Number.parseInt(numStr, 10) || 0;\n        if (swift === 0) return result;\n\n        if (!isPositiveSwift) swift *= -1;\n        switch (unitStr) {\n            case 'D': result.setDate(date.getDate() + swift); break;\n            case 'W': result.setDate(date.getDate() + (7 * swift)); break;\n            case 'M': result.setMonth(date.getMonth() + swift); break;\n            case 'Y': result.setFullYear(date.getFullYear() + swift); break;\n        }\n        return result;\n    }\n\n    protected parseWeekOfMonth(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.weekOfMonthRegex, source).pop();\n        if (!match || match.length !== source.length) return result;\n\n        let cardinalStr = match.groups('cardinal').value;\n        let monthStr = match.groups('month').value;\n        let month = referenceDate.getMonth();\n        let year = referenceDate.getFullYear();\n        let noYear = false;\n        let cardinal = this.config.isLastCardinal(cardinalStr) ? 5\n            : this.config.cardinalMap.get(cardinalStr);\n        if (StringUtility.isNullOrEmpty(monthStr)) {\n            let swift = this.config.getSwiftDayOrMonth(source);\n            let tempDate = new Date(referenceDate);\n            tempDate.setMonth(referenceDate.getMonth() + swift);\n            month = tempDate.getMonth();\n            year = tempDate.getFullYear();\n        } else {\n            month = this.config.monthOfYear.get(monthStr) - 1;\n            noYear = true;\n        }\n        return this.getWeekOfMonth(cardinal, month, year, referenceDate, noYear);\n    }\n\n    protected getWeekOfMonth(cardinal: number, month: number, year: number, referenceDate: Date, noYear: boolean): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let seedDate = this.computeDate(cardinal, 1, month, year);\n        if (seedDate.getMonth() !== month) {\n            cardinal--;\n            seedDate.setDate(seedDate.getDate() - 7);\n        }\n        let futureDate = new Date(seedDate);\n        let pastDate = new Date(seedDate);\n        if (noYear && futureDate < referenceDate) {\n            futureDate = this.computeDate(cardinal, 1, month, year + 1);\n            if (futureDate.getMonth() !== month) {\n                futureDate.setDate(futureDate.getDate() - 7);\n            }\n        }\n        if (noYear && pastDate >= referenceDate) {\n            pastDate = this.computeDate(cardinal, 1, month, year - 1);\n            if (pastDate.getMonth() !== month) {\n                pastDate.setDate(pastDate.getDate() - 7);\n            }\n        }\n        result.timex = noYear ?\n            `XXXX-${FormatUtil.toString(month + 1, 2)}-W${FormatUtil.toString(cardinal, 2)}` :\n            `${FormatUtil.toString(year, 4)}-${FormatUtil.toString(month + 1, 2)}-W${FormatUtil.toString(cardinal, 2)}`;\n        result.futureValue = [futureDate, DateUtils.addDays(futureDate, this.inclusiveEndPeriod ? 6 : 7)];\n        result.pastValue = [pastDate, DateUtils.addDays(pastDate, this.inclusiveEndPeriod ? 6 : 7)];\n        result.success = true;\n        return result;\n    }\n\n    private parseWeekOfYear(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.weekOfYearRegex, source).pop();\n        if (!match || match.length !== source.length) return result;\n\n        let cardinalStr = match.groups('cardinal').value;\n        let yearStr = match.groups('year').value;\n        let orderStr = match.groups('order').value;\n\n        let year = Number.parseInt(yearStr, 10);\n        if (isNaN(year)) {\n            let swift = this.config.getSwiftYear(orderStr);\n            if (swift < -1) return result;\n            year = referenceDate.getFullYear() + swift;\n        }\n\n        let targetWeekMonday: Date;\n        if (this.config.isLastCardinal(cardinalStr)) {\n            let lastDay = DateUtils.safeCreateFromMinValue(year, 11, 31);\n            let lastDayWeekMonday = DateUtils.this(lastDay, DayOfWeek.Monday);\n            let weekNum = DateUtils.getWeekNumber(lastDay).weekNo;\n            if (weekNum === 1) {\n                lastDayWeekMonday = DateUtils.this(DateUtils.addDays(lastDay, -7), DayOfWeek.Monday);\n            }\n\n            targetWeekMonday = lastDayWeekMonday;\n            weekNum = DateUtils.getWeekNumber(targetWeekMonday).weekNo;\n\n            result.timex = `${ FormatUtil.toString(year, 4) }-${ FormatUtil.toString(targetWeekMonday.getMonth() + 1, 2) }-W${ FormatUtil.toString(weekNum, 2) }`;\n        } else {\n            let cardinal = this.config.cardinalMap.get(cardinalStr);\n\n            let firstDay = DateUtils.safeCreateFromMinValue(year, 0, 1);\n            let firstDayWeekMonday = DateUtils.this(firstDay, DayOfWeek.Monday);\n            let weekNum = DateUtils.getWeekNumber(firstDay).weekNo;\n            if (weekNum !== 1) {\n                firstDayWeekMonday = DateUtils.this(DateUtils.addDays(firstDay, 7), DayOfWeek.Monday);\n            }\n\n            targetWeekMonday = DateUtils.addDays(firstDayWeekMonday, 7 * (cardinal - 1));\n            let targetWeekSunday = DateUtils.this(targetWeekMonday, DayOfWeek.Sunday);\n            result.timex = `${ FormatUtil.toString(year, 4) }-${ FormatUtil.toString(targetWeekSunday.getMonth() + 1, 2) }-W${ FormatUtil.toString(cardinal, 2) }`;\n        }\n\n        result.futureValue = [targetWeekMonday, DateUtils.addDays(targetWeekMonday, this.inclusiveEndPeriod ? 6 : 7)];\n        result.pastValue = [targetWeekMonday, DateUtils.addDays(targetWeekMonday, this.inclusiveEndPeriod ? 6 : 7)];\n        result.success = true;\n        \n        return result;\n    }\n\n    protected parseQuarter(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.quarterRegex, source).pop();\n        if (!match || match.length !== source.length) {\n            match = RegExpUtility.getMatches(this.config.quarterRegexYearFront, source).pop();\n        }\n        if (!match || match.length !== source.length) return result;\n\n        let cardinalStr = match.groups('cardinal').value;\n        let yearStr = match.groups('year').value;\n        let orderStr = match.groups('order').value;\n\n        let year = Number.parseInt(yearStr, 10);\n        if (isNaN(year)) {\n            let swift = this.config.getSwiftYear(orderStr);\n            if (swift < -1) return result;\n            year = referenceDate.getFullYear() + swift;\n        }\n\n        let quarterNum = this.config.cardinalMap.get(cardinalStr);\n        let beginDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, quarterNum * 3 - 3, 1);\n        let endDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, quarterNum * 3, 1);\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.timex = `(${FormatUtil.luisDateFromDate(beginDate)},${FormatUtil.luisDateFromDate(endDate)},P3M)`;\n        result.success = true;\n        return result;\n    }\n\n    protected parseSeason(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.seasonRegex, source).pop();\n        if (!match || match.length !== source.length) return result;\n\n        let swift = this.config.getSwiftYear(source);\n        let yearStr = match.groups('year').value;\n        let year = referenceDate.getFullYear();\n        let seasonStr = match.groups('seas').value;\n        let season = this.config.seasonMap.get(seasonStr);\n        if (swift >= -1 || !StringUtility.isNullOrEmpty(yearStr)) {\n            if (StringUtility.isNullOrEmpty(yearStr)) yearStr = FormatUtil.toString(year + swift, 4);\n            result.timex = `${yearStr}-${season}`;\n        } else {\n            result.timex = season;\n        }\n        result.success = true;\n        return result;\n    }\n\n    private parseWhichWeek(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.whichWeekRegex, source).pop();\n        if (!match) return result;\n        let num = Number.parseInt(match.groups('number').value, 10);\n        let year = referenceDate.getFullYear();\n        let firstDay = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, 0, 1);\n        let firstWeekday = DateUtils.this(firstDay, DayOfWeek.Monday);\n        let resultDate = DateUtils.addDays(firstWeekday, 7 * num);\n        result.timex = `${FormatUtil.toString(year, 4)}-W${FormatUtil.toString(num, 2)}`;\n        result.futureValue = [resultDate, DateUtils.addDays(resultDate, 7)];\n        result.pastValue = [resultDate, DateUtils.addDays(resultDate, 7)];\n        result.success = true;\n        return result;\n    }\n\n    private parseWeekOfDate(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.weekOfRegex, source).pop();\n        let ers = this.config.dateExtractor.extract(source, referenceDate);\n        if (!match || ers.length !== 1) return result;\n\n        let dateResolution: DateTimeResolutionResult = this.config.dateParser.parse(ers[0], referenceDate).value;\n        result.timex = dateResolution.timex;\n        result.comment = this.weekOfComment;\n        result.futureValue = this.getWeekRangeFromDate(dateResolution.futureValue);\n        result.pastValue = this.getWeekRangeFromDate(dateResolution.pastValue);\n        result.success = true;\n        return result;\n    }\n\n    private parseMonthOfDate(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.monthOfRegex, source).pop();\n        let ers = this.config.dateExtractor.extract(source, referenceDate);\n        if (!match || ers.length !== 1) return result;\n\n        let dateResolution: DateTimeResolutionResult = this.config.dateParser.parse(ers[0], referenceDate).value;\n        result.timex = dateResolution.timex;\n        result.comment = this.monthOfComment;\n        result.futureValue = this.getMonthRangeFromDate(dateResolution.futureValue);\n        result.pastValue = this.getMonthRangeFromDate(dateResolution.pastValue);\n        result.success = true;\n        return result;\n    }\n\n    protected computeDate(cardinal: number, weekday: number, month: number, year: number) {\n        let firstDay = new Date(year, month, 1);\n        let firstWeekday = DateUtils.this(firstDay, weekday);\n        if (weekday === 0) weekday = 7;\n        let firstDayOfWeek = firstDay.getDay() !== 0 ? firstDay.getDay() : 7;\n        if (weekday < firstDayOfWeek) firstWeekday = DateUtils.next(firstDay, weekday);\n        firstWeekday.setDate(firstWeekday.getDate() + (7 * (cardinal - 1)));\n        return firstWeekday;\n    }\n\n    private getWeekRangeFromDate(seedDate: Date): Date[] {\n        let beginDate = DateUtils.this(seedDate, DayOfWeek.Monday);\n        let endDate = DateUtils.addDays(beginDate, this.inclusiveEndPeriod ? 6 : 7);\n        return [beginDate, endDate];\n    }\n\n    private getMonthRangeFromDate(seedDate: Date): Date[] {\n        let beginDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), seedDate.getFullYear(), seedDate.getMonth(), 1);\n        let endDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), seedDate.getFullYear(), seedDate.getMonth() + 1, 1);\n        endDate.setDate(endDate.getDate() + (this.inclusiveEndPeriod ? -1 : 0));\n        return [beginDate, endDate];\n    }\n}\n","import { IExtractor, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { Token, FormatUtil, DateTimeResolutionResult, IDateTimeUtilityConfiguration, DateUtils, StringMap } from \"./utilities\";\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { BaseTimeExtractor, BaseTimeParser } from \"./baseTime\"\nimport { IDateTimeExtractor } from \"./baseDateTime\"\n\nexport interface ITimePeriodExtractorConfiguration {\n    simpleCasesRegex: RegExp[];\n    tillRegex: RegExp;\n    timeOfDayRegex: RegExp;\n    singleTimeExtractor: IDateTimeExtractor;\n    getFromTokenIndex(text: string): { matched: boolean, index: number };\n    hasConnectorToken(text: string): boolean;\n    getBetweenTokenIndex(text: string): { matched: boolean, index: number };\n}\n\nexport class BaseTimePeriodExtractor implements IDateTimeExtractor {\n    readonly extractorName = Constants.SYS_DATETIME_TIMEPERIOD; // \"TimePeriod\";\n    readonly config: ITimePeriodExtractorConfiguration;\n\n    constructor(config: ITimePeriodExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n            .concat(this.matchSimpleCases(source))\n            .concat(this.mergeTwoTimePoints(source, referenceDate))\n            .concat(this.matchNight(source));\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    private matchSimpleCases(text: string): Array<Token> {\n        let ret = [];\n        this.config.simpleCasesRegex.forEach(regex => {\n            let matches = RegExpUtility.getMatches(regex, text);\n            matches.forEach(match => {\n                // is there \"pm\" or \"am\" ?\n                let pmStr = match.groups(\"pm\").value;\n                let amStr = match.groups(\"am\").value;\n                let descStr = match.groups(\"desc\").value;\n                // check \"pm\", \"am\"\n                if (pmStr || amStr || descStr) {\n                    ret.push(new Token(match.index, match.index + match.length));\n                }\n            });\n        });\n        return ret;\n    }\n\n    private mergeTwoTimePoints(text: string, refDate: Date): Array<Token> {\n        let ret = [];\n        let ers = this.config.singleTimeExtractor.extract(text, refDate);\n\n        // merge \"{TimePoint} to {TimePoint}\", \"between {TimePoint} and {TimePoint}\"\n        let idx = 0;\n        while (idx < ers.length - 1) {\n            let middleBegin = ers[idx].start + ers[idx].length || 0;\n            let middleEnd = ers[idx + 1].start || 0;\n\n            let middleStr = text.substring(middleBegin, middleEnd).trim().toLowerCase();\n            let matches = RegExpUtility.getMatches(this.config.tillRegex, middleStr);\n            // handle \"{TimePoint} to {TimePoint}\"\n            if (matches.length > 0 && matches[0].index === 0 && matches[0].length === middleStr.length) {\n                let periodBegin = ers[idx].start || 0;\n                let periodEnd = (ers[idx + 1].start || 0) + (ers[idx + 1].length || 0);\n\n                // handle \"from\"\n                let beforeStr = text.substring(0, periodBegin).trim().toLowerCase();\n                let fromIndex = this.config.getFromTokenIndex(beforeStr);\n                if (fromIndex.matched) {\n                    periodBegin = fromIndex.index;\n                }\n\n                ret.push(new Token(periodBegin, periodEnd));\n                idx += 2;\n                continue;\n            }\n            // handle \"between {TimePoint} and {TimePoint}\"\n            if (this.config.hasConnectorToken(middleStr)) {\n                let periodBegin = ers[idx].start || 0;\n                let periodEnd = (ers[idx + 1].start || 0) + (ers[idx + 1].length || 0);\n\n                // handle \"between\"\n                let beforeStr = text.substring(0, periodBegin).trim().toLowerCase();\n                let betweenIndex = this.config.getBetweenTokenIndex(beforeStr, );\n                if (betweenIndex.matched) {\n                    periodBegin = betweenIndex.index;\n                    ret.push(new Token(periodBegin, periodEnd));\n                    idx += 2;\n                    continue;\n                }\n            }\n\n            idx++;\n        }\n\n        return ret;\n    }\n\n    private matchNight(source: string): Array<Token> {\n        let ret = [];\n        let matches = RegExpUtility.getMatches(this.config.timeOfDayRegex, source);\n        matches.forEach(match => {\n            ret.push(new Token(match.index, match.index + match.length));\n        });\n        return ret;\n    }\n}\n\nexport interface ITimePeriodParserConfiguration {\n    timeExtractor: IDateTimeExtractor;\n    timeParser: BaseTimeParser;\n    pureNumberFromToRegex: RegExp;\n    pureNumberBetweenAndRegex: RegExp;\n    timeOfDayRegex: RegExp;\n    numbers: ReadonlyMap<string, number>;\n    utilityConfiguration: IDateTimeUtilityConfiguration;\n    getMatchedTimexRange(text: string): {\n        matched: boolean, timex: string, beginHour: number, endHour: number, endMin: number\n    };\n}\n\nexport class BaseTimePeriodParser implements IDateTimeParser {\n    public static readonly ParserName = Constants.SYS_DATETIME_TIMEPERIOD; // \"TimePeriod\";\n    protected readonly config: ITimePeriodParserConfiguration;\n\n    constructor(configuration: ITimePeriodParserConfiguration) {\n        this.config = configuration;\n    }\n\n    public parse(er: ExtractResult, refTime?: Date): DateTimeParseResult {\n        let referenceTime = refTime || new Date();\n        let value = null;\n        if (er.type === BaseTimePeriodParser.ParserName) {\n            let innerResult = this.parseSimpleCases(er.text, referenceTime);\n            if (!innerResult.success) {\n                innerResult = this.mergeTwoTimePoints(er.text, referenceTime);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseNight(er.text, referenceTime);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.START_TIME] = FormatUtil.formatTime(innerResult.futureValue.item1);\n                innerResult.futureResolution[TimeTypeConstants.END_TIME] = FormatUtil.formatTime(innerResult.futureValue.item2);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.START_TIME] = FormatUtil.formatTime(innerResult.pastValue.item1);\n                innerResult.pastResolution[TimeTypeConstants.END_TIME] = FormatUtil.formatTime(innerResult.pastValue.item2);\n                value = innerResult;\n            }\n        }\n\n        let ret = new DateTimeParseResult(er);\n        ret.value = value;\n        ret.timexStr = value === null ? \"\" : value.timex;\n        ret.resolutionStr = \"\";\n\n        return ret;\n    }\n\n    private parseSimpleCases(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let year = referenceTime.getFullYear();\n        let month = referenceTime.getMonth();\n        let day = referenceTime.getDate();\n        let trimmedText = text.trim().toLowerCase();\n\n        let matches = RegExpUtility.getMatches(this.config.pureNumberFromToRegex, trimmedText);\n        if (!matches.length) {\n            matches = RegExpUtility.getMatches(this.config.pureNumberBetweenAndRegex, trimmedText);\n        }\n\n        if (matches.length && matches[0].index === 0) {\n            // this \"from .. to ..\" pattern is valid if followed by a Date OR \"pm\"\n            let isValid = false;\n\n            // get hours\n            let hourGroup = matches[0].groups('hour');\n            let hourStr = hourGroup.captures[0];\n\n            let beginHour = this.config.numbers.get(hourStr);\n            if (!beginHour) {\n                beginHour = Number.parseInt(hourStr, 10);\n            }\n\n            hourStr = hourGroup.captures[1];\n\n            let endHour = this.config.numbers.get(hourStr);\n            if (!endHour) {\n                endHour = Number.parseInt(hourStr, 10);\n            }\n\n            // parse \"pm\"\n            let leftDesc = matches[0].groups(\"leftDesc\").value;\n            let rightDesc = matches[0].groups(\"rightDesc\").value;\n            let pmStr = matches[0].groups(\"pm\").value;\n            let amStr = matches[0].groups(\"am\").value;\n            // The \"ampm\" only occurs in time, don't have to consider it here\n            if (StringUtility.isNullOrWhitespace(leftDesc)) {\n                let rightAmValid = !StringUtility.isNullOrEmpty(rightDesc) &&\n                    RegExpUtility.getMatches(this.config.utilityConfiguration.amDescRegex, rightDesc.toLowerCase()).length;\n                let rightPmValid = !StringUtility.isNullOrEmpty(rightDesc) &&\n                    RegExpUtility.getMatches(this.config.utilityConfiguration.pmDescRegex, rightDesc.toLowerCase()).length;\n                if (!StringUtility.isNullOrEmpty(amStr) || rightAmValid) {\n\n                    if (beginHour >= 12) {\n                        beginHour -= 12;\n                    }\n                    if (endHour >= 12) {\n                        endHour -= 12;\n                    }\n                    isValid = true;\n                }\n                else if (!StringUtility.isNullOrEmpty(pmStr) || rightPmValid) {\n                    if (beginHour < 12) {\n                        beginHour += 12;\n                    }\n                    if (endHour < 12) {\n                        endHour += 12;\n                    }\n                    isValid = true;\n                }\n            }\n\n            if (isValid) {\n                let beginStr = \"T\" + FormatUtil.toString(beginHour, 2);\n                let endStr = \"T\" + FormatUtil.toString(endHour, 2);\n\n                ret.timex = `(${beginStr},${endStr},PT${endHour - beginHour}H)`;\n\n                ret.futureValue = ret.pastValue = {\n                    item1: new Date(year, month, day, beginHour, 0, 0),\n                    item2: new Date(year, month, day, endHour, 0, 0)\n                };\n\n                ret.success = true;\n\n                return ret;\n            }\n        }\n        return ret;\n    }\n\n    private mergeTwoTimePoints(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let ers = this.config.timeExtractor.extract(text, referenceTime);\n        let pr1: DateTimeParseResult = null;\n        let pr2: DateTimeParseResult = null;\n        if (ers.length !== 2) {\n            return ret;\n        }\n\n        pr1 = this.config.timeParser.parse(ers[0], referenceTime);\n        pr2 = this.config.timeParser.parse(ers[1], referenceTime);\n\n        if (pr1.value === null || pr2.value === null) {\n            return ret;\n        }\n\n        let ampmStr1 = pr1.value.comment;\n        let ampmStr2 = pr2.value.comment;\n        let beginTime: Date = pr1.value.futureValue;\n        let endTime: Date = pr2.value.futureValue;\n        if (!StringUtility.isNullOrEmpty(ampmStr2) && ampmStr2.endsWith(\"ampm\")\n            && endTime <= beginTime && endTime.getHours() < 12) {\n            endTime.setHours(endTime.getHours() + 12);\n            pr2.value.futureValue = endTime;\n        }\n\n        ret.timex = `(${pr1.timexStr},${pr2.timexStr},PT${DateUtils.totalHours(endTime, beginTime)}H)`;\n        ret.futureValue = ret.pastValue = { item1: beginTime, item2: endTime };\n        ret.success = true;\n\n        if (ampmStr1 && ampmStr1.endsWith(\"ampm\") && ampmStr2 && ampmStr2.endsWith(\"ampm\")) {\n            ret.comment = \"ampm\";\n        }\n\n        ret.subDateTimeEntities = [pr1, pr2];\n        return ret;\n    }\n\n    // parse \"morning\", \"afternoon\", \"night\"\n    private parseNight(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let day = referenceTime.getDate();\n        let month = referenceTime.getMonth();\n        let year = referenceTime.getFullYear();\n        let ret = new DateTimeResolutionResult();\n\n        // extract early/late prefix from text\n        let matches = RegExpUtility.getMatches(this.config.timeOfDayRegex, text);\n        let hasEarly = false;\n        let hasLate = false;\n        if (matches.length) {\n            if (!StringUtility.isNullOrEmpty(matches[0].groups(\"early\").value)) {\n                let early = matches[0].groups(\"early\").value;\n                text = text.replace(early, \"\");\n                hasEarly = true;\n                ret.comment = \"early\";\n            }\n            if (!hasEarly && !StringUtility.isNullOrEmpty(matches[0].groups(\"late\").value)) {\n                let late = matches[0].groups(\"late\").value;\n                text = text.replace(late, \"\");\n                hasLate = true;\n                ret.comment = \"late\";\n            }\n        }\n\n        let timexRange = this.config.getMatchedTimexRange(text);\n        if (!timexRange.matched) {\n            return new DateTimeResolutionResult();\n        }\n\n        // modify time period if \"early\" or \"late\" is existed\n        if (hasEarly) {\n            timexRange.endHour = timexRange.beginHour + 2;\n            // handling case: night end with 23:59\n            if (timexRange.endMin === 59) {\n                timexRange.endMin = 0;\n            }\n        }\n        else if (hasLate) {\n            timexRange.beginHour = timexRange.beginHour + 2;\n        }\n\n        ret.timex = timexRange.timex;\n\n        ret.futureValue = ret.pastValue = {\n            item1: new Date(year, month, day, timexRange.beginHour, 0, 0),\n            item2: new Date(year, month, day, timexRange.endHour, timexRange.endMin, timexRange.endMin)\n        };\n\n        ret.success = true;\n\n        return ret;\n    }\n}\n","import { IExtractor, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { BaseNumberExtractor, BaseNumberParser } from \"recognizers-text-number\";\nimport { BaseDateExtractor, BaseDateParser } from \"./baseDate\"\nimport { BaseTimeExtractor, BaseTimeParser } from \"./baseTime\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"./baseDuration\"\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { FormatUtil, Token, IDateTimeUtilityConfiguration, AgoLaterUtil, AgoLaterMode, DateTimeResolutionResult, StringMap } from \"./utilities\";\n\nexport interface IDateTimeExtractor {\n    extract(input: string, refDate?: Date): Array<ExtractResult>\n}\n\nexport interface IDateTimeExtractorConfiguration {\n    datePointExtractor: IDateTimeExtractor\n    timePointExtractor: IDateTimeExtractor\n    durationExtractor: IDateTimeExtractor\n    suffixRegex: RegExp\n    nowRegex: RegExp\n    timeOfTodayAfterRegex: RegExp\n    simpleTimeOfTodayAfterRegex: RegExp\n    nightRegex: RegExp\n    timeOfTodayBeforeRegex: RegExp\n    simpleTimeOfTodayBeforeRegex: RegExp\n    theEndOfRegex: RegExp\n    unitRegex: RegExp\n    utilityConfiguration: IDateTimeUtilityConfiguration\n    isConnectorToken(source: string): boolean\n}\n\nexport class BaseDateTimeExtractor implements IDateTimeExtractor {\n    protected readonly extractorName = Constants.SYS_DATETIME_DATETIME;\n    protected readonly config: IDateTimeExtractorConfiguration;\n\n    constructor(config: IDateTimeExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>();\n        tokens = tokens.concat(this.mergeDateAndTime(source, referenceDate));\n        tokens = tokens.concat(this.basicRegexMatch(source));\n        tokens = tokens.concat(this.timeOfTodayBefore(source, referenceDate));\n        tokens = tokens.concat(this.timeOfTodayAfter(source, referenceDate));\n        tokens = tokens.concat(this.specialTimeOfDate(source, referenceDate));\n        tokens = tokens.concat(this.durationWithBeforeAndAfter(source, referenceDate));\n\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    protected mergeDateAndTime(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ers = this.config.datePointExtractor.extract(source, refDate);\n        if (ers.length < 1) return tokens;\n        ers = ers.concat(this.config.timePointExtractor.extract(source, refDate));\n        if (ers.length < 2) return tokens;\n        ers = ers.sort((erA, erB) => erA.start < erB.start ? -1 : erA.start === erB.start ? 0 : 1);\n        let i = 0;\n        while (i < ers.length - 1) {\n            let j = i + 1;\n            while (j < ers.length && ExtractResult.isOverlap(ers[i], ers[j])) {\n                j++;\n            }\n            if (j >= ers.length) break;\n            if ((ers[i].type === Constants.SYS_DATETIME_DATE && ers[j].type === Constants.SYS_DATETIME_TIME) ||\n                (ers[i].type === Constants.SYS_DATETIME_TIME && ers[j].type === Constants.SYS_DATETIME_DATE)) {\n                let middleBegin = ers[i].start + ers[i].length;\n                let middleEnd = ers[j].start;\n                if (middleBegin > middleEnd) {\n                    i = j + 1;\n                    continue;\n                }\n                let middleStr = source.substr(middleBegin, middleEnd - middleBegin).trim().toLowerCase();\n                if (this.config.isConnectorToken(middleStr)) {\n                    let begin = ers[i].start;\n                    let end = ers[j].start + ers[j].length;\n                    tokens.push(new Token(begin, end));\n                }\n                i = j + 1;\n                continue;\n            }\n            i = j;\n        }\n        tokens.forEach((token, index) => {\n            let afterStr = source.substr(token.end);\n            let match = RegExpUtility.getMatches(this.config.suffixRegex, afterStr);\n            if (match && match.length > 0) {\n                // TODO: verify element\n                token.end += match[0].length;\n            }\n        });\n        return tokens;\n    }\n\n    protected basicRegexMatch(source: string): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        RegExpUtility.getMatches(this.config.nowRegex, source)\n        .forEach(match => {\n            tokens.push(new Token(match.index, match.index + match.length))\n        });\n        return tokens;\n    }\n\n    private timeOfTodayBefore(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ers = this.config.timePointExtractor.extract(source, refDate);\n        ers.forEach(er => {\n            let beforeStr = source.substr(0, er.start);\n            let innerMatches = RegExpUtility.getMatches(this.config.nightRegex, er.text);\n            if (innerMatches && innerMatches.length > 0 && innerMatches[0].index === 0) {\n                beforeStr = source.substr(0, er.start + innerMatches[0].length);\n            }\n            if (StringUtility.isNullOrWhitespace(beforeStr)) return;\n            let matches = RegExpUtility.getMatches(this.config.timeOfTodayBeforeRegex, beforeStr);\n            if (matches && matches.length > 0) {\n                let begin = matches[0].index;\n                let end = er.start + er.length;\n                tokens.push(new Token(begin, end));\n            }\n        });\n        RegExpUtility.getMatches(this.config.simpleTimeOfTodayBeforeRegex, source)\n        .forEach(match => {\n            tokens.push(new Token(match.index, match.index + match.length))\n        });\n        return tokens;\n    }\n\n    private timeOfTodayAfter(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ers = this.config.timePointExtractor.extract(source, refDate);\n        ers.forEach(er => {\n            let afterStr = source.substr(er.start + er.length);\n            if (StringUtility.isNullOrWhitespace(afterStr)) return;\n            let matches = RegExpUtility.getMatches(this.config.timeOfTodayAfterRegex, afterStr);\n            if (matches && matches.length > 0) {\n                let begin = er.start;\n                let end = er.start + er.length + matches[0].length\n                tokens.push(new Token(begin, end));\n            }\n        });\n        RegExpUtility.getMatches(this.config.simpleTimeOfTodayAfterRegex, source)\n        .forEach(match => {\n            tokens.push(new Token(match.index, match.index + match.length))\n        });\n        return tokens;\n    }\n\n    private specialTimeOfDate(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ers = this.config.datePointExtractor.extract(source, refDate);\n        ers.forEach(er => {\n            let beforeStr = source.substr(0, er.start);\n            let beforeMatches = RegExpUtility.getMatches(this.config.theEndOfRegex, beforeStr);\n            if (beforeMatches && beforeMatches.length > 0) {\n                tokens.push(new Token(beforeMatches[0].index, er.start + er.length))\n            } else {\n                let afterStr = source.substr(er.start + er.length);\n                let afterMatches = RegExpUtility.getMatches(this.config.theEndOfRegex, afterStr);\n                if (afterMatches && afterMatches.length > 0) {\n                    tokens.push(new Token(er.start, er.start + er.length + afterMatches[0].index + afterMatches[0].length))\n                }\n            }\n        });\n        return tokens;\n    }\n\n    private durationWithBeforeAndAfter(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        this.config.durationExtractor.extract(source, refDate).forEach(er => {\n            let matches = RegExpUtility.getMatches(this.config.unitRegex, er.text);\n            if (matches && matches.length > 0) {\n                tokens = AgoLaterUtil.extractorDurationWithBeforeAndAfter(source, er, tokens, this.config.utilityConfiguration);\n            }\n        });\n        return tokens;\n    }\n}\n\nexport interface IDateTimeParserConfiguration {\n    tokenBeforeDate: string;\n    tokenBeforeTime: string;\n    dateExtractor: IDateTimeExtractor;\n    timeExtractor: IDateTimeExtractor;\n    dateParser: IDateTimeParser;\n    timeParser: IDateTimeParser;\n    cardinalExtractor: BaseNumberExtractor;\n    numberParser: BaseNumberParser;\n    durationExtractor: IDateTimeExtractor;\n    durationParser: IDateTimeParser;\n    nowRegex: RegExp;\n    amTimeRegex: RegExp;\n    pmTimeRegex: RegExp;\n    simpleTimeOfTodayAfterRegex: RegExp;\n    simpleTimeOfTodayBeforeRegex: RegExp;\n    specificTimeOfDayRegex: RegExp;\n    theEndOfRegex: RegExp;\n    unitRegex: RegExp;\n    unitMap: ReadonlyMap<string, string>;\n    numbers: ReadonlyMap<string, number>;\n    haveAmbiguousToken(text: string, matchedText: string): boolean;\n    getMatchedNowTimex(text: string): { matched: boolean, timex: string };\n    getSwiftDay(text: string): number;\n    getHour(text: string, hour: number): number;\n    utilityConfiguration: IDateTimeUtilityConfiguration;\n}\n\nexport class BaseDateTimeParser implements IDateTimeParser {\n    public static readonly ParserName = Constants.SYS_DATETIME_DATETIME; // \"DateTime\";\n    protected readonly config: IDateTimeParserConfiguration;\n\n    constructor(configuration: IDateTimeParserConfiguration) {\n        this.config = configuration;\n    }\n\n    public parse(er: ExtractResult, refTime: Date): DateTimeParseResult {\n        if (!refTime) refTime = new Date();\n        let referenceTime = refTime;\n\n        let value = null;\n        if (er.type === BaseDateTimeParser.ParserName) {\n            let innerResult = this.mergeDateAndTime(er.text, referenceTime);\n            if (!innerResult.success) {\n                innerResult = this.parseBasicRegex(er.text, referenceTime);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parseTimeOfToday(er.text, referenceTime);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parseSpecialTimeOfDate(er.text, referenceTime);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parserDurationWithAgoAndLater(er.text, referenceTime);\n            }\n\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.DATETIME] = FormatUtil.formatDateTime(innerResult.futureValue);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.DATETIME] = FormatUtil.formatDateTime(innerResult.pastValue);\n                value = innerResult;\n            }\n        }\n\n        let ret = new DateTimeParseResult(er); {\n            ret.value = value,\n            ret.timexStr = value === null ? \"\" : value.timex,\n            ret.resolutionStr = \"\"\n        };\n        return ret;\n    }\n\n    protected parseBasicRegex(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let trimmedText = text.trim().toLowerCase();\n\n        // handle \"now\"\n        let matches = RegExpUtility.getMatches(this.config.nowRegex, trimmedText);\n        if (matches.length && matches[0].index === 0 && matches[0].length === trimmedText.length) {\n            let getMatchedNowTimex = this.config.getMatchedNowTimex(trimmedText);\n            ret.timex = getMatchedNowTimex.timex;\n            ret.futureValue = ret.pastValue = referenceTime;\n            ret.success = true;\n            return ret;\n        }\n\n        return ret;\n    }\n\n    // merge a Date entity and a Time entity\n    protected mergeDateAndTime(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n\n        let er1 = this.config.dateExtractor.extract(text, referenceTime);\n        if (er1.length === 0) {\n            er1 = this.config.dateExtractor.extract(this.config.tokenBeforeDate + text, referenceTime);\n            if (er1.length === 1) {\n                er1[0].start -= this.config.tokenBeforeDate.length;\n            }\n            else {\n                return ret;\n            }\n        }\n        else {\n            // this is to understand if there is an ambiguous token in the text. For some languages (e.g. spanish)\n            // the same word could mean different things (e.g a time in the day or an specific day).\n            if (this.config.haveAmbiguousToken(text, er1[0].text)) {\n                return ret;\n            }\n        }\n\n        let er2 = this.config.timeExtractor.extract(text, referenceTime);\n        if (er2.length === 0) {\n            // here we filter out \"morning, afternoon, night...\" time entities\n            er2 = this.config.timeExtractor.extract(this.config.tokenBeforeTime + text, referenceTime);\n            if (er2.length === 1) {\n                er2[0].start -= this.config.tokenBeforeTime.length;\n            }\n            else {\n                return ret;\n            }\n        }\n\n        // handle case \"Oct. 5 in the afternoon at 7:00\"\n        // in this case \"5 in the afternoon\" will be extract as a Time entity\n        let correctTimeIdx = 0;\n        while (correctTimeIdx < er2.length && ExtractResult.isOverlap(er2[correctTimeIdx], er1[0])) {\n            correctTimeIdx++;\n        }\n\n        if (correctTimeIdx >= er2.length) {\n            return ret;\n        }\n\n        let pr1 = this.config.dateParser.parse(er1[0], new Date(referenceTime.toDateString()))\n        let pr2 = this.config.timeParser.parse(er2[correctTimeIdx], referenceTime);\n        if (pr1.value === null || pr2.value === null) {\n            return ret;\n        }\n\n        let futureDate = pr1.value.futureValue;\n        let pastDate = pr1.value.pastValue;\n        let time = pr2.value.futureValue;\n\n        let hour = time.getHours();\n        let min = time.getMinutes();\n        let sec = time.getSeconds();\n\n        // handle morning, afternoon\n        if (RegExpUtility.getMatches(this.config.pmTimeRegex, text).length && hour < 12) {\n            hour += 12;\n        }\n        else if (RegExpUtility.getMatches(this.config.amTimeRegex, text).length && hour >= 12) {\n            hour -= 12;\n        }\n\n        let timeStr = pr2.timexStr;\n        if (timeStr.endsWith(\"ampm\")) {\n            timeStr = timeStr.substring(0, timeStr.length - 4);\n        }\n        timeStr = \"T\" + FormatUtil.toString(hour, 2) + timeStr.substring(3);\n        ret.timex = pr1.timexStr + timeStr;\n\n        let val = pr2.value;\n        if (hour <= 12 && !RegExpUtility.getMatches(this.config.pmTimeRegex, text).length\n            && !RegExpUtility.getMatches(this.config.amTimeRegex, text).length && val.comment) {\n            ret.comment = \"ampm\";\n        }\n        ret.futureValue = new Date(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), hour, min, sec);\n        ret.pastValue = new Date(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), hour, min, sec);\n        ret.success = true;\n\n        // change the value of time object\n        pr2.timexStr = timeStr;\n        if (!StringUtility.isNullOrEmpty(ret.comment)) {\n            pr2.value.comment = ret.comment === \"ampm\" ? \"ampm\" : \"\";\n        }\n\n        // add the date and time object in case we want to split them\n        ret.subDateTimeEntities = [pr1, pr2];\n\n        return ret;\n    }\n\n    protected parseTimeOfToday(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let trimmedText = text.toLowerCase().trim();\n\n        let hour = 0;\n        let min = 0;\n        let sec = 0;\n        let timeStr: string;\n\n        let wholeMatches = RegExpUtility.getMatches(this.config.simpleTimeOfTodayAfterRegex, trimmedText);\n        if (!(wholeMatches.length && wholeMatches[0].length === trimmedText.length)) {\n            wholeMatches = RegExpUtility.getMatches(this.config.simpleTimeOfTodayBeforeRegex, trimmedText);\n        }\n\n        if (wholeMatches.length && wholeMatches[0].length === trimmedText.length) {\n            let hourStr = wholeMatches[0].groups(\"hour\").value;\n            if (!hourStr) {\n                hourStr = wholeMatches[0].groups(\"hournum\").value.toLowerCase();\n                hour = this.config.numbers.get(hourStr);\n            }\n            else {\n                hour = parseInt(hourStr, 10);\n            }\n            timeStr = \"T\" + FormatUtil.toString(hour, 2);\n        }\n        else {\n            let ers = this.config.timeExtractor.extract(trimmedText, referenceTime);\n            if (ers.length !== 1) {\n                ers = this.config.timeExtractor.extract(this.config.tokenBeforeTime + trimmedText, referenceTime);\n                if (ers.length === 1) {\n                    ers[0].start -= this.config.tokenBeforeTime.length;\n                }\n                else {\n                    return ret;\n                }\n            }\n\n            let pr = this.config.timeParser.parse(ers[0], referenceTime);\n            if (pr.value === null) {\n                return ret;\n            }\n\n            let time = pr.value.futureValue;\n\n            hour = time.getHours();\n            min = time.getMinutes();\n            sec = time.getSeconds();\n            timeStr = pr.timexStr;\n        }\n\n\n        let matches = RegExpUtility.getMatches(this.config.specificTimeOfDayRegex, trimmedText);\n\n        if (matches.length) {\n            let matchStr = matches[0].value.toLowerCase();\n\n            // handle \"last\", \"next\"\n            let swift = this.config.getSwiftDay(matchStr);\n\n            let date = new Date(referenceTime);\n            date.setDate(date.getDate() + swift);\n\n            // handle \"morning\", \"afternoon\"\n            hour = this.config.getHour(matchStr, hour);\n\n            // in this situation, luisStr cannot end up with \"ampm\", because we always have a \"morning\" or \"night\"\n            if (timeStr.endsWith(\"ampm\")) {\n                timeStr = timeStr.substring(0, timeStr.length - 4);\n            }\n            timeStr = \"T\" + FormatUtil.toString(hour, 2) + timeStr.substring(3);\n\n            ret.timex = FormatUtil.formatDate(date) + timeStr;\n            ret.futureValue = ret.pastValue = new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour, min, sec);\n            ret.success = true;\n            return ret;\n        }\n\n        return ret;\n    }\n\n    private parseSpecialTimeOfDate(text: string, refDateTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let ers = this.config.dateExtractor.extract(text, refDateTime);\n        if (ers.length !== 1) {\n            return ret;\n        }\n        let beforeStr = text.substring(0, ers[0].start || 0);\n        if (RegExpUtility.getMatches(this.config.theEndOfRegex, beforeStr).length) {\n            let pr = this.config.dateParser.parse(ers[0], refDateTime);\n            let futureDate = new Date(pr.value.futureValue);\n            let pastDate = new Date(pr.value.pastValue);\n            ret.timex = pr.timexStr + \"T23:59\";\n            futureDate.setDate(futureDate.getDate() + 1);\n            futureDate.setMinutes(futureDate.getMinutes() - 1);\n            ret.futureValue = futureDate;\n            pastDate.setDate(pastDate.getDate() + 1);\n            pastDate.setMinutes(pastDate.getMinutes() - 1);\n            ret.pastValue = pastDate;\n            ret.success = true;\n            return ret;\n        }\n\n        return ret;\n    }\n\n    // handle like \"two hours ago\"\n    private parserDurationWithAgoAndLater(text: string, referenceTime: Date): DateTimeResolutionResult {\n        return AgoLaterUtil.parseDurationWithAgoAndLater(\n            text,\n            referenceTime,\n            this.config.durationExtractor,\n            this.config.durationParser,\n            this.config.unitMap,\n            this.config.unitRegex,\n            this.config.utilityConfiguration,\n            AgoLaterMode.DateTime\n        );\n    }\n}\n","import { IExtractor, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { BaseNumberExtractor } from \"recognizers-text-number\"\nimport { BaseDateExtractor, BaseDateParser } from \"./baseDate\"\nimport { BaseTimeExtractor, BaseTimeParser } from \"./baseTime\"\nimport { BaseDateTimeExtractor, BaseDateTimeParser, IDateTimeExtractor } from \"./baseDateTime\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"./baseDuration\"\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { FormatUtil, DateUtils, Token, DateTimeResolutionResult, StringMap } from \"./utilities\";\n\nexport interface IDateTimePeriodExtractorConfiguration {\n    cardinalExtractor: BaseNumberExtractor\n    singleDateExtractor: IDateTimeExtractor\n    singleTimeExtractor: IDateTimeExtractor\n    singleDateTimeExtractor: IDateTimeExtractor\n    durationExtractor: IDateTimeExtractor\n    timePeriodExtractor: IDateTimeExtractor\n    simpleCasesRegexes: RegExp[]\n    prepositionRegex: RegExp\n    tillRegex: RegExp\n    specificTimeOfDayRegex: RegExp\n    timeOfDayRegex: RegExp\n    periodTimeOfDayWithDateRegex: RegExp\n    followedUnit: RegExp\n    numberCombinedWithUnit: RegExp\n    timeUnitRegex: RegExp\n    pastPrefixRegex: RegExp\n    nextPrefixRegex: RegExp\n    relativeTimeUnitRegex: RegExp\n    restOfDateTimeRegex: RegExp\n    generalEndingRegex: RegExp\n    middlePauseRegex: RegExp\n    getFromTokenIndex(source: string): { matched: boolean, index: number };\n    getBetweenTokenIndex(source: string): { matched: boolean, index: number };\n    hasConnectorToken(source: string): boolean;\n}\n\nexport class BaseDateTimePeriodExtractor implements IDateTimeExtractor {\n    protected readonly extractorName = Constants.SYS_DATETIME_DATETIMEPERIOD;\n    protected readonly config: IDateTimePeriodExtractorConfiguration;\n\n    constructor(config: IDateTimePeriodExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n        .concat(this.matchSimpleCases(source, referenceDate))\n        .concat(this.mergeTwoTimePoints(source, referenceDate))\n        .concat(this.matchDuration(source, referenceDate))\n        .concat(this.matchNight(source, referenceDate))\n        .concat(this.matchRelativeUnit(source));\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    private matchSimpleCases(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        this.config.simpleCasesRegexes.forEach(regexp => {\n            RegExpUtility.getMatches(regexp, source).forEach(match => {\n                // has a date before?\n                let hasBeforeDate = false\n                let beforeStr = source.substr(0, match.index);\n                if (!StringUtility.isNullOrWhitespace(beforeStr)) {\n                    let ers = this.config.singleDateExtractor.extract(beforeStr, refDate);\n                    if (ers && ers.length > 0) {\n                        let er = ers[0];\n                        let begin = er.start;\n                        let end = er.start + er.length;\n                        let middleStr = beforeStr.substr(begin + er.length).trim().toLowerCase();\n                        if (StringUtility.isNullOrWhitespace(middleStr) || RegExpUtility.getMatches(this.config.prepositionRegex, middleStr).length > 0) {\n                            tokens.push(new Token(begin, match.index + match.length));\n                            hasBeforeDate = true;\n                        }\n                    }\n                }\n                let followedStr = source.substr(match.index + match.length);\n                if (!StringUtility.isNullOrWhitespace(followedStr) && !hasBeforeDate) {\n                    let ers = this.config.singleDateExtractor.extract(followedStr, refDate);\n                    if (ers && ers.length > 0) {\n                        let er = ers[0];\n                        let begin = er.start;\n                        let end = er.start + er.length;\n                        let middleStr = followedStr.substr(0, begin).trim().toLowerCase();\n                        if (StringUtility.isNullOrWhitespace(middleStr) || RegExpUtility.getMatches(this.config.prepositionRegex, middleStr).length > 0) {\n                            tokens.push(new Token(match.index, match.index + match.length + end));\n                        }\n                    }\n                }\n            });\n        });\n        return tokens;\n    }\n\n    protected mergeTwoTimePoints(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ersDateTime = this.config.singleDateTimeExtractor.extract(source, refDate);\n        let ersTime = this.config.singleTimeExtractor.extract(source, refDate);\n        let innerMarks: ExtractResult[] = [];\n        let j = 0;\n        ersDateTime.forEach((erDateTime, index) => {\n            innerMarks.push(erDateTime);\n            while (j < ersTime.length && ersTime[j].start + ersTime[j].length < erDateTime.start) {\n                innerMarks.push(ersTime[j++]);\n            }\n            while (j < ersTime.length && ExtractResult.isOverlap(ersTime[j], erDateTime)) {\n                j++;\n            }\n        });\n        while (j < ersTime.length) {\n            innerMarks.push(ersTime[j++]);\n        }\n        innerMarks = innerMarks.sort((erA, erB) => erA.start < erB.start ? -1 : erA.start === erB.start ? 0 : 1);\n        let idx = 0;\n        while (idx < innerMarks.length - 1) {\n            let currentMark = innerMarks[idx];\n            let nextMark = innerMarks[idx + 1];\n            if (currentMark.type === Constants.SYS_DATETIME_TIME && nextMark.type === Constants.SYS_DATETIME_TIME) {\n                idx++;\n                continue;\n            }\n            let middleBegin = currentMark.start + currentMark.length;\n            let middleEnd = nextMark.start;\n\n            let middleStr = source.substr(middleBegin, middleEnd - middleBegin).trim().toLowerCase();\n            let matches = RegExpUtility.getMatches(this.config.tillRegex, middleStr);\n            if (matches && matches.length > 0 && matches[0].index === 0 && matches[0].length === middleStr.length) {\n                let periodBegin = currentMark.start;\n                let periodEnd = nextMark.start + nextMark.length;\n                let beforeStr = source.substr(0, periodBegin).trim().toLowerCase();\n                let matchFrom = this.config.getFromTokenIndex(beforeStr);\n                let fromTokenIndex = matchFrom.matched ? matchFrom : this.config.getBetweenTokenIndex(beforeStr);\n                if (fromTokenIndex.matched) {\n                    periodBegin = fromTokenIndex.index;\n                }\n                tokens.push(new Token(periodBegin, periodEnd))\n                idx += 2;\n                continue;\n            }\n            if (this.config.hasConnectorToken(middleStr)) {\n                let periodBegin = currentMark.start;\n                let periodEnd = nextMark.start + nextMark.length;\n                let beforeStr = source.substr(0, periodBegin).trim().toLowerCase();\n                let betweenTokenIndex = this.config.getBetweenTokenIndex(beforeStr);\n                if (betweenTokenIndex.matched) {\n                    periodBegin = betweenTokenIndex.index;\n                    tokens.push(new Token(periodBegin, periodEnd))\n                    idx += 2;\n                    continue;\n                }\n            }\n            idx++;\n        };\n        return tokens;\n    }\n\n    private matchDuration(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let durations: Array<Token> = new Array<Token>();\n        this.config.durationExtractor.extract(source, refDate).forEach(duration => {\n            let match = RegExpUtility.getMatches(this.config.timeUnitRegex, duration.text).pop();\n            if (match) {\n                durations.push(new Token(duration.start, duration.start + duration.length));\n            }\n        });\n        durations.forEach(duration => {\n            let beforeStr = source.substr(0, duration.start).toLowerCase()\n            if (StringUtility.isNullOrWhitespace(beforeStr)) return;\n            let match = RegExpUtility.getMatches(this.config.pastPrefixRegex, beforeStr).pop();\n            if (match && StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                tokens.push(new Token(match.index, duration.end))\n                return;\n            }\n            match = RegExpUtility.getMatches(this.config.nextPrefixRegex, beforeStr).pop();\n            if (match && StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                tokens.push(new Token(match.index, duration.end))\n            }\n        });\n        return tokens;\n    }\n\n    protected matchNight(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        RegExpUtility.getMatches(this.config.specificTimeOfDayRegex, source).forEach(match => {\n            tokens.push(new Token(match.index, match.index + match.length))\n        });\n        this.config.singleDateExtractor.extract(source, refDate).forEach(er => {\n            let afterStr = source.substr(er.start + er.length);\n            let match = RegExpUtility.getMatches(this.config.periodTimeOfDayWithDateRegex, afterStr).pop();\n            if (match) {\n                if (StringUtility.isNullOrWhitespace(afterStr.substr(0, match.index))) {\n                    tokens.push(new Token(er.start, er.start + er.length + match.index + match.length));\n                }\n                else {\n                    let pauseMatch = RegExpUtility.getMatches(this.config.middlePauseRegex, afterStr.substr(0, match.index)).pop();\n\n                    if (pauseMatch) {\n                        // TODO: should use trimStart() instead?\n                        let suffix = afterStr.substr(match.index + match.length).trim();\n\n                        let endingMatch = RegExpUtility.getMatches(this.config.generalEndingRegex, suffix).pop();\n                        if (endingMatch) {\n                            tokens.push(new Token(er.start || 0, er.start + er.length + match.index + match.length || 0));\n                        }\n                    }\n                }\n            }\n\n            let beforeStr = source.substr(0, er.start);\n            match = RegExpUtility.getMatches(this.config.periodTimeOfDayWithDateRegex, beforeStr).pop();\n            if (match) {\n                if (StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                    let middleStr = source.substr(match.index + match.length, er.start - match.index - match.length);\n                    if (StringUtility.isWhitespace(middleStr)) {\n                        tokens.push(new Token(match.index, er.start + er.length))\n                    }\n                }\n                else {\n                    let pauseMatch = RegExpUtility.getMatches(this.config.middlePauseRegex, beforeStr.substr(match.index + match.length)).pop();\n\n                    if (pauseMatch) {\n                        // TODO: should use trimStart() instead?\n                        let suffix = source.substr(er.start + er.length || 0).trim();\n\n                        let endingMatch = RegExpUtility.getMatches(this.config.generalEndingRegex, suffix).pop();\n                        if (endingMatch) {\n                            tokens.push(new Token(match.index, er.start + er.length || 0));\n                        }\n\n                    }\n                }\n            }\n\n            // check whether there are adjacent time period strings, before or after\n            for (let e of tokens) {\n                // try to extract a time period in before-string \n                if (e.start > 0) {\n                    let beforeStr = source.substr(0, e.start);\n                    if (!StringUtility.isNullOrWhitespace(beforeStr)) {\n                        let timeErs = this.config.timePeriodExtractor.extract(beforeStr);\n                        if (timeErs.length > 0) {\n                            for (let tp of timeErs) {\n                                var midStr = beforeStr.substr(tp.start + tp.length || 0);\n                                if (StringUtility.isNullOrWhitespace(midStr)) {\n                                    tokens.push(new Token(tp.start || 0, tp.start + tp.length + midStr.length + e.length || 0));\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // try to extract a time period in after-string\n                if (e.start + e.length <= source.length) {\n                    let afterStr = source.substr(e.start + e.length);\n                    if (!StringUtility.isNullOrWhitespace(afterStr)) {\n                        let timeErs = this.config.timePeriodExtractor.extract(afterStr);\n                        if (timeErs.length > 0) {\n                            for (let tp of timeErs) {\n                                var midStr = afterStr.substr(0, tp.start || 0);\n                                if (StringUtility.isNullOrWhitespace(midStr)) {\n                                    tokens.push(new Token(e.start, e.start + e.length + midStr.length + tp.length || 0));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        return tokens;\n    }\n\n    private matchRelativeUnit(source: string): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let matches = RegExpUtility.getMatches(this.config.relativeTimeUnitRegex, source);\n        if (matches.length === 0) {\n            matches = RegExpUtility.getMatches(this.config.restOfDateTimeRegex, source);\n        }\n        matches.forEach(match => {\n            tokens.push(new Token(match.index, match.index + match.length));\n        });\n        return tokens;\n    }\n}\n\nexport interface IDateTimePeriodParserConfiguration {\n    pureNumberFromToRegex: RegExp\n    pureNumberBetweenAndRegex: RegExp\n    periodTimeOfDayWithDateRegex: RegExp\n    specificTimeOfDayRegex: RegExp\n    pastRegex: RegExp\n    futureRegex: RegExp\n    relativeTimeUnitRegex: RegExp\n    restOfDateTimeRegex: RegExp\n    numbers: ReadonlyMap<string, number>\n    unitMap: ReadonlyMap<string, string>\n    dateExtractor: IDateTimeExtractor\n    timeExtractor: IDateTimeExtractor\n    dateTimeExtractor: IDateTimeExtractor\n    timePeriodExtractor: IDateTimeExtractor\n    durationExtractor: IDateTimeExtractor\n    dateParser: BaseDateParser\n    timeParser: BaseTimeParser\n    dateTimeParser: BaseDateTimeParser\n    timePeriodParser: IDateTimeParser\n    durationParser: BaseDurationParser\n    getMatchedTimeRange(source: string): { timeStr: string, beginHour: number, endHour: number, endMin: number, success: boolean }\n    getSwiftPrefix(source: string): number\n}\n\nexport class BaseDateTimePeriodParser implements IDateTimeParser {\n    protected readonly parserName = Constants.SYS_DATETIME_DATETIMEPERIOD;\n    protected readonly config: IDateTimePeriodParserConfiguration;\n\n    constructor(config: IDateTimePeriodParserConfiguration) {\n        this.config = config;\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let source = extractorResult.text.trim().toLowerCase();\n            let innerResult = this.mergeDateAndTimePeriods(source, referenceDate);\n            if (!innerResult.success) {\n                innerResult = this.mergeTwoTimePoints(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseSpecificTimeOfDay(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseDuration(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseRelativeUnit(source, referenceDate);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.START_DATETIME] = FormatUtil.formatDateTime(innerResult.futureValue[0]);\n                innerResult.futureResolution[TimeTypeConstants.END_DATETIME] = FormatUtil.formatDateTime(innerResult.futureValue[1]);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.START_DATETIME] = FormatUtil.formatDateTime(innerResult.pastValue[0]);\n                innerResult.pastResolution[TimeTypeConstants.END_DATETIME] = FormatUtil.formatDateTime(innerResult.pastValue[1]);\n                resultValue = innerResult;\n            }\n        }\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n\n    protected mergeDateAndTimePeriods( text:string, referenceTime:Date):DateTimeResolutionResult\n    {\n        let ret = new DateTimeResolutionResult();\n        let trimedText = text.trim().toLowerCase();\n\n        let er = this.config.timePeriodExtractor.extract(trimedText, referenceTime);\n        if (er.length !== 1)\n        {\n            return this.parseSimpleCases(text, referenceTime);\n        }\n\n        let timePeriodParseResult = this.config.timePeriodParser.parse(er[0]);\n        let timePeriodResolutionResult = timePeriodParseResult.value;\n\n        if (!timePeriodResolutionResult)\n        {\n            return this.parseSimpleCases(text, referenceTime);\n        }\n\n        let timePeriodTimex = timePeriodResolutionResult.timex;\n        // if it is a range type timex\n        if (!StringUtility.isNullOrEmpty(timePeriodTimex)\n            && timePeriodTimex.startsWith(\"(\"))\n        {\n            let dateResult = this.config.dateExtractor.extract(trimedText.replace(er[0].text, \"\"), referenceTime);\n            let dateStr = \"\";\n            let futureTime:Date;\n            let pastTime: Date;\n            if (dateResult.length === 1 && trimedText.replace(er[0].text, \"\").trim() === dateResult[0].text) {\n                let pr = this.config.dateParser.parse(dateResult[0], referenceTime);\n                if (pr.value) {\n                    futureTime = pr.value.futureValue;\n                    pastTime = pr.value.pastValue;\n\n                    dateStr = pr.timexStr;\n                }\n                else {\n                    return this.parseSimpleCases(text, referenceTime);\n                }\n\n                timePeriodTimex = timePeriodTimex.replace(\"(\", \"\").replace(\")\", \"\");\n                let timePeriodTimexArray = timePeriodTimex.split(',');\n                let timePeriodFutureValue = timePeriodResolutionResult.futureValue;\n                let beginTime = timePeriodFutureValue.item1;\n                let endTime = timePeriodFutureValue.item2;\n\n                if (timePeriodTimexArray.length === 3) {\n                    let beginStr = dateStr + timePeriodTimexArray[0];\n                    let endStr = dateStr + timePeriodTimexArray[1];\n\n                    ret.timex = `(${beginStr},${endStr},${timePeriodTimexArray[2]})`;\n\n                    ret.futureValue = [\n                        DateUtils.safeCreateFromMinValue(futureTime.getFullYear(), futureTime.getMonth(), futureTime.getDate(),\n                            beginTime.getHours(), beginTime.getMinutes(), beginTime.getSeconds()),\n                        DateUtils.safeCreateFromMinValue(futureTime.getFullYear(), futureTime.getMonth(), futureTime.getDate(),\n                            endTime.getHours(), endTime.getMinutes(), endTime.getSeconds())];\n\n                    ret.pastValue = [\n                        DateUtils.safeCreateFromMinValue(pastTime.getFullYear(), pastTime.getMonth(), pastTime.getDate(),\n                            beginTime.getHours(), beginTime.getMinutes(), beginTime.getSeconds()),\n                        DateUtils.safeCreateFromMinValue(pastTime.getFullYear(), pastTime.getMonth(), pastTime.getDate(),\n                            endTime.getHours(), endTime.getMinutes(), endTime.getSeconds())];\n\n                    if (!StringUtility.isNullOrEmpty(timePeriodResolutionResult.comment)\n                        && timePeriodResolutionResult.comment === \"ampm\") {\n                        ret.comment = \"ampm\";\n                    }\n\n                    ret.success = true;\n                    ret.subDateTimeEntities = [pr, timePeriodParseResult];\n\n                    return ret;\n                }\n            }\n            else\n            {\n                return this.parseSimpleCases(text, referenceTime);\n            }\n        }\n\n        return this.parseSimpleCases(text, referenceTime);\n    }\n\n    private parseSimpleCases(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.pureNumberFromToRegex, source).pop();\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.pureNumberBetweenAndRegex, source).pop();\n        }\n        if (!match || match.index !== 0) return result;\n\n        let hourGroup = match.groups('hour');\n        let beginHour = this.config.numbers.get(hourGroup.captures[0]) || Number.parseInt(hourGroup.captures[0], 10) || 0;\n        let endHour = this.config.numbers.get(hourGroup.captures[1]) || Number.parseInt(hourGroup.captures[1], 10) || 0;\n\n        let er = this.config.dateExtractor.extract(source.replace(match.value,\"\"), referenceDate).pop();\n        if (!er) return result;\n\n        let pr = this.config.dateParser.parse(er, referenceDate);\n        if (!pr) return result;\n\n        let dateResult: DateTimeResolutionResult = pr.value;\n        let futureDate: Date = dateResult.futureValue;\n        let pastDate: Date = dateResult.pastValue;\n        let dateStr = pr.timexStr;\n\n        let hasAm = false;\n        let hasPm = false;\n        let pmStr = match.groups('pm').value;\n        let amStr = match.groups('am').value;\n        let descStr = match.groups('desc').value;\n\n        if (!StringUtility.isNullOrEmpty(amStr) || descStr.startsWith('a')) {\n            if (beginHour >= 12) beginHour -= 12;\n            if (endHour >= 12) endHour -= 12;\n            hasAm = true;\n        }\n        if (!StringUtility.isNullOrEmpty(pmStr) || descStr.startsWith('p')) {\n            if (beginHour < 12) beginHour += 12;\n            if (endHour < 12) endHour += 12;\n            hasPm = true;\n        }\n        if (!hasAm && !hasPm && beginHour <= 12 && endHour <= 12) {\n            result.comment = \"ampm\";\n        }\n\n        let beginStr = `${dateStr}T${FormatUtil.toString(beginHour, 2)}`;\n        let endStr = `${dateStr}T${FormatUtil.toString(endHour, 2)}`;\n\n        result.timex = `(${beginStr},${endStr},PT${endHour - beginHour}H)`;\n        result.futureValue = [\n            DateUtils.safeCreateFromMinValue(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), beginHour, 0, 0),\n            DateUtils.safeCreateFromMinValue(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), endHour, 0, 0)\n        ];\n        result.pastValue = [\n            DateUtils.safeCreateFromMinValue(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), beginHour, 0, 0),\n            DateUtils.safeCreateFromMinValue(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), endHour, 0, 0)\n        ];\n        result.success = true;\n        return result;\n    }\n\n    protected mergeTwoTimePoints(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let prs: { begin: DateTimeParseResult, end: DateTimeParseResult };\n        let timeErs = this.config.timeExtractor.extract(source, referenceDate);\n        let datetimeErs = this.config.dateTimeExtractor.extract(source, referenceDate);\n        let bothHasDate = false;\n        let beginHasDate = false;\n        let endHasDate = false;\n\n        if (datetimeErs.length === 2) {\n            prs = this.getTwoPoints(datetimeErs[0], datetimeErs[1], this.config.dateTimeParser, this.config.dateTimeParser, referenceDate);\n            bothHasDate = true;\n        } else if (datetimeErs.length === 1 && timeErs.length === 2) {\n            if (ExtractResult.isOverlap(datetimeErs[0], timeErs[0])) {\n                prs = this.getTwoPoints(datetimeErs[0], timeErs[1], this.config.dateTimeParser, this.config.timeParser, referenceDate);\n                beginHasDate = true;\n            } else {\n                prs = this.getTwoPoints(timeErs[0], datetimeErs[0], this.config.timeParser, this.config.dateTimeParser, referenceDate);\n                endHasDate = true;\n            }\n        } else if (datetimeErs.length === 1 && timeErs.length === 1) {\n            if (timeErs[0].start < datetimeErs[0].start) {\n                prs = this.getTwoPoints(timeErs[0], datetimeErs[0], this.config.timeParser, this.config.dateTimeParser, referenceDate);\n                endHasDate = true;\n            } else {\n                prs = this.getTwoPoints(datetimeErs[0], timeErs[0], this.config.dateTimeParser, this.config.timeParser, referenceDate);\n                beginHasDate = true;\n            }\n        }\n        if (!prs || !prs.begin.value || !prs.end.value) return result;\n\n        let begin: DateTimeResolutionResult = prs.begin.value;\n        let end: DateTimeResolutionResult = prs.end.value;\n\n        let futureBegin: Date = begin.futureValue;\n        let futureEnd: Date = end.futureValue;\n        let pastBegin: Date = begin.pastValue;\n        let pastEnd: Date = end.pastValue;\n\n        if (bothHasDate) {\n            if (futureBegin > futureEnd) futureBegin = pastBegin;\n            if (pastEnd < pastBegin) pastEnd = futureEnd;\n            result.timex = `(${prs.begin.timexStr},${prs.end.timexStr},PT${DateUtils.totalHours(futureEnd, futureBegin)}H)`;\n        } else if (beginHasDate) {\n            futureEnd = DateUtils.safeCreateFromMinValue(futureBegin.getFullYear(), futureBegin.getMonth(), futureBegin.getDate(), futureEnd.getHours(), futureEnd.getMinutes(), futureEnd.getSeconds());\n            pastEnd = DateUtils.safeCreateFromMinValue(pastBegin.getFullYear(), pastBegin.getMonth(), pastBegin.getDate(), pastEnd.getHours(), pastEnd.getMinutes(), pastEnd.getSeconds());\n            let dateStr = prs.begin.timexStr.split('T').pop();\n            result.timex = `(${prs.begin.timexStr},${dateStr}${prs.end.timexStr},PT${DateUtils.totalHours(futureEnd, futureBegin)}H)`;\n        } else if (endHasDate) {\n            futureBegin = DateUtils.safeCreateFromMinValue(futureEnd.getFullYear(), futureEnd.getMonth(), futureEnd.getDate(), futureBegin.getHours(), futureBegin.getMinutes(), futureBegin.getSeconds());\n            pastBegin = DateUtils.safeCreateFromMinValue(pastEnd.getFullYear(), pastEnd.getMonth(), pastEnd.getDate(), pastBegin.getHours(), pastBegin.getMinutes(), pastBegin.getSeconds());\n            let dateStr = prs.end.timexStr.split('T')[0];\n            result.timex = `(${dateStr}${prs.begin.timexStr},${prs.end.timexStr},PT${DateUtils.totalHours(futureEnd, futureBegin)}H)`;\n        }\n        if (!StringUtility.isNullOrEmpty(begin.comment) && begin.comment.endsWith('ampm') && !StringUtility.isNullOrEmpty(end.comment) && end.comment.endsWith('ampm')) {\n            result.comment = 'ampm';\n        }\n\n        result.futureValue = [futureBegin, futureEnd];\n        result.pastValue = [pastBegin, pastEnd];\n        result.success = true;\n        result.subDateTimeEntities = [prs.begin, prs.end];\n        return result;\n    }\n\n    protected getTwoPoints(beginEr: ExtractResult, endEr: ExtractResult, beginParser: IDateTimeParser, endParser: IDateTimeParser, referenceDate: Date)\n    : { begin: DateTimeParseResult, end: DateTimeParseResult } {\n        let beginPr = beginParser.parse(beginEr, referenceDate);\n        let endPr = endParser.parse(endEr, referenceDate);\n        return { begin: beginPr, end: endPr };\n    }\n\n    protected parseSpecificTimeOfDay(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let timeText = source;\n        let hasEarly = false;\n        let hasLate = false;\n\n        let match = RegExpUtility.getMatches(this.config.periodTimeOfDayWithDateRegex, source).pop();\n        if (match) {\n            timeText = match.groups('timeOfDay').value;\n            if (!StringUtility.isNullOrEmpty(match.groups('early').value)) {\n                hasEarly = true;\n                result.comment = 'early';\n            } else if (!StringUtility.isNullOrEmpty(match.groups('late').value)) {\n                hasLate = true;\n                result.comment = 'late';\n            }\n        }\n\n        let matched = this.config.getMatchedTimeRange(timeText);\n        if (!matched || !matched.success) return result;\n\n        if (hasEarly) {\n            matched.endHour = matched.beginHour + 2;\n            if (matched.endMin === 59) matched.endMin = 0;\n        } else if (hasLate) {\n            matched.beginHour += 2;\n        }\n\n        match = RegExpUtility.getMatches(this.config.specificTimeOfDayRegex, source).pop();\n        if (match && match.index === 0 && match.length === source.length) {\n            let swift = this.config.getSwiftPrefix(source);\n            let date = DateUtils.addDays(referenceDate, swift);\n            result.timex = FormatUtil.formatDate(date) + matched.timeStr;\n            result.futureValue = [\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), matched.beginHour, 0, 0),\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), matched.endHour, matched.endMin, matched.endMin),\n            ];\n            result.pastValue = [\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), matched.beginHour, 0, 0),\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), matched.endHour, matched.endMin, matched.endMin),\n            ];\n            result.success = true;\n            return result;\n        }\n\n        match = RegExpUtility.getMatches(this.config.periodTimeOfDayWithDateRegex, source).pop();\n        if (!match) return result;\n\n        let beforeStr = source.substr(0, match.index).trim();\n        let afterStr = source.substr(match.index + match.length).trim();\n        let ers = this.config.dateExtractor.extract(beforeStr, referenceDate);\n\n        // eliminate time period, if any\n        let timePeriodErs = this.config.timePeriodExtractor.extract(beforeStr);\n        if (timePeriodErs.length > 0) {\n            beforeStr = beforeStr.slice(timePeriodErs[0].start || 0, timePeriodErs[0].start + timePeriodErs[0].length || 0).trim();\n        }\n        else {\n            timePeriodErs = this.config.timePeriodExtractor.extract(afterStr);\n            if (timePeriodErs.length > 0) {\n                afterStr = afterStr.slice(timePeriodErs[0].start || 0, timePeriodErs[0].start + timePeriodErs[0].length || 0).trim();\n            }\n        }\n\n        if (ers.length === 0 || ers[0].length !== beforeStr.length) {\n            let valid = false;\n            if (ers.length > 0 && ers[0].start == 0) {\n                var midStr = beforeStr.substr(ers[0].start + ers[0].length || 0);\n                if (StringUtility.isNullOrWhitespace(midStr.replace(',', ' '))) {\n                    valid = true;\n                }\n            }\n\n            if (!valid) {\n                ers = this.config.dateExtractor.extract(afterStr);\n                if (ers.length === 0 || ers[0].length !== afterStr.length) {\n                    if (ers.length > 0 && ers[0].start + ers[0].length == afterStr.length) {\n                        var midStr = afterStr.substr(0, ers[0].start || 0);\n                        if (StringUtility.isNullOrWhitespace(midStr.replace(',', ' '))) {\n                            valid = true;\n                        }\n                    }\n                }\n                else {\n                    valid = true;\n                }\n\n                if (!valid) {\n                    return result;\n                }\n            }\n        }\n\n        var hasSpecificTimePeriod = false;\n        if (timePeriodErs.length > 0)\n        {\n            var TimePr = this.config.timePeriodParser.parse(timePeriodErs[0]);\n            if (TimePr != null)\n            {\n                var periodFuture = TimePr.value.futureValue;\n                var periodPast = TimePr.value.pastValue;\n\n                if (periodFuture == periodPast)\n                {\n                    matched.beginHour = periodFuture.item1.getHours();\n                    matched.endHour = periodFuture.item2.getHours();\n                }\n                else\n                {\n                    if (periodFuture.item1.Hour >= matched.beginHour || periodFuture.item2.Hour <= matched.endHour)\n                    {\n                        matched.beginHour = periodFuture.item1.getHours();\n                        matched.endHour = periodFuture.item2.getHours();\n                    }\n                    else\n                    {\n                        matched.beginHour = periodPast.item1.getHours();\n                        matched.endHour = periodPast.item2.getHours();\n                    }\n                }\n                hasSpecificTimePeriod = true;\n            }\n        }\n\n        let pr = this.config.dateParser.parse(ers[0], referenceDate);\n        if (!pr) return result;\n\n        let futureDate: Date = pr.value.futureValue;\n        let pastDate: Date = pr.value.pastValue;\n\n\n        if (!hasSpecificTimePeriod) {\n            result.timex = pr.timexStr + matched.timeStr;\n        }\n        else {\n            result.timex = `${pr.timexStr}T${matched.beginHour},${pr.timexStr}T${matched.endHour},PT${matched.endHour - matched.beginHour}H`;\n        }\n\n        result.futureValue = [\n            DateUtils.safeCreateFromMinValue(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), matched.beginHour, 0, 0),\n            DateUtils.safeCreateFromMinValue(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), matched.endHour, matched.endMin, matched.endMin),\n        ];\n        result.pastValue = [\n            DateUtils.safeCreateFromMinValue(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), matched.beginHour, 0, 0),\n            DateUtils.safeCreateFromMinValue(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), matched.endHour, matched.endMin, matched.endMin),\n        ];\n        result.success = true;\n        return result;\n    }\n\n    protected parseDuration(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n\n        // for rest of datetime, it will be handled in next function\n        let restOfDateTimeMatch = RegExpUtility.getMatches(this.config.restOfDateTimeRegex, source);\n        if (restOfDateTimeMatch.length)\n        {\n            return result;\n        }\n\n        let ers = this.config.durationExtractor.extract(source, referenceDate);\n        if (!ers || ers.length !== 1) return result;\n\n        let pr = this.config.durationParser.parse(ers[0], referenceDate);\n        if (!pr) return result;\n\n        let beforeStr = source.substr(0, pr.start).trim();\n        let durationResult: DateTimeResolutionResult = pr.value;\n        let swiftSecond = 0;\n        let mod: string;\n        if (Number.isFinite(durationResult.pastValue) && Number.isFinite(durationResult.futureValue)) {\n            swiftSecond = Math.round(durationResult.futureValue);\n        }\n        let beginTime = new Date(referenceDate);\n        let endTime = new Date(referenceDate);\n        let prefixMatch = RegExpUtility.getMatches(this.config.pastRegex, beforeStr).pop();\n        if (prefixMatch && prefixMatch.length === beforeStr.length) {\n            mod = TimeTypeConstants.beforeMod;\n            beginTime.setSeconds(referenceDate.getSeconds() - swiftSecond);\n        }\n        prefixMatch = RegExpUtility.getMatches(this.config.futureRegex, beforeStr).pop();\n        if (prefixMatch && prefixMatch.length === beforeStr.length) {\n            mod = TimeTypeConstants.afterMod;\n            endTime = new Date(beginTime);\n            endTime.setSeconds(beginTime.getSeconds() + swiftSecond);\n        }\n\n        let luisDateBegin = FormatUtil.luisDateFromDate(beginTime);\n        let luisTimeBegin = FormatUtil.luisTimeFromDate(beginTime);\n        let luisDateEnd = FormatUtil.luisDateFromDate(endTime);\n        let luisTimeEnd = FormatUtil.luisTimeFromDate(endTime);\n\n        result.timex = `(${luisDateBegin}T${luisTimeBegin},${luisDateEnd}T${luisTimeEnd},${durationResult.timex})`;\n        result.futureValue = [beginTime, endTime];\n        result.pastValue = [beginTime, endTime];\n        result.success = true;\n\n        if (mod) {\n            pr.value.mod = mod;\n        }\n        result.subDateTimeEntities = [pr];\n\n        return result;\n    }\n\n    private isFloat(value: any): boolean {\n        return Number.isFinite(value) && !Number.isInteger(value);\n    }\n\n    private parseRelativeUnit(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.relativeTimeUnitRegex, source).pop();\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.restOfDateTimeRegex, source).pop();\n        }\n        if (!match) return result;\n\n        let srcUnit = match.groups('unit').value;\n        let unitStr = this.config.unitMap.get(srcUnit);\n\n        if (!unitStr) return result;\n        let swift = 1;\n        let prefixMatch = RegExpUtility.getMatches(this.config.pastRegex, source).pop();\n        if (prefixMatch) swift = -1;\n\n        let beginTime = new Date(referenceDate);\n        let endTime = new Date(referenceDate);\n        let ptTimex = '';\n\n        switch (unitStr) {\n            case 'D':\n                endTime = DateUtils.safeCreateFromMinValue(beginTime.getFullYear(), beginTime.getMonth(),beginTime.getDate());\n                endTime.setDate(endTime.getDate() + 1);\n                endTime.setSeconds(endTime.getSeconds() - 1);\n                ptTimex = `PT${DateUtils.totalSeconds(endTime, beginTime)}S`;\n            break;\n            case 'H':\n                beginTime.setHours(beginTime.getHours() + (swift > 0 ? 0 : swift));\n                endTime.setHours(endTime.getHours() + (swift > 0 ? swift : 0));\n                ptTimex = `PT1H`;\n            break;\n            case 'M':\n                beginTime.setMinutes(beginTime.getMinutes() + (swift > 0 ? 0 : swift));\n                endTime.setMinutes(endTime.getMinutes() + (swift > 0 ? swift : 0));\n                ptTimex = `PT1M`;\n            break;\n            case 'S':\n                beginTime.setSeconds(beginTime.getSeconds() + (swift > 0 ? 0 : swift));\n                endTime.setSeconds(endTime.getSeconds() + (swift > 0 ? swift : 0));\n                ptTimex = `PT1S`;\n            break;\n            default: return result;\n        }\n\n        let luisDateBegin = FormatUtil.luisDateFromDate(beginTime);\n        let luisTimeBegin = FormatUtil.luisTimeFromDate(beginTime);\n        let luisDateEnd = FormatUtil.luisDateFromDate(endTime);\n        let luisTimeEnd = FormatUtil.luisTimeFromDate(endTime);\n\n        result.timex = `(${luisDateBegin}T${luisTimeBegin},${luisDateEnd}T${luisTimeEnd},${ptTimex})`;\n        result.futureValue = [beginTime, endTime];\n        result.pastValue = [beginTime, endTime];\n        result.success = true;\n        return result;\n    }\n}\n","import { IExtractor, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { BaseNumberExtractor, BaseNumberParser } from \"recognizers-text-number\"\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { Token, DateTimeResolutionResult, StringMap } from \"./utilities\";\nimport { IDateTimeExtractor } from \"./baseDateTime\";\n\nexport interface IDurationExtractorConfiguration {\n    allRegex: RegExp,\n    halfRegex: RegExp,\n    followedUnit: RegExp,\n    numberCombinedWithUnit: RegExp,\n    anUnitRegex: RegExp,\n    inExactNumberUnitRegex: RegExp,\n    suffixAndRegex: RegExp,\n    relativeDurationUnitRegex: RegExp,\n    cardinalExtractor: BaseNumberExtractor\n}\n\nexport class BaseDurationExtractor implements IDateTimeExtractor {\n    private readonly extractorName = Constants.SYS_DATETIME_DURATION;\n    private readonly config: IDurationExtractorConfiguration;\n\n    constructor(config: IDurationExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let baseTokens = this.numberWithUnit(source);\n        let tokens: Array<Token> = new Array<Token>()\n        .concat(baseTokens)\n        .concat(this.numberWithUnitAndSuffix(source, baseTokens))\n        .concat(this.implicitDuration(source))\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    private numberWithUnit(source: string): Array<Token> {\n        return this.config.cardinalExtractor.extract(source)\n        .map(o => {\n            let afterString = source.substring(o.start + o.length);\n            let match = RegExpUtility.getMatches(this.config.followedUnit, afterString)[0];\n            if (match && match.index === 0) {\n                return new Token(o.start | 0, o.start + o.length + match.length);\n            }\n        }).filter(o => o !== undefined)\n        .concat(this.getTokensFromRegex(this.config.numberCombinedWithUnit, source))\n        .concat(this.getTokensFromRegex(this.config.anUnitRegex, source))\n        .concat(this.getTokensFromRegex(this.config.inExactNumberUnitRegex, source));\n    }\n\n    private numberWithUnitAndSuffix(source: string, ers: Token[]): Array<Token> {\n        return ers.map(o => {\n            let afterString = source.substring(o.start + o.length);\n            let match = RegExpUtility.getMatches(this.config.suffixAndRegex, afterString)[0];\n            if (match && match.index === 0) {\n                return new Token(o.start | 0, o.start + o.length + match.length);\n            }\n        });\n    }\n\n    private implicitDuration(source: string): Array<Token> {\n        // handle \"all day\", \"all year\"\n        return this.getTokensFromRegex(this.config.allRegex, source)\n            // handle \"half day\", \"half year\"\n            .concat(this.getTokensFromRegex(this.config.halfRegex, source))\n            // handle \"next day\", \"last year\"\n            .concat(this.getTokensFromRegex(this.config.relativeDurationUnitRegex, source));\n    }\n\n    private getTokensFromRegex(regexp: RegExp, source: string): Array<Token> {\n        return RegExpUtility.getMatches(regexp, source)\n        .map(o => new Token(o.index, o.index + o.length));\n    }\n}\n\nexport interface IDurationParserConfiguration {\n    cardinalExtractor: BaseNumberExtractor\n    numberParser: BaseNumberParser\n    followedUnit: RegExp\n    suffixAndRegex: RegExp\n    numberCombinedWithUnit: RegExp\n    anUnitRegex: RegExp\n    allDateUnitRegex: RegExp\n    halfDateUnitRegex: RegExp\n    inExactNumberUnitRegex: RegExp\n    unitMap: ReadonlyMap<string, string>\n    unitValueMap: ReadonlyMap<string, number>\n    doubleNumbers: ReadonlyMap<string, number>\n}\n\nexport class BaseDurationParser implements IDateTimeParser {\n    protected readonly parserName = Constants.SYS_DATETIME_DURATION;\n    protected readonly config: IDurationParserConfiguration;\n\n    constructor(config: IDurationParserConfiguration) {\n        this.config = config;\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let source = extractorResult.text.toLowerCase();\n            let innerResult = this.parseNumberWithUnit(source, referenceDate);\n            if (!innerResult.success) {\n                innerResult = this.parseImplicitDuration(source, referenceDate);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.DURATION] = innerResult.futureValue.toString();\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.DURATION] = innerResult.pastValue.toString();\n                resultValue = innerResult;\n            }\n        }\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n\n    private parseNumberWithUnit(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = this.parseNumberSpaceUnit(trimmedSource);\n        if (!result.success) {\n            result = this.parseNumberCombinedUnit(trimmedSource);\n        }\n        if (!result.success) {\n            result = this.parseAnUnit(trimmedSource);\n        }\n        if (!result.success) {\n            result = this.parseInExactNumberUnit(trimmedSource);\n        }\n        return result;\n    }\n\n    private parseImplicitDuration(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        // handle \"all day\" \"all year\"\n        let result = this.getResultFromRegex(this.config.allDateUnitRegex, trimmedSource, 1);\n        // handle \"half day\", \"half year\"\n        if (!result.success) {\n            result = this.getResultFromRegex(this.config.halfDateUnitRegex, trimmedSource, 0.5);\n        }\n        // handle single duration unit, it is filtered in the extraction that there is a relative word in advance\n        if (!result.success) {\n            result = this.getResultFromRegex(this.config.followedUnit, trimmedSource, 1)\n        }\n        return result;\n    }\n\n    private getResultFromRegex(regex: RegExp, source: string, num: number): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(regex, source).pop();\n        if (!match) return result;\n\n        let sourceUnit = match.groups('unit').value;\n        if (!this.config.unitMap.has(sourceUnit)) return result;\n\n        let unitStr = this.config.unitMap.get(sourceUnit);\n        result.timex = `P${this.isLessThanDay(unitStr) ? 'T' : ''}${num}${unitStr[0]}`;\n        result.futureValue = num * this.config.unitValueMap.get(sourceUnit);\n        result.pastValue = result.futureValue;\n        result.success = true;\n        return result;\n    }\n\n    private parseNumberSpaceUnit(source: string): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let suffixStr = source;\n        let ers = this.config.cardinalExtractor.extract(source);\n        if (ers && ers.length === 1) {\n            let er = ers[0];\n            let sourceUnit = '';\n            let pr = this.config.numberParser.parse(er);\n            let noNumStr = source.substr(er.start + er.length).trim().toLowerCase();\n            let match = RegExpUtility.getMatches(this.config.followedUnit, noNumStr).pop();\n            if (match) {\n                sourceUnit = match.groups('unit').value;\n                suffixStr = match.groups('suffix').value;\n            }\n            if (this.config.unitMap.has(sourceUnit)) {\n                let num = Number.parseFloat(pr.value) + this.parseNumberWithUnitAndSuffix(suffixStr);\n                let unitStr = this.config.unitMap.get(sourceUnit);\n\n                result.timex = `P${this.isLessThanDay(unitStr) ? 'T' : ''}${num}${unitStr[0]}`;\n                result.futureValue = num * this.config.unitValueMap.get(sourceUnit);\n                result.pastValue = result.futureValue;\n                result.success = true;\n                return result;\n            }\n        }\n        return result;\n    }\n\n    private parseNumberWithUnitAndSuffix(source: string): number {\n        let match = RegExpUtility.getMatches(this.config.suffixAndRegex, source).pop();\n        if (match) {\n            let numStr = match.groups('suffix_num').value;\n            if (this.config.doubleNumbers.has(numStr)) {\n                return this.config.doubleNumbers.get(numStr);\n            }\n        }\n        return 0;\n    }\n\n    private parseNumberCombinedUnit(source: string): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.numberCombinedWithUnit, source).pop();\n        if (!match) return result;\n        let num = Number.parseFloat(match.groups('num').value) + this.parseNumberWithUnitAndSuffix(source);\n\n        let sourceUnit = match.groups('unit').value;\n        if (this.config.unitMap.has(sourceUnit)) {\n            let unitStr = this.config.unitMap.get(sourceUnit);\n            if (num > 1000 && (unitStr === 'Y' || unitStr === 'MON' || unitStr === 'W')) {\n                return result;\n            }\n\n            result.timex = `P${this.isLessThanDay(unitStr) ? 'T' : ''}${num}${unitStr[0]}`;\n            result.futureValue = num * this.config.unitValueMap.get(sourceUnit);\n            result.pastValue = result.futureValue;\n            result.success = true;\n            return result;\n        }\n        return result;\n    }\n\n    private parseAnUnit(source: string): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.anUnitRegex, source).pop();\n        if (!match) {\n            match = RegExpUtility.getMatches(this.config.halfDateUnitRegex, source).pop();\n        }\n        if (!match) return result;\n        let num = StringUtility.isNullOrEmpty(match.groups('half').value) ? 1 : 0.5\n        num += this.parseNumberWithUnitAndSuffix(source);\n        let numStr = num.toString();\n\n        let sourceUnit = match.groups('unit').value;\n        if (this.config.unitMap.has(sourceUnit)) {\n            let unitStr = this.config.unitMap.get(sourceUnit);\n\n            result.timex = `P${this.isLessThanDay(unitStr) ? 'T' : ''}${num}${unitStr[0]}`;\n            result.futureValue = num * this.config.unitValueMap.get(sourceUnit);\n            result.pastValue = result.futureValue;\n            result.success = true;\n            return result;\n        }\n        return result;\n    }\n\n    private parseInExactNumberUnit(source: string): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.inExactNumberUnitRegex, source).pop();\n        if (!match) return result;\n\n        // set the inexact number \"few\", \"some\" to 3 for now\n        let num = 3;\n        let numStr = num.toString();\n\n        let sourceUnit = match.groups('unit').value;\n        if (this.config.unitMap.has(sourceUnit)) {\n            let unitStr = this.config.unitMap.get(sourceUnit);\n            if (num > 1000 && (unitStr === 'Y' || unitStr === 'MON' || unitStr === 'W')) {\n                return result;\n            }\n\n            result.timex = `P${this.isLessThanDay(unitStr) ? 'T' : ''}${num}${unitStr[0]}`;\n            result.futureValue = num * this.config.unitValueMap.get(sourceUnit);\n            result.pastValue = result.futureValue;\n            result.success = true;\n            return result;\n        }\n        return result;\n    }\n\n    protected isLessThanDay(source: string): boolean {\n        return (source === 'S') || (source === 'M') || (source === 'H')\n    }\n}\n","import { IDurationExtractorConfiguration, IDurationParserConfiguration } from \"../baseDuration\"\nimport { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, BaseNumberParser, EnglishCardinalExtractor } from \"recognizers-text-number\"\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\"\n\nexport class EnglishDurationExtractorConfiguration implements IDurationExtractorConfiguration {\n    readonly allRegex: RegExp\n    readonly halfRegex: RegExp\n    readonly followedUnit: RegExp\n    readonly numberCombinedWithUnit: RegExp\n    readonly anUnitRegex: RegExp\n    readonly inExactNumberUnitRegex: RegExp\n    readonly suffixAndRegex: RegExp\n    readonly relativeDurationUnitRegex: RegExp\n    readonly cardinalExtractor: EnglishCardinalExtractor\n\n    constructor() {\n        this.allRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AllRegex);\n        this.halfRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.HalfRegex);\n        this.followedUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.DurationFollowedUnit);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.NumberCombinedWithDurationUnit);\n        this.anUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AnUnitRegex);\n        this.inExactNumberUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.InExactNumberUnitRegex);\n        this.suffixAndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SuffixAndRegex);\n        this.relativeDurationUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RelativeDurationUnitRegex)\n        this.cardinalExtractor = new EnglishCardinalExtractor();\n    }\n}\n\nexport class EnglishDurationParserConfiguration implements IDurationParserConfiguration {\n    readonly cardinalExtractor: BaseNumberExtractor\n    readonly numberParser: BaseNumberParser\n    readonly followedUnit: RegExp\n    readonly suffixAndRegex: RegExp\n    readonly numberCombinedWithUnit: RegExp\n    readonly anUnitRegex: RegExp\n    readonly allDateUnitRegex: RegExp\n    readonly halfDateUnitRegex: RegExp\n    readonly inExactNumberUnitRegex: RegExp\n    readonly unitMap: ReadonlyMap<string, string>\n    readonly unitValueMap: ReadonlyMap<string, number>\n    readonly doubleNumbers: ReadonlyMap<string, number>\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.followedUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.DurationFollowedUnit);\n        this.suffixAndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SuffixAndRegex);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.NumberCombinedWithDurationUnit);\n        this.anUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AnUnitRegex);\n        this.allDateUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AllRegex);\n        this.halfDateUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.HalfRegex);\n        this.inExactNumberUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.InExactNumberUnitRegex);\n        this.unitMap = config.unitMap;\n        this.unitValueMap = config.unitValueMap;\n        this.doubleNumbers = config.doubleNumbers;\n    }\n}\n","import { ITimeExtractorConfiguration, ITimeParserConfiguration } from \"../baseTime\"\nimport { RegExpUtility } from \"recognizers-text\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\"\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\n\nexport class EnglishTimeExtractorConfiguration implements ITimeExtractorConfiguration {\n    public static timeRegexList: RegExp[] = [\n        // (three min past)? seven|7|(seven thirty) pm\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex1, \"gis\"),\n        // (three min past)? 3:00(:00)? (pm)?\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex2, \"gis\"),\n        // (three min past)? 3.00 (pm)?\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex3, \"gis\"),\n        // (three min past) (five thirty|seven|7|7:00(:00)?) (pm)? (in the night)\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex4, \"gis\"),\n        // (three min past) (five thirty|seven|7|7:00(:00)?) (pm)?\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex5, \"gis\"),\n        // (five thirty|seven|7|7:00(:00)?) (pm)? (in the night)\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex6, \"gis\"),\n        // (in the night) at (five thirty|seven|7|7:00(:00)?) (pm)?\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex7, \"gis\"),\n        // (in the night) (five thirty|seven|7|7:00(:00)?) (pm)?\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex8, \"gis\"),\n        RegExpUtility.getSafeRegExp(EnglishDateTime.TimeRegex9, \"gis\"),\n        // 340pm\n        RegExpUtility.getSafeRegExp(EnglishDateTime.ConnectNumRegex, \"gis\")\n    ];\n    public static atRegex: RegExp = RegExpUtility.getSafeRegExp(EnglishDateTime.AtRegex, \"gis\");\n    public static lessThanOneHour: RegExp = RegExpUtility.getSafeRegExp(EnglishDateTime.LessThanOneHour, \"gis\");\n    public static timeSuffix: RegExp = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeSuffix, \"gis\");\n    public static timeSuffixFull: RegExp = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeSuffixFull, \"gis\");\n    public static ishRegex: RegExp = RegExpUtility.getSafeRegExp(EnglishDateTime.IshRegex, \"gis\");\n\n    readonly timeRegexList: RegExp[];\n    readonly atRegex: RegExp;\n    readonly ishRegex: RegExp;\n\n    constructor() {\n        this.timeRegexList = EnglishTimeExtractorConfiguration.timeRegexList;\n        this.atRegex = EnglishTimeExtractorConfiguration.atRegex;\n        this.ishRegex = EnglishTimeExtractorConfiguration.ishRegex;\n    }\n}\n\nexport class EnglishTimeParserConfiguration implements ITimeParserConfiguration {\n    readonly timeTokenPrefix: string;\n    readonly atRegex: RegExp\n    readonly timeRegexes: RegExp[];\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly lunchRegex: RegExp;\n    readonly timeSuffixFull: RegExp;\n    readonly nightRegex: RegExp;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.timeTokenPrefix = EnglishDateTime.TimeTokenPrefix;\n        this.atRegex = EnglishTimeExtractorConfiguration.atRegex;\n        this.timeRegexes = EnglishTimeExtractorConfiguration.timeRegexList;\n        this.numbers = config.numbers;\n        this.lunchRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.LunchRegex);\n        this.timeSuffixFull = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeSuffixFull);\n        this.nightRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NightRegex);\n        this.utilityConfiguration = config.utilityConfiguration;\n    }\n\n    public adjustByPrefix(prefix: string, adjust: { hour: number, min: number, hasMin: boolean }) {\n        let deltaMin = 0;\n        let trimmedPrefix = prefix.trim().toLowerCase();\n\n        if (trimmedPrefix.startsWith(\"half\")) {\n            deltaMin = 30;\n        }\n        else if (trimmedPrefix.startsWith(\"a quarter\") || trimmedPrefix.startsWith(\"quarter\")) {\n            deltaMin = 15;\n        }\n        else if (trimmedPrefix.startsWith(\"three quarter\")) {\n            deltaMin = 45;\n        }\n        else {\n            let match = RegExpUtility.getMatches(EnglishTimeExtractorConfiguration.lessThanOneHour, trimmedPrefix);\n            let minStr = match[0].groups(\"deltamin\").value;\n            if (minStr) {\n                deltaMin = Number.parseInt(minStr, 10);\n            }\n            else {\n                minStr = match[0].groups(\"deltaminnum\").value.toLowerCase();\n                deltaMin = this.numbers.get(minStr);\n            }\n        }\n\n        if (trimmedPrefix.endsWith(\"to\")) {\n            deltaMin = -deltaMin;\n        }\n\n        adjust.min += deltaMin;\n        if (adjust.min < 0) {\n            adjust.min += 60;\n            adjust.hour -= 1;\n        }\n        adjust.hasMin = true;\n    }\n\n    public adjustBySuffix(suffix: string, adjust: { hour: number, min: number, hasMin: boolean, hasAm: boolean, hasPm: boolean }) {\n        let trimmedSuffix = suffix.trim().toLowerCase();\n        let deltaHour = 0;\n        let matches = RegExpUtility.getMatches(EnglishTimeExtractorConfiguration.timeSuffixFull, trimmedSuffix);\n        if (matches.length > 0 && matches[0].index === 0 && matches[0].length === trimmedSuffix.length) {\n            let oclockStr = matches[0].groups(\"oclock\").value;\n            if (!oclockStr) {\n                let amStr = matches[0].groups(\"am\").value;\n                if (amStr) {\n                    if (adjust.hour >= 12) {\n                        deltaHour = -12;\n                    } else {\n                        adjust.hasAm = true;\n                    }\n                }\n\n                let pmStr = matches[0].groups(\"pm\").value;\n                if (pmStr) {\n                    if (adjust.hour < 12) {\n                        deltaHour = 12;\n                    }\n\n                    if (RegExpUtility.getMatches(this.lunchRegex, pmStr).length > 0) {\n                        // for hour>=10, <12\n                        if (adjust.hour >= 10 && adjust.hour <= 12) {\n                            deltaHour = 0;\n                            if (adjust.hour === 12) {\n                                adjust.hasPm = true;\n                            } else {\n                                adjust.hasAm = true;\n                            }\n                        } else {\n                            adjust.hasPm = true;\n                        }\n                    } else if (RegExpUtility.getMatches(this.nightRegex, pmStr).length > 0) {\n                        // for hour <=3 or == 12, we treat it as am, for example 1 in the night (midnight) == 1am\n                        if (adjust.hour <= 3 || adjust.hour === 12) {\n                            if (adjust.hour === 12) {\n                                adjust.hour = 0;\n                            }\n                            deltaHour = 0;\n                            adjust.hasAm = true;\n                        } else {\n                            adjust.hasPm = true;\n                        }\n                    } else {\n                        adjust.hasPm = true;\n                    }\n                }\n            }\n        }\n\n        adjust.hour = (adjust.hour + deltaHour) % 24;\n    }\n}\n","import { IDateExtractorConfiguration, IDateParserConfiguration } from \"../baseDate\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberParser, BaseNumberExtractor, EnglishOrdinalExtractor, EnglishIntegerExtractor, EnglishNumberParserConfiguration } from \"recognizers-text-number\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { EnglishCommonDateTimeParserConfiguration, EnglishDateTimeUtilityConfiguration } from \"./baseConfiguration\"\nimport { EnglishDurationExtractorConfiguration } from \"./durationConfiguration\"\nimport { IDateTimeParser } from \"../parsers\"\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class EnglishDateExtractorConfiguration implements IDateExtractorConfiguration {\n    readonly dateRegexList: RegExp[];\n    readonly implicitDateList: RegExp[];\n    readonly monthEnd: RegExp;\n    readonly ofMonth: RegExp;\n    readonly dateUnitRegex: RegExp;\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly dayOfWeek: ReadonlyMap<string, number>;\n    readonly ordinalExtractor: BaseNumberExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor() {\n        this.dateRegexList = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor1),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor2),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor3),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor4),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor5),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor6),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor7),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor8),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor9),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractorA),\n        ];\n        this.implicitDateList = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.OnRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.RelaxedOnRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.SpecialDayRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.ThisRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.LastDateRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.NextDateRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.SingleWeekDayRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.WeekDayOfMonthRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.SpecialDate),\n        ];\n        this.monthEnd = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthEnd);\n        this.ofMonth = RegExpUtility.getSafeRegExp(EnglishDateTime.OfMonth);\n        this.dateUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.DateUnitRegex);\n        this.forTheRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.ForTheRegex);\n        this.weekDayAndDayOfMothRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekDayAndDayOfMothRegex);\n        this.relativeMonthRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RelativeMonthRegex);\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekDayRegex);\n        this.dayOfWeek = EnglishDateTime.DayOfWeek;\n        this.ordinalExtractor = new EnglishOrdinalExtractor();\n        this.integerExtractor = new EnglishIntegerExtractor();\n        this.numberParser = new BaseNumberParser(new EnglishNumberParserConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new EnglishDurationExtractorConfiguration());\n        this.utilityConfiguration = new EnglishDateTimeUtilityConfiguration();\n    }\n}\n\nexport class EnglishDateParserConfiguration implements IDateParserConfiguration {\n    readonly ordinalExtractor: BaseNumberExtractor\n    readonly integerExtractor: BaseNumberExtractor\n    readonly cardinalExtractor: BaseNumberExtractor\n    readonly durationExtractor: IDateTimeExtractor\n    readonly numberParser: BaseNumberParser\n    readonly durationParser: IDateTimeParser\n    readonly monthOfYear: ReadonlyMap<string, number>\n    readonly dayOfMonth: ReadonlyMap<string, number>\n    readonly dayOfWeek: ReadonlyMap<string, number>\n    readonly unitMap: ReadonlyMap<string, string>\n    readonly cardinalMap: ReadonlyMap<string, number>\n    readonly dateRegex: RegExp[]\n    readonly onRegex: RegExp\n    readonly specialDayRegex: RegExp\n    readonly nextRegex: RegExp\n    readonly unitRegex: RegExp\n    readonly monthRegex: RegExp\n    readonly weekDayRegex: RegExp\n    readonly lastRegex: RegExp\n    readonly thisRegex: RegExp\n    readonly weekDayOfMonthRegex: RegExp\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration\n    readonly dateTokenPrefix: string\n\n    // The following three regexes only used in this configuration\n    // They are not used in the base parser, therefore they are not extracted\n    // If the spanish date parser need the same regexes, they should be extracted\n    static readonly relativeDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RelativeDayRegex);\n    static readonly nextPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NextPrefixRegex);\n    static readonly pastPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PastPrefixRegex);\n\n    constructor(config: EnglishCommonDateTimeParserConfiguration) {\n        this.ordinalExtractor = config.ordinalExtractor;\n        this.integerExtractor = config.integerExtractor;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.durationExtractor = config.durationExtractor;\n        this.numberParser = config.numberParser;\n        this.durationParser = config.durationParser;\n        this.monthOfYear = config.monthOfYear;\n        this.dayOfMonth = config.dayOfMonth;\n        this.dayOfWeek = config.dayOfWeek;\n        this.unitMap = config.unitMap;\n        this.cardinalMap = config.cardinalMap;\n        this.dateRegex = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor1),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor2),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor3),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor4),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor5),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor6),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor7),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor8),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractor9),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.DateExtractorA),\n        ];\n        this.onRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.OnRegex);\n        this.specialDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SpecialDayRegex);\n        this.nextRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NextDateRegex);\n        this.unitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.DateUnitRegex);\n        this.monthRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthRegex);\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekDayRegex);\n        this.lastRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.LastDateRegex);\n        this.thisRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.ThisRegex);\n        this.weekDayOfMonthRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekDayOfMonthRegex);\n        this.forTheRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.ForTheRegex);\n        this.weekDayAndDayOfMothRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekDayAndDayOfMothRegex);\n        this.relativeMonthRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RelativeMonthRegex);\n        this.utilityConfiguration = config.utilityConfiguration;\n        this.dateTokenPrefix = EnglishDateTime.DateTokenPrefix;\n    }\n\n    getSwiftDay(source: string): number {\n        let trimmedText = source.trim().toLowerCase();\n        let swift = 0;\n        let matches = RegExpUtility.getMatches(EnglishDateParserConfiguration.relativeDayRegex, source);\n        if (trimmedText === \"today\") {\n            swift = 0;\n        } else if (trimmedText === \"tomorrow\" || trimmedText === \"tmr\") {\n            swift = 1;\n        } else if (trimmedText === \"yesterday\") {\n            swift = -1;\n        } else if (trimmedText.endsWith(\"day after tomorrow\") ||\n            trimmedText.endsWith(\"day after tmr\")) {\n            swift = 2;\n        } else if (trimmedText.endsWith(\"day before yesterday\")) {\n            swift = -2;\n        } else if (matches.length) {\n            swift = this.getSwift(source);\n        }\n        return swift;\n    }\n\n    getSwiftMonth(source: string): number {\n        return this.getSwift(source);\n    }\n\n    getSwift(source: string): number {\n        let trimmedText = source.trim().toLowerCase();\n        let swift = 0;\n        let nextPrefixMatches = RegExpUtility.getMatches(EnglishDateParserConfiguration.nextPrefixRegex, trimmedText);\n        let pastPrefixMatches = RegExpUtility.getMatches(EnglishDateParserConfiguration.pastPrefixRegex, trimmedText);\n        if (nextPrefixMatches.length) {\n            swift = 1;\n        } else if (pastPrefixMatches.length) {\n            swift = -1;\n        }\n        return swift;\n    }\n\n    isCardinalLast(source: string): boolean {\n        let trimmedText = source.trim().toLowerCase();\n        return trimmedText === \"last\";\n    }\n}\n","import { IDateTimeExtractor, IDateTimeExtractorConfiguration, IDateTimeParserConfiguration } from \"../baseDateTime\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, BaseNumberParser } from \"recognizers-text-number\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { ICommonDateTimeParserConfiguration, IDateTimeParser } from \"../parsers\"\nimport { EnglishDateTimeUtilityConfiguration } from \"./baseConfiguration\"\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { EnglishDurationExtractorConfiguration } from \"./durationConfiguration\"\nimport { EnglishDateExtractorConfiguration } from \"./dateConfiguration\"\nimport { EnglishTimeExtractorConfiguration } from \"./timeConfiguration\"\n\nexport class EnglishDateTimeExtractorConfiguration implements IDateTimeExtractorConfiguration {\n    readonly datePointExtractor: IDateTimeExtractor\n    readonly timePointExtractor: IDateTimeExtractor\n    readonly durationExtractor: IDateTimeExtractor\n    readonly suffixRegex: RegExp\n    readonly nowRegex: RegExp\n    readonly timeOfTodayAfterRegex: RegExp\n    readonly simpleTimeOfTodayAfterRegex: RegExp\n    readonly nightRegex: RegExp\n    readonly timeOfTodayBeforeRegex: RegExp\n    readonly simpleTimeOfTodayBeforeRegex: RegExp\n    readonly theEndOfRegex: RegExp\n    readonly unitRegex: RegExp\n    readonly prepositionRegex: RegExp\n    readonly connectorRegex: RegExp\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration\n\n    constructor() {\n        this.datePointExtractor = new BaseDateExtractor(new EnglishDateExtractorConfiguration());\n        this.timePointExtractor = new BaseTimeExtractor(new EnglishTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new EnglishDurationExtractorConfiguration());\n        this.suffixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SuffixRegex);\n        this.nowRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NowRegex);\n        this.timeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeOfTodayAfterRegex);\n        this.simpleTimeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SimpleTimeOfTodayAfterRegex);\n        this.nightRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeOfDayRegex);\n        this.timeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeOfTodayBeforeRegex);\n        this.simpleTimeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SimpleTimeOfTodayBeforeRegex);\n        this.theEndOfRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TheEndOfRegex);\n        this.unitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeUnitRegex);\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PrepositionRegex);\n        this.connectorRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.ConnectorRegex);\n        this.utilityConfiguration = new EnglishDateTimeUtilityConfiguration();\n    }\n            \n    isConnectorToken(source: string): boolean {\n        return (StringUtility.isNullOrWhitespace(source)\n                    || RegExpUtility.getMatches(this.connectorRegex, source).length > 0\n                    || RegExpUtility.getMatches(this.prepositionRegex, source).length > 0);\n            }\n}\n  \n\nexport class EnglishDateTimeParserConfiguration implements IDateTimeParserConfiguration {\n    tokenBeforeDate: string;\n    tokenBeforeTime: string;\n    dateExtractor: IDateTimeExtractor;\n    timeExtractor: IDateTimeExtractor;\n    dateParser: BaseDateParser;\n    timeParser: BaseTimeParser;\n    cardinalExtractor: BaseNumberExtractor;\n    numberParser: BaseNumberParser;\n    durationExtractor: IDateTimeExtractor;\n    durationParser: IDateTimeParser;\n    nowRegex: RegExp;\n    amTimeRegex: RegExp;\n    pmTimeRegex: RegExp;\n    simpleTimeOfTodayAfterRegex: RegExp;\n    simpleTimeOfTodayBeforeRegex: RegExp;\n    specificTimeOfDayRegex: RegExp;\n    theEndOfRegex: RegExp;\n    unitRegex: RegExp;\n    unitMap: ReadonlyMap<string, string>;\n    numbers: ReadonlyMap<string, number>;\n    utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.tokenBeforeDate = EnglishDateTime.TokenBeforeDate;\n        this.tokenBeforeTime = EnglishDateTime.TokenBeforeTime;\n        this.dateExtractor = config.dateExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateParser = config.dateParser;\n        this.timeParser = config.timeParser;\n        this.nowRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NowRegex);\n        this.amTimeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AMTimeRegex);\n        this.pmTimeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PMTimeRegex);\n        this.simpleTimeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SimpleTimeOfTodayAfterRegex);\n        this.simpleTimeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SimpleTimeOfTodayBeforeRegex);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SpecificTimeOfDayRegex);\n        this.theEndOfRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TheEndOfRegex);\n        this.unitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeUnitRegex);\n        this.numbers = config.numbers;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.durationExtractor = config.durationExtractor;\n        this.durationParser = config.durationParser;\n        this.unitMap = config.unitMap;\n        this.utilityConfiguration = config.utilityConfiguration;\n    }\n\n    public getHour(text: string, hour: number): number {\n        let trimmedText = text.trim().toLowerCase();\n        let result = hour;\n        if (trimmedText.endsWith(\"morning\") && hour >= 12) {\n            result -= 12;\n        }\n        else if (!trimmedText.endsWith(\"morning\") && hour < 12) {\n            result += 12;\n        }\n        return result;\n    }\n\n    public getMatchedNowTimex(text: string): { matched: boolean, timex: string } {\n        let trimmedText = text.trim().toLowerCase();\n        let timex: string;\n        if (trimmedText.endsWith(\"now\")) {\n            timex = \"PRESENT_REF\";\n        }\n        else if (trimmedText === \"recently\" || trimmedText === \"previously\") {\n            timex = \"PAST_REF\";\n        }\n        else if (trimmedText === \"as soon as possible\" || trimmedText === \"asap\") {\n            timex = \"FUTURE_REF\";\n        }\n        else {\n            timex = null;\n            return { matched: false, timex: timex };\n        }\n        return { matched: true, timex: timex };\n    }\n\n    public getSwiftDay(text: string): number {\n        let trimmedText = text.trim().toLowerCase();\n        let swift = 0;\n        if (trimmedText.startsWith(\"next\")) {\n            swift = 1;\n        }\n        else if (trimmedText.startsWith(\"last\")) {\n            swift = -1;\n        }\n        return swift;\n    }\n\n    public haveAmbiguousToken(text: string, matchedText: string): boolean { return false; }\n}\n","import { ITimePeriodExtractorConfiguration, ITimePeriodParserConfiguration } from \"../baseTimePeriod\"\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\"\nimport { IDateTimeUtilityConfiguration } from \"../utilities\"\nimport { EnglishTimeExtractorConfiguration } from \"./timeConfiguration\"\nimport { IDateTimeExtractor } from \"../baseDateTime\"\n\nexport class EnglishTimePeriodExtractorConfiguration implements ITimePeriodExtractorConfiguration {\n    readonly simpleCasesRegex: RegExp[];\n    readonly tillRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly singleTimeExtractor: IDateTimeExtractor;\n\n    constructor() {\n        this.simpleCasesRegex = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumFromTo, \"gis\"),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumBetweenAnd, \"gis\")\n        ];\n        this.tillRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TillRegex, \"gis\");\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeOfDayRegex, \"gis\");\n        this.singleTimeExtractor = new BaseTimeExtractor(new EnglishTimeExtractorConfiguration());\n    }\n\n    public getFromTokenIndex(source: string): { matched: boolean, index: number } {\n        let index = -1;\n        if (source.endsWith(\"from\")) {\n            index = source.lastIndexOf(\"from\");\n            return { matched: true, index: index };\n        }\n        return { matched: false, index: index };\n    }\n\n    public getBetweenTokenIndex(source: string): { matched: boolean, index: number } {\n        let index = -1;\n        if (source.endsWith(\"between\")) {\n            index = source.lastIndexOf(\"between\");\n            return { matched: true, index: index };\n        }\n        return { matched: false, index: index };\n    }\n\n    public hasConnectorToken(source: string): boolean {\n        return source === \"and\";\n    }\n}\n\nexport class EnglishTimePeriodParserConfiguration implements ITimePeriodParserConfiguration {\n    timeExtractor: IDateTimeExtractor;\n    timeParser: BaseTimeParser;\n    pureNumberFromToRegex: RegExp;\n    pureNumberBetweenAndRegex: RegExp;\n    timeOfDayRegex: RegExp;\n    numbers: ReadonlyMap<string, number>;\n    utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.timeExtractor = config.timeExtractor;\n        this.timeParser = config.timeParser;\n        this.pureNumberFromToRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumFromTo);\n        this.pureNumberBetweenAndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumBetweenAnd);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeOfDayRegex);\n        this.numbers = config.numbers;\n        this.utilityConfiguration = config.utilityConfiguration;\n    }\n\n    getMatchedTimexRange(text: string): {\n        matched: boolean, timex: string, beginHour: number, endHour: number, endMin: number\n    } {\n        let trimmedText = text.trim().toLowerCase();\n        if (trimmedText.endsWith(\"s\")) {\n            trimmedText = trimmedText.substring(0, trimmedText.length - 1);\n        }\n        let result = {\n            matched: false,\n            timex: '',\n            beginHour: 0,\n            endHour: 0,\n            endMin: 0\n        };\n        if (trimmedText.endsWith(\"morning\")) {\n            result.timex = \"TMO\";\n            result.beginHour = 8;\n            result.endHour = 12;\n        }\n        else if (trimmedText.endsWith(\"afternoon\")) {\n            result.timex = \"TAF\";\n            result.beginHour = 12;\n            result.endHour = 16;\n        }\n        else if (trimmedText.endsWith(\"evening\")) {\n            result.timex = \"TEV\";\n            result.beginHour = 16;\n            result.endHour = 20;\n        }\n        else if (trimmedText === \"daytime\") {\n            result.timex = \"TDT\";\n            result.beginHour = 8;\n            result.endHour = 18;\n        }\n        else if (trimmedText.endsWith(\"night\")) {\n            result.timex = \"TNI\";\n            result.beginHour = 20;\n            result.endHour = 23;\n            result.endMin = 59;\n        }\n        else {\n            result.timex = null;\n            result.matched = false;\n            return result;\n        }\n\n        result.matched = true;\n        return result;\n    }\n}\n","import { IDatePeriodExtractorConfiguration, IDatePeriodParserConfiguration } from \"../baseDatePeriod\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, EnglishIntegerExtractor } from \"recognizers-text-number\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { EnglishCommonDateTimeParserConfiguration } from \"./baseConfiguration\"\nimport { EnglishDurationExtractorConfiguration } from \"./durationConfiguration\"\nimport { EnglishDateExtractorConfiguration } from \"./dateConfiguration\"\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class EnglishDatePeriodExtractorConfiguration implements IDatePeriodExtractorConfiguration {\n    readonly simpleCasesRegexes: RegExp[]\n    readonly tillRegex: RegExp\n    readonly followedUnit: RegExp\n    readonly numberCombinedWithUnit: RegExp\n    readonly pastRegex: RegExp\n    readonly futureRegex: RegExp\n    readonly weekOfRegex: RegExp\n    readonly monthOfRegex: RegExp\n    readonly dateUnitRegex: RegExp\n    readonly inConnectorRegex: RegExp\n    readonly rangeUnitRegex: RegExp\n    readonly datePointExtractor: IDateTimeExtractor\n    readonly integerExtractor: BaseNumberExtractor\n    readonly durationExtractor: IDateTimeExtractor\n    readonly rangeConnectorRegex: RegExp\n\n    constructor() {\n        this.simpleCasesRegexes = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.SimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.BetweenRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.OneWordPeriodRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.MonthWithYear),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.MonthNumWithYear),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.YearRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.WeekOfMonthRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.WeekOfYearRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.MonthFrontBetweenRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.MonthFrontSimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.QuarterRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.QuarterRegexYearFront),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.SeasonRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.WhichWeekRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.RestOfDateRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.LaterEarlyPeriodRegex),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.WeekWithWeekDayRangeRegex)\n        ];\n        this.tillRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TillRegex);\n        this.followedUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.FollowedDateUnit);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.NumberCombinedWithDateUnit);\n        this.pastRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PastPrefixRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NextPrefixRegex);\n        this.weekOfRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekOfRegex);\n        this.monthOfRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthOfRegex);\n        this.dateUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.DateUnitRegex);\n        this.inConnectorRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.InConnectorRegex);\n        this.rangeUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RangeUnitRegex);\n        this.datePointExtractor = new BaseDateExtractor(new EnglishDateExtractorConfiguration());\n        this.integerExtractor = new EnglishIntegerExtractor();\n        this.durationExtractor = new BaseDurationExtractor(new EnglishDurationExtractorConfiguration());\n        this.rangeConnectorRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RangeConnectorRegex);\n    }\n\n    getFromTokenIndex(source: string) {\n        let result = { matched: false, index: -1 };\n        if (source.endsWith(\"from\")) {\n            result.index = source.lastIndexOf(\"from\");\n            result.matched = true;\n        }\n        return result;\n    };\n\n    getBetweenTokenIndex(source: string) {\n        let result = { matched: false, index: -1 };\n        if (source.endsWith(\"between\")) {\n            result.index = source.lastIndexOf(\"between\");\n            result.matched = true;\n        }\n        return result;\n    };\n\n    hasConnectorToken(source: string): boolean {\n        let match = RegExpUtility.getMatches(this.rangeConnectorRegex, source).pop();\n        return match && match.length === source.length;\n    };\n}\n\nexport class EnglishDatePeriodParserConfiguration implements IDatePeriodParserConfiguration {\n    readonly dateExtractor: IDateTimeExtractor\n    readonly dateParser: BaseDateParser\n    readonly durationExtractor: IDateTimeExtractor\n    readonly durationParser: BaseDurationParser\n    readonly monthFrontBetweenRegex: RegExp\n    readonly betweenRegex: RegExp\n    readonly monthFrontSimpleCasesRegex: RegExp\n    readonly simpleCasesRegex: RegExp\n    readonly oneWordPeriodRegex: RegExp\n    readonly monthWithYear: RegExp\n    readonly monthNumWithYear: RegExp\n    readonly yearRegex: RegExp\n    readonly pastRegex: RegExp\n    readonly futureRegex: RegExp\n    readonly inConnectorRegex: RegExp\n    readonly weekOfMonthRegex: RegExp\n    readonly weekOfYearRegex: RegExp\n    readonly quarterRegex: RegExp\n    readonly quarterRegexYearFront: RegExp\n    readonly seasonRegex: RegExp\n    readonly weekOfRegex: RegExp\n    readonly monthOfRegex: RegExp\n    readonly whichWeekRegex: RegExp\n    readonly nextPrefixRegex: RegExp\n    readonly pastPrefixRegex: RegExp\n    readonly thisPrefixRegex: RegExp\n    readonly restOfDateRegex : RegExp\n    readonly laterEarlyPeriodRegex: RegExp\n    readonly weekWithWeekDayRangeRegex: RegExp\n    readonly tokenBeforeDate: string\n    readonly dayOfMonth: ReadonlyMap<string, number>\n    readonly monthOfYear: ReadonlyMap<string, number>\n    readonly cardinalMap: ReadonlyMap<string, number>\n    readonly seasonMap: ReadonlyMap<string, string>\n    readonly unitMap: ReadonlyMap<string, string>\n    \n    constructor(config: EnglishCommonDateTimeParserConfiguration) {\n        this.dateExtractor = config.dateExtractor;\n        this.dateParser = config.dateParser;\n        this.durationExtractor = config.durationExtractor;\n        this.durationParser = config.durationParser;\n        this.monthFrontBetweenRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthFrontBetweenRegex);\n        this.betweenRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.BetweenRegex);\n        this.monthFrontSimpleCasesRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthFrontSimpleCasesRegex);\n        this.simpleCasesRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SimpleCasesRegex);\n        this.oneWordPeriodRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.OneWordPeriodRegex);\n        this.monthWithYear = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthWithYear);\n        this.monthNumWithYear = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthNumWithYear);\n        this.yearRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.YearRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PastPrefixRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NextPrefixRegex);\n        this.inConnectorRegex = config.utilityConfiguration.inConnectorRegex;\n        this.weekOfMonthRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekOfMonthRegex);\n        this.weekOfYearRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekOfYearRegex);\n        this.quarterRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.QuarterRegex);\n        this.quarterRegexYearFront = RegExpUtility.getSafeRegExp(EnglishDateTime.QuarterRegexYearFront);\n        this.seasonRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SeasonRegex);\n        this.weekOfRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekOfRegex);\n        this.monthOfRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.MonthOfRegex);\n        this.whichWeekRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WhichWeekRegex);\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NextPrefixRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PastPrefixRegex);\n        this.thisPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.ThisPrefixRegex);\n        this.restOfDateRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RestOfDateRegex);\n        this.laterEarlyPeriodRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.LaterEarlyPeriodRegex);\n        this.weekWithWeekDayRangeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.WeekWithWeekDayRangeRegex);\n        this.tokenBeforeDate = EnglishDateTime.TokenBeforeDate;\n        this.dayOfMonth = config.dayOfMonth;\n        this.monthOfYear = config.monthOfYear;\n        this.cardinalMap = config.cardinalMap;\n        this.seasonMap = config.seasonMap;\n        this.unitMap = config.unitMap;\n    }\n\n    getSwiftDayOrMonth(source: string): number {\n        let trimmedSource = source.trim().toLowerCase();\n        let swift = 0;\n        if (RegExpUtility.getMatches(this.nextPrefixRegex, trimmedSource).length > 0) {\n            swift = 1;\n        } else if (RegExpUtility.getMatches(this.pastPrefixRegex, trimmedSource).length > 0) {\n            swift = -1;\n        }\n        return swift;\n    }\n\n    getSwiftYear(source: string): number {\n        let trimmedSource = source.trim().toLowerCase();\n        let swift = -10;\n        if (RegExpUtility.getMatches(this.nextPrefixRegex, trimmedSource).length > 0) {\n            swift = 1;\n        } else if (RegExpUtility.getMatches(this.pastPrefixRegex, trimmedSource).length > 0) {\n            swift = -1;\n        } else if (RegExpUtility.getMatches(this.thisPrefixRegex, trimmedSource).length > 0) {\n            swift = 0;\n        }\n        return swift;\n    }\n\n    isFuture(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return (trimmedSource.startsWith('this') || trimmedSource.startsWith('next'));\n    }\n\n    isYearToDate(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource === 'year to date';\n    }\n\n    isMonthToDate(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource === 'month to date';\n    }\n\n    isWeekOnly(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('week');\n    }\n\n    isWeekend(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('weekend');\n    }\n\n    isMonthOnly(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('month');\n    }\n\n    isYearOnly(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('year');\n    }\n\n    isLastCardinal(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource === 'last';\n    }\n}\n","import { IExtractor } from \"recognizers-text\";\nimport { IDateTimePeriodExtractorConfiguration, IDateTimePeriodParserConfiguration } from \"../baseDateTimePeriod\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseTimePeriodExtractor } from \"../baseTimePeriod\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { RegExpUtility } from \"recognizers-text\";\nimport { EnglishCardinalExtractor } from \"recognizers-text-number\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { EnglishCommonDateTimeParserConfiguration } from \"./baseConfiguration\"\nimport { EnglishDurationExtractorConfiguration } from \"./durationConfiguration\"\nimport { EnglishTimeExtractorConfiguration } from \"./timeConfiguration\"\nimport { EnglishDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\"\nimport { EnglishDateExtractorConfiguration } from \"./dateConfiguration\"\nimport { EnglishTimePeriodExtractorConfiguration } from \"../english/timePeriodConfiguration\";\nimport { IDateTimeParser } from \"../parsers\"\n\nexport class EnglishDateTimePeriodExtractorConfiguration implements IDateTimePeriodExtractorConfiguration {\n    readonly cardinalExtractor: EnglishCardinalExtractor\n    readonly singleDateExtractor: IDateTimeExtractor\n    readonly singleTimeExtractor: IDateTimeExtractor\n    readonly singleDateTimeExtractor: IDateTimeExtractor\n    readonly durationExtractor: IDateTimeExtractor\n    readonly timePeriodExtractor: IDateTimeExtractor\n    readonly simpleCasesRegexes: RegExp[]\n    readonly prepositionRegex: RegExp\n    readonly tillRegex: RegExp\n    readonly specificTimeOfDayRegex: RegExp\n    readonly timeOfDayRegex: RegExp\n    readonly periodTimeOfDayWithDateRegex: RegExp\n    readonly followedUnit: RegExp\n    readonly numberCombinedWithUnit: RegExp\n    readonly timeUnitRegex: RegExp\n    readonly pastPrefixRegex: RegExp\n    readonly nextPrefixRegex: RegExp\n    readonly rangeConnectorRegex: RegExp\n    readonly relativeTimeUnitRegex: RegExp\n    readonly restOfDateTimeRegex: RegExp\n    readonly generalEndingRegex: RegExp\n    readonly middlePauseRegex: RegExp\n\n    constructor() {\n        this.cardinalExtractor = new EnglishCardinalExtractor();\n        this.singleDateExtractor = new BaseDateExtractor(new EnglishDateExtractorConfiguration());\n        this.singleTimeExtractor = new BaseTimeExtractor(new EnglishTimeExtractorConfiguration());\n        this.singleDateTimeExtractor = new BaseDateTimeExtractor(new EnglishDateTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new EnglishDurationExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new EnglishTimePeriodExtractorConfiguration())\n        this.simpleCasesRegexes = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumFromTo),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumBetweenAnd),\n        ]\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PrepositionRegex);\n        this.tillRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TillRegex);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PeriodSpecificTimeOfDayRegex);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PeriodTimeOfDayRegex);\n        this.periodTimeOfDayWithDateRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PeriodTimeOfDayWithDateRegex);\n        this.followedUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeFollowedUnit);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeNumberCombinedWithUnit);\n        this.timeUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.TimeUnitRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PastPrefixRegex);\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NextPrefixRegex);\n        this.rangeConnectorRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RangeConnectorRegex);\n        this.relativeTimeUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RelativeTimeUnitRegex);\n        this.restOfDateTimeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RestOfDateTimeRegex);\n        this.generalEndingRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.GeneralEndingRegex);\n        this.middlePauseRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.MiddlePauseRegex);\n    }\n\n    getFromTokenIndex(source: string) {\n        let result = { matched: false, index: -1 };\n        if (source.endsWith(\"from\")) {\n            result.index = source.lastIndexOf(\"from\");\n            result.matched = true;\n        }\n        return result;\n    };\n\n    getBetweenTokenIndex(source: string) {\n        let result = { matched: false, index: -1 };\n        if (source.endsWith(\"between\")) {\n            result.index = source.lastIndexOf(\"between\");\n            result.matched = true;\n        }\n        return result;\n    };\n\n    hasConnectorToken(source: string): boolean {\n        return RegExpUtility.getMatches(this.rangeConnectorRegex, source).length > 0;\n    };\n}\n\nexport class EnglishDateTimePeriodParserConfiguration implements IDateTimePeriodParserConfiguration {\n    readonly pureNumberFromToRegex: RegExp\n    readonly pureNumberBetweenAndRegex: RegExp\n    readonly periodTimeOfDayWithDateRegex: RegExp\n    readonly specificTimeOfDayRegex: RegExp\n    readonly pastRegex: RegExp\n    readonly futureRegex: RegExp\n    readonly relativeTimeUnitRegex: RegExp\n    readonly numbers: ReadonlyMap<string, number>\n    readonly unitMap: ReadonlyMap<string, string>\n    readonly dateExtractor: IDateTimeExtractor\n    readonly timePeriodExtractor: IDateTimeExtractor\n    readonly timeExtractor: IDateTimeExtractor\n    readonly dateTimeExtractor: IDateTimeExtractor\n    readonly durationExtractor: IDateTimeExtractor\n    readonly dateParser: BaseDateParser\n    readonly timeParser: BaseTimeParser\n    readonly dateTimeParser: BaseDateTimeParser\n    readonly timePeriodParser: IDateTimeParser\n    readonly durationParser: BaseDurationParser\n    readonly morningStartEndRegex: RegExp\n    readonly afternoonStartEndRegex: RegExp\n    readonly eveningStartEndRegex: RegExp\n    readonly nightStartEndRegex: RegExp\n    readonly restOfDateTimeRegex: RegExp\n\n    constructor(config: EnglishCommonDateTimeParserConfiguration) {\n        this.pureNumberFromToRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumFromTo);\n        this.pureNumberBetweenAndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PureNumBetweenAnd);\n        this.periodTimeOfDayWithDateRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PeriodTimeOfDayWithDateRegex);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SpecificTimeOfDayRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PastPrefixRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NextPrefixRegex);\n        this.relativeTimeUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RelativeTimeUnitRegex);\n        this.numbers = config.numbers;\n        this.unitMap = config.unitMap;\n        this.dateExtractor = config.dateExtractor;\n        this.timePeriodExtractor = config.timePeriodExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateTimeExtractor = config.dateTimeExtractor;\n        this.durationExtractor = config.durationExtractor;\n        this.dateParser = config.dateParser;\n        this.timeParser = config.timeParser;\n        this.dateTimeParser = config.dateTimeParser;\n        this.timePeriodParser = config.timePeriodParser;\n        this.durationParser = config.durationParser;\n        this.morningStartEndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.MorningStartEndRegex);\n        this.afternoonStartEndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AfternoonStartEndRegex);\n        this.eveningStartEndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.EveningStartEndRegex);\n        this.nightStartEndRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.NightStartEndRegex);\n        this.restOfDateTimeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RestOfDateTimeRegex);\n    }\n\n    getMatchedTimeRange(source: string): { timeStr: string, beginHour: number, endHour: number, endMin: number, success: boolean } {\n        let timeStr: string;\n        let beginHour = 0;\n        let endHour = 0;\n        let endMin = 0;\n        let success = false;\n        if (RegExpUtility.getMatches(this.morningStartEndRegex, source).length > 0) {\n            timeStr = 'TMO';\n            beginHour = 8;\n            endHour = 12;\n            success = true;\n        } else if (RegExpUtility.getMatches(this.afternoonStartEndRegex, source).length > 0) {\n            timeStr = 'TAF';\n            beginHour = 12;\n            endHour = 16;\n            success = true;\n        } else if (RegExpUtility.getMatches(this.eveningStartEndRegex, source).length > 0) {\n            timeStr = 'TEV';\n            beginHour = 16;\n            endHour = 20;\n            success = true;\n        } else if (RegExpUtility.getMatches(this.nightStartEndRegex, source).length > 0) {\n            timeStr = 'TNI';\n            beginHour = 20;\n            endHour = 23;\n            endMin = 59;\n            success = true;\n        }\n        return { timeStr: timeStr, beginHour: beginHour, endHour: endHour, endMin: endMin, success: success };\n    }\n\n    getSwiftPrefix(source: string): number {\n        let swift = 0;\n        if (source.startsWith('next')) swift = 1;\n        else if (source.startsWith('last')) swift = -1;\n        return swift;\n    }\n}\n","import { BaseTimeParser, ITimeParserConfiguration } from \"../baseTime\"\nimport { EnglishTimeExtractorConfiguration } from \"./timeConfiguration\"\nimport { DateTimeResolutionResult, FormatUtil } from \"../utilities\"\nimport { RegExpUtility } from \"recognizers-text\";\n\nexport class EnglishTimeParser extends BaseTimeParser {\n    constructor(configuration: ITimeParserConfiguration) {\n        super(configuration);\n    }\n\n    internalParse(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let innerResult = super.internalParse(text, referenceTime);\n        if (!innerResult.success) {\n            innerResult = this.parseIsh(text, referenceTime);\n        }\n        return innerResult;\n    }\n\n    // parse \"noonish\", \"11-ish\"\n    private parseIsh(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let trimmedText = text.toLowerCase().trim();\n\n        let matches = RegExpUtility.getMatches(EnglishTimeExtractorConfiguration.ishRegex, trimmedText);\n        if (matches.length > 0 && matches[0].length === trimmedText.length) {\n            let hourStr = matches[0].groups(\"hour\").value;\n            let hour = 12;\n            if (hourStr) {\n                hour = Number.parseInt(hourStr, 10);\n            }\n\n            ret.timex = \"T\" + FormatUtil.toString(hour, 2);\n            ret.futureValue =\n                ret.pastValue =\n                new Date(referenceTime.getFullYear(), referenceTime.getMonth(), referenceTime.getDate(), hour, 0, 0);\n            ret.success = true;\n            return ret;\n        }\n\n        return ret;\n    }\n}\n","import { RegExpUtility } from \"recognizers-text\";\nimport { EnglishCardinalExtractor, EnglishIntegerExtractor, EnglishOrdinalExtractor, BaseNumberParser, EnglishNumberParserConfiguration } from \"recognizers-text-number\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\"\nimport { BaseDateTime } from \"../../resources/baseDateTime\"\nimport { FormatUtil, DateTimeResolutionResult, IDateTimeUtilityConfiguration } from \"../utilities\"\nimport { BaseDateParserConfiguration } from \"../parsers\"\nimport { BaseDateExtractor, BaseDateParser} from \"../baseDate\"\nimport { BaseTimeExtractor} from \"../baseTime\"\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser} from \"../baseDatePeriod\"\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser} from \"../baseTimePeriod\"\nimport { BaseDateTimeExtractor, BaseDateTimeParser} from \"../baseDateTime\"\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser} from \"../baseDateTimePeriod\"\nimport { BaseDurationExtractor, BaseDurationParser} from \"../baseDuration\"\nimport { EnglishDurationExtractorConfiguration, EnglishDurationParserConfiguration } from \"./durationConfiguration\"\nimport { EnglishTimeExtractorConfiguration, EnglishTimeParserConfiguration } from \"./timeConfiguration\"\nimport { EnglishDateExtractorConfiguration, EnglishDateParserConfiguration } from \"./dateConfiguration\"\nimport { EnglishDateTimeExtractorConfiguration, EnglishDateTimeParserConfiguration } from \"./dateTimeConfiguration\"\nimport { EnglishTimePeriodExtractorConfiguration, EnglishTimePeriodParserConfiguration } from \"./timePeriodConfiguration\"\nimport { EnglishDatePeriodExtractorConfiguration, EnglishDatePeriodParserConfiguration } from \"./datePeriodConfiguration\"\nimport { EnglishDateTimePeriodExtractorConfiguration, EnglishDateTimePeriodParserConfiguration } from \"./dateTimePeriodConfiguration\"\nimport { EnglishTimeParser } from \"./parsers\"\n\nexport class EnglishDateTimeUtilityConfiguration implements IDateTimeUtilityConfiguration {\n    readonly agoRegex: RegExp;\n    readonly laterRegex: RegExp;\n    readonly inConnectorRegex: RegExp;\n    readonly rangeUnitRegex: RegExp;\n    readonly amDescRegex: RegExp;\n    readonly pmDescRegex: RegExp;\n    readonly amPmDescRegex: RegExp;\n\n    constructor() {\n        this.laterRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.LaterRegex);\n        this.agoRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AgoRegex);\n        this.inConnectorRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.InConnectorRegex);\n        this.rangeUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.RangeUnitRegex);\n        this.amDescRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AmDescRegex);\n        this.pmDescRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PmDescRegex);\n        this.amPmDescRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AmPmDescRegex);\n    }\n}\n\nexport class EnglishCommonDateTimeParserConfiguration extends BaseDateParserConfiguration {\n    constructor() {\n        super();\n        this.utilityConfiguration = new EnglishDateTimeUtilityConfiguration();\n        this.unitMap = EnglishDateTime.UnitMap;\n        this.unitValueMap = EnglishDateTime.UnitValueMap;\n        this.seasonMap = EnglishDateTime.SeasonMap;\n        this.cardinalMap = EnglishDateTime.CardinalMap;\n        this.dayOfWeek = EnglishDateTime.DayOfWeek;\n        this.monthOfYear = EnglishDateTime.MonthOfYear;\n        this.numbers = EnglishDateTime.Numbers;\n        this.doubleNumbers = EnglishDateTime.DoubleNumbers;\n        this.cardinalExtractor = new EnglishCardinalExtractor();\n        this.integerExtractor = new EnglishIntegerExtractor();\n        this.ordinalExtractor = new EnglishOrdinalExtractor();\n        this.dayOfMonth = new Map<string, number>([...BaseDateTime.DayOfMonthDictionary, ...EnglishDateTime.DayOfMonth]);\n        this.numberParser = new BaseNumberParser(new EnglishNumberParserConfiguration());\n        this.dateExtractor = new BaseDateExtractor(new EnglishDateExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new EnglishTimeExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new EnglishDateTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new EnglishDurationExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new EnglishDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new EnglishTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new EnglishDateTimePeriodExtractorConfiguration());\n        this.durationParser = new BaseDurationParser(new EnglishDurationParserConfiguration(this));\n        this.dateParser = new BaseDateParser(new EnglishDateParserConfiguration(this));\n        this.timeParser = new EnglishTimeParser(new EnglishTimeParserConfiguration(this));\n        this.dateTimeParser = new BaseDateTimeParser(new EnglishDateTimeParserConfiguration(this));\n        this.datePeriodParser = new BaseDatePeriodParser(new EnglishDatePeriodParserConfiguration(this));\n        this.timePeriodParser = new BaseTimePeriodParser(new EnglishTimePeriodParserConfiguration(this));\n        this.dateTimePeriodParser = new BaseDateTimePeriodParser(new EnglishDateTimePeriodParserConfiguration(this));\n    }\n}","import { IExtractor, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { BaseDurationExtractor, BaseDurationParser } from \"./baseDuration\"\nimport { BaseTimeExtractor, BaseTimeParser } from \"./baseTime\"\nimport { BaseDateExtractor, BaseDateParser } from \"./baseDate\"\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"./baseDatePeriod\"\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"./baseTimePeriod\"\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser } from \"./baseDateTime\"\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser} from \"./baseDateTimePeriod\"\nimport { Token, DateTimeResolutionResult, StringMap } from \"./utilities\";\n\nexport interface ISetExtractorConfiguration {\n    lastRegex: RegExp;\n    eachPrefixRegex: RegExp;\n    periodicRegex: RegExp;\n    eachUnitRegex: RegExp;\n    eachDayRegex: RegExp;\n    beforeEachDayRegex: RegExp;\n    setWeekDayRegex: RegExp;\n    setEachRegex: RegExp;\n    durationExtractor: IDateTimeExtractor;\n    timeExtractor: IDateTimeExtractor;\n    dateExtractor: IDateTimeExtractor;\n    dateTimeExtractor: IDateTimeExtractor;\n    datePeriodExtractor: IDateTimeExtractor;\n    timePeriodExtractor: IDateTimeExtractor;\n    dateTimePeriodExtractor: IDateTimeExtractor;\n}\n\nexport class BaseSetExtractor implements IDateTimeExtractor {\n    protected readonly extractorName = Constants.SYS_DATETIME_SET\n    protected readonly config: ISetExtractorConfiguration;\n\n    constructor(config: ISetExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n        .concat(this.matchEachUnit(source))\n        .concat(this.matchPeriodic(source))\n        .concat(this.matchEachDuration(source, referenceDate))\n        .concat(this.timeEveryday(source, referenceDate))\n        .concat(this.matchEach(this.config.dateExtractor, source, referenceDate))\n        .concat(this.matchEach(this.config.timeExtractor, source, referenceDate))\n        .concat(this.matchEach(this.config.dateTimeExtractor, source, referenceDate))\n        .concat(this.matchEach(this.config.datePeriodExtractor, source, referenceDate))\n        .concat(this.matchEach(this.config.timePeriodExtractor, source, referenceDate))\n        .concat(this.matchEach(this.config.dateTimePeriodExtractor, source, referenceDate))\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    protected matchEachUnit(source: string): Array<Token> {\n        let ret = [];\n        RegExpUtility.getMatches(this.config.eachUnitRegex, source).forEach(match => {\n            ret.push(new Token(match.index, match.index + match.length))\n        });\n        return ret;\n    }\n\n    protected matchPeriodic(source: string): Array<Token> {\n        let ret = [];\n        RegExpUtility.getMatches(this.config.periodicRegex, source).forEach(match => {\n            ret.push(new Token(match.index, match.index + match.length))\n        });\n        return ret;\n    }\n\n    protected matchEachDuration(source: string, refDate: Date): Array<Token> {\n        let ret = [];\n        this.config.durationExtractor.extract(source, refDate).forEach(er => {\n            if (RegExpUtility.getMatches(this.config.lastRegex, er.text).length > 0) return;\n            let beforeStr = source.substr(0, er.start);\n            let matches = RegExpUtility.getMatches(this.config.eachPrefixRegex, beforeStr);\n            if (matches && matches.length > 0) {\n                ret.push(new Token(matches[0].index, er.start + er.length))\n            }\n        });\n        return ret;\n    }\n\n    protected timeEveryday(source: string, refDate: Date): Array<Token> {\n        let ret = [];\n        this.config.timeExtractor.extract(source, refDate).forEach(er => {\n            let afterStr = source.substr(er.start + er.length);\n            if (StringUtility.isNullOrWhitespace(afterStr) && this.config.beforeEachDayRegex) {\n                let beforeStr = source.substr(0, er.start);\n                let beforeMatches = RegExpUtility.getMatches(this.config.beforeEachDayRegex, beforeStr);\n                if (beforeMatches && beforeMatches.length > 0) {\n                    ret.push(new Token(beforeMatches[0].index, er.start + er.length))\n                }\n            } else {\n                let afterMatches = RegExpUtility.getMatches(this.config.eachDayRegex, afterStr);\n                if (afterMatches && afterMatches.length > 0) {\n                    ret.push(new Token(er.start, er.start + er.length + afterMatches[0].length))\n                }\n            }\n        });\n        return ret;\n    }\n\n    private matchEach(extractor: IDateTimeExtractor, source: string, refDate: Date): Array<Token> {\n        let ret = [];\n        RegExpUtility.getMatches(this.config.setEachRegex, source).forEach(match => {\n            let trimmedSource = source.substr(0, match.index) + source.substr(match.index + match.length);\n            extractor.extract(trimmedSource, refDate).forEach(er => {\n                if (er.start <= match.index && (er.start + er.length) > match.index) {\n                    ret.push(new Token(er.start, er.start + match.length + er.length));\n                }\n            });\n        });\n        RegExpUtility.getMatches(this.config.setWeekDayRegex, source).forEach(match => {\n            let trimmedSource = source.substr(0, match.index) + match.groups('weekday').value + source.substr(match.index + match.length);\n            extractor.extract(trimmedSource, refDate).forEach(er => {\n                if (er.start <= match.index) {\n                    let length = er.length + 1;\n                    if (!StringUtility.isNullOrEmpty(match.groups('prefix').value)) {\n                        length += match.groups('prefix').value.length;\n                    }\n                    ret.push(new Token(er.start, er.start + length));\n                }\n            });\n        });\n        return ret;\n    }\n}\n\nexport interface ISetParserConfiguration {\n    durationExtractor: IDateTimeExtractor;\n    durationParser: BaseDurationParser;\n    timeExtractor: IDateTimeExtractor;\n    timeParser: BaseTimeParser;\n    dateExtractor: IDateTimeExtractor;\n    dateParser: BaseDateParser;\n    dateTimeExtractor: IDateTimeExtractor;\n    dateTimeParser: BaseDateTimeParser;\n    datePeriodExtractor: IDateTimeExtractor;\n    datePeriodParser: BaseDatePeriodParser;\n    timePeriodExtractor: IDateTimeExtractor;\n    timePeriodParser: BaseTimePeriodParser;\n    dateTimePeriodExtractor: IDateTimeExtractor;\n    dateTimePeriodParser: BaseDateTimePeriodParser;\n    unitMap: ReadonlyMap<string, string>;\n    eachPrefixRegex: RegExp;\n    periodicRegex: RegExp;\n    eachUnitRegex: RegExp;\n    eachDayRegex: RegExp;\n    setWeekDayRegex: RegExp;\n    setEachRegex: RegExp;\n    getMatchedDailyTimex(text: string): { matched: boolean, timex: string };\n    getMatchedUnitTimex(text: string): { matched: boolean, timex: string };\n}\n\nexport class BaseSetParser implements IDateTimeParser {\n    public static readonly ParserName = Constants.SYS_DATETIME_SET;\n    protected readonly config: ISetParserConfiguration;\n\n    constructor(configuration: ISetParserConfiguration) {\n        this.config = configuration;\n    }\n\n    parse(er: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let value = null;\n        if (er.type === BaseSetParser.ParserName) {\n            let innerResult = this.parseEachUnit(er.text);\n            if (!innerResult.success) {\n                innerResult = this.parseEachDuration(er.text, referenceDate);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parserTimeEveryday(er.text, referenceDate);\n            }\n\n            // NOTE: Please do not change the order of following function\n            // datetimeperiod>dateperiod>timeperiod>datetime>date>time\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.dateTimePeriodExtractor, this.config.dateTimePeriodParser, er.text, referenceDate);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.datePeriodExtractor, this.config.datePeriodParser, er.text, referenceDate);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.timePeriodExtractor, this.config.timePeriodParser, er.text, referenceDate);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.dateTimeExtractor, this.config.dateTimeParser, er.text, referenceDate);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.dateExtractor, this.config.dateParser, er.text, referenceDate);\n            }\n\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.timeExtractor, this.config.timeParser, er.text, referenceDate);\n            }\n\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.SET] = innerResult.futureValue;\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.SET] = innerResult.pastValue;\n\n                value = innerResult;\n            }\n        }\n\n        let ret = new DateTimeParseResult(er);\n        ret.value = value,\n        ret.timexStr = value === null ? \"\" : value.timex,\n        ret.resolutionStr = \"\"\n\n        return ret;\n    }\n\n    protected parseEachDuration(text: string, refDate: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let ers = this.config.durationExtractor.extract(text, refDate);\n        if (ers.length !== 1 || text.substring(ers[0].start + ers[0].length || 0)) {\n            return ret;\n        }\n\n        let beforeStr = text.substring(0, ers[0].start || 0);\n        let matches = RegExpUtility.getMatches(this.config.eachPrefixRegex, beforeStr);\n        if (matches.length) {\n            let pr = this.config.durationParser.parse(ers[0], new Date());\n            ret.timex = pr.timexStr;\n            ret.futureValue = ret.pastValue = \"Set: \" + pr.timexStr;\n            ret.success = true;\n            return ret;\n        }\n\n        return ret;\n    }\n\n    protected parseEachUnit(text: string): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        // handle \"daily\", \"weekly\"\n        let matches = RegExpUtility.getMatches(this.config.periodicRegex, text);\n        if (matches.length) {\n            let getMatchedDailyTimex = this.config.getMatchedDailyTimex(text);\n            if (!getMatchedDailyTimex.matched) {\n                return ret;\n            }\n\n            ret.timex = getMatchedDailyTimex.timex;\n            ret.futureValue = ret.pastValue = \"Set: \" + ret.timex;\n            ret.success = true;\n\n            return ret;\n        }\n\n        // handle \"each month\"\n        matches = RegExpUtility.getMatches(this.config.eachUnitRegex, text);\n        if (matches.length && matches[0].length === text.length) {\n            let sourceUnit = matches[0].groups(\"unit\").value;\n            if (sourceUnit && this.config.unitMap.has(sourceUnit)) {\n                let getMatchedUnitTimex = this.config.getMatchedUnitTimex(sourceUnit);\n                if (!getMatchedUnitTimex.matched) {\n                    return ret;\n                }\n\n                if (!StringUtility.isNullOrEmpty(matches[0].groups('other').value)) {\n                    getMatchedUnitTimex.timex = getMatchedUnitTimex.timex.replace('1', '2');\n                }\n\n                ret.timex = getMatchedUnitTimex.timex;\n                ret.futureValue = ret.pastValue = \"Set: \" + ret.timex;\n                ret.success = true;\n                return ret;\n            }\n        }\n\n        return ret;\n    }\n\n    protected parserTimeEveryday(text: string, refDate: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let ers = this.config.timeExtractor.extract(text, refDate);\n        if (ers.length !== 1) {\n            return ret;\n        }\n\n        let afterStr = text.replace(ers[0].text, \"\");\n        let matches = RegExpUtility.getMatches(this.config.eachDayRegex, afterStr);\n        if (matches.length) {\n            let pr = this.config.timeParser.parse(ers[0], new Date());\n            ret.timex = pr.timexStr;\n            ret.futureValue = ret.pastValue = \"Set: \" + ret.timex;\n            ret.success = true;\n            return ret;\n        }\n\n        return ret;\n    }\n\n    protected parseEach(extractor: IDateTimeExtractor, parser: IDateTimeParser, text: string, refDate: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let success = false;\n        let er: ExtractResult[];\n        let match = RegExpUtility.getMatches(this.config.setEachRegex, text).pop();\n        if (match) {\n            let trimmedText = text.substr(0, match.index) + text.substr(match.index + match.length);\n            er = extractor.extract(trimmedText, refDate);\n            if (er.length === 1 && er[0].length === trimmedText.length) {\n                success = true;\n            }\n        }\n        match = RegExpUtility.getMatches(this.config.setWeekDayRegex, text).pop();\n        if (match) {\n            let trimmedText = text.substr(0, match.index) + match.groups('weekday').value + text.substr(match.index + match.length);\n            er = extractor.extract(trimmedText, refDate);\n            if (er.length === 1 && er[0].length === trimmedText.length) {\n                success = true;\n            }\n        }\n        if (success) {\n            let pr = parser.parse(er[0]);\n            ret.timex = pr.timexStr;\n            ret.futureValue = `Set: ${pr.timexStr}`;\n            ret.pastValue = `Set: ${pr.timexStr}`;\n            ret.success = true;\n            return ret;\n        }\n        return ret;\n    }\n}","import { IExtractor, ExtractResult, RegExpUtility, Match } from \"recognizers-text\";\nimport { Constants, TimeTypeConstants } from \"./constants\";\nimport { Token, FormatUtil, DateTimeResolutionResult, DayOfWeek, DateUtils, StringMap } from \"./utilities\";\nimport { IDateTimeParser, DateTimeParseResult } from \"./parsers\"\nimport { BaseDateTime } from \"../resources/baseDateTime\";\nimport { IDateTimeExtractor } from \"./baseDateTime\";\n\nexport interface IHolidayExtractorConfiguration {\n    holidayRegexes: RegExp[]\n}\n\nexport class BaseHolidayExtractor implements IDateTimeExtractor {\n    private readonly extractorName = Constants.SYS_DATETIME_DATE\n    private readonly config: IHolidayExtractorConfiguration;\n\n    constructor(config: IHolidayExtractorConfiguration) {\n        this.config = config;\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n        \n        let tokens: Array<Token> = new Array<Token>()\n            .concat(this.holidayMatch(source))\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    private holidayMatch(source: string): Array<Token> {\n        let ret = [];\n        this.config.holidayRegexes.forEach(regex => {\n            RegExpUtility.getMatches(regex, source).forEach(match => {\n                ret.push(new Token(match.index, match.index + match.length))\n            });\n        });\n        return ret;\n    }\n}\n\nexport interface IHolidayParserConfiguration {\n    variableHolidaysTimexDictionary: ReadonlyMap<string, string>;\n    holidayFuncDictionary: ReadonlyMap<string, (year: number) => Date>;\n    holidayNames: ReadonlyMap<string, string[]>;\n    holidayRegexList: RegExp[];\n    getSwiftYear(text: string): number;\n    sanitizeHolidayToken(holiday: string): string;\n}\n\nexport class BaseHolidayParser implements IDateTimeParser {\n    public static readonly ParserName = Constants.SYS_DATETIME_DATE; // \"Date\";\n    protected readonly config: IHolidayParserConfiguration;\n\n    constructor(config: IHolidayParserConfiguration) {\n        this.config = config;\n    }\n\n    public parse(er: ExtractResult, referenceDate: Date): DateTimeParseResult {\n        if (!referenceDate) referenceDate = new Date();\n        let value = null;\n\n        if (er.type === BaseHolidayParser.ParserName) {\n            let innerResult = this.parseHolidayRegexMatch(er.text, referenceDate);\n\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.futureValue);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.pastValue);\n                value = innerResult;\n            }\n        }\n\n        let ret = new DateTimeParseResult(er);\n        ret.value = value;\n        ret.timexStr = value === null ? \"\" : value.timex;\n        ret.resolutionStr = \"\";\n\n        return ret;\n    }\n\n    protected parseHolidayRegexMatch(text: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedText = text.trim();\n        for (let regex of this.config.holidayRegexList) {\n            let offset = 0;\n            let matches = RegExpUtility.getMatches(regex, trimmedText);\n            if (matches.length && matches[0].index === offset && matches[0].length === trimmedText.length) {\n                // LUIS value string will be set in Match2Date method\n                let ret = this.match2Date(matches[0], referenceDate);\n                return ret;\n            }\n        }\n        return new DateTimeResolutionResult();\n    }\n\n    protected match2Date(match: Match, referenceDate: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n        let holidayStr = this.config.sanitizeHolidayToken(match.groups(\"holiday\").value.toLowerCase());\n\n        // get year (if exist)\n        let yearStr = match.groups(\"year\").value.toLowerCase();\n        let orderStr = match.groups(\"order\").value.toLowerCase();\n        let year: number;\n        let hasYear = false;\n\n        if (yearStr) {\n            year = parseInt(yearStr, 10);\n            hasYear = true;\n        }\n        else if (orderStr) {\n            let swift = this.config.getSwiftYear(orderStr);\n            if (swift < -1) {\n                return ret;\n            }\n            year = referenceDate.getFullYear() + swift;\n            hasYear = true;\n        }\n        else {\n            year = referenceDate.getFullYear();\n        }\n\n        let holidayKey: string;\n        for (holidayKey of this.config.holidayNames.keys()) {\n            if (this.config.holidayNames.get(holidayKey).indexOf(holidayStr) > -1) {\n                break;\n            }\n        }\n\n        if (holidayKey) {\n            let timexStr: string;\n            let value = referenceDate;\n            let func = this.config.holidayFuncDictionary.get(holidayKey);\n            if (func) {\n                value = func(year);\n                timexStr = this.config.variableHolidaysTimexDictionary.get(holidayKey);\n                if (!timexStr) {\n                    timexStr = `-${FormatUtil.toString(value.getMonth() + 1, 2)}-${FormatUtil.toString(value.getDate(), 2)}`;\n                }\n            }\n            else {\n                return ret;\n            }\n\n            if (value.getTime() === DateUtils.minValue().getTime()) {\n                ret.timex = '';\n                ret.futureValue = DateUtils.minValue();\n                ret.pastValue = DateUtils.minValue();\n                ret.success = true;\n                return ret;\n            }\n\n            if (hasYear) {\n                ret.timex = FormatUtil.toString(year, 4) + timexStr;\n                ret.futureValue = ret.pastValue = new Date(year, value.getMonth(), value.getDate());\n                ret.success = true;\n                return ret;\n            }\n\n            ret.timex = \"XXXX\" + timexStr;\n            ret.futureValue = this.getFutureValue(value, referenceDate, holidayKey);\n            ret.pastValue = this.getPastValue(value, referenceDate, holidayKey);\n            ret.success = true;\n\n            return ret;\n        }\n\n        return ret;\n    }\n\n    private getFutureValue(value: Date, referenceDate: Date, holiday: string): Date {\n        if (value < referenceDate) {\n            let func = this.config.holidayFuncDictionary.get(holiday);\n            if (func) {\n                return func(value.getFullYear() + 1);\n            }\n        }\n        return value;\n    }\n\n    private getPastValue(value: Date, referenceDate: Date, holiday: string): Date {\n        if (value >= referenceDate) {\n            let func = this.config.holidayFuncDictionary.get(holiday);\n            if (func) {\n                return func(value.getFullYear() - 1);\n            }\n        }\n        return value;\n    }\n}\n\nexport abstract class BaseHolidayParserConfiguration implements IHolidayParserConfiguration {\n    variableHolidaysTimexDictionary: ReadonlyMap<string, string>;\n    holidayFuncDictionary: ReadonlyMap<string, (year: number) => Date>;\n    holidayNames: ReadonlyMap<string, string[]>;\n    holidayRegexList: RegExp[];\n    abstract getSwiftYear(text: string): number;\n    abstract sanitizeHolidayToken(holiday: string): string;\n\n    constructor() {\n        this.variableHolidaysTimexDictionary = BaseDateTime.VariableHolidaysTimexDictionary;\n        this.holidayFuncDictionary = this.initHolidayFuncs();\n    }\n\n    // TODO auto-generate from YAML\n    protected initHolidayFuncs(): ReadonlyMap<string, (year: number) => Date> {\n        return new Map<string, (year: number) => Date>(\n            [\n                [\"fathers\", BaseHolidayParserConfiguration.FathersDay],\n                [\"mothers\", BaseHolidayParserConfiguration.MothersDay],\n                [\"thanksgivingday\", BaseHolidayParserConfiguration.ThanksgivingDay],\n                [\"thanksgiving\", BaseHolidayParserConfiguration.ThanksgivingDay],\n                [\"martinlutherking\", BaseHolidayParserConfiguration.MartinLutherKingDay],\n                [\"washingtonsbirthday\", BaseHolidayParserConfiguration.WashingtonsBirthday],\n                [\"canberra\", BaseHolidayParserConfiguration.CanberraDay],\n                [\"labour\", BaseHolidayParserConfiguration.LabourDay],\n                [\"columbus\", BaseHolidayParserConfiguration.ColumbusDay],\n                [\"memorial\", BaseHolidayParserConfiguration.MemorialDay]\n            ]);\n    }\n\n    // All months are zero-based (-1)\n    // TODO auto-generate from YAML\n    protected static MothersDay(year: number): Date { return new Date(year, 5 - 1, BaseHolidayParserConfiguration.getDay(year, 5 - 1, 1, DayOfWeek.Sunday)); }\n\n    protected static FathersDay(year: number): Date { return new Date(year, 6 - 1, BaseHolidayParserConfiguration.getDay(year, 6 - 1, 2, DayOfWeek.Sunday)); }\n\n    private static MartinLutherKingDay(year: number): Date { return new Date(year, 1 - 1, BaseHolidayParserConfiguration.getDay(year, 1 - 1, 2, DayOfWeek.Monday)); }\n\n    private static WashingtonsBirthday(year: number): Date { return new Date(year, 2 - 1, BaseHolidayParserConfiguration.getDay(year, 2 - 1, 2, DayOfWeek.Monday)); }\n\n    private static CanberraDay(year: number): Date { return new Date(year, 3 - 1, BaseHolidayParserConfiguration.getDay(year, 3 - 1, 0, DayOfWeek.Monday)); }\n\n    protected static MemorialDay(year: number): Date { return new Date(year, 5 - 1, BaseHolidayParserConfiguration.getLastDay(year, 5 - 1, DayOfWeek.Monday)); }\n\n    protected static LabourDay(year: number): Date { return new Date(year, 9 - 1, BaseHolidayParserConfiguration.getDay(year, 9 - 1, 0, DayOfWeek.Monday)); }\n\n    protected static ColumbusDay(year: number): Date { return new Date(year, 10 - 1, BaseHolidayParserConfiguration.getDay(year, 10 - 1, 1, DayOfWeek.Monday)); }\n\n    protected static ThanksgivingDay(year: number): Date { return new Date(year, 11 - 1, BaseHolidayParserConfiguration.getDay(year, 11 - 1, 3, DayOfWeek.Thursday)); }\n\n    protected static getDay(year: number, month: number, week: number, dayOfWeek: DayOfWeek): number {\n        let days = Array.apply(null, new Array(new Date(year, month, 0).getDate())).map(function (x, i) { return i + 1 });\n        days = days.filter(function (day) {\n            return new Date(year, month, day).getDay() === dayOfWeek;\n        });\n        return days[week];\n    }\n\n    protected static getLastDay(year: number, month: number, dayOfWeek: DayOfWeek): number {\n        let days = Array.apply(null, new Array(new Date(year, month, 0).getDate())).map(function (x, i) { return i + 1 });\n        days = days.filter(function (day) {\n            return new Date(year, month, day).getDay() === dayOfWeek;\n        });\n        return days[days.length - 1];\n    }\n}\n","import { ISetExtractorConfiguration, ISetParserConfiguration } from \"../baseSet\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { RegExpUtility } from \"recognizers-text\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\"\nimport { EnglishDurationExtractorConfiguration } from \"./durationConfiguration\"\nimport { EnglishTimeExtractorConfiguration } from \"./timeConfiguration\"\nimport { EnglishDateExtractorConfiguration } from \"./dateConfiguration\"\nimport { EnglishDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\"\nimport { EnglishTimePeriodExtractorConfiguration } from \"./timePeriodConfiguration\"\nimport { EnglishDatePeriodExtractorConfiguration } from \"./datePeriodConfiguration\"\nimport { EnglishDateTimePeriodExtractorConfiguration } from \"./dateTimePeriodConfiguration\"\n\nexport class EnglishSetExtractorConfiguration implements ISetExtractorConfiguration {\n    readonly lastRegex: RegExp;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly beforeEachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n\n    constructor() {\n        this.durationExtractor = new BaseDurationExtractor(new EnglishDurationExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new EnglishTimeExtractorConfiguration());\n        this.dateExtractor = new BaseDateExtractor(new EnglishDateExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new EnglishDateTimeExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new EnglishDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new EnglishTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new EnglishDateTimePeriodExtractorConfiguration());\n        this.lastRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SetLastRegex)\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.EachPrefixRegex)\n        this.periodicRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PeriodicRegex)\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.EachUnitRegex)\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.EachDayRegex)\n        this.setWeekDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SetWeekDayRegex)\n        this.setEachRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SetEachRegex)\n        this.beforeEachDayRegex = null;\n    }\n}\n\nexport class EnglishSetParserConfiguration implements ISetParserConfiguration {\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly timeParser: BaseTimeParser;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly datePeriodParser: BaseDatePeriodParser;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodParser: BaseTimePeriodParser;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.durationExtractor = config.durationExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateExtractor = config.dateExtractor;\n        this.dateTimeExtractor = config.dateTimeExtractor;\n        this.datePeriodExtractor = config.datePeriodExtractor;\n        this.timePeriodExtractor = config.timePeriodExtractor;\n        this.dateTimePeriodExtractor = config.dateTimePeriodExtractor;\n\n        this.durationParser = config.durationParser;\n        this.timeParser = config.timeParser;\n        this.dateParser = config.dateParser;\n        this.dateTimeParser = config.dateTimeParser;\n        this.datePeriodParser = config.datePeriodParser;\n        this.timePeriodParser = config.timePeriodParser;\n        this.dateTimePeriodParser = config.dateTimePeriodParser;\n        this.unitMap = config.unitMap;\n\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.EachPrefixRegex);\n        this.periodicRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PeriodicRegex);\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.EachUnitRegex);\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.EachDayRegex);\n        this.setWeekDayRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SetWeekDayRegex);\n        this.setEachRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SetEachRegex);\n    }\n\n    public getMatchedDailyTimex(text: string): { matched: boolean, timex: string } {\n        let timex = \"\";\n        let trimmedText = text.trim().toLowerCase();\n        if (trimmedText === \"daily\") {\n            timex = \"P1D\";\n        }\n        else if (trimmedText === \"weekly\") {\n            timex = \"P1W\";\n        }\n        else if (trimmedText === \"biweekly\") {\n            timex = \"P2W\";\n        }\n        else if (trimmedText === \"monthly\") {\n            timex = \"P1M\";\n        }\n        else if (trimmedText === \"yearly\" || trimmedText === \"annually\" || trimmedText === \"annual\") {\n            timex = \"P1Y\";\n        }\n        else {\n            timex = null;\n            return { matched: false, timex: timex };\n        }\n        return { matched: true, timex: timex };\n    }\n\n    public getMatchedUnitTimex(text: string): { matched: boolean, timex: string } {\n        let timex = \"\";\n        let trimmedText = text.trim().toLowerCase();\n        if (trimmedText === \"day\") {\n            timex = \"P1D\";\n        }\n        else if (trimmedText === \"week\") {\n            timex = \"P1W\";\n        }\n        else if (trimmedText === \"month\") {\n            timex = \"P1M\";\n        }\n        else if (trimmedText === \"year\") {\n            timex = \"P1Y\";\n        }\n        else {\n            timex = null;\n            return { matched: false, timex: timex };\n        }\n\n        return { matched: true, timex: timex };\n    }\n}\n","import { IHolidayExtractorConfiguration, BaseHolidayParserConfiguration } from \"../baseHoliday\"\nimport { RegExpUtility } from \"recognizers-text\";\nimport { DateUtils } from \"../utilities\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\n\nexport class EnglishHolidayExtractorConfiguration implements IHolidayExtractorConfiguration {\n    readonly holidayRegexes: RegExp[]\n            \n    constructor() {\n        this.holidayRegexes = [\n                    RegExpUtility.getSafeRegExp(EnglishDateTime.HolidayRegex1, \"gis\"),\n                    RegExpUtility.getSafeRegExp(EnglishDateTime.HolidayRegex2, \"gis\"),\n                    RegExpUtility.getSafeRegExp(EnglishDateTime.HolidayRegex3, \"gis\")\n                ];\n            }\n}\n   \nexport class EnglishHolidayParserConfiguration extends BaseHolidayParserConfiguration {\n    constructor() {\n        super();\n        this.holidayRegexList = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.HolidayRegex1, \"gis\"),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.HolidayRegex2, \"gis\"),\n            RegExpUtility.getSafeRegExp(EnglishDateTime.HolidayRegex3, \"gis\")\n        ];\n        this.holidayNames = EnglishDateTime.HolidayNames;\n        this.holidayFuncDictionary = this.initHolidayFuncs();\n    }\n\n    protected initHolidayFuncs(): ReadonlyMap<string, (year: number) => Date> {\n        return new Map<string, (year: number) => Date>(\n            [\n                ...super.initHolidayFuncs(),\n                [\"maosbirthday\", EnglishHolidayParserConfiguration.MaoBirthday],\n                [\"yuandan\", EnglishHolidayParserConfiguration.NewYear],\n                [\"teachersday\", EnglishHolidayParserConfiguration.TeacherDay],\n                [\"singleday\", EnglishHolidayParserConfiguration.SinglesDay],\n                [\"allsaintsday\", EnglishHolidayParserConfiguration.HalloweenDay],\n                [\"youthday\", EnglishHolidayParserConfiguration.YouthDay],\n                [\"childrenday\", EnglishHolidayParserConfiguration.ChildrenDay],\n                [\"femaleday\", EnglishHolidayParserConfiguration.FemaleDay],\n                [\"treeplantingday\", EnglishHolidayParserConfiguration.TreePlantDay],\n                [\"arborday\", EnglishHolidayParserConfiguration.TreePlantDay],\n                [\"girlsday\", EnglishHolidayParserConfiguration.GirlsDay],\n                [\"whiteloverday\", EnglishHolidayParserConfiguration.WhiteLoverDay],\n                [\"loverday\", EnglishHolidayParserConfiguration.ValentinesDay],\n                [\"christmas\", EnglishHolidayParserConfiguration.ChristmasDay],\n                [\"xmas\", EnglishHolidayParserConfiguration.ChristmasDay],\n                [\"newyear\", EnglishHolidayParserConfiguration.NewYear],\n                [\"newyearday\", EnglishHolidayParserConfiguration.NewYear],\n                [\"newyearsday\", EnglishHolidayParserConfiguration.NewYear],\n                [\"inaugurationday\", EnglishHolidayParserConfiguration.InaugurationDay],\n                [\"groundhougday\", EnglishHolidayParserConfiguration.GroundhogDay],\n                [\"valentinesday\", EnglishHolidayParserConfiguration.ValentinesDay],\n                [\"stpatrickday\", EnglishHolidayParserConfiguration.StPatrickDay],\n                [\"aprilfools\", EnglishHolidayParserConfiguration.FoolDay],\n                [\"stgeorgeday\", EnglishHolidayParserConfiguration.StGeorgeDay],\n                [\"mayday\", EnglishHolidayParserConfiguration.Mayday],\n                [\"cincodemayoday\", EnglishHolidayParserConfiguration.CincoDeMayoday],\n                [\"baptisteday\", EnglishHolidayParserConfiguration.BaptisteDay],\n                [\"usindependenceday\", EnglishHolidayParserConfiguration.UsaIndependenceDay],\n                [\"independenceday\", EnglishHolidayParserConfiguration.UsaIndependenceDay],\n                [\"bastilleday\", EnglishHolidayParserConfiguration.BastilleDay],\n                [\"halloweenday\", EnglishHolidayParserConfiguration.HalloweenDay],\n                [\"allhallowday\", EnglishHolidayParserConfiguration.AllHallowDay],\n                [\"allsoulsday\", EnglishHolidayParserConfiguration.AllSoulsday],\n                [\"guyfawkesday\", EnglishHolidayParserConfiguration.GuyFawkesDay],\n                [\"veteransday\", EnglishHolidayParserConfiguration.Veteransday],\n                [\"christmaseve\", EnglishHolidayParserConfiguration.ChristmasEve],\n                [\"newyeareve\", EnglishHolidayParserConfiguration.NewYearEve],\n                [\"easterday\", EnglishHolidayParserConfiguration.EasterDay]\n            ]);\n    }\n\n    // All JavaScript dates are zero-based (-1)\n    private static NewYear(year: number): Date { return new Date(year, 1 - 1, 1); }\n    private static NewYearEve(year: number): Date { return new Date(year, 12 - 1, 31); }\n    private static ChristmasDay(year: number): Date { return new Date(year, 12 - 1, 25); }\n    private static ChristmasEve(year: number): Date { return new Date(year, 12 - 1, 24); }\n    private static ValentinesDay(year: number): Date { return new Date(year, 2 - 1, 14); }\n    private static WhiteLoverDay(year: number): Date { return new Date(year, 3 - 1, 14); }\n    private static FoolDay(year: number): Date { return new Date(year, 4 - 1, 1); }\n    private static GirlsDay(year: number): Date { return new Date(year, 3 - 1, 7); }\n    private static TreePlantDay(year: number): Date { return new Date(year, 3 - 1, 12); }\n    private static FemaleDay(year: number): Date { return new Date(year, 3 - 1, 8); }\n    private static ChildrenDay(year: number): Date { return new Date(year, 6 - 1, 1); }\n    private static YouthDay(year: number): Date { return new Date(year, 5 - 1, 4); }\n    private static TeacherDay(year: number): Date { return new Date(year, 9 - 1, 10); }\n    private static SinglesDay(year: number): Date { return new Date(year, 11 - 1, 11); }\n    private static MaoBirthday(year: number): Date { return new Date(year, 12 - 1, 26); }\n    private static InaugurationDay(year: number): Date { return new Date(year, 1 - 1, 20); }\n    private static GroundhogDay(year: number): Date { return new Date(year, 2 - 1, 2); }\n    private static StPatrickDay(year: number): Date { return new Date(year, 3 - 1, 17); }\n    private static StGeorgeDay(year: number): Date { return new Date(year, 4 - 1, 23); }\n    private static Mayday(year: number): Date { return new Date(year, 5 - 1, 1); }\n    private static CincoDeMayoday(year: number): Date { return new Date(year, 5 - 1, 5); }\n    private static BaptisteDay(year: number): Date { return new Date(year, 6 - 1, 24); }\n    private static UsaIndependenceDay(year: number): Date { return new Date(year, 7 - 1, 4); }\n    private static BastilleDay(year: number): Date { return new Date(year, 7 - 1, 14); }\n    private static HalloweenDay(year: number): Date { return new Date(year, 10 - 1, 31); }\n    private static AllHallowDay(year: number): Date { return new Date(year, 11 - 1, 1); }\n    private static AllSoulsday(year: number): Date { return new Date(year, 11 - 1, 2); }\n    private static GuyFawkesDay(year: number): Date { return new Date(year, 11 - 1, 5); }\n    private static Veteransday(year: number): Date { return new Date(year, 11 - 1, 11); }\n    private static EasterDay(year: number): Date { return DateUtils.minValue(); }\n\n    public getSwiftYear(text: string): number {\n        let trimmedText = text.trim().toLowerCase();\n        let swift = -10;\n        if (trimmedText.startsWith(\"next\")) {\n            swift = 1;\n        }\n        else if (trimmedText.startsWith(\"last\")) {\n            swift = -1;\n        }\n        else if (trimmedText.startsWith(\"this\")) {\n            swift = 0;\n        }\n        return swift;\n    }\n\n    public sanitizeHolidayToken(holiday: string): string {\n        return holiday.replace(/[ ']/g, \"\");\n    }\n}","import { IMergedExtractorConfiguration, IMergedParserConfiguration } from \"../baseMerged\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseSetExtractor, BaseSetParser } from \"../baseSet\";\nimport { BaseHolidayExtractor, BaseHolidayParser } from \"../baseHoliday\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, EnglishIntegerExtractor } from \"recognizers-text-number\";\nimport { EnglishDateTime } from \"../../resources/englishDateTime\";\nimport { EnglishCommonDateTimeParserConfiguration } from \"./baseConfiguration\"\nimport { EnglishDurationExtractorConfiguration } from \"./durationConfiguration\"\nimport { EnglishTimeExtractorConfiguration } from \"./timeConfiguration\"\nimport { EnglishDateExtractorConfiguration } from \"./dateConfiguration\"\nimport { EnglishDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\"\nimport { EnglishTimePeriodExtractorConfiguration } from \"./timePeriodConfiguration\"\nimport { EnglishDatePeriodExtractorConfiguration } from \"./datePeriodConfiguration\"\nimport { EnglishDateTimePeriodExtractorConfiguration } from \"./dateTimePeriodConfiguration\"\nimport { EnglishSetExtractorConfiguration, EnglishSetParserConfiguration } from \"./setConfiguration\"\nimport { EnglishHolidayExtractorConfiguration, EnglishHolidayParserConfiguration } from \"./holidayConfiguration\"\n\nexport class EnglishMergedExtractorConfiguration implements IMergedExtractorConfiguration {\n    readonly dateExtractor: IDateTimeExtractor\n    readonly timeExtractor: IDateTimeExtractor\n    readonly dateTimeExtractor: IDateTimeExtractor\n    readonly datePeriodExtractor: IDateTimeExtractor\n    readonly timePeriodExtractor: IDateTimeExtractor\n    readonly dateTimePeriodExtractor: IDateTimeExtractor\n    readonly holidayExtractor: IDateTimeExtractor\n    readonly durationExtractor: IDateTimeExtractor\n    readonly setExtractor: IDateTimeExtractor\n    readonly integerExtractor: BaseNumberExtractor\n    readonly afterRegex: RegExp\n    readonly sinceRegex: RegExp\n    readonly beforeRegex: RegExp\n    readonly fromToRegex: RegExp\n    readonly singleAmbiguousMonthRegex: RegExp\n    readonly prepositionSuffixRegex: RegExp\n    readonly numberEndingPattern: RegExp\n    readonly filterWordRegexList: RegExp[]\n\n    constructor() {\n        this.dateExtractor = new BaseDateExtractor(new EnglishDateExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new EnglishTimeExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new EnglishDateTimeExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new EnglishDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new EnglishTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new EnglishDateTimePeriodExtractorConfiguration());\n        this.holidayExtractor = new BaseHolidayExtractor(new EnglishHolidayExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new EnglishDurationExtractorConfiguration());\n        this.setExtractor = new BaseSetExtractor(new EnglishSetExtractorConfiguration());\n        this.integerExtractor = new EnglishIntegerExtractor();\n        this.afterRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AfterRegex);\n        this.sinceRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SinceRegex);\n        this.beforeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.BeforeRegex);\n        this.fromToRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.FromToRegex);\n        this.singleAmbiguousMonthRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SingleAmbiguousMonthRegex);\n        this.prepositionSuffixRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.PrepositionSuffixRegex);\n        this.numberEndingPattern = RegExpUtility.getSafeRegExp(EnglishDateTime.NumberEndingPattern);\n        this.filterWordRegexList = [\n            RegExpUtility.getSafeRegExp(EnglishDateTime.OneOnOneRegex)\n        ];\n    }\n}\n\nexport class EnglishMergedParserConfiguration implements IMergedParserConfiguration {\n    readonly beforeRegex: RegExp\n    readonly afterRegex: RegExp\n    readonly sinceRegex: RegExp\n    readonly dateParser: BaseDateParser\n    readonly holidayParser: BaseHolidayParser\n    readonly timeParser: BaseTimeParser\n    readonly dateTimeParser: BaseDateTimeParser\n    readonly datePeriodParser: BaseDatePeriodParser\n    readonly timePeriodParser: BaseTimePeriodParser\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser\n    readonly durationParser: BaseDurationParser\n    readonly setParser: BaseSetParser\n\n    constructor(config: EnglishCommonDateTimeParserConfiguration) {\n        this.beforeRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.BeforeRegex);\n        this.afterRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.AfterRegex);\n        this.sinceRegex = RegExpUtility.getSafeRegExp(EnglishDateTime.SinceRegex);\n        this.holidayParser = new BaseHolidayParser(new EnglishHolidayParserConfiguration());\n        this.dateParser = config.dateParser;\n        this.timeParser = config.timeParser;\n        this.dateTimeParser = config.dateTimeParser;\n        this.datePeriodParser = config.datePeriodParser;\n        this.timePeriodParser = config.timePeriodParser;\n        this.dateTimePeriodParser = config.dateTimePeriodParser;\n        this.durationParser = config.durationParser;\n        this.setParser = new BaseSetParser(new EnglishSetParserConfiguration(config));\n    }\n}\n","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseDateTime } from \"./baseDateTime\";\nexport namespace SpanishDateTime {\n\texport const TillRegex = `(?<till>hasta|al|a|--|-|—|——)(\\\\s+(el|la(s)?))?`;\n\texport const AndRegex = `(?<and>y|y\\\\s*el|--|-|—|——)`;\n\texport const DayRegex = `(?<day>01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)(?=\\\\b|t)`;\n\texport const MonthNumRegex = `(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\\\b`;\n\texport const YearRegex = `(?<year>19\\\\d{2}|20\\\\d{2}|9\\\\d|0\\\\d|1\\\\d|2\\\\d)`;\n\texport const FullYearRegex = `\\\\b(?<year>19\\\\d{2}|20\\\\d{2})\\\\b`;\n\texport const RelativeMonthRegex = `(?<relmonth>(este|pr[oó]ximo|[uú]ltimo)\\\\s+mes)\\\\b`;\n\texport const MonthRegex = `(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Febrero|Feb|Enero|Ene|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)`;\n\texport const MonthSuffixRegex = `(?<msuf>(en\\\\s+|del\\\\s+|de\\\\s+)?(${RelativeMonthRegex}|${MonthRegex}))`;\n\texport const DateUnitRegex = `(?<unit>años|año|meses|mes|semanas|semana|d[ií]a(s)?)\\\\b`;\n\texport const PastRegex = `(?<past>\\\\b(pasad(a|o)(s)?|[uú]ltim[oa](s)?|anterior(es)?|previo(s)?)\\\\b)`;\n\texport const FutureRegex = `(?<past>\\\\b(siguiente(s)?|pr[oó]xim[oa](s)?|dentro\\\\s+de|en)\\\\b)`;\n\texport const SimpleCasesRegex = `\\\\b((desde\\\\s+el|desde|del)\\\\s+)?(${DayRegex})\\\\s*${TillRegex}\\\\s*(${DayRegex})\\\\s+${MonthSuffixRegex}((\\\\s+|\\\\s*,\\\\s*)${FullYearRegex})?\\\\b`;\n\texport const MonthFrontSimpleCasesRegex = `\\\\b${MonthSuffixRegex}\\\\s+((desde\\\\s+el|desde|del)\\\\s+)?(${DayRegex})\\\\s*${TillRegex}\\\\s*(${DayRegex})((\\\\s+|\\\\s*,\\\\s*)${FullYearRegex})?\\\\b`;\n\texport const MonthFrontBetweenRegex = `\\\\b${MonthSuffixRegex}\\\\s+((entre|entre\\\\s+el)\\\\s+)(${DayRegex})\\\\s*${AndRegex}\\\\s*(${DayRegex})((\\\\s+|\\\\s*,\\\\s*)${FullYearRegex})?\\\\b`;\n\texport const DayBetweenRegex = `\\\\b((entre|entre\\\\s+el)\\\\s+)(${DayRegex})\\\\s*${AndRegex}\\\\s*(${DayRegex})\\\\s+${MonthSuffixRegex}((\\\\s+|\\\\s*,\\\\s*)${FullYearRegex})?\\\\b`;\n\texport const OneWordPeriodRegex = `\\\\b(((pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en)\\\\s+)?(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Enero|Ene|Febrero|Feb|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)|(?<=\\\\b(del|de la|el|la)\\\\s+)?(pr[oó]xim[oa](s)?|[uú]ltim[oa]?|est(e|a))\\\\s+(fin de semana|semana|mes|año)|fin de semana|(mes|años)? a la fecha)\\\\b`;\n\texport const MonthWithYearRegex = `\\\\b(((pr[oó]xim[oa](s)?|este|esta|[uú]ltim[oa]?|en)\\\\s+)?(?<month>Abril|Abr|Agosto|Ago|Diciembre|Dic|Enero|Ene|Febrero|Feb|Julio|Jul|Junio|Jun|Marzo|Mar|Mayo|May|Noviembre|Nov|Octubre|Oct|Septiembre|Setiembre|Sept|Set)\\\\s+((de|del|de la)\\\\s+)?(${FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|este)\\\\s+año))\\\\b`;\n\texport const MonthNumWithYearRegex = `(${FullYearRegex}[/\\\\-\\\\.]${MonthNumRegex})|(${MonthNumRegex}[/\\\\-]${FullYearRegex})`;\n\texport const WeekOfMonthRegex = `(?<wom>(la\\\\s+)?(?<cardinal>primera?|1ra|segunda|2da|tercera?|3ra|cuarta|4ta|quinta|5ta|[uú]ltima)\\\\s+semana\\\\s+${MonthSuffixRegex})`;\n\texport const WeekOfYearRegex = `(?<woy>(la\\\\s+)?(?<cardinal>primera?|1ra|segunda|2da|tercera?|3ra|cuarta|4ta|quinta|5ta|[uú]ltima?)\\\\s+semana(\\\\s+del?)?\\\\s+(${FullYearRegex}|(?<order>pr[oó]ximo|[uú]ltimo|este)\\\\s+año))`;\n\texport const FollowedDateUnit = `^\\\\s*${DateUnitRegex}`;\n\texport const NumberCombinedWithDateUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)${DateUnitRegex}`;\n\texport const QuarterRegex = `(el\\\\s+)?(?<cardinal>primer|1er|segundo|2do|tercer|3ro|cuarto|4to)\\\\s+cuatrimestre(\\\\s+de|\\\\s*,\\\\s*)?\\\\s+(${FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|este)\\\\s+año)`;\n\texport const QuarterRegexYearFront = `(${FullYearRegex}|(?<order>pr[oó]ximo(s)?|[uú]ltimo?|este)\\\\s+año)\\\\s+(el\\\\s+)?(?<cardinal>(primer|primero)|1er|segundo|2do|(tercer|terceo)|3ro|cuarto|4to)\\\\s+cuatrimestre`;\n\texport const SeasonRegex = `\\\\b(?<season>(([uú]ltim[oa]|est[ea]|el|la|(pr[oó]xim[oa]s?|siguiente))\\\\s+)?(?<seas>primavera|verano|otoño|invierno)((\\\\s+del?|\\\\s*,\\\\s*)?\\\\s+(${FullYearRegex}|(?<order>pr[oó]ximo|[uú]ltimo|este)\\\\s+año))?)\\\\b`;\n\texport const WhichWeekRegex = `(semana)(\\\\s*)(?<number>\\\\d\\\\d|\\\\d|0\\\\d)`;\n\texport const WeekOfRegex = `(semana)(\\\\s*)((do|da|de))`;\n\texport const MonthOfRegex = `(mes)(\\\\s*)((do|da|de))`;\n\texport const RangeUnitRegex = `\\\\b(?<unit>años|año|meses|mes|semanas|semana)\\\\b`;\n\texport const InConnectorRegex = `\\\\b(in)\\\\b`;\n\texport const FromRegex = `((desde|de)(\\\\s*la(s)?)?)$`;\n\texport const ConnectorAndRegex = `(y\\\\s*(la(s)?)?)$`;\n\texport const BetweenRegex = `(entre\\\\s*(la(s)?)?)`;\n\texport const WeekDayRegex = `\\\\b(?<weekday>Domingos?|Lunes|Martes|Mi[eé]rcoles|Jueves|Viernes|S[aá]bados?|Lu|Ma|Mi|Ju|Vi|Sa|Do)\\\\b`;\n\texport const OnRegex = `(?<=\\\\ben\\\\s+)(${DayRegex}s?)\\\\b`;\n\texport const RelaxedOnRegex = `(?<=\\\\b(en|el|del)\\\\s+)((?<day>10|11|12|13|14|15|16|17|18|19|1st|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\\\\b`;\n\texport const ThisRegex = `\\\\b((este\\\\s*)${WeekDayRegex})|(${WeekDayRegex}\\\\s*((de\\\\s+)?esta\\\\s+semana))\\\\b`;\n\texport const LastDateRegex = `\\\\b(([uú]ltimo)\\\\s*${WeekDayRegex})|(${WeekDayRegex}(\\\\s+((de\\\\s+)?(esta|la)\\\\s+([uú]ltima\\\\s+)?semana)))\\\\b`;\n\texport const NextDateRegex = `\\\\b(((pr[oó]ximo|siguiente)\\\\s*)${WeekDayRegex})|(${WeekDayRegex}(\\\\s+(de\\\\s+)?(la\\\\s+)?(pr[oó]xima|siguiente)(\\\\s*semana)))\\\\b`;\n\texport const SpecialDayRegex = `\\\\b((el\\\\s+)?(d[ií]a\\\\s+antes\\\\s+de\\\\s+ayer|anteayer)|((el\\\\s+)?d[ií]a\\\\s+(despu[eé]s\\\\s+)?de\\\\s+mañana|pasado\\\\s+mañana)|(el\\\\s)?d[ií]a siguiente|(el\\\\s)?pr[oó]ximo\\\\s+d[ií]a|(el\\\\s+)?[uú]ltimo d[ií]a|(d)?el d[ií]a|ayer|mañana|hoy)\\\\b`;\n\texport const ForTheRegex = `^[.]`;\n\texport const WeekDayAndDayOfMothRegex = `^[.]`;\n\texport const WeekDayOfMonthRegex = `(?<wom>(el\\\\s+)?(?<cardinal>primer|1er|segundo|2do|tercer|3er|cuarto|4to|quinto|5to|[uú]ltimo)\\\\s+${WeekDayRegex}\\\\s+${MonthSuffixRegex})`;\n\texport const NumberEndingPattern = `^[.]`;\n\texport const SpecialDateRegex = `(?<=\\\\b(en)\\\\s+el\\\\s+)${DayRegex}\\\\b`;\n\texport const OfMonthRegex = `^\\\\s*de\\\\s*${MonthSuffixRegex}`;\n\texport const MonthEndRegex = `(${MonthRegex}\\\\s*(el)?\\\\s*$)`;\n\texport const DateExtractor1 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${DayRegex}?((\\\\s*(de)|[/\\\\\\\\\\\\.\\\\-])\\\\s*)?${MonthRegex}\\\\b`;\n\texport const DateExtractor2 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${DayRegex}\\\\s*([\\\\.\\\\-]|de)?\\\\s*${MonthRegex}?(\\\\s*,\\\\s*|\\\\s*(del?)\\\\s*)${YearRegex}\\\\b`;\n\texport const DateExtractor3 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${DayRegex}(\\\\s+|\\\\s*,\\\\s*|\\\\s+de\\\\s+|\\\\s*-\\\\s*)${MonthRegex}((\\\\s+|\\\\s*,\\\\s*)${YearRegex})?\\\\b`;\n\texport const DateExtractor4 = `\\\\b${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DayRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${YearRegex}`;\n\texport const DateExtractor5 = `\\\\b${DayRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${YearRegex}`;\n\texport const DateExtractor6 = `(?<=\\\\b(en|el)\\\\s+)${MonthNumRegex}[\\\\-\\\\.]${DayRegex}\\\\b`;\n\texport const DateExtractor7 = `\\\\b${MonthNumRegex}\\\\s*/\\\\s*${DayRegex}((\\\\s+|\\\\s*,\\\\s*|\\\\s+de\\\\s+)${YearRegex})?\\\\b`;\n\texport const DateExtractor8 = `(?<=\\\\b(en|el)\\\\s+)${DayRegex}[\\\\\\\\\\\\-]${MonthNumRegex}\\\\b`;\n\texport const DateExtractor9 = `\\\\b${DayRegex}\\\\s*/\\\\s*${MonthNumRegex}((\\\\s+|\\\\s*,\\\\s*|\\\\s+de\\\\s+)${YearRegex})?\\\\b`;\n\texport const DateExtractor10 = `\\\\b${YearRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DayRegex}`;\n\texport const HourNumRegex = `\\\\b(?<hournum>cero|una|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce)\\\\b`;\n\texport const DescRegex = `(?<desc>pm\\\\b|am\\\\b|p\\\\.m\\\\.|a\\\\.m\\\\.)`;\n\texport const AmDescRegex = `(am\\\\b|a\\\\.m\\\\.|a m\\\\b|a\\\\. m\\\\.\\\\b|a\\\\.m\\\\b|a\\\\. m\\\\b)`;\n\texport const PmDescRegex = `(pm\\\\b|p\\\\.m\\\\.|p\\\\b|p m\\\\b|p\\\\. m\\\\.\\\\b|p\\\\.m\\\\b|p\\\\. m\\\\b)`;\n\texport const AmPmDescRegex = `(ampm)`;\n\texport const MinuteNumRegex = `(?<minnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)`;\n\texport const DeltaMinuteNumRegex = `(?<deltaminnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)`;\n\texport const OclockRegex = `(?<oclock>en\\\\s+punto)`;\n\texport const PmRegex = `(?<pm>((por|de|a|en)\\\\s+la)\\\\s+(tarde|noche))`;\n\texport const AmRegex = `(?<am>((por|de|a|en)\\\\s+la)\\\\s+(mañana|madrugada))`;\n\texport const AmTimeRegex = `(?<am>(esta|(por|de|a|en)\\\\s+la)\\\\s+(mañana|madrugada))`;\n\texport const PmTimeRegex = `(?<pm>(esta|(por|de|a|en)\\\\s+la)\\\\s+(tarde|noche))`;\n\texport const LessThanOneHour = `(?<lth>((\\\\s+y\\\\s+)?cuarto|(\\\\s*)menos cuarto|(\\\\s+y\\\\s+)media|${BaseDateTime.DeltaMinuteRegex}(\\\\s+(minuto|minutos|min|mins))|${DeltaMinuteNumRegex}(\\\\s+(minuto|minutos|min|mins))))`;\n\texport const TensTimeRegex = `(?<tens>diez|veint(i|e)|treinta|cuarenta|cincuenta)`;\n\texport const SpaTimeRegex = `(?<engtime>${HourNumRegex}\\\\s*((y|menos)\\\\s+)?(${MinuteNumRegex}|(${TensTimeRegex}((\\\\s*y\\\\s+)?${MinuteNumRegex})?)))`;\n\texport const TimePrefix = `(?<prefix>${LessThanOneHour}(\\\\s+(pasad[ao]s)\\\\s+(de\\\\s+las|las)?|\\\\s+(para|antes\\\\s+de)?\\\\s+(las?))?)`;\n\texport const TimeSuffix = `(?<suffix>(${LessThanOneHour}\\\\s+)?(${AmRegex}|${PmRegex}|${OclockRegex}))`;\n\texport const BasicTime = `(?<basictime>${SpaTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex}:${BaseDateTime.MinuteRegex}(:${BaseDateTime.SecondRegex})?|${BaseDateTime.HourRegex})`;\n\texport const AtRegex = `\\\\b(?<=\\\\b(a las?)\\\\s+)(${SpaTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex})\\\\b`;\n\texport const ConnectNumRegex = `(${BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\\\\s*${DescRegex})`;\n\texport const TimeRegex1 = `(\\\\b${TimePrefix}\\\\s+)?(${SpaTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex})\\\\s*(${DescRegex})`;\n\texport const TimeRegex2 = `(\\\\b${TimePrefix}\\\\s+)?(T)?${BaseDateTime.HourRegex}(\\\\s*)?:(\\\\s*)?${BaseDateTime.MinuteRegex}((\\\\s*)?:(\\\\s*)?${BaseDateTime.SecondRegex})?((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex3 = `(\\\\b${TimePrefix}\\\\s+)?${BaseDateTime.HourRegex}\\\\.${BaseDateTime.MinuteRegex}(\\\\s*${DescRegex})`;\n\texport const TimeRegex4 = `\\\\b((${DescRegex}?)|(${BasicTime}?)(${DescRegex}?))(${TimePrefix}\\\\s*)(${HourNumRegex}|${BaseDateTime.HourRegex})?(\\\\s+${TensTimeRegex}(\\\\s+y\\\\s+)?${MinuteNumRegex}?)?(${OclockRegex})?\\\\b`;\n\texport const TimeRegex5 = `\\\\b(${TimePrefix}|${BasicTime}${TimePrefix})\\\\s+(\\\\s*${DescRegex})?${BasicTime}?\\\\s*${TimeSuffix}\\\\b`;\n\texport const TimeRegex6 = `(${BasicTime}(\\\\s*${DescRegex})?\\\\s+${TimeSuffix}\\\\b)`;\n\texport const TimeRegex7 = `\\\\b${TimeSuffix}\\\\s+a\\\\s+las\\\\s+${BasicTime}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex8 = `\\\\b${TimeSuffix}\\\\s+${BasicTime}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex9 = `\\\\b(?<engtime>${HourNumRegex}\\\\s+(${TensTimeRegex}\\\\s*)?(y\\\\s+)?${MinuteNumRegex}?)\\\\b`;\n\texport const TimeRegex10 = `(a\\\\s+la|al)\\\\s+(madrugada|mañana|medio\\\\s*d[ií]a|tarde|noche)`;\n\texport const TimeRegex11 = `\\\\b(${SpaTimeRegex})(${DescRegex}?)\\\\b`;\n\texport const PrepositionRegex = `(?<prep>(a(l)?|en|de(l)?)?(\\\\s*(la(s)?|el|los))?$)`;\n\texport const NowRegex = `\\\\b(?<now>(justo\\\\s+)?ahora(\\\\s+mismo)?|en\\\\s+este\\\\s+momento|tan\\\\s+pronto\\\\s+como\\\\s+sea\\\\s+posible|tan\\\\s+pronto\\\\s+como\\\\s+(pueda|puedas|podamos|puedan)|lo\\\\s+m[aá]s\\\\s+pronto\\\\s+posible|recientemente|previamente)\\\\b`;\n\texport const SuffixRegex = `^\\\\s*(((y|a|en|por)\\\\s+la|al)\\\\s+)?(mañana|madrugada|medio\\\\s*d[ií]a|tarde|noche)\\\\b`;\n\texport const TimeOfDayRegex = `\\\\b(?<timeOfDay>mañana|madrugada|(pasado\\\\s+(el\\\\s+)?)?medio\\\\s?d[ií]a|tarde|noche|anoche)\\\\b`;\n\texport const SpecificTimeOfDayRegex = `\\\\b(((((a)?\\\\s+la|esta|siguiente|pr[oó]xim[oa]|[uú]ltim[oa])\\\\s+)?${TimeOfDayRegex}))\\\\b`;\n\texport const TimeOfTodayAfterRegex = `^\\\\s*(,\\\\s*)?(en|de(l)?\\\\s+)?${SpecificTimeOfDayRegex}`;\n\texport const TimeOfTodayBeforeRegex = `(${SpecificTimeOfDayRegex}(\\\\s*,)?(\\\\s+(a\\\\s+la(s)?|para))?\\\\s*)`;\n\texport const SimpleTimeOfTodayAfterRegex = `(${HourNumRegex}|${BaseDateTime.HourRegex})\\\\s*(,\\\\s*)?((en|de(l)?)?\\\\s+)?${SpecificTimeOfDayRegex}`;\n\texport const SimpleTimeOfTodayBeforeRegex = `(${SpecificTimeOfDayRegex}(\\\\s*,)?(\\\\s+(a\\\\s+la|para))?\\\\s*(${HourNumRegex}|${BaseDateTime.HourRegex}))`;\n\texport const TheEndOfRegex = `((a|e)l\\\\s+)?fin(alizar|al)?(\\\\s+(el|de(l)?)(\\\\s+d[ií]a)?(\\\\s+de)?)?\\\\s*$`;\n\texport const UnitRegex = `(?<unit>años|año|meses|mes|semanas|semana|d[ií]as|d[ií]a|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\\\\b`;\n\texport const ConnectorRegex = `^(,|t|para la|para las|cerca de la|cerca de las)$`;\n\texport const TimeHourNumRegex = `(?<hour>veintiuno|veintidos|veintitres|veinticuatro|cero|uno|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|diecis([eé])is|diecisiete|dieciocho|diecinueve|veinte)`;\n\texport const PureNumFromTo = `((desde|de)\\\\s+(la(s)?\\\\s+)?)?(${BaseDateTime.HourRegex}|${TimeHourNumRegex})(\\\\s*(?<leftDesc>${DescRegex}))?\\\\s*${TillRegex}\\\\s*(${BaseDateTime.HourRegex}|${TimeHourNumRegex})\\\\s*(?<rightDesc>${PmRegex}|${AmRegex}|${DescRegex})?`;\n\texport const PureNumBetweenAnd = `(entre\\\\s+(la(s)?\\\\s+)?)(${BaseDateTime.HourRegex}|${TimeHourNumRegex})(\\\\s*(?<leftDesc>${DescRegex}))?\\\\s*y\\\\s*(la(s)?\\\\s+)?(${BaseDateTime.HourRegex}|${TimeHourNumRegex})\\\\s*(?<rightDesc>${PmRegex}|${AmRegex}|${DescRegex})?`;\n\texport const TimeUnitRegex = `(?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\\\\b`;\n\texport const TimeFollowedUnit = `^\\\\s*${TimeUnitRegex}`;\n\texport const TimeNumberCombinedWithUnit = `\\\\b(?<num>\\\\d+(\\\\,\\\\d*)?)\\\\s*${TimeUnitRegex}`;\n\texport const DateTimePeriodNumberCombinedWithUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)\\\\s*${TimeUnitRegex}`;\n\texport const PeriodTimeOfDayWithDateRegex = `\\\\b(((y|a|en|por)\\\\s+la|al)\\\\s+)?(?<timeOfDay>mañana|madrugada|(pasado\\\\s+(el\\\\s+)?)?medio\\\\s?d[ií]a|tarde|noche|anoche)\\\\b`;\n\texport const RelativeTimeUnitRegex = `(${PastRegex}|${FutureRegex})\\\\s+${UnitRegex}`;\n\texport const SuffixAndRegex = `(?<suffix>\\\\s*(y)\\\\s+((un|uno|una)\\\\s+)?(?<suffix_num>media|cuarto))`;\n\texport const FollowedUnit = `^\\\\s*${UnitRegex}`;\n\texport const DurationNumberCombinedWithUnit = `\\\\b(?<num>\\\\d+(\\\\,\\\\d*)?)${UnitRegex}`;\n\texport const AnUnitRegex = `\\\\b(un(a)?)\\\\s+${UnitRegex}`;\n\texport const AllRegex = `\\\\b(?<all>tod[oa]?\\\\s+(el|la)\\\\s+(?<unit>año|mes|semana|d[ií]a))\\\\b`;\n\texport const HalfRegex = `\\\\b(?<half>medi[oa]\\\\s+(?<unit>ano|mes|semana|d[íi]a|hora))\\\\b`;\n\texport const InExactNumberRegex = `\\\\b(pocos|poco|algo|varios)\\\\b`;\n\texport const InExactNumberUnitRegex = `\\\\b(pocos|poco|algo|varios)\\\\s+${UnitRegex}`;\n\texport const HolidayRegex1 = `\\\\b(?<holiday>viernes santo|mi[eé]rcoles de ceniza|martes de carnaval|d[ií]a (de|de los) presidentes?|clebraci[oó]n de mao|año nuevo chino|año nuevo|noche vieja|(festividad de )?los mayos|d[ií]a de los inocentes|navidad|noche buena|d[ií]a de acci[oó]n de gracias|acci[oó]n de gracias|yuandan|halloween|noches de brujas|pascuas)(\\\\s+(del?\\\\s+)?(${FullYearRegex}|(?<order>(pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en))\\\\s+año))?\\\\b`;\n\texport const HolidayRegex2 = `\\\\b(?<holiday>(d[ií]a( del?( la)?)? )?(martin luther king|todos los santos|blanco|san patricio|san valent[ií]n|san jorge|cinco de mayo|independencia|raza|trabajador))(\\\\s+(del?\\\\s+)?(${FullYearRegex}|(?<order>(pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en))\\\\s+año))?\\\\b`;\n\texport const HolidayRegex3 = `\\\\b(?<holiday>(d[ií]a( del?( las?)?)? )(trabajador|madres?|padres?|[aá]rbol|mujer(es)?|solteros?|niños?|marmota|san valent[ií]n|maestro))(\\\\s+(del?\\\\s+)?(${FullYearRegex}|(?<order>(pr[oó]xim[oa]?|est[ea]|[uú]ltim[oa]?|en))\\\\s+año))?\\\\b`;\n\texport const BeforeRegex = `(antes(\\\\s+del?(\\\\s+las?)?)?)`;\n\texport const AfterRegex = `(despues(\\\\s*del?(\\\\s+las?)?)?)`;\n\texport const SinceRegex = `(desde(\\\\s+(las?|el))?)`;\n\texport const PeriodicRegex = `\\\\b(?<periodic>a\\\\s*diario|diariamente|mensualmente|semanalmente|quincenalmente|anualmente)\\\\b`;\n\texport const EachExpression = `cada|tod[oa]s\\\\s*(l[oa]s)?`;\n\texport const EachUnitRegex = `(?<each>(${EachExpression})\\\\s*${UnitRegex})`;\n\texport const EachPrefixRegex = `(?<each>(${EachExpression})\\\\s*$)`;\n\texport const EachDayRegex = `\\\\s*(${EachExpression})\\\\s*d[ií]as\\\\s*\\\\b`;\n\texport const BeforeEachDayRegex = `(${EachExpression})\\\\s*d[ií]as(\\\\s+a\\\\s+las?)?\\\\s*\\\\b`;\n\texport const SetEachRegex = `(?<each>(${EachExpression})\\\\s*)`;\n\texport const LaterEarlyPeriodRegex = `^[.]`;\n\texport const WeekWithWeekDayRangeRegex = `^[.]`;\n\texport const GeneralEndingRegex = `^[.]`;\n\texport const MiddlePauseRegex = `^[.]`;\n\texport const PrefixArticleRegex = `^[\\\\.]`;\n\texport const AgoRegex = `\\\\b(antes)\\\\b`;\n\texport const LaterRegex = `\\\\b(despu[eé]s|desde ahora)\\\\b`;\n\texport const Tomorrow = 'mañana';\n\texport const UnitMap: ReadonlyMap<string, string> = new Map<string, string>([[\"años\", \"Y\"],[\"año\", \"Y\"],[\"meses\", \"MON\"],[\"mes\", \"MON\"],[\"semanas\", \"W\"],[\"semana\", \"W\"],[\"dias\", \"D\"],[\"dia\", \"D\"],[\"días\", \"D\"],[\"día\", \"D\"],[\"horas\", \"H\"],[\"hora\", \"H\"],[\"hrs\", \"H\"],[\"hr\", \"H\"],[\"h\", \"H\"],[\"minutos\", \"M\"],[\"minuto\", \"M\"],[\"mins\", \"M\"],[\"min\", \"M\"],[\"segundos\", \"S\"],[\"segundo\", \"S\"],[\"segs\", \"S\"],[\"seg\", \"S\"]]);\n\texport const UnitValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"años\", 31536000],[\"año\", 31536000],[\"meses\", 2592000],[\"mes\", 2592000],[\"semanas\", 604800],[\"semana\", 604800],[\"dias\", 86400],[\"dia\", 86400],[\"días\", 86400],[\"día\", 86400],[\"horas\", 3600],[\"hora\", 3600],[\"hrs\", 3600],[\"hr\", 3600],[\"h\", 3600],[\"minutos\", 60],[\"minuto\", 60],[\"mins\", 60],[\"min\", 60],[\"segundos\", 1],[\"segundo\", 1],[\"segs\", 1],[\"seg\", 1]]);\n\texport const SeasonMap: ReadonlyMap<string, string> = new Map<string, string>([[\"primavera\", \"SP\"],[\"verano\", \"SU\"],[\"otoño\", \"FA\"],[\"invierno\", \"WI\"]]);\n\texport const SeasonValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"SP\", 3],[\"SU\", 6],[\"FA\", 9],[\"WI\", 12]]);\n\texport const CardinalMap: ReadonlyMap<string, number> = new Map<string, number>([[\"primer\", 1],[\"primero\", 1],[\"primera\", 1],[\"1er\", 1],[\"1ro\", 1],[\"1ra\", 1],[\"segundo\", 2],[\"segunda\", 2],[\"2do\", 2],[\"2da\", 2],[\"tercer\", 3],[\"tercero\", 3],[\"tercera\", 3],[\"3er\", 3],[\"3ro\", 3],[\"3ra\", 3],[\"cuarto\", 4],[\"cuarta\", 4],[\"4to\", 4],[\"4ta\", 4],[\"quinto\", 5],[\"quinta\", 5],[\"5to\", 5],[\"5ta\", 5]]);\n\texport const DayOfWeek: ReadonlyMap<string, number> = new Map<string, number>([[\"lunes\", 1],[\"martes\", 2],[\"miercoles\", 3],[\"miércoles\", 3],[\"jueves\", 4],[\"viernes\", 5],[\"sabado\", 6],[\"domingo\", 0],[\"lu\", 1],[\"ma\", 2],[\"mi\", 3],[\"ju\", 4],[\"vi\", 5],[\"sa\", 6],[\"do\", 0]]);\n\texport const MonthOfYear: ReadonlyMap<string, number> = new Map<string, number>([[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"6\", 6],[\"7\", 7],[\"8\", 8],[\"9\", 9],[\"10\", 10],[\"11\", 11],[\"12\", 12],[\"enero\", 1],[\"febrero\", 2],[\"marzo\", 3],[\"abril\", 4],[\"mayo\", 5],[\"junio\", 6],[\"julio\", 7],[\"abosto\", 8],[\"septiembre\", 9],[\"setiembre\", 9],[\"octubre\", 10],[\"noviembre\", 11],[\"diciembre\", 12],[\"ene\", 1],[\"feb\", 2],[\"mar\", 3],[\"abr\", 4],[\"may\", 5],[\"jun\", 6],[\"jul\", 7],[\"ago\", 8],[\"sept\", 9],[\"set\", 9],[\"oct\", 10],[\"nov\", 11],[\"dic\", 12],[\"01\", 1],[\"02\", 2],[\"03\", 3],[\"04\", 4],[\"05\", 5],[\"06\", 6],[\"07\", 7],[\"08\", 8],[\"09\", 9]]);\n\texport const Numbers: ReadonlyMap<string, number> = new Map<string, number>([[\"cero\", 0],[\"un\", 1],[\"una\", 1],[\"uno\", 1],[\"dos\", 2],[\"tres\", 3],[\"cuatro\", 4],[\"cinco\", 5],[\"seis\", 6],[\"siete\", 7],[\"ocho\", 8],[\"nueve\", 9],[\"diez\", 10],[\"once\", 11],[\"doce\", 12],[\"docena\", 12],[\"docenas\", 12],[\"trece\", 13],[\"catorce\", 14],[\"quince\", 15],[\"dieciseis\", 16],[\"dieciséis\", 16],[\"diecisiete\", 17],[\"dieciocho\", 18],[\"diecinueve\", 19],[\"veinte\", 20],[\"ventiuna\", 21],[\"ventiuno\", 21],[\"veintiun\", 21],[\"veintiún\", 21],[\"veintiuno\", 21],[\"veintiuna\", 21],[\"veintidos\", 22],[\"veintidós\", 22],[\"veintitres\", 23],[\"veintitrés\", 23],[\"veinticuatro\", 24],[\"veinticinco\", 25],[\"veintiseis\", 26],[\"veintiséis\", 26],[\"veintisiete\", 27],[\"veintiocho\", 28],[\"veintinueve\", 29],[\"treinta\", 30]]);\n\texport const HolidayNames: ReadonlyMap<string, string[]> = new Map<string, string[]>([[\"padres\", [\"diadelpadre\"]],[\"madres\", [\"diadelamadre\"]],[\"acciondegracias\", [\"diadegracias\",\"diadeacciondegracias\",\"acciondegracias\"]],[\"trabajador\", [\"diadeltrabajador\"]],[\"delaraza\", [\"diadelaraza\",\"diadeladiversidadcultural\"]],[\"memoria\", [\"diadelamemoria\"]],[\"pascuas\", [\"diadepascuas\",\"pascuas\"]],[\"navidad\", [\"navidad\",\"diadenavidad\"]],[\"nochebuena\", [\"diadenochebuena\",\"nochebuena\"]],[\"añonuevo\", [\"añonuevo\",\"diadeañonuevo\"]],[\"nochevieja\", [\"nochevieja\",\"diadenochevieja\"]],[\"yuandan\", [\"yuandan\"]],[\"maestro\", [\"diadelmaestro\"]],[\"todoslossantos\", [\"todoslossantos\"]],[\"niño\", [\"diadelniño\"]],[\"mujer\", [\"diadelamujer\"]]]);\n\texport const VariableHolidaysTimexDictionary: ReadonlyMap<string, string> = new Map<string, string>([[\"padres\", \"-06-WXX-7-3\"],[\"madres\", \"-05-WXX-7-2\"],[\"acciondegracias\", \"-11-WXX-4-4\"],[\"trabajador\", \"-05-WXX-1-1\"],[\"delaraza\", \"-10-WXX-1-2\"],[\"memoria\", \"-03-WXX-2-4\"]]);\n\texport const DoubleNumbers: ReadonlyMap<string, number> = new Map<string, number>([[\"mitad\", 0.5],[\"cuarto\", 0.25]]);\n\texport const DateTokenPrefix = 'en ';\n\texport const TimeTokenPrefix = 'a las ';\n\texport const TokenBeforeDate = 'el ';\n\texport const TokenBeforeTime = 'la ';\n\texport const NextPrefixRegex = `(pr[oó]xim[oa]|siguiente)\\\\b`;\n\texport const PastPrefixRegex = `([uú]ltim[oa])\\\\b`;\n\texport const ThisPrefixRegex = `(est[ea])\\\\b`;\n\texport const RelativeDayRegex = `^[\\\\.]`;\n\texport const RestOfDateRegex = `^[\\\\.]`;\n\texport const RelativeDurationUnitRegex = `^[\\\\.]`;\n\texport const FromToRegex = `\\\\b(from).+(to)\\\\b.+`;\n\texport const SingleAmbiguousMonthRegex = `^(the\\\\s+)?(may|march)$`;\n\texport const PrepositionSuffixRegex = `\\\\b(on|in|at|around|from|to)$`;\n\texport const RestOfDateTimeRegex = `^[\\\\.]`;\n\texport const SetWeekDayRegex = `^[\\\\.]`;\n\texport const NightRegex = `\\\\b(medionoche|noche)\\\\b`;\n\texport const DurationUnitRegex = `^[\\\\.]`;\n\texport const DurationConnectorRegex = `^[.]`;\n}\n","import { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, BaseNumberParser, SpanishCardinalExtractor } from \"recognizers-text-number\";\nimport { IDurationExtractorConfiguration, IDurationParserConfiguration } from \"../baseDuration\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\n\nexport class SpanishDurationExtractorConfiguration implements IDurationExtractorConfiguration {\n    readonly allRegex: RegExp;\n    readonly halfRegex: RegExp;\n    readonly followedUnit: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly anUnitRegex: RegExp;\n    readonly inExactNumberUnitRegex: RegExp;\n    readonly suffixAndRegex: RegExp;\n    readonly relativeDurationUnitRegex: RegExp;\n    readonly cardinalExtractor: BaseNumberExtractor;\n\n    constructor() {\n        this.allRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AllRegex, \"gis\");\n        this.halfRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.HalfRegex, \"gis\");\n        this.followedUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.FollowedUnit, \"gis\");\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.DurationNumberCombinedWithUnit, \"gis\");\n        this.anUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AnUnitRegex, \"gis\");\n        this.inExactNumberUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.InExactNumberUnitRegex, \"gis\");\n        this.suffixAndRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SuffixAndRegex, \"gis\");\n        this.relativeDurationUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RelativeDurationUnitRegex, \"gis\");\n        this.cardinalExtractor = new SpanishCardinalExtractor();\n    }\n}\n\nexport class SpanishDurationParserConfiguration implements IDurationParserConfiguration {\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly followedUnit: RegExp;\n    readonly suffixAndRegex: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly anUnitRegex: RegExp;\n    readonly allDateUnitRegex: RegExp;\n    readonly halfDateUnitRegex: RegExp;\n    readonly inExactNumberUnitRegex: RegExp;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly unitValueMap: ReadonlyMap<string, number>;\n    readonly doubleNumbers: ReadonlyMap<string, number>;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.followedUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.FollowedUnit);\n        this.suffixAndRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SuffixAndRegex);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.DurationNumberCombinedWithUnit);\n        this.anUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AnUnitRegex);\n        this.allDateUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AllRegex);\n        this.halfDateUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.HalfRegex);\n        this.inExactNumberUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.InExactNumberUnitRegex);\n        this.unitMap = config.unitMap;\n        this.unitValueMap = config.unitValueMap;\n        this.doubleNumbers = config.doubleNumbers;\n    }\n}","import { IExtractor } from \"recognizers-text\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { ITimeExtractorConfiguration, ITimeParserConfiguration } from \"../baseTime\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { BaseDurationExtractor } from \"../baseDuration\";\nimport { SpanishDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class SpanishTimeExtractorConfiguration implements ITimeExtractorConfiguration {\n    readonly timeRegexList: RegExp[];\n    readonly atRegex: RegExp;\n    readonly ishRegex: RegExp;\n\n    readonly durationExtractor: IDateTimeExtractor;\n\n    constructor() {\n        this.atRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AtRegex, \"gis\");\n        this.ishRegex = null;\n        this.timeRegexList = SpanishTimeExtractorConfiguration.getTimeRegexList();\n\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n    }\n\n    static getTimeRegexList(): RegExp[] {\n        return [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex1, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex2, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex3, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex4, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex5, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex6, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex7, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex8, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex9, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex10, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.TimeRegex11, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.ConnectNumRegex, \"gis\")\n        ]\n    }\n}\n\nexport class SpanishTimeParserConfiguration implements ITimeParserConfiguration {\n\n    readonly timeTokenPrefix: string;\n    readonly atRegex: RegExp;\n    readonly timeRegexes: RegExp[];\n    readonly lessThanOneHour: RegExp;\n    readonly timeSuffix: RegExp;\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n\n        this.timeTokenPrefix = SpanishDateTime.TimeTokenPrefix;\n        this.atRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AtRegex, \"gis\");\n        this.timeRegexes = SpanishTimeExtractorConfiguration.getTimeRegexList();\n        this.lessThanOneHour = RegExpUtility.getSafeRegExp(SpanishDateTime.LessThanOneHour, \"gis\");\n        this.timeSuffix = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeSuffix, \"gis\");\n\n        this.utilityConfiguration = config.utilityConfiguration;\n        this.numbers = config.numbers;\n    }\n\n    adjustByPrefix(prefix: string, adjust: { hour: number; min: number; hasMin: boolean; }) {\n        let deltaMin = 0;\n        let trimedPrefix = prefix.trim().toLowerCase();\n\n        if (trimedPrefix.startsWith(\"cuarto\") || trimedPrefix.startsWith(\"y cuarto\")) {\n            deltaMin = 15;\n        }\n        else if (trimedPrefix.startsWith(\"menos cuarto\")) {\n            deltaMin = -15;\n        }\n        else if (trimedPrefix.startsWith(\"media\") || trimedPrefix.startsWith(\"y media\")) {\n            deltaMin = 30;\n        }\n        else {\n            let matches = RegExpUtility.getMatches(this.lessThanOneHour, trimedPrefix);\n            if (matches.length) {\n                let match = matches[0];\n                let minStr = match.groups(\"deltamin\").value;\n                if (minStr) {\n                    deltaMin = parseInt(minStr, 10);\n                }\n                else {\n                    minStr = match.groups(\"deltaminnum\").value.toLowerCase();\n                    if (this.numbers.has(minStr)) {\n                        deltaMin = this.numbers.get(minStr);\n                    }\n                }\n            }\n        }\n\n        if (trimedPrefix.endsWith(\"pasadas\") || trimedPrefix.endsWith(\"pasados\") ||\n            trimedPrefix.endsWith(\"pasadas las\") || trimedPrefix.endsWith(\"pasados las\") ||\n            trimedPrefix.endsWith(\"pasadas de las\") || trimedPrefix.endsWith(\"pasados de las\")) {\n            // deltaMin it's positive\n        }\n        else if (trimedPrefix.endsWith(\"para la\") || trimedPrefix.endsWith(\"para las\") ||\n            trimedPrefix.endsWith(\"antes de la\") || trimedPrefix.endsWith(\"antes de las\")) {\n            deltaMin = -deltaMin;\n        }\n\n        adjust.min += deltaMin;\n        if (adjust.min < 0) {\n            adjust.min += 60;\n            adjust.hour -= 1;\n        }\n\n        adjust.hasMin = adjust.hasMin || adjust.min !== 0;\n    }\n\n    adjustBySuffix(suffix: string, adjust: { hour: number; min: number; hasMin: boolean; hasAm: boolean; hasPm: boolean; }) {\n        let trimedSuffix = suffix.trim().toLowerCase();\n        this.adjustByPrefix(trimedSuffix, adjust);\n\n        let deltaHour = 0;\n        let matches = RegExpUtility.getMatches(this.timeSuffix, trimedSuffix);\n        if (matches.length) {\n            let match = matches[0];\n            if (match.index === 0 && match.length === trimedSuffix.length) {\n                let oclockStr = match.groups(\"oclock\").value;\n                if (!oclockStr) {\n                    let amStr = match.groups(\"am\").value;\n                    if (amStr) {\n                        if (adjust.hour >= 12) {\n                            deltaHour = -12;\n                        }\n\n                        adjust.hasAm = true;\n                    }\n\n                    let pmStr = match.groups(\"pm\").value;\n                    if (pmStr) {\n                        if (adjust.hour < 12) {\n                            deltaHour = 12;\n                        }\n\n                        adjust.hasPm = true;\n                    }\n                }\n            }\n        }\n\n        adjust.hour = (adjust.hour + deltaHour) % 24;\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { IDateTimeExtractorConfiguration, IDateTimeParserConfiguration, IDateTimeExtractor } from \"../baseDateTime\";\nimport { BaseNumberExtractor, BaseNumberParser } from \"recognizers-text-number\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { SpanishDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { SpanishDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { SpanishDateTimeUtilityConfiguration } from \"./baseConfiguration\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { SpanishTimeExtractorConfiguration } from \"./timeConfiguration\";\n\nexport class SpanishDateTimeExtractorConfiguration implements IDateTimeExtractorConfiguration {\n    readonly datePointExtractor: IDateTimeExtractor;\n    readonly timePointExtractor: IDateTimeExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly suffixRegex: RegExp;\n    readonly nowRegex: RegExp;\n    readonly timeOfTodayAfterRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly simpleTimeOfTodayAfterRegex: RegExp;\n    readonly nightRegex: RegExp;\n    readonly timeOfTodayBeforeRegex: RegExp;\n    readonly simpleTimeOfTodayBeforeRegex: RegExp;\n    readonly theEndOfRegex: RegExp;\n    readonly unitRegex: RegExp;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n    readonly prepositionRegex: RegExp;\n    readonly connectorRegex: RegExp;\n\n\n    constructor() {\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PrepositionRegex, \"gis\");\n        this.nowRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NowRegex, \"gis\");\n        this.suffixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SuffixRegex, \"gis\");\n\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfDayRegex, \"gis\");\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SpecificTimeOfDayRegex, \"gis\");\n        this.timeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfTodayAfterRegex, \"gis\");\n        this.timeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfTodayBeforeRegex, \"gis\");\n        this.simpleTimeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SimpleTimeOfTodayAfterRegex, \"gis\");\n        this.simpleTimeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SimpleTimeOfTodayBeforeRegex, \"gis\");\n        this.theEndOfRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TheEndOfRegex, \"gis\");\n        this.unitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.UnitRegex, \"gis\");\n        this.connectorRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ConnectorRegex, \"gis\");\n        this.nightRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NightRegex, \"gis\");\n\n        this.datePointExtractor = new BaseDateExtractor(new SpanishDateExtractorConfiguration());\n        this.timePointExtractor = new BaseTimeExtractor(new SpanishTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n        this.utilityConfiguration = new SpanishDateTimeUtilityConfiguration();\n    }\n\n    isConnectorToken(source: string): boolean {\n        let trimmed = source.trim();\n        return trimmed === \"\"\n            || RegExpUtility.getFirstMatchIndex(this.prepositionRegex, source).matched\n            || RegExpUtility.getFirstMatchIndex(this.connectorRegex, source).matched;\n    }\n}\n\nexport class SpanishDateTimeParserConfiguration implements IDateTimeParserConfiguration {\n    readonly tokenBeforeDate: string;\n    readonly tokenBeforeTime: string;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly timeParser: BaseTimeParser;\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly nowRegex: RegExp;\n    readonly amTimeRegex: RegExp;\n    readonly pmTimeRegex: RegExp;\n    readonly simpleTimeOfTodayAfterRegex: RegExp;\n    readonly simpleTimeOfTodayBeforeRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly theEndOfRegex: RegExp;\n    readonly unitRegex: RegExp;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    readonly nextPrefixRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.tokenBeforeDate = SpanishDateTime.TokenBeforeDate;\n        this.tokenBeforeTime = SpanishDateTime.TokenBeforeTime;\n        this.nowRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NowRegex, \"gis\");\n        this.amTimeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AmTimeRegex, \"gis\");\n        this.pmTimeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PmTimeRegex, \"gis\");\n        this.simpleTimeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SimpleTimeOfTodayAfterRegex, \"gis\")\n        this.simpleTimeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SimpleTimeOfTodayBeforeRegex, \"gis\")\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SpecificTimeOfDayRegex, \"gis\");\n        this.theEndOfRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TheEndOfRegex, \"gis\")\n        this.unitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.UnitRegex, \"gis\");\n\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NextPrefixRegex, \"gis\");\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastPrefixRegex, \"gis\")\n\n        this.dateExtractor = config.dateExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateParser = config.dateParser;\n        this.timeParser = config.timeParser;\n        this.numbers = config.numbers;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.durationExtractor = config.durationExtractor;\n        this.durationParser = config.durationParser;\n        this.unitMap = config.unitMap;\n        this.utilityConfiguration = config.utilityConfiguration;\n    }\n\n    haveAmbiguousToken(text: string, matchedText: string): boolean {\n        return text.toLowerCase().includes(\"esta mañana\")\n            && matchedText.toLocaleLowerCase().includes(\"mañana\");\n    }\n\n    getMatchedNowTimex(text: string): { matched: boolean; timex: string; } {\n        let trimedText = text.trim().toLowerCase();\n        let timex = \"\";\n        if (trimedText.endsWith(\"ahora\") || trimedText.endsWith(\"mismo\") || trimedText.endsWith(\"momento\")) {\n            timex = \"PRESENT_REF\";\n        }\n        else if (trimedText.endsWith(\"posible\") || trimedText.endsWith(\"pueda\") ||\n            trimedText.endsWith(\"puedas\") || trimedText.endsWith(\"podamos\") || trimedText.endsWith(\"puedan\")) {\n            timex = \"FUTURE_REF\";\n        }\n        else if (trimedText.endsWith(\"mente\")) {\n            timex = \"PAST_REF\";\n        }\n        else {\n            return {\n                matched: false,\n                timex: null\n            };\n        }\n\n        return {\n            matched: true,\n            timex: timex\n        };\n    }\n\n    getSwiftDay(text: string): number {\n        let trimedText = text.trim().toLowerCase();\n        let swift = 0;\n\n        if (RegExpUtility.getFirstMatchIndex(this.pastPrefixRegex, trimedText).matched) {\n            swift = -1;\n        }\n        else if (RegExpUtility.getFirstMatchIndex(this.nextPrefixRegex, trimedText).matched) {\n            swift = 1;\n        }\n\n        return swift;\n\n    }\n\n    getHour(text: string, hour: number): number {\n        let trimedText = text.trim().toLowerCase();\n        let result = hour;\n\n        // TODO: Replace with a regex\n        if ((trimedText.endsWith(\"mañana\") || trimedText.endsWith(\"madrugada\")) && hour >= 12) {\n            result -= 12;\n        }\n        else if (!(trimedText.endsWith(\"mañana\") || trimedText.endsWith(\"madrugada\")) && hour < 12) {\n            result += 12;\n        }\n\n        return result;\n    }\n}","import { IExtractor, IParser, RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, SpanishIntegerExtractor } from \"recognizers-text-number\";\nimport { IDatePeriodExtractorConfiguration, IDatePeriodParserConfiguration } from \"../baseDatePeriod\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { SpanishDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { SpanishDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class SpanishDatePeriodExtractorConfiguration implements IDatePeriodExtractorConfiguration {\n    readonly simpleCasesRegexes: RegExp[];\n    readonly tillRegex: RegExp;\n    readonly followedUnit: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly pastRegex: RegExp;\n    readonly futureRegex: RegExp;\n    readonly weekOfRegex: RegExp;\n    readonly monthOfRegex: RegExp;\n    readonly dateUnitRegex: RegExp;\n    readonly inConnectorRegex: RegExp;\n    readonly rangeUnitRegex: RegExp;\n    readonly datePointExtractor: IDateTimeExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n\n    readonly fromRegex: RegExp;\n    readonly connectorAndRegex: RegExp;\n    readonly betweenRegex: RegExp;\n\n    constructor() {\n        this.simpleCasesRegexes = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.SimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DayBetweenRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.SimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DayBetweenRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.OneWordPeriodRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.MonthWithYearRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.MonthNumWithYearRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.YearRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.WeekOfMonthRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.WeekOfYearRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.MonthFrontBetweenRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.MonthFrontSimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.QuarterRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.QuarterRegexYearFront),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.SeasonRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.RestOfDateRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.LaterEarlyPeriodRegex),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.WeekWithWeekDayRangeRegex)\n        ];\n        this.tillRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TillRegex);\n        this.followedUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.FollowedDateUnit);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.NumberCombinedWithDateUnit);\n        this.pastRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FutureRegex);\n        this.weekOfRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekOfRegex);\n        this.monthOfRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthOfRegex);\n        this.dateUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.DateUnitRegex);\n        this.inConnectorRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.InConnectorRegex);\n        this.rangeUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RangeUnitRegex);\n\n        this.fromRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FromRegex);\n        this.connectorAndRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ConnectorAndRegex);\n        this.betweenRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.BetweenRegex);\n\n        this.datePointExtractor = new BaseDateExtractor(new SpanishDateExtractorConfiguration());\n        this.integerExtractor = new SpanishIntegerExtractor();\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n    }\n\n    getFromTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.fromRegex, source);\n    }\n\n    getBetweenTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.betweenRegex, source);\n    }\n\n    hasConnectorToken(source: string): boolean {\n        return RegExpUtility.getFirstMatchIndex(this.connectorAndRegex, source).matched;\n    }\n}\n\nexport class SpanishDatePeriodParserConfiguration implements IDatePeriodParserConfiguration {\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly monthFrontBetweenRegex: RegExp;\n    readonly betweenRegex: RegExp;\n    readonly monthFrontSimpleCasesRegex: RegExp;\n    readonly simpleCasesRegex: RegExp;\n    readonly oneWordPeriodRegex: RegExp;\n    readonly monthWithYear: RegExp;\n    readonly monthNumWithYear: RegExp;\n    readonly yearRegex: RegExp;\n    readonly pastRegex: RegExp;\n    readonly futureRegex: RegExp;\n    readonly inConnectorRegex: RegExp;\n    readonly weekOfMonthRegex: RegExp;\n    readonly weekOfYearRegex: RegExp;\n    readonly quarterRegex: RegExp;\n    readonly quarterRegexYearFront: RegExp;\n    readonly seasonRegex: RegExp;\n    readonly weekOfRegex: RegExp;\n    readonly monthOfRegex: RegExp;\n    readonly whichWeekRegex: RegExp;\n    readonly restOfDateRegex: RegExp;\n    readonly laterEarlyPeriodRegex: RegExp;\n    readonly weekWithWeekDayRangeRegex: RegExp;\n    readonly tokenBeforeDate: string;\n    readonly dayOfMonth: ReadonlyMap<string, number>;\n    readonly monthOfYear: ReadonlyMap<string, number>;\n    readonly cardinalMap: ReadonlyMap<string, number>;\n    readonly seasonMap: ReadonlyMap<string, string>;\n    readonly unitMap: ReadonlyMap<string, string>;\n\n    readonly nextPrefixRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n    readonly thisPrefixRegex: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n\n    readonly cardinalExtractor: IExtractor;\n    readonly numberParser: IParser;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.tokenBeforeDate = SpanishDateTime.TokenBeforeDate;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.durationExtractor = config.durationExtractor;\n        this.dateExtractor = config.dateExtractor;\n        this.durationParser = config.durationParser;\n        this.dateParser = config.dateParser;\n\n        this.monthFrontBetweenRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthFrontBetweenRegex);\n        this.betweenRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.DayBetweenRegex);\n        this.monthFrontSimpleCasesRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthFrontSimpleCasesRegex);\n        this.simpleCasesRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SimpleCasesRegex);\n        this.oneWordPeriodRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.OneWordPeriodRegex);\n        this.monthWithYear = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthWithYearRegex);\n        this.monthNumWithYear = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthNumWithYearRegex);\n        this.yearRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.YearRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FutureRegex);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.DurationNumberCombinedWithUnit);\n        this.weekOfMonthRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekOfMonthRegex);\n        this.weekOfYearRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekOfYearRegex);\n        this.quarterRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.QuarterRegex);\n        this.quarterRegexYearFront = RegExpUtility.getSafeRegExp(SpanishDateTime.QuarterRegexYearFront);\n        this.seasonRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SeasonRegex);\n        this.whichWeekRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WhichWeekRegex);\n        this.weekOfRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekOfRegex);\n        this.monthOfRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthOfRegex);\n        this.restOfDateRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RestOfDateRegex);\n        this.laterEarlyPeriodRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.LaterEarlyPeriodRegex);\n        this.weekWithWeekDayRangeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekWithWeekDayRangeRegex);\n\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NextPrefixRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastPrefixRegex);\n        this.thisPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ThisPrefixRegex);\n\n        this.inConnectorRegex = config.utilityConfiguration.inConnectorRegex;\n        this.unitMap = config.unitMap;\n        this.cardinalMap = config.cardinalMap;\n        this.dayOfMonth = config.dayOfMonth;\n        this.monthOfYear = config.monthOfYear;\n        this.seasonMap = config.seasonMap;\n    }\n\n    getSwiftDayOrMonth(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = 0;\n\n        if (RegExpUtility.getFirstMatchIndex(this.nextPrefixRegex, trimedText).matched) {\n            swift = 1;\n        }\n\n        if (RegExpUtility.getFirstMatchIndex(this.pastPrefixRegex, trimedText).matched) {\n            swift = -1;\n        }\n\n        return swift;\n    }\n\n    getSwiftYear(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = -10;\n        if (RegExpUtility.getFirstMatchIndex(this.nextPrefixRegex, trimedText).matched) {\n            swift = 1;\n        }\n\n        if (RegExpUtility.getFirstMatchIndex(this.pastPrefixRegex, trimedText).matched) {\n            swift = -1;\n        }\n        else if (RegExpUtility.getFirstMatchIndex(this.thisPrefixRegex, trimedText).matched) {\n            swift = 0;\n        }\n\n        return swift;\n    }\n\n    isFuture(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return RegExpUtility.getFirstMatchIndex(this.thisPrefixRegex, trimedText).matched\n            || RegExpUtility.getFirstMatchIndex(this.nextPrefixRegex, trimedText).matched;\n    }\n\n    isYearToDate(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText === \"año a la fecha\"\n            || trimedText === \"años a la fecha\";\n    }\n\n    isMonthToDate(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText === \"mes a la fecha\"\n            || trimedText === \"meses a la fecha\";\n    }\n\n    isWeekOnly(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText.endsWith(\"semana\")\n            && !trimedText.endsWith(\"fin de semana\");\n    }\n\n    isWeekend(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText.endsWith(\"fin de semana\");\n    }\n\n    isMonthOnly(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText.endsWith(\"mes\")\n            || trimedText.endsWith(\"meses\");\n    }\n\n    isYearOnly(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText.endsWith(\"año\")\n            || trimedText.endsWith(\"años\");\n    }\n\n    isLastCardinal(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return RegExpUtility.getFirstMatchIndex(this.pastPrefixRegex, trimedText).matched;\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { ITimePeriodExtractorConfiguration, ITimePeriodParserConfiguration } from \"../baseTimePeriod\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { SpanishTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { SpanishDateTimeUtilityConfiguration } from \"./baseConfiguration\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class SpanishTimePeriodExtractorConfiguration implements ITimePeriodExtractorConfiguration {\n    readonly simpleCasesRegex: RegExp[];\n    readonly tillRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly singleTimeExtractor: IDateTimeExtractor;\n    readonly utilityConfiguration: SpanishDateTimeUtilityConfiguration;\n\n    readonly fromRegex: RegExp;\n    readonly connectorAndRegex: RegExp;\n    readonly betweenRegex: RegExp;\n\n    constructor() {\n        this.singleTimeExtractor = new BaseTimeExtractor(new SpanishTimeExtractorConfiguration());\n        this.utilityConfiguration = new SpanishDateTimeUtilityConfiguration();\n\n        this.simpleCasesRegex = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumFromTo, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumBetweenAnd, \"gis\")\n        ];\n\n        this.tillRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TillRegex, \"gis\");\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfDayRegex, \"gis\");\n\n        this.fromRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FromRegex, \"gis\");\n        this.connectorAndRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ConnectorAndRegex, \"gis\");\n        this.betweenRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.BetweenRegex, \"gis\");\n    }\n\n    getFromTokenIndex(text: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.fromRegex, text);\n    }\n\n    hasConnectorToken(text: string): boolean {\n        return RegExpUtility.getFirstMatchIndex(this.connectorAndRegex, text).matched;\n    }\n\n    getBetweenTokenIndex(text: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.betweenRegex, text);\n    }\n}\n\nexport class SpanishTimePeriodParserConfiguration implements ITimePeriodParserConfiguration {\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly timeParser: BaseTimeParser;\n    readonly pureNumberFromToRegex: RegExp;\n    readonly pureNumberBetweenAndRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.timeExtractor = config.timeExtractor;\n        this.timeParser = config.timeParser;\n        this.numbers = config.numbers;\n        this.utilityConfiguration = config.utilityConfiguration;\n        this.pureNumberFromToRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumFromTo, \"gis\");\n        this.pureNumberBetweenAndRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumBetweenAnd, \"gis\");\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfDayRegex, \"gis\");\n    }\n\n    getMatchedTimexRange(text: string): { matched: boolean; timex: string; beginHour: number; endHour: number; endMin: number; } {\n\n        let trimedText = text.trim().toLowerCase();\n\n        let beginHour = 0;\n        let endHour = 0;\n        let endMin = 0;\n        let timex = \"\";\n\n        if (trimedText.endsWith(\"madrugada\")) {\n            timex = \"TDA\";\n            beginHour = 4;\n            endHour = 8;\n        }\n        else if (trimedText.endsWith(\"mañana\")) {\n            timex = \"TMO\";\n            beginHour = 8;\n            endHour = 12;\n        }\n        else if (trimedText.includes(\"pasado mediodia\") || trimedText.includes(\"pasado el mediodia\")) {\n            timex = \"TAF\";\n            beginHour = 12;\n            endHour = 16;\n        }\n        else if (trimedText.endsWith(\"tarde\")) {\n            timex = \"TEV\";\n            beginHour = 16;\n            endHour = 20;\n        }\n        else if (trimedText.endsWith(\"noche\")) {\n            timex = \"TNI\";\n            beginHour = 20;\n            endHour = 23;\n            endMin = 59;\n        }\n        else {\n            timex = null;\n            return {\n                matched: false,\n                timex,\n                beginHour,\n                endHour,\n                endMin\n            };\n        }\n\n        return {\n            matched: true,\n            timex,\n            beginHour,\n            endHour,\n            endMin\n        };\n    }\n}","import { IExtractor, IParser, RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, SpanishCardinalExtractor } from \"recognizers-text-number\";\nimport { IDateTimePeriodExtractorConfiguration, IDateTimePeriodParserConfiguration, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser, IDateTimeExtractor } from \"../baseDateTime\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { IDateTimeParser, ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { SpanishDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { SpanishDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\";\nimport { SpanishDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { SpanishTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { DateTimeResolutionResult, DateUtils, FormatUtil } from \"../utilities\";\nimport { BaseTimePeriodExtractor } from \"../baseTimePeriod\";\nimport { SpanishTimePeriodExtractorConfiguration } from \"./timePeriodConfiguration\";\n\nexport class SpanishDateTimePeriodExtractorConfiguration implements IDateTimePeriodExtractorConfiguration {\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly singleDateExtractor: IDateTimeExtractor;\n    readonly singleTimeExtractor: IDateTimeExtractor;\n    readonly singleDateTimeExtractor: IDateTimeExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly simpleCasesRegexes: RegExp[];\n    readonly prepositionRegex: RegExp;\n    readonly tillRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly periodTimeOfDayWithDateRegex: RegExp;\n    readonly followedUnit: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly timeUnitRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n    readonly nextPrefixRegex: RegExp;\n    readonly relativeTimeUnitRegex: RegExp;\n    readonly restOfDateTimeRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly generalEndingRegex: RegExp;\n    readonly middlePauseRegex: RegExp;\n\n    readonly fromRegex: RegExp;\n    readonly connectorAndRegex: RegExp;\n    readonly betweenRegex: RegExp;\n\n\n    constructor() {\n        this.simpleCasesRegexes = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumFromTo),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumBetweenAnd)\n        ]\n\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PrepositionRegex);\n        this.tillRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TillRegex);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SpecificTimeOfDayRegex);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfDayRegex);\n        this.followedUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.FollowedUnit);\n        this.timeUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.UnitRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastRegex);\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FutureRegex);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(SpanishDateTime.DateTimePeriodNumberCombinedWithUnit);\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayRegex);\n        this.periodTimeOfDayWithDateRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PeriodTimeOfDayWithDateRegex);\n        this.relativeTimeUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RelativeTimeUnitRegex);\n        this.restOfDateTimeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RestOfDateTimeRegex);\n        this.generalEndingRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.GeneralEndingRegex);\n        this.middlePauseRegex= RegExpUtility.getSafeRegExp(SpanishDateTime.MiddlePauseRegex);\n\n        this.fromRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FromRegex);\n        this.connectorAndRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ConnectorAndRegex);\n        this.betweenRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.BetweenRegex);\n\n        this.cardinalExtractor = new SpanishCardinalExtractor();\n\n        this.singleDateExtractor = new BaseDateExtractor(new SpanishDateExtractorConfiguration());\n        this.singleTimeExtractor = new BaseTimeExtractor(new SpanishTimeExtractorConfiguration());\n        this.singleDateTimeExtractor = new BaseDateTimeExtractor(new SpanishDateTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new SpanishTimePeriodExtractorConfiguration());\n    }\n\n    getFromTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.fromRegex, source);\n    }\n\n    getBetweenTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.betweenRegex, source);\n    }\n\n    hasConnectorToken(source: string): boolean {\n        return RegExpUtility.getFirstMatchIndex(this.connectorAndRegex, source).matched;\n    }\n}\n\nexport class SpanishDateTimePeriodParserConfiguration implements IDateTimePeriodParserConfiguration {\n    readonly pureNumberFromToRegex: RegExp;\n    readonly pureNumberBetweenAndRegex: RegExp;\n    readonly periodTimeOfDayWithDateRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly pastRegex: RegExp;\n    readonly futureRegex: RegExp;\n    readonly relativeTimeUnitRegex: RegExp;\n    readonly restOfDateTimeRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly numberCombinedWithUnitRegex: RegExp;\n    readonly unitRegex: RegExp;\n\n    readonly nextPrefixRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n    readonly thisPrefixRegex: RegExp;\n\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly timeParser: BaseTimeParser;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly timePeriodParser: IDateTimeParser;\n    readonly durationParser: BaseDurationParser;\n    readonly cardinalExtractor: IExtractor;\n    readonly numberParser: IParser;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.dateExtractor = config.dateExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateTimeExtractor = config.dateTimeExtractor;\n        this.timePeriodExtractor = config.timePeriodExtractor;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.durationExtractor = config.durationExtractor;\n        this.numberParser = config.numberParser;\n        this.dateParser = config.dateParser;\n        this.timeParser = config.timeParser;\n        this.dateTimeParser = config.dateTimeParser;\n        this.timePeriodParser = config.timePeriodParser;\n        this.durationParser = config.durationParser;\n        this.unitMap = config.unitMap;\n        this.numbers = config.numbers;\n\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NextPrefixRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastPrefixRegex);\n        this.thisPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ThisPrefixRegex);\n\n        this.pureNumberFromToRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumFromTo);\n        this.pureNumberBetweenAndRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PureNumBetweenAnd);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SpecificTimeOfDayRegex);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfDayRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FutureRegex);\n        this.numberCombinedWithUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.DateTimePeriodNumberCombinedWithUnit);\n        this.unitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.UnitRegex);\n        this.periodTimeOfDayWithDateRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PeriodTimeOfDayWithDateRegex);\n        this.relativeTimeUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RelativeTimeUnitRegex);\n        this.restOfDateTimeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RestOfDateTimeRegex);\n    }\n\n    getMatchedTimeRange(source: string): { timeStr: string; beginHour: number; endHour: number; endMin: number; success: boolean; } {\n        let trimedText = source.trim().toLowerCase();\n        let timeStr = \"\";\n        let beginHour = 0;\n        let endHour = 0;\n        let endMin = 0;\n\n        if (trimedText.endsWith(\"madrugada\")) {\n            timeStr = \"TDA\";\n            beginHour = 4;\n            endHour = 8;\n        }\n        else if (trimedText.endsWith(\"mañana\")) {\n            timeStr = \"TMO\";\n            beginHour = 8;\n            endHour = 12;\n        }\n        else if (trimedText.includes(\"pasado mediodia\") || trimedText.includes(\"pasado el mediodia\")) {\n            timeStr = \"TAF\";\n            beginHour = 12;\n            endHour = 16;\n        }\n        else if (trimedText.endsWith(\"tarde\")) {\n            timeStr = \"TEV\";\n            beginHour = 16;\n            endHour = 20;\n        }\n        else if (trimedText.endsWith(\"noche\")) {\n            timeStr = \"TNI\";\n            beginHour = 20;\n            endHour = 23;\n            endMin = 59;\n        }\n        else {\n            timeStr = null;\n            return {\n                success: false,\n                timeStr,\n                beginHour,\n                endHour,\n                endMin\n            };\n        }\n\n        return {\n            success: true,\n            timeStr,\n            beginHour,\n            endHour,\n            endMin\n        };\n    }\n\n    getSwiftPrefix(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = 0;\n\n        // TODO: Replace with a regex\n        if (RegExpUtility.getFirstMatchIndex(this.pastPrefixRegex, trimedText).matched ||\n            trimedText === \"anoche\") {\n            swift = -1;\n        }\n        else if (RegExpUtility.getFirstMatchIndex(this.nextPrefixRegex, trimedText).matched) {\n            swift = 1;\n        }\n\n        return swift;\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { SpanishCardinalExtractor, SpanishIntegerExtractor, SpanishOrdinalExtractor, BaseNumberParser, SpanishNumberParserConfiguration } from \"recognizers-text-number\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { BaseDateParserConfiguration } from \"../parsers\";\nimport { BaseDateTime } from \"../../resources/baseDateTime\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { SpanishDateExtractorConfiguration, SpanishDateParserConfiguration } from \"./dateConfiguration\";\nimport { SpanishDateTimeExtractorConfiguration, SpanishDateTimeParserConfiguration } from \"./dateTimeConfiguration\";\nimport { SpanishDurationExtractorConfiguration, SpanishDurationParserConfiguration } from \"./durationConfiguration\";\nimport { SpanishDatePeriodExtractorConfiguration, SpanishDatePeriodParserConfiguration } from \"./datePeriodConfiguration\";\nimport { SpanishTimeExtractorConfiguration, SpanishTimeParserConfiguration } from \"./timeConfiguration\";\nimport { SpanishTimePeriodExtractorConfiguration, SpanishTimePeriodParserConfiguration } from \"./timePeriodConfiguration\";\nimport { SpanishDateTimePeriodExtractorConfiguration, SpanishDateTimePeriodParserConfiguration } from \"./dateTimePeriodConfiguration\";\n\nexport class SpanishDateTimeUtilityConfiguration implements IDateTimeUtilityConfiguration {\n    readonly agoRegex: RegExp;\n    readonly laterRegex: RegExp;\n    readonly inConnectorRegex: RegExp;\n    readonly rangeUnitRegex: RegExp;\n    readonly amDescRegex: RegExp;\n    readonly pmDescRegex: RegExp;\n    readonly amPmDescRegex: RegExp;\n\n    constructor() {\n        this.laterRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.LaterRegex);\n        this.agoRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AgoRegex);\n        this.inConnectorRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.InConnectorRegex);\n        this.rangeUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RangeUnitRegex);\n        this.amDescRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AmDescRegex);\n        this.pmDescRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PmDescRegex);\n        this.amPmDescRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AmPmDescRegex);\n    }\n}\n\nexport class SpanishCommonDateTimeParserConfiguration extends BaseDateParserConfiguration {\n\n    constructor() {\n        super();\n        this.utilityConfiguration = new SpanishDateTimeUtilityConfiguration();\n\n        this.unitMap = SpanishDateTime.UnitMap;\n        this.unitValueMap = SpanishDateTime.UnitValueMap;\n        this.seasonMap = SpanishDateTime.SeasonMap;\n        this.cardinalMap = SpanishDateTime.CardinalMap;\n        this.dayOfWeek = SpanishDateTime.DayOfWeek;\n        this.monthOfYear = SpanishDateTime.MonthOfYear;\n        this.numbers = SpanishDateTime.Numbers;\n        this.doubleNumbers = SpanishDateTime.DoubleNumbers;\n\n        this.cardinalExtractor = new SpanishCardinalExtractor();\n        this.integerExtractor = new SpanishIntegerExtractor();\n        this.ordinalExtractor = new SpanishOrdinalExtractor();\n\n        this.numberParser = new BaseNumberParser(new SpanishNumberParserConfiguration());\n        this.dateExtractor = new BaseDateExtractor(new SpanishDateExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new SpanishTimeExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new SpanishDateTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new SpanishDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new SpanishTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new SpanishDateTimePeriodExtractorConfiguration());\n        this.durationParser = new BaseDurationParser(new SpanishDurationParserConfiguration(this));\n        this.dateParser = new BaseDateParser(new SpanishDateParserConfiguration(this));\n        this.timeParser = new BaseTimeParser(new SpanishTimeParserConfiguration(this));\n        this.dateTimeParser = new BaseDateTimeParser(new SpanishDateTimeParserConfiguration(this));\n        this.datePeriodParser = new BaseDatePeriodParser(new SpanishDatePeriodParserConfiguration(this));\n        this.timePeriodParser = new BaseTimePeriodParser(new SpanishTimePeriodParserConfiguration(this));\n        this.dateTimePeriodParser = new BaseDateTimePeriodParser(new SpanishDateTimePeriodParserConfiguration(this));\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, BaseNumberParser, SpanishOrdinalExtractor, SpanishIntegerExtractor, SpanishNumberParserConfiguration } from \"recognizers-text-number\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { IDateExtractorConfiguration, IDateParserConfiguration } from \"../baseDate\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { SpanishDateTimeUtilityConfiguration, SpanishCommonDateTimeParserConfiguration } from \"./baseConfiguration\";\nimport { SpanishDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class SpanishDateExtractorConfiguration implements IDateExtractorConfiguration {\n    readonly dateRegexList: RegExp[];\n    readonly implicitDateList: RegExp[];\n    readonly monthEnd: RegExp;\n    readonly ofMonth: RegExp;\n    readonly dateUnitRegex: RegExp;\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly dayOfWeek: ReadonlyMap<string, number>;\n    readonly ordinalExtractor: BaseNumberExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor() {\n        this.dateRegexList = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor1, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor2, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor3, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor4, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor5, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor6, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor7, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor8, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor9, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor10, \"gis\"),\n        ];\n        this.implicitDateList = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.OnRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.RelaxedOnRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.SpecialDayRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.ThisRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.LastDateRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.NextDateRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayOfMonthRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.SpecialDateRegex, \"gis\")\n        ];\n\n        this.monthEnd = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthEndRegex, \"gis\");\n        this.ofMonth = RegExpUtility.getSafeRegExp(SpanishDateTime.OfMonthRegex, \"gis\");\n        this.dateUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.DateUnitRegex, \"gis\");\n        this.forTheRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ForTheRegex, \"gis\");\n        this.weekDayAndDayOfMothRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayAndDayOfMothRegex, \"gis\");\n        this.relativeMonthRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RelativeMonthRegex, \"gis\");\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayRegex, \"gis\");\n        this.dayOfWeek = SpanishDateTime.DayOfWeek;\n        this.ordinalExtractor = new SpanishOrdinalExtractor();\n        this.integerExtractor = new SpanishIntegerExtractor();\n        this.numberParser = new BaseNumberParser(new SpanishNumberParserConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n        this.utilityConfiguration = new SpanishDateTimeUtilityConfiguration();\n    }\n}\n\nexport class SpanishDateParserConfiguration implements IDateParserConfiguration {\n    readonly ordinalExtractor: BaseNumberExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly numberParser: BaseNumberParser;\n    readonly monthOfYear: ReadonlyMap<string, number>;\n    readonly dayOfMonth: ReadonlyMap<string, number>;\n    readonly dayOfWeek: ReadonlyMap<string, number>;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly cardinalMap: ReadonlyMap<string, number>;\n    readonly dateRegex: RegExp[];\n    readonly onRegex: RegExp;\n    readonly specialDayRegex: RegExp;\n    readonly nextRegex: RegExp;\n    readonly unitRegex: RegExp;\n    readonly monthRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly lastRegex: RegExp;\n    readonly thisRegex: RegExp;\n    readonly weekDayOfMonthRegex: RegExp;\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n    readonly dateTokenPrefix: string;\n\n    // TODO: implement the relative day regex if needed. If yes, they should be abstracted\n    static readonly relativeDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RelativeDayRegex);\n    static readonly nextPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NextPrefixRegex);\n    static readonly pastPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastPrefixRegex);\n\n    constructor(config: SpanishCommonDateTimeParserConfiguration) {\n        this.ordinalExtractor = config.ordinalExtractor;\n        this.integerExtractor = config.integerExtractor;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.durationExtractor = config.durationExtractor;\n        this.numberParser = config.numberParser;\n        this.durationParser = config.durationParser;\n        this.monthOfYear = config.monthOfYear;\n        this.dayOfMonth = config.dayOfMonth;\n        this.dayOfWeek = config.dayOfWeek;\n        this.unitMap = config.unitMap;\n        this.cardinalMap = config.cardinalMap;\n        this.dateRegex = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor1, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor2, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor3, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor4, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor5, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor6, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor7, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor8, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor9, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.DateExtractor10, \"gis\"),\n        ];\n        this.onRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.OnRegex, \"gis\");\n        this.specialDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SpecialDayRegex, \"gis\");\n        this.nextRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NextDateRegex, \"gis\");\n        this.unitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.DateUnitRegex, \"gis\");\n        this.monthRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.MonthRegex, \"gis\");\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayRegex, \"gis\");\n        this.lastRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.LastDateRegex, \"gis\");\n        this.thisRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ThisRegex, \"gis\");\n        this.weekDayOfMonthRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayOfMonthRegex, \"gis\");\n        this.forTheRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ForTheRegex, \"gis\");\n        this.weekDayAndDayOfMothRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.WeekDayAndDayOfMothRegex, \"gis\");\n        this.relativeMonthRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.RelativeMonthRegex, \"gis\");\n        this.utilityConfiguration = config.utilityConfiguration;\n        this.dateTokenPrefix = SpanishDateTime.DateTokenPrefix;\n    }\n\n    getSwiftDay(source: string): number {\n\n        let trimedText = SpanishDateParserConfiguration.normalize(source.trim().toLowerCase());\n        let swift = 0;\n\n        // TODO: add the relative day logic if needed. If yes, the whole method should be abstracted.\n        if (trimedText === \"hoy\" || trimedText === \"el dia\") {\n            swift = 0;\n        } else if (trimedText === \"mañana\" ||\n            trimedText.endsWith(\"dia siguiente\") ||\n            trimedText.endsWith(\"el dia de mañana\") ||\n            trimedText.endsWith(\"proximo dia\")) {\n            swift = 1;\n        } else if (trimedText === \"ayer\") {\n            swift = -1;\n        } else if (trimedText.endsWith(\"pasado mañana\") ||\n            trimedText.endsWith(\"dia despues de mañana\")) {\n            swift = 2;\n        } else if (trimedText.endsWith(\"anteayer\") ||\n            trimedText.endsWith(\"dia antes de ayer\")) {\n            swift = -2;\n        } else if (trimedText.endsWith(\"ultimo dia\")) {\n            swift = -1;\n        }\n\n        return swift;\n    }\n\n    getSwiftMonth(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = 0;\n        if (RegExpUtility.getMatches(SpanishDateParserConfiguration.nextPrefixRegex, trimedText).length) {\n            swift = 1;\n        }\n\n        if (RegExpUtility.getMatches(SpanishDateParserConfiguration.pastPrefixRegex, trimedText).length) {\n            swift = -1;\n        }\n\n        return swift;\n    }\n\n    isCardinalLast(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return RegExpUtility.getMatches(SpanishDateParserConfiguration.pastPrefixRegex, trimedText).length > 0;\n    }\n\n    private static normalize(source: string): string {\n        return source\n            .replace(/á/g, \"a\")\n            .replace(/é/g, \"e\")\n            .replace(/í/g, \"i\")\n            .replace(/ó/g, \"o\")\n            .replace(/ú/g, \"u\");\n    }\n}","import { IHolidayExtractorConfiguration, BaseHolidayParserConfiguration } from \"../baseHoliday\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { DateUtils } from \"../utilities\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\n\nexport class SpanishHolidayExtractorConfiguration implements IHolidayExtractorConfiguration {\n    readonly holidayRegexes: RegExp[];\n\n    constructor() {\n        this.holidayRegexes = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.HolidayRegex1, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.HolidayRegex2, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.HolidayRegex3, \"gis\")\n        ];\n    }\n}\n\nexport class SpanishHolidayParserConfiguration extends BaseHolidayParserConfiguration {\n\n    readonly nextPrefixRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n    readonly thisPrefixRegex: RegExp;\n\n    constructor() {\n        super();\n\n        this.holidayRegexList = [\n            RegExpUtility.getSafeRegExp(SpanishDateTime.HolidayRegex1, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.HolidayRegex2, \"gis\"),\n            RegExpUtility.getSafeRegExp(SpanishDateTime.HolidayRegex3, \"gis\")\n        ];\n\n        this.holidayNames = SpanishDateTime.HolidayNames;\n        this.holidayFuncDictionary = this.initHolidayFuncs();\n        this.variableHolidaysTimexDictionary = SpanishDateTime.VariableHolidaysTimexDictionary;\n\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.NextPrefixRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PastPrefixRegex);\n        this.thisPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.ThisPrefixRegex);\n    }\n\n    protected initHolidayFuncs(): ReadonlyMap<string, (year: number) => Date> {\n        return new Map<string, (year: number) => Date>(\n            [\n                ...super.initHolidayFuncs(),\n                [\"padres\", SpanishHolidayParserConfiguration.FathersDay],\n                [\"madres\", SpanishHolidayParserConfiguration.MothersDay],\n                [\"acciondegracias\", SpanishHolidayParserConfiguration.ThanksgivingDay],\n                [\"trabajador\", SpanishHolidayParserConfiguration.LabourDay],\n                [\"delaraza\", SpanishHolidayParserConfiguration.ColumbusDay],\n                [\"memoria\", SpanishHolidayParserConfiguration.MemorialDay],\n                [\"pascuas\", SpanishHolidayParserConfiguration.EasterDay],\n                [\"navidad\", SpanishHolidayParserConfiguration.ChristmasDay],\n                [\"nochebuena\", SpanishHolidayParserConfiguration.ChristmasEve],\n                [\"añonuevo\", SpanishHolidayParserConfiguration.NewYear],\n                [\"nochevieja\", SpanishHolidayParserConfiguration.NewYearEve],\n                [\"yuandan\", SpanishHolidayParserConfiguration.NewYear],\n                [\"maestro\", SpanishHolidayParserConfiguration.TeacherDay],\n                [\"todoslossantos\", SpanishHolidayParserConfiguration.HalloweenDay],\n                [\"niño\", SpanishHolidayParserConfiguration.ChildrenDay],\n                [\"mujer\", SpanishHolidayParserConfiguration.FemaleDay]\n            ]);\n    }\n\n    // All JavaScript dates are zero-based (-1)\n    private static NewYear(year: number): Date { return new Date(year, 1 - 1, 1); }\n    private static NewYearEve(year: number): Date { return new Date(year, 12 - 1, 31); }\n    private static ChristmasDay(year: number): Date { return new Date(year, 12 - 1, 25); }\n    private static ChristmasEve(year: number): Date { return new Date(year, 12 - 1, 24); }\n    private static FemaleDay(year: number): Date { return new Date(year, 3 - 1, 8); }\n    private static ChildrenDay(year: number): Date { return new Date(year, 6 - 1, 1); }\n    private static HalloweenDay(year: number): Date { return new Date(year, 10 - 1, 31); }\n    private static TeacherDay(year: number): Date { return new Date(year, 9 - 1, 11); }\n    private static EasterDay(year: number): Date { return DateUtils.minValue(); }\n\n    getSwiftYear(text: string): number {\n        let trimedText = text.trim().toLowerCase();\n        let swift = -10;\n\n        if (RegExpUtility.getFirstMatchIndex(this.nextPrefixRegex, trimedText).matched) {\n            swift = 1;\n        }\n\n        if (RegExpUtility.getFirstMatchIndex(this.pastPrefixRegex, trimedText).matched) {\n            swift = -1;\n        }\n        else if (RegExpUtility.getFirstMatchIndex(this.thisPrefixRegex, trimedText).matched) {\n            swift = 0;\n        }\n\n        return swift;\n    }\n\n    sanitizeHolidayToken(holiday: string): string {\n        return holiday.replace(/ /g, \"\")\n            .replace(/á/g, \"a\")\n            .replace(/é/g, \"e\")\n            .replace(/í/g, \"i\")\n            .replace(/ó/g, \"o\")\n            .replace(/ú/g, \"u\");\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { ISetExtractorConfiguration, ISetParserConfiguration } from \"../baseSet\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser, IDateTimeExtractor } from \"../baseDateTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { SpanishDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { SpanishDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { SpanishDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\";\nimport { SpanishDatePeriodExtractorConfiguration } from \"./datePeriodConfiguration\";\nimport { SpanishDateTimePeriodExtractorConfiguration } from \"./dateTimePeriodConfiguration\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { SpanishTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { SpanishTimePeriodExtractorConfiguration } from \"./timePeriodConfiguration\";\n\nexport class SpanishSetExtractorConfiguration implements ISetExtractorConfiguration {\n    readonly lastRegex: RegExp;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly beforeEachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n\n    constructor() {\n        this.lastRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.LastDateRegex, \"gis\");\n        this.periodicRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PeriodicRegex, \"gis\");\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.EachUnitRegex, \"gis\");\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.EachPrefixRegex, \"gis\");\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.EachDayRegex, \"gis\");\n        this.beforeEachDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.BeforeEachDayRegex, \"gis\");\n        this.setEachRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SetEachRegex, \"gis\");\n        this.setWeekDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SetWeekDayRegex, \"gis\");\n\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new SpanishTimeExtractorConfiguration());\n        this.dateExtractor = new BaseDateExtractor(new SpanishDateExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new SpanishDateTimeExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new SpanishDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new SpanishTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new SpanishDateTimePeriodExtractorConfiguration());\n    }\n}\n\nexport class SpanishSetParserConfiguration implements ISetParserConfiguration {\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly timeParser: BaseTimeParser;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly datePeriodParser: BaseDatePeriodParser;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodParser: BaseTimePeriodParser;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.durationExtractor = config.durationExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateExtractor = config.dateExtractor;\n        this.dateTimeExtractor = config.dateTimeExtractor;\n        this.datePeriodExtractor = config.datePeriodExtractor;\n        this.timePeriodExtractor = config.timePeriodExtractor;\n        this.dateTimePeriodExtractor = config.dateTimePeriodExtractor;\n        this.durationParser = config.durationParser;\n        this.timeParser = config.timeParser;\n        this.dateParser = config.dateParser;\n        this.dateTimeParser = config.dateTimeParser;\n        this.datePeriodParser = config.datePeriodParser;\n        this.timePeriodParser = config.timePeriodParser;\n        this.dateTimePeriodParser = config.dateTimePeriodParser;\n        this.unitMap = config.unitMap;\n\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.EachPrefixRegex, \"gis\");\n        this.periodicRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PeriodicRegex, \"gis\");\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.EachUnitRegex, \"gis\");\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.EachDayRegex, \"gis\");\n        this.setWeekDayRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SetWeekDayRegex, \"gis\");\n        this.setEachRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SetEachRegex, \"gis\");\n    }\n\n    getMatchedDailyTimex(text: string): { matched: boolean; timex: string; } {\n        let trimedText = text.trim().toLowerCase();\n        let timex = \"\";\n\n        if (trimedText.endsWith(\"diario\") || trimedText.endsWith(\"diariamente\")) {\n            timex = \"P1D\";\n        }\n        else if (trimedText === \"semanalmente\") {\n            timex = \"P1W\";\n        }\n        else if (trimedText === \"quincenalmente\") {\n            timex = \"P2W\";\n        }\n        else if (trimedText === \"mensualmente\") {\n            timex = \"P1M\";\n        }\n        else if (trimedText === \"anualmente\") {\n            timex = \"P1Y\";\n        }\n        else {\n            timex = null;\n            return {\n                timex,\n                matched: false\n            };\n        }\n\n        return {\n            timex,\n            matched: true\n        }\n    }\n\n    getMatchedUnitTimex(text: string): { matched: boolean; timex: string; } {\n        let trimedText = text.trim().toLowerCase();\n        let timex = \"\";\n\n        if (trimedText === \"día\" || trimedText === \"dia\" ||\n            trimedText === \"días\" || trimedText === \"dias\") {\n            timex = \"P1D\";\n        }\n        else if (trimedText === \"semana\" || trimedText === \"semanas\") {\n            timex = \"P1W\";\n        }\n        else if (trimedText === \"mes\" || trimedText === \"meses\") {\n            timex = \"P1M\";\n        }\n        else if (trimedText === \"año\" || trimedText === \"años\") {\n            timex = \"P1Y\";\n        }\n        else {\n            timex = null;\n            return {\n                matched: false,\n                timex\n            };\n        }\n\n        return {\n            matched: true,\n            timex\n        };\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { BaseDateTimePeriodParser, IDateTimePeriodParserConfiguration } from \"../baseDateTimePeriod\";\nimport { DateTimeResolutionResult, DateUtils, FormatUtil } from \"../utilities\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\n\nexport class SpanishDateTimePeriodParser extends BaseDateTimePeriodParser {\n    constructor(config: IDateTimePeriodParserConfiguration) {\n        super(config);\n    }\n\n    protected parseSpecificTimeOfDay(source: string, referenceDate: Date): DateTimeResolutionResult {\n\n        let ret = new DateTimeResolutionResult();\n        let trimedText = source.trim().toLowerCase();\n\n        // handle morning, afternoon..\n        let match = this.config.getMatchedTimeRange(trimedText);\n        let beginHour = match.beginHour;\n        let endHour = match.endHour;\n        let endMin = match.endMin;\n        let timeStr = match.timeStr;\n        if (!match.success) {\n            return ret;\n        }\n\n        let matches = RegExpUtility.getMatches(this.config.specificTimeOfDayRegex, trimedText);\n        if (matches.length && matches[0].index === 0 && matches[0].length === trimedText.length) {\n            let swift = this.config.getSwiftPrefix(trimedText);\n\n            let date = DateUtils.addDays(referenceDate, swift)\n            date.setHours(0, 0, 0, 0);\n            let day = date.getDate();\n            let month = date.getMonth();\n            let year = date.getFullYear();;\n\n            ret.timex = FormatUtil.formatDate(date) + timeStr;\n\n            ret.pastValue = ret.futureValue = [\n                DateUtils.safeCreateFromValue(DateUtils.minValue(), year, month, day, beginHour, 0, 0),\n                DateUtils.safeCreateFromValue(DateUtils.minValue(), year, month, day, endHour, endMin, endMin),\n            ];\n\n            ret.success = true;\n            return ret;\n        }\n\n        let startIndex = trimedText.indexOf(SpanishDateTime.Tomorrow) === 0 ? SpanishDateTime.Tomorrow.length : 0;\n\n        // handle Date followed by morning, afternoon\n        // Add handling code to handle morning, afternoon followed by Date\n        // Add handling code to handle early/late morning, afternoon\n        // TODO: use regex from config: match = this.config.TimeOfDayRegex.Match(trimedText.Substring(startIndex));\n        matches = RegExpUtility.getMatches(RegExpUtility.getSafeRegExp(SpanishDateTime.TimeOfDayRegex), trimedText.substring(startIndex));\n        if (matches.length) {\n            let match = matches[0];\n            let beforeStr = trimedText.substring(0, match.index + startIndex).trim();\n            let ers = this.config.dateExtractor.extract(beforeStr, referenceDate);\n            if (ers.length === 0) {\n                return ret;\n            }\n\n            let pr = this.config.dateParser.parse(ers[0], referenceDate);\n\n            let futureDate = (pr.value as DateTimeResolutionResult).futureValue;\n            let pastDate = (pr.value as DateTimeResolutionResult).pastValue;\n\n            ret.timex = pr.timexStr + timeStr;\n\n            ret.futureValue = [\n                DateUtils.safeCreateFromValue(DateUtils.minValue(), futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), beginHour, 0, 0),\n                DateUtils.safeCreateFromValue(DateUtils.minValue(), futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), endHour, endMin, endMin)\n            ];\n\n            ret.pastValue = [\n                DateUtils.safeCreateFromValue(DateUtils.minValue(), pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), beginHour, 0, 0),\n                DateUtils.safeCreateFromValue(DateUtils.minValue(), pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), endHour, endMin, endMin)\n            ];\n\n            ret.success = true;\n\n            return ret;\n        }\n\n        return ret;\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, SpanishIntegerExtractor } from \"recognizers-text-number\";\nimport { IMergedExtractorConfiguration, IMergedParserConfiguration } from \"../baseMerged\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser, IDateTimeExtractor } from \"../baseDateTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseHolidayExtractor, BaseHolidayParser } from \"../baseHoliday\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { BaseSetExtractor, BaseSetParser } from \"../baseSet\";\nimport { SpanishDateTime } from \"../../resources/spanishDateTime\";\nimport { SpanishDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { SpanishDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\";\nimport { SpanishDatePeriodExtractorConfiguration, SpanishDatePeriodParserConfiguration } from \"./datePeriodConfiguration\";\nimport { SpanishDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { SpanishHolidayExtractorConfiguration, SpanishHolidayParserConfiguration } from \"./holidayConfiguration\";\nimport { SpanishCommonDateTimeParserConfiguration } from \"./baseConfiguration\";\nimport { SpanishTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { SpanishTimePeriodExtractorConfiguration, SpanishTimePeriodParserConfiguration } from \"./timePeriodConfiguration\";\nimport { SpanishDateTimePeriodExtractorConfiguration, SpanishDateTimePeriodParserConfiguration } from \"./dateTimePeriodConfiguration\";\nimport { SpanishSetExtractorConfiguration, SpanishSetParserConfiguration } from \"./setConfiguration\";\nimport { SpanishDateTimePeriodParser } from \"./dateTimePeriodParser\";\n\nexport class SpanishMergedExtractorConfiguration implements IMergedExtractorConfiguration {\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n    readonly holidayExtractor: IDateTimeExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly setExtractor: IDateTimeExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly afterRegex: RegExp;\n    readonly beforeRegex: RegExp;\n    readonly sinceRegex: RegExp;\n    readonly fromToRegex: RegExp;\n    readonly singleAmbiguousMonthRegex: RegExp;\n    readonly prepositionSuffixRegex: RegExp;\n    readonly numberEndingPattern: RegExp;\n    readonly filterWordRegexList: RegExp[];\n\n    constructor() {\n        this.beforeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.BeforeRegex);\n        this.afterRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AfterRegex);\n        this.sinceRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SinceRegex);\n        this.fromToRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.FromToRegex);\n        this.singleAmbiguousMonthRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SingleAmbiguousMonthRegex);\n        this.prepositionSuffixRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.PrepositionSuffixRegex);\n        this.numberEndingPattern = RegExpUtility.getSafeRegExp(SpanishDateTime.NumberEndingPattern);\n\n        this.dateExtractor = new BaseDateExtractor(new SpanishDateExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new SpanishTimeExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new SpanishDateTimeExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new SpanishDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new SpanishTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new SpanishDateTimePeriodExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new SpanishDurationExtractorConfiguration());\n        this.setExtractor = new BaseSetExtractor(new SpanishSetExtractorConfiguration());\n        this.holidayExtractor = new BaseHolidayExtractor(new SpanishHolidayExtractorConfiguration());\n        this.integerExtractor = new SpanishIntegerExtractor();\n        this.filterWordRegexList = [];\n    }\n}\n\nexport class SpanishMergedParserConfiguration extends SpanishCommonDateTimeParserConfiguration implements IMergedParserConfiguration {\n    readonly beforeRegex: RegExp;\n    readonly afterRegex: RegExp;\n    readonly sinceRegex: RegExp;\n    readonly dateParser: BaseDateParser;\n    readonly holidayParser: BaseHolidayParser;\n    readonly timeParser: BaseTimeParser;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly datePeriodParser: BaseDatePeriodParser;\n    readonly timePeriodParser: BaseTimePeriodParser;\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser;\n    readonly durationParser: BaseDurationParser;\n    readonly setParser: BaseSetParser;\n\n    constructor() {\n        super();\n\n        this.beforeRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.BeforeRegex);\n        this.afterRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.AfterRegex);\n        this.sinceRegex = RegExpUtility.getSafeRegExp(SpanishDateTime.SinceRegex);\n\n        this.datePeriodParser = new BaseDatePeriodParser(new SpanishDatePeriodParserConfiguration(this));\n        this.timePeriodParser = new BaseTimePeriodParser(new SpanishTimePeriodParserConfiguration(this));\n        this.dateTimePeriodParser = new SpanishDateTimePeriodParser(new SpanishDateTimePeriodParserConfiguration(this));\n        this.setParser = new BaseSetParser(new SpanishSetParserConfiguration(this));\n        this.holidayParser = new BaseHolidayParser(new SpanishHolidayParserConfiguration());\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseDateTime } from \"./baseDateTime\";\nexport namespace FrenchDateTime {\n\texport const TillRegex = `(?<till>au|[aà]|et|jusqu'[aà]|avant|--|-|—|——)`;\n\texport const RangeConnectorRegex = `(?<and>et|de la|au|[aà]|et\\\\s*la|--|-|—|——)`;\n\texport const RelativeRegex = `(?<order>prochain|prochaine|de|du|ce|cette|l[ae]|derni[eè]re|pr[eé]c[eé]dente|au\\\\s+cours+(de|du\\\\s*))`;\n\texport const NextSuffixRegex = `(?<order>prochain|prochaine|prochaines|suivante)\\\\b`;\n\texport const PastSuffixRegex = `(?<order>dernier|derni[eè]re|pr[eé]c[eé]dente)\\\\b`;\n\texport const ThisPrefixRegex = `(?<order>ce|cette|au\\\\s+cours+(du|de))\\\\b`;\n\texport const DayRegex = `(?<day>01|02|03|04|05|06|07|08|09|10|11|11e|12|12e|13|13e|14|14e|15|15e|16|16e|17|17e|18|18e|19|19e|1er|1|21|21e|20|20e|22|22e|23|23e|24|24e|25|25e|26|26e|27|27e|28|28e|29|29e|2|2e|30|30e|31|31e|3|3e|4|4e|5|5e|6|6e|7|7e|8|8e|9|9e)(?=\\\\b|t)`;\n\texport const MonthNumRegex = `(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\\\b`;\n\texport const PeriodYearRegex = `\\\\b(?<year>19\\\\d{2}|20\\\\d{2})\\\\b`;\n\texport const WeekDayRegex = `(?<weekday>Dimanche|Lundi|Mardi|Mecredi|Jeudi|Vendredi|Samedi|Lun|Mar|Mer|Jeu|Ven|Sam|Dim)\\\\b`;\n\texport const RelativeMonthRegex = `(?<relmonth>(${ThisPrefixRegex}\\\\s+mois)|(mois\\\\s+${PastSuffixRegex})|(mois\\\\s+${NextSuffixRegex}))\\\\b`;\n\texport const EngMonthRegex = `(?<month>Avril|Avr\\\\.|Avr|Août|D[eé]cembre|D[eé]c|D[eé]c\\\\.|F[eé]vrier|F[eé]v|F[eé]vr\\\\.|F[eé]vr|Javier|Jan|Janv\\\\.|Janv|Juillet|Jul|Juil|Juil\\\\.|Juin|Jun|Mars|Mar|Mai|Novembre|Nov|Nov\\\\.|Octobre|Oct|Oct\\\\.|Septembre|Sep|Sept|Sept\\\\.)`;\n\texport const MonthSuffixRegex = `(?<msuf>(en\\\\s*|le\\\\s*|de\\\\s*|dans\\\\s*)?(${RelativeMonthRegex}|${EngMonthRegex}))`;\n\texport const DateUnitRegex = `(?<unit>l'ann[eé]e|ann[eé]es|an|mois|semaines|semaine|jours|jour|journ[eé]e|journ[eé]es)\\\\b`;\n\texport const SimpleCasesRegex = `\\\\b((d[ue])|entre\\\\s+)?(${DayRegex})\\\\s*${TillRegex}\\\\s*(${DayRegex})\\\\s+${MonthSuffixRegex}((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const MonthFrontSimpleCasesRegex = `\\\\b((d[ue]|entre)\\\\s+)?${MonthSuffixRegex}\\\\s+((d[ue]|entre)\\\\s+)?(${DayRegex})\\\\s*${TillRegex}\\\\s*(${DayRegex})((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const MonthFrontBetweenRegex = `\\\\b${MonthSuffixRegex}\\\\s+(entre|d[ue]\\\\s+)(${DayRegex})\\\\s*${RangeConnectorRegex}\\\\s*(${DayRegex})((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const BetweenRegex = `\\\\b(entre\\\\s+)(${DayRegex})\\\\s*${RangeConnectorRegex}\\\\s*(${DayRegex})\\\\s+${MonthSuffixRegex}((\\\\s+|\\\\s*,\\\\s*)${PeriodYearRegex})?\\\\b`;\n\texport const YearWordRegex = `\\\\b(?<year>l'ann[ée]e)\\\\b`;\n\texport const MonthWithYear = `\\\\b((?<month>Avril|Avr\\\\.|Avr|Août|Aout|Decembre|D[eé]c|Dec\\\\.|F[eé]v|F[eé]vr|Fev|F[eé]vrier|F[eé]v\\\\.|Janvier|Jan|Janv|Janv\\\\.|Jan\\\\.|Jul|Juillet|Juil\\\\.|Jun|Juin|Mar|Mars|Mai|Novembre|Nov|Nov\\\\.|Octobre|Oct|Oct\\\\.|Septembre|Sep|Sept|Sept\\\\.),?(\\\\s+de)?\\\\s+(${PeriodYearRegex}|(?<order>cette)\\\\s*${YearWordRegex})|${YearWordRegex}\\\\s*(${PastSuffixRegex}|${NextSuffixRegex}))`;\n\texport const OneWordPeriodRegex = `\\\\b((${RelativeRegex}\\\\s+)?(?<month>Avril|Avr\\\\.|Avr|Août|Aout|D[eé]cembre|Dec|D[eé]c\\\\.|F[eé]vrier|Fev|F[eé]v\\\\.|F[eé]vr|Janvier|Janv\\\\.|Janv|Jan|Jan\\\\.|Jul|Juillet|Juil\\\\.|Jun|Juin|Mar|Mars|Mai|Nov|Novembre|Nov\\\\.|Oct|Octobre|Oct\\\\.|Sep|Septembre|Sept\\\\.)|${RelativeRegex}\\\\s+(weekend|fin de semaine|week-end|semaine|mois|ans|l'année)|weekend|week-end|(mois|l'année))\\\\b`;\n\texport const MonthNumWithYear = `(${PeriodYearRegex}[/\\\\-\\\\.]${MonthNumRegex})|(${MonthNumRegex}[/\\\\-]${PeriodYearRegex})`;\n\texport const WeekOfMonthRegex = `(?<wom>(le\\\\s+)?(?<cardinal>premier|1er|duexi[èe]me|2|troisi[èe]me|3|quatri[èe]me|4|cinqi[èe]me|5)\\\\s+semaine\\\\s+${MonthSuffixRegex})`;\n\texport const WeekOfYearRegex = `(?<woy>(le\\\\s+)?(?<cardinal>premier|1er|duexi[èe]me|2|troisi[èe]me|3|quatri[èe]me|4|cinqi[èe]me|5)\\\\s+semaine(\\\\s+de)?\\\\s+(${PeriodYearRegex}|${RelativeRegex}\\\\s+ann[ée]e))`;\n\texport const FollowedDateUnit = `^\\\\s*${DateUnitRegex}`;\n\texport const NumberCombinedWithDateUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)${DateUnitRegex}`;\n\texport const QuarterRegex = `(le\\\\s+)?(?<cardinal>premier|1er|duexi[èe]me|2|troisi[èe]me|3|quatri[èe]me|4)\\\\s+quart(\\\\s+de|\\\\s*,\\\\s*)?\\\\s+(${PeriodYearRegex}|${RelativeRegex}\\\\s+l'ann[eé]e)`;\n\texport const QuarterRegexYearFront = `(${PeriodYearRegex}|l'année\\\\s+(${PastSuffixRegex}|${NextSuffixRegex})|${RelativeRegex}\\\\s+ann[eé]e)\\\\s+(le\\\\s+)?(?<cardinal>premier|1er|duexi[èe]me|2|troisi[èe]me|3|quatri[èe]me|4)\\\\s+quarts`;\n\texport const SeasonRegex = `\\\\b((<seas>printemps|été|automne|hiver)+\\\\s*(${NextSuffixRegex}|${PastSuffixRegex}))|(?<season>(${RelativeRegex}\\\\s+)?(?<seas>printemps|[ée]t[ée]|automne|hiver)((\\\\s+de|\\\\s*,\\\\s*)?\\\\s+(${PeriodYearRegex}|${RelativeRegex}\\\\s+l'ann[eé]e))?)\\\\b`;\n\texport const WhichWeekRegex = `(semaine)(\\\\s*)(?<number>\\\\d\\\\d|\\\\d|0\\\\d)`;\n\texport const WeekOfRegex = `(semaine)(\\\\s*)(de)`;\n\texport const MonthOfRegex = `(mois)(\\\\s*)(de)`;\n\texport const MonthRegex = `(?<month>Avril|Avr|Avr\\\\.|Août|Aout|Decembre|D[eé]c|Dec\\\\.|F[eé]vrier|F[eé]vr|Fev|F[eé]v|F[eé]v\\\\.|Janvier|Janv\\\\.|Janv|Jan|Jan\\\\.|Juillet|Juil|Juil\\\\.|Juin|Mars|Mai|Novembre|Nov|Nov\\\\.|Octobre|Oct|Oct\\\\.|Septembre|Sep|Sept|Sept\\\\.)`;\n\texport const DateYearRegex = `(?<year>19\\\\d{2}|20\\\\d{2}|((9\\\\d|0\\\\d|1\\\\d|2\\\\d)(?!\\\\s*\\\\:)))`;\n\texport const OnRegex = `(?<=\\\\b(en|sur\\\\s*l[ea]|sur)\\\\s+)(${DayRegex}s?)\\\\b`;\n\texport const RelaxedOnRegex = `(?<=\\\\b(en|le|dans|sur\\\\s*l[ea]|du|sur)\\\\s+)((?<day>10e|11e|12e|13e|14e|15e|16e|17e|18e|19e|1er|20e|21e|22e|23e|24e|25e|26e|27e|28e|29e|2e|30e|31e|3e|4e|5e|6e|7e|8e|9e)s?)\\\\b`;\n\texport const ThisRegex = `\\\\b((cette(\\\\s*semaine)?\\\\s+)${WeekDayRegex})|(${WeekDayRegex}(\\\\s+cette\\\\s*semaine))\\\\b`;\n\texport const LastDateRegex = `\\\\b((${WeekDayRegex}(\\\\s*(de)?\\\\s*la\\\\s*semaine\\\\s+${PastSuffixRegex}))|(${WeekDayRegex}(\\\\s+${PastSuffixRegex})))\\\\b`;\n\texport const NextDateRegex = `\\\\b((${WeekDayRegex}(\\\\s+${NextSuffixRegex}))|(${WeekDayRegex}(\\\\s*(de)?\\\\s*la\\\\s*semaine\\\\s+${NextSuffixRegex})))\\\\b`;\n\texport const SpecialDayRegex = `\\\\b(avant[\\\\s|-]hier|apr[eè]s(-demain|\\\\s*demain)|(le\\\\s)?jour suivant|(le\\\\s+)?dernier jour|hier|lendemain|demain|de la journ[ée]e|aujourd'hui)\\\\b`;\n\texport const StrictWeekDay = `\\\\b(?<weekday>Dimanche|Lundi|Mardi|Mecredi|Jeudi|Vendredi|Samedi|Lun|Mar|Mer|Jeu|Ven|Sam|Dim)s?\\\\b`;\n\texport const SetWeekDayRegex = `\\\\b(?<prefix>le\\\\s+)?(?<weekday>matin|matin[ée]e|apres-midi|soir[ée]e|soir|Dimanche|Lundi|Mardi|Mercredi|Jeudi|Vendredi|Samedi)s\\\\b`;\n\texport const WeekDayOfMonthRegex = `(?<wom>(le\\\\s+)?(?<cardinal>premier|1er|duexi[èe]me|2|troisi[èe]me|3|quatri[èe]me|4|cinqi[èe]me|5)\\\\s+${WeekDayRegex}\\\\s+${MonthSuffixRegex})`;\n\texport const NumberEndingPattern = `^[.]`;\n\texport const SpecialDate = `(?<=\\\\b([àa]|au|le)\\\\s+)${DayRegex}\\\\b`;\n\texport const DateExtractor1 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${MonthRegex}\\\\s*[/\\\\\\\\\\\\.\\\\-]?\\\\s*${DayRegex}\\\\b`;\n\texport const DateExtractor2 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${DayRegex}(\\\\s+|\\\\s*,\\\\s*|\\\\s+)${MonthRegex}\\\\s*[\\\\.\\\\-]?\\\\s*${DateYearRegex}\\\\b`;\n\texport const DateExtractor3 = `\\\\b(${WeekDayRegex}(\\\\s+|\\\\s*,\\\\s*))?${DayRegex}(\\\\s+|\\\\s*,\\\\s*|\\\\s*-\\\\s*)${MonthRegex}((\\\\s+|\\\\s*,\\\\s*)${DateYearRegex})?\\\\b`;\n\texport const DateExtractor4 = `\\\\b${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DayRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DateYearRegex}`;\n\texport const DateExtractor5 = `\\\\b${DayRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DateYearRegex}`;\n\texport const DateExtractor6 = `(?<=\\\\b(le|sur|sur l[ae])\\\\s+)${MonthNumRegex}[\\\\-\\\\.\\\\/]${DayRegex}\\\\b`;\n\texport const DateExtractor7 = `\\\\b${DayRegex}\\\\s*/\\\\s*${MonthNumRegex}((\\\\s+|\\\\s*,\\\\s*)${DateYearRegex})?\\\\b`;\n\texport const DateExtractor8 = `(?<=\\\\b(le)\\\\s+)${DayRegex}[\\\\\\\\\\\\-]${MonthNumRegex}\\\\b`;\n\texport const DateExtractor9 = `\\\\b${DayRegex}\\\\s*/\\\\s*${MonthNumRegex}((\\\\s+|\\\\s*,\\\\s*)${DateYearRegex})?\\\\b`;\n\texport const DateExtractorA = `\\\\b${DateYearRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DayRegex}`;\n\texport const OfMonth = `^\\\\s*de\\\\s*${MonthRegex}`;\n\texport const MonthEnd = `${MonthRegex}\\\\s*(le)?\\\\s*$`;\n\texport const RangeUnitRegex = `\\\\b(?<unit>l'année|ann[eé]e(s)?|mois|semaines|semaine)\\\\b`;\n\texport const DescRegex = `(?<desc>h|ampm|am\\\\b|a\\\\.m\\\\.|a m\\\\b|a\\\\. m\\\\.|a\\\\.m\\\\b|a\\\\. m\\\\b|pm\\\\b|p\\\\.m\\\\.|p m\\\\b|p\\\\. m\\\\.|p\\\\.m\\\\b|p\\\\. m\\\\b|p\\\\b\\\\b)`;\n\texport const HourNumRegex = `\\\\b(?<hournum>zero|un|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|dix-six|dix-sept|dix-huit|dix-neuf|vingt|vingt-et-un|vingt-deux|vingt-trois)\\\\b`;\n\texport const MinuteNumRegex = `(?<minnum>un|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|seize|dix-sept|dix-huit|dix-neuf|vingt|trente|quarante|cinquante)`;\n\texport const DeltaMinuteNumRegex = `(?<deltaminnum>un|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|seize|dix-sept|dix-huit|dix-neuf|vingt|trente|quarante|cinquante)`;\n\texport const OclockRegex = `(?<oclock>heure|heures|h)`;\n\texport const PmRegex = `(?<pm>(dans l'\\\\s*)?apr[eè]s(\\\\s*|-)midi|(du|ce|de|le)\\\\s*(soir[ée]e|soir)|(dans l[ea]\\\\s+)?(nuit|soir[eé]e))`;\n\texport const AmRegex = `(?<am>(du|de|ce|(du|de|dans)\\\\s*l[ea]|le)?\\\\s*matin[ée]e|(du|de|ce|dans l[ea]|le)?\\\\s*matin)`;\n\texport const LessThanOneHour = `(?<lth>(une\\\\s+)?quart|trois quart(s)?|demie( heure)?|${BaseDateTime.DeltaMinuteRegex}(\\\\s+(minute|minutes|min|mins))|${DeltaMinuteNumRegex}(\\\\s+(minute|minutes|min|mins)))`;\n\texport const EngTimeRegex = `(?<engtime>${HourNumRegex}\\\\s+(${MinuteNumRegex}|(?<tens>vingt|trente|quarante|cinquante)\\\\s+${MinuteNumRegex}))`;\n\texport const TimePrefix = `(?<prefix>(heures\\\\s*et\\\\s+${LessThanOneHour}|et ${LessThanOneHour}|${LessThanOneHour} [àa]))`;\n\texport const TimeSuffix = `(?<suffix>${AmRegex}|${PmRegex}|${OclockRegex})`;\n\texport const BasicTime = `(?<basictime>${EngTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex}:${BaseDateTime.MinuteRegex}(:${BaseDateTime.SecondRegex})?|${BaseDateTime.HourRegex})`;\n\texport const MidnightRegex = `(?<midnight>minuit)`;\n\texport const MorningRegex = `(?<morning>matin[ée]e|matin)`;\n\texport const AfternoonRegex = `(?<afternoon>(d'|l')?apr[eè]s(-|\\\\s*)midi)`;\n\texport const MidmorningRegex = `(?<midmorning>milieu\\\\s*d[ue]\\\\s*${MorningRegex})`;\n\texport const MiddayRegex = `(?<midday>milieu(\\\\s*|-)d[eu]\\\\s*(jour|midi)|apr[eè]s(-|\\\\s*)midi)`;\n\texport const MidafternoonRegex = `(?<midafternoon>milieu\\\\s*d'+${AfternoonRegex})`;\n\texport const MidTimeRegex = `(?<mid>(${MidnightRegex}|${MidmorningRegex}|${MidafternoonRegex}|${MiddayRegex}))`;\n\texport const AtRegex = `\\\\b(((?<=\\\\b[àa]\\\\s+)(${EngTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex}|${MidTimeRegex}))|${MidTimeRegex})\\\\b`;\n\texport const IshRegex = `\\\\b(peu\\\\s*pr[èe]s\\\\s*${BaseDateTime.HourRegex}|peu\\\\s*pr[èe]s\\\\s*${EngTimeRegex}|peu\\\\s*pr[èe]s\\\\s*[àa]\\\\s*${BaseDateTime.HourRegex}|peu pr[èe]s midi)\\\\b`;\n\texport const TimeUnitRegex = `(?<unit>heures|heure|hrs|hr|h|minutes|minute|mins|min|secondes|seconde|secs|sec)\\\\b`;\n\texport const RestrictedTimeUnitRegex = `(?<unit>huere|minute)\\\\b`;\n\texport const ConnectNumRegex = `${BaseDateTime.HourRegex}(?<min>00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59)\\\\s*${DescRegex}`;\n\texport const FivesRegex = `(?<tens>(quinze|vingt(\\\\s*|-*(cinq))?|trente(\\\\s*|-*(cinq))?|quarante(\\\\s*|-*(cinq))??|cinquante(\\\\s*|-*(cinq))?|dix|cinq))\\\\b`;\n\texport const PeriodHourNumRegex = `(?<hour>vingt-et-un|vingt-deux|vingt-trois|vingt-quatre|zero|une|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|seize|dix-sept|dix-huit|dix-neuf|vingt)`;\n\texport const TimeRegex1 = `\\\\b(${EngTimeRegex}|${HourNumRegex}|${BaseDateTime.HourRegex})\\\\s*${DescRegex}(\\\\s+${TimePrefix})?`;\n\texport const TimeRegex2 = `(\\\\b${TimePrefix}\\\\s+)?(T)?${BaseDateTime.HourRegex}(\\\\s*)?:(\\\\s*)?${BaseDateTime.MinuteRegex}((\\\\s*)?:(\\\\s*)?${BaseDateTime.SecondRegex})?((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex3 = `\\\\b${BaseDateTime.HourRegex}\\\\.${BaseDateTime.MinuteRegex}(\\\\s*${DescRegex})(\\\\s+${TimePrefix})?`;\n\texport const TimeRegex4 = `\\\\b${BasicTime}(\\\\s*${DescRegex})?(\\\\s+${TimePrefix})?\\\\s+${TimeSuffix}\\\\b`;\n\texport const TimeRegex5 = `\\\\b${BasicTime}((\\\\s*${DescRegex})|\\\\b)(\\\\s+${TimePrefix})?`;\n\texport const TimeRegex6 = `${BasicTime}(\\\\s*${DescRegex})?\\\\s+${TimeSuffix}\\\\b`;\n\texport const TimeRegex7 = `\\\\b${TimeSuffix}\\\\s+[àa]\\\\s+${BasicTime}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex8 = `\\\\b${TimeSuffix}\\\\s+${BasicTime}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const TimeRegex9 = `\\\\b${PeriodHourNumRegex}\\\\s+${FivesRegex}((\\\\s*${DescRegex})|\\\\b)`;\n\texport const HourRegex = `(?<hour>00|01|02|03|04|05|06|07|08|09|0|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|1|2|3|4|5|6|7|8|9)`;\n\texport const PeriodDescRegex = `(?<desc>pm|am|p\\\\.m\\\\.|a\\\\.m\\\\.|p)`;\n\texport const PeriodPmRegex = `(?<pm>dans l'apr[eè]s-midi|ce soir|d[eu] soir|dans l[ea] soir[eé]e|dans la nuit|d[eu] soir[ée]e)s?`;\n\texport const PeriodAmRegex = `(?<am>matin|d[eu] matin|matin[ée]e)s?`;\n\texport const PureNumFromTo = `((du|de|des|depuis)\\\\s+)?(${HourRegex}|${PeriodHourNumRegex})(\\\\s*(?<leftDesc>${PeriodDescRegex}))?\\\\s*${TillRegex}\\\\s*(${HourRegex}|${PeriodHourNumRegex})\\\\s*(?<rightDesc>${PmRegex}|${AmRegex}|${PeriodDescRegex})?`;\n\texport const PureNumBetweenAnd = `(entre\\\\s+)(${HourRegex}|${PeriodHourNumRegex})(\\\\s*(?<leftDesc>${PeriodDescRegex}))?\\\\s*${RangeConnectorRegex}\\\\s*(${HourRegex}|${PeriodHourNumRegex})\\\\s*(?<rightDesc>${PmRegex}|${AmRegex}|${PeriodDescRegex})?`;\n\texport const PrepositionRegex = `(?<prep>^([aà] la|en|sur\\\\s*l[ea]|sur|de)$)`;\n\texport const TimeOfDayRegex = `\\\\b(?<timeOfDay>((((dans\\\\s+(l[ea])?\\\\s+)?((?<early>d[eé]but(\\\\s+|-)|t[oô]t(\\\\s+|-)(l[ea]\\\\s*)?)|(?<late>fin\\\\s*|fin de(\\\\s+(la)?)|tard\\\\s*))?(matin[ée]e|matin|((d|l)?'?)apr[eè]s[-|\\\\s*]midi|nuit|soir[eé]e|soir)))|(((\\\\s+(l[ea])?\\\\s+)?)(jour|journ[eé]e)))s?)\\\\b`;\n\texport const SpecificTimeOfDayRegex = `\\\\b((${RelativeRegex}\\\\s+${TimeOfDayRegex})|(${TimeOfDayRegex}\\\\s*(${NextSuffixRegex}))\\\\b|\\\\bsoir|\\\\bdu soir)s?\\\\b`;\n\texport const TimeFollowedUnit = `^\\\\s*${TimeUnitRegex}`;\n\texport const TimeNumberCombinedWithUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)${TimeUnitRegex}`;\n\texport const NowRegex = `\\\\b(?<now>(ce\\\\s+)?moment|maintenant|d[eè]s que possible|dqp|r[eé]cemment|auparavant)\\\\b`;\n\texport const SuffixRegex = `^\\\\s*(dans\\\\s+l[ea]\\\\s+)|(en\\\\s+)|(du)?(matin|matin([eé]e)?|apr[eè]s-midi|soir[eé]e|nuit)\\\\b`;\n\texport const DateTimeTimeOfDayRegex = `\\\\b(?<timeOfDay>matin[ée]e|matin|apr[eè]s-midi|nuit|soir)\\\\b`;\n\texport const DateTimeSpecificTimeOfDayRegex = `\\\\b((${RelativeRegex}\\\\s+${DateTimeTimeOfDayRegex})\\\\b|\\\\b(ce|cette\\\\s+)(soir|nuit))\\\\b`;\n\texport const TimeOfTodayAfterRegex = `^\\\\s*(,\\\\s*)?(en|dans|du\\\\s+)?${DateTimeSpecificTimeOfDayRegex}`;\n\texport const TimeOfTodayBeforeRegex = `${DateTimeSpecificTimeOfDayRegex}(\\\\s*,)?(\\\\s+([àa]|pour))?\\\\s*$`;\n\texport const SimpleTimeOfTodayAfterRegex = `(${HourNumRegex}|${BaseDateTime.HourRegex})\\\\s*(,\\\\s*)?(en|[àa]\\\\s+)?${DateTimeSpecificTimeOfDayRegex}`;\n\texport const SimpleTimeOfTodayBeforeRegex = `${DateTimeSpecificTimeOfDayRegex}(\\\\s*,)?(\\\\s+([àa]|vers))?\\\\s*(${HourNumRegex}|${BaseDateTime.HourRegex})`;\n\texport const TheEndOfRegex = `(la\\\\s+)?fin(\\\\s+de\\\\s*|\\\\s*de*l[ea])?\\\\s*$`;\n\texport const PeriodTimeOfDayRegex = `\\\\b((dans\\\\s+(le)?\\\\s+)?((?<early>d[eé]but(\\\\s+|-|d[ue]|de la)|t[oô]t)|(?<late>tard\\\\s*|fin(\\\\s+|-|d[eu])?))?(?<timeOfDay>matin|((d|l)?'?)apr[eè]s-midi|nuit|soir[eé]e|soir))\\\\b`;\n\texport const PeriodSpecificTimeOfDayRegex = `\\\\b((${RelativeRegex}\\\\s+${PeriodTimeOfDayRegex})\\\\b|\\\\b(ce|cette\\\\s+)(soir|nuit))\\\\b`;\n\texport const PeriodTimeOfDayWithDateRegex = `\\\\b((${TimeOfDayRegex}))\\\\b`;\n\texport const DurationUnitRegex = `(?<unit>ans|ann[eé]e|mois|semaines|semaine|jour|jours|heures|heure|hrs|hr|h|minutes|minute|mins|min|secondes|seconde|secs|sec|ann[eé]es|journ[eé]e)\\\\b`;\n\texport const SuffixAndRegex = `(?<suffix>\\\\s*(et)\\\\s+((un|une)\\\\s+)?(?<suffix_num>demi|quart))`;\n\texport const PeriodicRegex = `\\\\b(?<periodic>quotidienne|quotidien|journellement|mensuel|mensuelle|jour|jours|hebdomadaire|bihebdomadaire|annuellement|annuel)\\\\b`;\n\texport const EachUnitRegex = `(?<each>(chaque|toutes les|tous les)(?<other>\\\\s+autres)?\\\\s*${DurationUnitRegex})`;\n\texport const EachPrefixRegex = `\\\\b(?<each>(chaque|tous les|(toutes les))\\\\s*$)`;\n\texport const SetEachRegex = `\\\\b(?<each>(chaque|tous les|(toutes les))\\\\s*)`;\n\texport const SetLastRegex = `(?<last>prochain|dernier|derni[eè]re|pass[ée]s|pr[eé]c[eé]dent|courant|en\\\\s*cours)`;\n\texport const EachDayRegex = `^\\\\s*(chaque|tous les)\\\\s*(jour|jours)\\\\b`;\n\texport const DurationFollowedUnit = `^\\\\s*${SuffixAndRegex}?(\\\\s+|-)?${DurationUnitRegex}`;\n\texport const NumberCombinedWithDurationUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)(-)?${DurationUnitRegex}`;\n\texport const AnUnitRegex = `\\\\b(((?<half>demi\\\\s+)?(-)\\\\s+${DurationUnitRegex}))`;\n\texport const AllRegex = `\\\\b(?<all>toute\\\\s(l['ea])\\\\s?(?<unit>ann[eé]e|mois|semaine|semaines|jour|jours|journ[eé]e))\\\\b`;\n\texport const HalfRegex = `(((un|une)\\\\s*)|\\\\b)(?<half>demi?(\\\\s*|-)+(?<unit>ann[eé]e|ans|mois|semaine|jour|heure))\\\\b`;\n\texport const ConjunctionRegex = `\\\\b((et(\\\\s+de|pour)?)|avec)\\\\b`;\n\texport const YearRegex = `\\\\b(?<year>19\\\\d{2}|20\\\\d{2})\\\\b`;\n\texport const HolidayRegex1 = `\\\\b(?<holiday>vendredi saint|mercredi des cendres|p[aâ]ques|l'action de gr[âa]ce|mardi gras|la saint-sylvestre|la saint sylvestre|la Saint-Valentin|la saint valentin|nouvel an chinois|nouvel an|r[eé]veillon de Nouvel an|jour de l'an|premier-mai|ler-mai|1-mai|poisson d'avril|r[eé]veillon de No[eë]l|veille de no[eë]l|noël|noel|thanksgiving|halloween|yuandan)(\\\\s+((d[ue]\\\\s+|d'))?(${YearRegex}|(${ThisPrefixRegex}\\\\s+)ann[eé]e|ann[eé]e\\\\s+(${PastSuffixRegex}|${NextSuffixRegex})))?\\\\b`;\n\texport const HolidayRegex2 = `\\\\b(?<holiday>martin luther king|martin luther king jr|toussaint|st patrick|st george|cinco de mayo|l'ind[eé]pendance|guy fawkes)(\\\\s+(de\\\\s+)?(${YearRegex}|${ThisPrefixRegex}\\\\s+ann[eé]e|ann[eé]e\\\\s+(${PastSuffixRegex}|${NextSuffixRegex})))?\\\\b`;\n\texport const HolidayRegex3 = `(?<holiday>(jour\\\\s*(d[eu]|des)\\\\s*(canberra|p[aâ]ques|colomb|bastille|la prise de la bastille|l'ind[eé]pendance|l'ind[eé]pendance am[eé]ricaine|thanks\\\\s*giving|bapt[êe]me|nationale|d'armistice|inaugueration|marmotte|assomption|femme|comm[ée]moratif)))(\\\\s+(de\\\\s+)?(${YearRegex}|${ThisPrefixRegex}\\\\s+ann[eé]e|ann[eé]e\\\\s+(${PastSuffixRegex}|${NextSuffixRegex})))?`;\n\texport const HolidayRegex4 = `(?<holiday>(F[eê]te\\\\s*(d[eu]|des)\\\\s*)(travail|m[eè]re|m[eè]res|p[eè]re|p[eè]res))(\\\\s+(de\\\\s+)?(${YearRegex}|${ThisPrefixRegex}\\\\s+ann[eé]e|ann[eé]e\\\\s+(${PastSuffixRegex}|${NextSuffixRegex})))?\\\\b`;\n\texport const DateTokenPrefix = 'le ';\n\texport const TimeTokenPrefix = 'à ';\n\texport const TokenBeforeDate = 'le ';\n\texport const TokenBeforeTime = 'à ';\n\texport const AMTimeRegex = `(?<am>matin[ée]e|matin)`;\n\texport const PMTimeRegex = `\\\\b(?<pm>(d'|l')?apr[eè]s-midi|soir|nuit|\\\\s*ce soir|du soir)\\\\b`;\n\texport const BeforeRegex = `\\\\b(avant)\\\\b`;\n\texport const BeforeRegex2 = `\\\\b(entre\\\\s*(le|la(s)?)?)\\\\b`;\n\texport const AfterRegex = `\\\\b(apres)\\\\b`;\n\texport const SinceRegex = `\\\\b(depuis)\\\\b`;\n\texport const AgoPrefixRegex = `\\\\b(y a)\\\\b`;\n\texport const LaterRegex = `\\\\b(plus tard)\\\\b`;\n\texport const InConnectorRegex = `\\\\b(dans|en|sur)\\\\b`;\n\texport const AmDescRegex = `(h|am\\\\b|a\\\\.m\\\\.|a m\\\\b|a\\\\. m\\\\.|a\\\\.m\\\\b|a\\\\. m\\\\b)`;\n\texport const PmDescRegex = `(h|pm\\\\b|p\\\\.m\\\\.|p\\\\b|p m\\\\b|p\\\\. m\\\\.|p\\\\.m\\\\b|p\\\\. m\\\\b)`;\n\texport const AmPmDescRegex = `(h|ampm)`;\n\texport const MorningStartEndRegex = `(^(matin))|((matin)$)`;\n\texport const AfternoonStartEndRegex = `(^((d'|l')?apr[eè]s-midi))|(((d'|l')?apr[eè]s-midi)$)`;\n\texport const EveningStartEndRegex = `(^(soir[ée]e|soir))|((soir[ée]e|soir)$)`;\n\texport const NightStartEndRegex = `(^(nuit))|((nuit)$)`;\n\texport const InExactNumberRegex = `\\\\b(quelque|quel qu[ée]s|quelqu[ée]s|plusieur|plusieurs|divers)\\\\b`;\n\texport const InExactNumberUnitRegex = `(${InExactNumberRegex})\\\\s+(${DurationUnitRegex})`;\n\texport const RelativeTimeUnitRegex = `((((${ThisPrefixRegex})?)\\\\s+(${TimeUnitRegex}(\\\\s*${NextSuffixRegex}|${PastSuffixRegex})?))|((le))\\\\s+(${RestrictedTimeUnitRegex}))`;\n\texport const RelativeDurationUnitRegex = `(((?<=(${ThisPrefixRegex})\\\\s+)?\\\\b(${DurationUnitRegex})(\\\\s+${NextSuffixRegex}|${PastSuffixRegex})?)|((le|my))\\\\s+(${RestrictedTimeUnitRegex}))`;\n\texport const ConnectorRegex = `^(,|pour|t|vers)$`;\n\texport const ConnectorAndRegex = `\\\\b(et\\\\s*(le|la(s)?)?)\\\\b.+`;\n\texport const FromRegex = `((de|du)?)$`;\n\texport const FromRegex2 = `((depuis|de)(\\\\s*la(s)?)?)$`;\n\texport const FromToRegex = `\\\\b(du|de|des|depuis).+(à|a|au)\\\\b.+`;\n\texport const SingleAmbiguousMonthRegex = `^(le\\\\s+)?(may|march)$`;\n\texport const PrepositionSuffixRegex = `\\\\b(du|de|[àa]|vers|dans)$`;\n\texport const FlexibleDayRegex = `(?<DayOfMonth>([A-Za-z]+\\\\s)?[A-Za-z\\\\d]+)`;\n\texport const ForTheRegex = `\\\\b(((pour le ${FlexibleDayRegex})|(dans (le\\\\s+)?${FlexibleDayRegex}(?<=(st|nd|rd|th))))(?<end>\\\\s*(,|\\\\.|!|\\\\?|$)))`;\n\texport const WeekDayAndDayOfMothRegex = `\\\\b${WeekDayRegex}\\\\s+(le\\\\s+${FlexibleDayRegex})\\\\b`;\n\texport const RestOfDateRegex = `\\\\b(Reste|fin)\\\\s+(d[eu]\\\\s+)?((le|cette|ce)\\\\s+)?(?<duration>semaine|mois|l'ann[ée]e)\\\\b`;\n\texport const RestOfDateTimeRegex = `\\\\b(Reste|fin)\\\\s+(d[eu]\\\\s+)?((le|cette|ce)\\\\s+)?(?<unit>jour)\\\\b`;\n\texport const LaterEarlyPeriodRegex = `^[.]`;\n\texport const WeekWithWeekDayRangeRegex = `^[.]`;\n\texport const GeneralEndingRegex = `^[.]`;\n\texport const MiddlePauseRegex = `^[.]`;\n\texport const DurationConnectorRegex = `^[.]`;\n\texport const PrefixArticleRegex = `^[\\\\.]`;\n\texport const UnitMap: ReadonlyMap<string, string> = new Map<string, string>([[\"annees\", \"Y\"],[\"annee\", \"Y\"],[\"ans\", \"Y\"],[\"mois\", \"MON\"],[\"semaines\", \"W\"],[\"semaine\", \"W\"],[\"journees\", \"D\"],[\"journee\", \"D\"],[\"jour\", \"D\"],[\"jours\", \"D\"],[\"heures\", \"H\"],[\"heure\", \"H\"],[\"hrs\", \"H\"],[\"hr\", \"H\"],[\"h\", \"H\"],[\"minutes\", \"M\"],[\"minute\", \"M\"],[\"mins\", \"M\"],[\"min\", \"M\"],[\"secondes\", \"S\"],[\"seconde\", \"S\"],[\"secs\", \"S\"],[\"sec\", \"S\"]]);\n\texport const UnitValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"annees\", 31536000],[\"annee\", 31536000],[\"l'annees\", 31536000],[\"l'annee\", 31536000],[\"ans\", 31536000],[\"mois\", 2592000],[\"semaines\", 604800],[\"semaine\", 604800],[\"journees\", 86400],[\"journee\", 86400],[\"jour\", 86400],[\"jours\", 86400],[\"heures\", 3600],[\"heure\", 3600],[\"hrs\", 3600],[\"hr\", 3600],[\"h\", 3600],[\"minutes\", 60],[\"minute\", 60],[\"mins\", 60],[\"min\", 60],[\"secondes\", 1],[\"seconde\", 1],[\"secs\", 1],[\"sec\", 1]]);\n\texport const SeasonMap: ReadonlyMap<string, string> = new Map<string, string>([[\"printemps\", \"SP\"],[\"été\", \"SU\"],[\"automne\", \"FA\"],[\"hiver\", \"WI\"]]);\n\texport const SeasonValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"SP\", 3],[\"SU\", 6],[\"FA\", 9],[\"WI\", 12]]);\n\texport const CardinalMap: ReadonlyMap<string, number> = new Map<string, number>([[\"premier\", 1],[\"1er\", 1],[\"deuxième\", 2],[\"2e\", 2],[\"troisième\", 3],[\"troisieme\", 3],[\"3e\", 3],[\"quatrième\", 4],[\"4e\", 4],[\"cinqième\", 5],[\"5e\", 5]]);\n\texport const DayOfWeek: ReadonlyMap<string, number> = new Map<string, number>([[\"lundi\", 1],[\"mardi\", 2],[\"mecredi\", 3],[\"jeudi\", 4],[\"vendredi\", 5],[\"samedi\", 6],[\"dimanche\", 0],[\"lun\", 1],[\"mar\", 2],[\"mer\", 3],[\"jeu\", 4],[\"ven\", 5],[\"sam\", 6],[\"dim\", 0]]);\n\texport const MonthOfYear: ReadonlyMap<string, number> = new Map<string, number>([[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"6\", 6],[\"7\", 7],[\"8\", 8],[\"9\", 9],[\"10\", 10],[\"11\", 11],[\"12\", 12],[\"janvier\", 1],[\"fevrier\", 2],[\"mars\", 3],[\"mar\", 3],[\"avril\", 4],[\"avr\", 4],[\"mai\", 5],[\"juin\", 6],[\"jun\", 6],[\"juillet\", 7],[\"aout\", 8],[\"septembre\", 9],[\"octobre\", 10],[\"novembre\", 11],[\"decembre\", 12],[\"janv\", 1],[\"janv.\", 1],[\"jan\", 1],[\"fevr\", 2],[\"fevr.\", 2],[\"févr.\", 2],[\"févr\", 2],[\"fev\", 2],[\"juil\", 7],[\"jul\", 7],[\"sep\", 9],[\"sept.\", 9],[\"sept\", 9],[\"oct\", 10],[\"oct.\", 10],[\"nov\", 11],[\"nov.\", 11],[\"dec\", 12],[\"déc.\", 12],[\"déc\", 12],[\"01\", 1],[\"02\", 2],[\"03\", 3],[\"04\", 4],[\"05\", 5],[\"06\", 6],[\"07\", 7],[\"08\", 8],[\"09\", 9]]);\n\texport const Numbers: ReadonlyMap<string, number> = new Map<string, number>([[\"zero\", 0],[\"un\", 1],[\"une\", 1],[\"a\", 1],[\"deux\", 2],[\"trois\", 3],[\"quatre\", 4],[\"cinq\", 5],[\"six\", 6],[\"sept\", 7],[\"huit\", 8],[\"neuf\", 9],[\"dix\", 10],[\"onze\", 11],[\"douze\", 12],[\"treize\", 13],[\"quatorze\", 14],[\"quinze\", 15],[\"seize\", 16],[\"dix-sept\", 17],[\"dix-huit\", 18],[\"dix-neuf\", 19],[\"vingt-et-un\", 21],[\"vingt et un\", 21],[\"vingt\", 20],[\"vingt deux\", 22],[\"vingt-deux\", 22],[\"vingt trois\", 23],[\"vingt-trois\", 23],[\"vingt quatre\", 24],[\"vingt-quatre\", 24],[\"vingt cinq\", 25],[\"vingt-cinq\", 25],[\"vingt six\", 26],[\"vingt-six\", 26],[\"vingt sept\", 27],[\"vingt-sept\", 27],[\"vingt huit\", 28],[\"vingt-huit\", 28],[\"vingt neuf\", 29],[\"vingt-neuf\", 29],[\"trente\", 30],[\"trente et un\", 31],[\"trente-et-un\", 31],[\"trente deux\", 32],[\"trente-deux\", 32],[\"trente trois\", 33],[\"trente-trois\", 33],[\"trente quatre\", 34],[\"trente-quatre\", 34],[\"trente cinq\", 35],[\"trente-cinq\", 35],[\"trente six\", 36],[\"trente-six\", 36],[\"trente sept\", 37],[\"trente-sept\", 37],[\"trente huit\", 38],[\"trente-huit\", 38],[\"trente neuf\", 39],[\"trente-neuf\", 39],[\"quarante\", 40],[\"quarante et un\", 41],[\"quarante-et-un\", 41],[\"quarante deux\", 42],[\"quarante-duex\", 42],[\"quarante trois\", 43],[\"quarante-trois\", 43],[\"quarante quatre\", 44],[\"quarante-quatre\", 44],[\"quarante cinq\", 45],[\"quarante-cinq\", 45],[\"quarante six\", 46],[\"quarante-six\", 46],[\"quarante sept\", 47],[\"quarante-sept\", 47],[\"quarante huit\", 48],[\"quarante-huit\", 48],[\"quarante neuf\", 49],[\"quarante-neuf\", 49],[\"cinquante\", 50],[\"cinquante et un\", 51],[\"cinquante-et-un\", 51],[\"cinquante deux\", 52],[\"cinquante-deux\", 52],[\"cinquante trois\", 53],[\"cinquante-trois\", 53],[\"cinquante quatre\", 54],[\"cinquante-quatre\", 54],[\"cinquante cinq\", 55],[\"cinquante-cinq\", 55],[\"cinquante six\", 56],[\"cinquante-six\", 56],[\"cinquante sept\", 57],[\"cinquante-sept\", 57],[\"cinquante huit\", 58],[\"cinquante-huit\", 58],[\"cinquante neuf\", 59],[\"cinquante-neuf\", 59],[\"soixante\", 60],[\"soixante et un\", 61],[\"soixante-et-un\", 61],[\"soixante deux\", 62],[\"soixante-deux\", 62],[\"soixante trois\", 63],[\"soixante-trois\", 63],[\"soixante quatre\", 64],[\"soixante-quatre\", 64],[\"soixante cinq\", 65],[\"soixante-cinq\", 65],[\"soixante six\", 66],[\"soixante-six\", 66],[\"soixante sept\", 67],[\"soixante-sept\", 67],[\"soixante huit\", 68],[\"soixante-huit\", 68],[\"soixante neuf\", 69],[\"soixante-neuf\", 69],[\"soixante dix\", 70],[\"soixante-dix\", 70],[\"soixante et onze\", 71],[\"soixante-et-onze\", 71],[\"soixante douze\", 72],[\"soixante-douze\", 72],[\"soixante treize\", 73],[\"soixante-treize\", 73],[\"soixante quatorze\", 74],[\"soixante-quatorze\", 74],[\"soixante quinze\", 75],[\"soixante-quinze\", 75],[\"soixante seize\", 76],[\"soixante-seize\", 76],[\"soixante dix sept\", 77],[\"soixante-dix-sept\", 77],[\"soixante dix huit\", 78],[\"soixante-dix-huit\", 78],[\"soixante dix neuf\", 79],[\"soixante-dix-neuf\", 79],[\"quatre vingt\", 80],[\"quatre-vingt\", 80],[\"quatre vingt un\", 81],[\"quatre-vingt-un\", 81],[\"quatre vingt deux\", 82],[\"quatre-vingt-duex\", 82],[\"quatre vingt trois\", 83],[\"quatre-vingt-trois\", 83],[\"quatre vingt quatre\", 84],[\"quatre-vingt-quatre\", 84],[\"quatre vingt cinq\", 85],[\"quatre-vingt-cinq\", 85],[\"quatre vingt six\", 86],[\"quatre-vingt-six\", 86],[\"quatre vingt sept\", 87],[\"quatre-vingt-sept\", 87],[\"quatre vingt huit\", 88],[\"quatre-vingt-huit\", 88],[\"quatre vingt neuf\", 89],[\"quatre-vingt-neuf\", 89],[\"quatre vingt dix\", 90],[\"quatre-vingt-dix\", 90],[\"quatre vingt onze\", 91],[\"quatre-vingt-onze\", 91],[\"quatre vingt douze\", 92],[\"quatre-vingt-douze\", 92],[\"quatre vingt treize\", 93],[\"quatre-vingt-treize\", 93],[\"quatre vingt quatorze\", 94],[\"quatre-vingt-quatorze\", 94],[\"quatre vingt quinze\", 95],[\"quatre-vingt-quinze\", 95],[\"quatre vingt seize\", 96],[\"quatre-vingt-seize\", 96],[\"quatre vingt dix sept\", 97],[\"quatre-vingt-dix-sept\", 97],[\"quatre vingt dix huit\", 98],[\"quatre-vingt-dix-huit\", 98],[\"quatre vingt dix neuf\", 99],[\"quatre-vingt-dix-neuf\", 99],[\"cent\", 100]]);\n\texport const DayOfMonth: ReadonlyMap<string, number> = new Map<string, number>([[\"1er\", 1],[\"2e\", 2],[\"3e\", 3],[\"4e\", 4],[\"5e\", 5],[\"6e\", 6],[\"7e\", 7],[\"8e\", 8],[\"9e\", 9],[\"10e\", 10],[\"11e\", 11],[\"12e\", 12],[\"13e\", 13],[\"14e\", 14],[\"15e\", 15],[\"16e\", 16],[\"17e\", 17],[\"18e\", 18],[\"19e\", 19],[\"20e\", 20],[\"21e\", 21],[\"22e\", 22],[\"23e\", 23],[\"24e\", 24],[\"25e\", 25],[\"26e\", 26],[\"27e\", 27],[\"28e\", 28],[\"29e\", 29],[\"30e\", 30],[\"31e\", 31]]);\n\texport const DoubleNumbers: ReadonlyMap<string, number> = new Map<string, number>([[\"demi\", 0.5],[\"quart\", 0.25]]);\n\texport const HolidayNames: ReadonlyMap<string, string[]> = new Map<string, string[]>([[\"fathers\", [\"peres\",\"pères\",\"fêtedespères\",\"fetedesperes\"]],[\"mothers\", [\"fêtedesmères\",\"fetedesmeres\"]],[\"thanksgiving\", [\"lactiondegrace\",\"lactiondegrâce\",\"jourdethanksgiving\",\"thanksgiving\"]],[\"martinlutherking\", [\"journeemartinlutherking\",\"martinlutherkingjr\"]],[\"washingtonsbirthday\", [\"washingtonsbirthday\",\"washingtonbirthday\"]],[\"canberra\", [\"canberraday\"]],[\"labour\", [\"fetedetravail\",\"travail\",\"fetedutravail\"]],[\"columbus\", [\"columbusday\"]],[\"memorial\", [\"jourcommémoratif\",\"jourcommemoratif\"]],[\"yuandan\", [\"yuandan\",\"nouvelanchinois\"]],[\"maosbirthday\", [\"maosbirthday\"]],[\"teachersday\", [\"teachersday\",\"teacherday\"]],[\"singleday\", [\"singleday\"]],[\"allsaintsday\", [\"allsaintsday\"]],[\"youthday\", [\"youthday\"]],[\"childrenday\", [\"childrenday\",\"childday\"]],[\"femaleday\", [\"femaleday\"]],[\"treeplantingday\", [\"treeplantingday\"]],[\"arborday\", [\"arborday\"]],[\"girlsday\", [\"girlsday\"]],[\"whiteloverday\", [\"whiteloverday\"]],[\"loverday\", [\"loverday\"]],[\"christmas\", [\"noel\",\"noël\"]],[\"xmas\", [\"xmas\"]],[\"newyear\", [\"nouvellesannees\",\"nouvelan\"]],[\"newyearday\", [\"jourdunouvelan\"]],[\"newyearsday\", [\"jourdel'an\",\"jourpremierdelannee\",\"jourpremierdelannée\"]],[\"inaugurationday\", [\"jourd'inaugueration\",\"inaugueration\"]],[\"groundhougday\", [\"marmotte\"]],[\"valentinesday\", [\"lasaint-valentin\",\"lasaintvalentin\"]],[\"stpatrickday\", [\"stpatrickday\"]],[\"aprilfools\", [\"poissond'avril\"]],[\"stgeorgeday\", [\"stgeorgeday\"]],[\"mayday\", [\"premier-mai\",\"ler-mai\",\"1-mai\"]],[\"cincodemayoday\", [\"cincodemayo\"]],[\"baptisteday\", [\"bapteme\",\"baptême\"]],[\"usindependenceday\", [\"l'independanceamericaine\",\"lindépendanceaméricaine\"]],[\"independenceday\", [\"l'indépendance\",\"lindependance\"]],[\"bastilleday\", [\"laprisedelabastille\",\"bastille\"]],[\"halloweenday\", [\"halloween\"]],[\"allhallowday\", [\"allhallowday\"]],[\"allsoulsday\", [\"allsoulsday\"]],[\"guyfawkesday\", [\"guyfawkesday\"]],[\"veteransday\", [\"veteransday\"]],[\"christmaseve\", [\"reveillondenoel\",\"réveillondenoël\",\"veilledenoel\",\"veilledenoël\"]],[\"newyeareve\", [\"réveillondenouvelan\",\"reveillondenouvelan\",\"lasaint-sylvestre\",\"lasaintsylvestre\"]]]);\n\texport const NightRegex = `\\\\b(minuit|nuit)\\\\b`;\n}\n","import { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, BaseNumberParser, FrenchCardinalExtractor } from \"recognizers-text-number\";\nimport { IDurationExtractorConfiguration, IDurationParserConfiguration } from \"../baseDuration\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\n\nexport class FrenchDurationExtractorConfiguration implements IDurationExtractorConfiguration {\n    readonly allRegex: RegExp;\n    readonly halfRegex: RegExp;\n    readonly followedUnit: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly anUnitRegex: RegExp;\n    readonly inExactNumberUnitRegex: RegExp;\n    readonly suffixAndRegex: RegExp;\n    readonly relativeDurationUnitRegex: RegExp;\n    readonly cardinalExtractor: BaseNumberExtractor;\n\n    constructor() {\n        this.allRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AllRegex, \"gis\");\n        this.halfRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.HalfRegex, \"gis\");\n        this.followedUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.DurationFollowedUnit, \"gis\");\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.NumberCombinedWithDurationUnit, \"gis\");\n        this.anUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AnUnitRegex, \"gis\");\n        this.inExactNumberUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.InExactNumberUnitRegex, \"gis\");\n        this.suffixAndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SuffixAndRegex, \"gis\");\n        this.relativeDurationUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RelativeDurationUnitRegex, \"gis\");\n        this.cardinalExtractor = new FrenchCardinalExtractor();\n    }\n}\n\nexport class FrenchDurationParserConfiguration implements IDurationParserConfiguration {\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly followedUnit: RegExp;\n    readonly suffixAndRegex: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly anUnitRegex: RegExp;\n    readonly allDateUnitRegex: RegExp;\n    readonly halfDateUnitRegex: RegExp;\n    readonly inExactNumberUnitRegex: RegExp;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly unitValueMap: ReadonlyMap<string, number>;\n    readonly doubleNumbers: ReadonlyMap<string, number>;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.followedUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.DurationFollowedUnit);\n        this.suffixAndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SuffixAndRegex);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.NumberCombinedWithDurationUnit);\n        this.anUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AnUnitRegex);\n        this.allDateUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AllRegex);\n        this.halfDateUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.HalfRegex);\n        this.inExactNumberUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.InExactNumberUnitRegex);\n        this.unitMap = config.unitMap;\n        this.unitValueMap = config.unitValueMap;\n        this.doubleNumbers = config.doubleNumbers;\n    }\n}","import { IExtractor } from \"recognizers-text\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { ITimeExtractorConfiguration, ITimeParserConfiguration } from \"../baseTime\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { BaseDurationExtractor } from \"../baseDuration\";\nimport { FrenchDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class FrenchTimeExtractorConfiguration implements ITimeExtractorConfiguration {\n    readonly timeRegexList: RegExp[];\n    readonly atRegex: RegExp;\n    readonly ishRegex: RegExp;\n\n    readonly durationExtractor: IDateTimeExtractor;\n\n    constructor() {\n        this.atRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AtRegex, \"gis\");\n        this.ishRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.IshRegex, \"gis\");;\n        this.timeRegexList = FrenchTimeExtractorConfiguration.getTimeRegexList();\n\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n    }\n\n    static getTimeRegexList(): RegExp[] {\n        return [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex1, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex2, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex3, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex4, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex5, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex6, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex7, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex8, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.TimeRegex9, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.ConnectNumRegex, \"gis\")\n        ]\n    }\n}\n\nexport class FrenchTimeParserConfiguration implements ITimeParserConfiguration {\n\n    readonly timeTokenPrefix: string;\n    readonly atRegex: RegExp;\n    readonly timeRegexes: RegExp[];\n    readonly lessThanOneHour: RegExp;\n    readonly timeSuffix: RegExp;\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n\n        this.timeTokenPrefix = FrenchDateTime.TimeTokenPrefix;\n        this.atRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AtRegex, \"gis\");\n        this.timeRegexes = FrenchTimeExtractorConfiguration.getTimeRegexList();\n        this.lessThanOneHour = RegExpUtility.getSafeRegExp(FrenchDateTime.LessThanOneHour, \"gis\");\n        this.timeSuffix = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeSuffix, \"gis\");\n\n        this.utilityConfiguration = config.utilityConfiguration;\n        this.numbers = config.numbers;\n    }\n\n    adjustByPrefix(prefix: string, adjust: { hour: number; min: number; hasMin: boolean; }) {\n        let deltaMin = 0;\n        let trimedPrefix = prefix.trim().toLowerCase();\n\n        if (trimedPrefix.endsWith(\"demie\")) {\n            deltaMin = 30;\n        }\n        else if (trimedPrefix.endsWith(\"un quart\") || trimedPrefix.endsWith(\"quart\")) {\n            deltaMin = 15;\n        }\n        else if (trimedPrefix.endsWith(\"trois quarts\")) {\n            deltaMin = 45;\n        }\n        else {\n            let matches = RegExpUtility.getMatches(this.lessThanOneHour, trimedPrefix);\n            if (matches.length) {\n                let match = matches[0];\n                let minStr = match.groups(\"deltamin\").value;\n                if (minStr) {\n                    deltaMin = parseInt(minStr, 10);\n                }\n                else {\n                    minStr = match.groups(\"deltaminnum\").value.toLowerCase();\n                    if (this.numbers.has(minStr)) {\n                        deltaMin = this.numbers.get(minStr);\n                    }\n                }\n            }\n        }\n\n        if (trimedPrefix.endsWith(\"à\")) {\n            deltaMin = -deltaMin;\n        }\n\n        adjust.min += deltaMin;\n        if (adjust.min < 0) {\n            adjust.min += 60;\n            adjust.hour -= 1;\n        }\n\n        adjust.hasMin = true;\n    }\n\n    adjustBySuffix(suffix: string, adjust: { hour: number; min: number; hasMin: boolean; hasAm: boolean; hasPm: boolean; }) {\n        let trimedSuffix = suffix.trim().toLowerCase();\n\n        let deltaHour = 0;\n        let matches = RegExpUtility.getMatches(this.timeSuffix, trimedSuffix);\n        if (matches.length) {\n            let match = matches[0];\n            if (match.index === 0 && match.length === trimedSuffix.length) {\n                let oclockStr = match.groups(\"heures\").value;\n                if (!oclockStr) {\n                    let amStr = match.groups(\"am\").value;\n                    if (amStr) {\n                        if (adjust.hour >= 12) {\n                            deltaHour = -12;\n                        }\n\n                        adjust.hasAm = true;\n                    }\n\n                    let pmStr = match.groups(\"pm\").value;\n                    if (pmStr) {\n                        if (adjust.hour < 12) {\n                            deltaHour = 12;\n                        }\n\n                        adjust.hasPm = true;\n                    }\n                }\n            }\n        }\n\n        adjust.hour = (adjust.hour + deltaHour) % 24;\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { IDateTimeExtractorConfiguration, IDateTimeParserConfiguration, IDateTimeExtractor } from \"../baseDateTime\";\nimport { BaseNumberExtractor, BaseNumberParser } from \"recognizers-text-number\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { FrenchDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { FrenchDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { FrenchDateTimeUtilityConfiguration } from \"./baseConfiguration\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { FrenchTimeExtractorConfiguration } from \"./timeConfiguration\";\n\nexport class FrenchDateTimeExtractorConfiguration implements IDateTimeExtractorConfiguration {\n    readonly datePointExtractor: BaseDateExtractor;\n    readonly timePointExtractor: BaseTimeExtractor;\n    readonly durationExtractor: BaseDurationExtractor;\n    readonly suffixRegex: RegExp;\n    readonly nowRegex: RegExp;\n    readonly timeOfTodayAfterRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly simpleTimeOfTodayAfterRegex: RegExp;\n    readonly nightRegex: RegExp;\n    readonly timeOfTodayBeforeRegex: RegExp;\n    readonly simpleTimeOfTodayBeforeRegex: RegExp;\n    readonly theEndOfRegex: RegExp;\n    readonly unitRegex: RegExp;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n    readonly prepositionRegex: RegExp;\n    readonly connectorRegex: RegExp;\n\n\n    constructor() {\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PrepositionRegex, \"gis\");\n        this.nowRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NowRegex, \"gis\");\n        this.suffixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SuffixRegex, \"gis\");\n\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeOfDayRegex, \"gis\");\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SpecificTimeOfDayRegex, \"gis\");\n        this.timeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeOfTodayAfterRegex, \"gis\");\n        this.timeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeOfTodayBeforeRegex, \"gis\");\n        this.simpleTimeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SimpleTimeOfTodayAfterRegex, \"gis\");\n        this.simpleTimeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SimpleTimeOfTodayBeforeRegex, \"gis\");\n        this.theEndOfRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TheEndOfRegex, \"gis\");\n        this.unitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeUnitRegex, \"gis\");\n        this.connectorRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ConnectorRegex, \"gis\");\n        this.nightRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NightRegex, \"gis\");\n\n        this.datePointExtractor = new BaseDateExtractor(new FrenchDateExtractorConfiguration());\n        this.timePointExtractor = new BaseTimeExtractor(new FrenchTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n        this.utilityConfiguration = new FrenchDateTimeUtilityConfiguration();\n    }\n\n    isConnectorToken(source: string): boolean {\n        \n        return (source === \"\" || source === \",\" ||\n            RegExpUtility.getFirstMatchIndex(this.prepositionRegex, source).matched ||\n            source === \"t\" || \n            source === \"pour\" ||\n            source === \"vers\");\n    }\n}\n\nexport class FrenchDateTimeParserConfiguration implements IDateTimeParserConfiguration {\n    readonly tokenBeforeDate: string;\n    readonly tokenBeforeTime: string;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly timeParser: BaseTimeParser;\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly nowRegex: RegExp;\n    readonly amTimeRegex: RegExp;\n    readonly pmTimeRegex: RegExp;\n    readonly simpleTimeOfTodayAfterRegex: RegExp;\n    readonly simpleTimeOfTodayBeforeRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly theEndOfRegex: RegExp;\n    readonly unitRegex: RegExp;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    readonly nextPrefixRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.tokenBeforeDate = FrenchDateTime.TokenBeforeDate;\n        this.tokenBeforeTime = FrenchDateTime.TokenBeforeTime;\n        this.nowRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NowRegex, \"gis\");\n        this.amTimeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AMTimeRegex, \"gis\");\n        this.pmTimeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PMTimeRegex, \"gis\");\n        this.simpleTimeOfTodayAfterRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SimpleTimeOfTodayAfterRegex, \"gis\")\n        this.simpleTimeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SimpleTimeOfTodayBeforeRegex, \"gis\")\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SpecificTimeOfDayRegex, \"gis\");\n        this.theEndOfRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TheEndOfRegex, \"gis\")\n        this.unitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeUnitRegex, \"gis\");\n\n        this.dateExtractor = config.dateExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateParser = config.dateParser;\n        this.timeParser = config.timeParser;\n        this.numbers = config.numbers;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.durationExtractor = config.durationExtractor;\n        this.durationParser = config.durationParser;\n        this.unitMap = config.unitMap;\n        this.utilityConfiguration = config.utilityConfiguration;\n    }\n\n    haveAmbiguousToken(text: string, matchedText: string): boolean {\n        return false;\n    }\n\n    getMatchedNowTimex(text: string): { matched: boolean; timex: string; } {\n        let trimedText = text.trim().toLowerCase();\n        let timex = \"\";\n        if (trimedText.endsWith(\"maintenant\")) {\n            timex = \"PRESENT_REF\";\n        }\n        else if (trimedText === \"récemment\" || \n            trimedText === \"précédemment\" ||\n            trimedText === \"auparavant\") {\n            timex = \"PAST_REF\";\n        }\n        else if (trimedText === \"dès que possible\" || \n            trimedText === \"dqp\") {\n            timex = \"FUTURE_REF\";\n        }\n        else {\n            return {\n                matched: false,\n                timex: null\n            };\n        }\n\n        return {\n            matched: true,\n            timex: timex\n        };\n    }\n\n    getSwiftDay(text: string): number {\n        let trimedText = text.trim().toLowerCase();\n        let swift = 0;\n\n        if (trimedText.startsWith(\"prochain\") || \n            trimedText.endsWith(\"prochain\") ||\n            trimedText.startsWith(\"prochaine\") || \n            trimedText.endsWith(\"prochaine\")) {\n            swift = 1;\n        }\n        else if (trimedText.startsWith(\"dernier\") || \n            trimedText.startsWith(\"dernière\") ||\n            trimedText.endsWith(\"dernier\") || \n            trimedText.endsWith(\"dernière\")) {\n            swift = -1;\n        }\n\n        return swift;\n\n    }\n\n    getHour(text: string, hour: number): number {\n        let trimedText = text.trim().toLowerCase();\n        let result = hour;\n\n        // TODO: Replace with a regex\n        if (trimedText.endsWith(\"matin\") && hour >= 12) {\n            result -= 12;\n        }\n        else if (!trimedText.endsWith(\"matin\") && hour < 12) {\n            result += 12;\n        }\n\n        return result;\n    }\n}","import { IExtractor, IParser, RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, FrenchIntegerExtractor } from \"recognizers-text-number\";\nimport { IDatePeriodExtractorConfiguration, IDatePeriodParserConfiguration } from \"../baseDatePeriod\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { FrenchDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { FrenchDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { IDateTimeExtractor } from \"../baseDateTime\"\n\nexport class FrenchDatePeriodExtractorConfiguration implements IDatePeriodExtractorConfiguration {\n    readonly simpleCasesRegexes: RegExp[];\n    readonly tillRegex: RegExp;\n    readonly followedUnit: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly pastRegex: RegExp;\n    readonly futureRegex: RegExp;\n    readonly weekOfRegex: RegExp;\n    readonly monthOfRegex: RegExp;\n    readonly dateUnitRegex: RegExp;\n    readonly inConnectorRegex: RegExp;\n    readonly rangeUnitRegex: RegExp;\n    readonly datePointExtractor: IDateTimeExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n\n    readonly fromRegex: RegExp;\n    readonly connectorAndRegex: RegExp;\n    readonly beforeRegex: RegExp;\n\n    readonly weekDayOfMonthRegex: RegExp;\n\n    constructor() {\n        this.simpleCasesRegexes = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.SimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.BetweenRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.OneWordPeriodRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.MonthWithYear),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.MonthNumWithYear),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.YearRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayOfMonthRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.WeekOfYearRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.MonthFrontBetweenRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.MonthFrontSimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.QuarterRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.QuarterRegexYearFront),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.SeasonRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.PastSuffixRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.NextSuffixRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.ThisPrefixRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.LaterEarlyPeriodRegex),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.WeekWithWeekDayRangeRegex)\n        ];\n        this.tillRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TillRegex);\n        this.followedUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.FollowedDateUnit);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.NumberCombinedWithDateUnit);\n        this.pastRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PastSuffixRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NextSuffixRegex);\n        this.weekOfRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekOfRegex);\n        this.monthOfRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthOfRegex);\n        this.dateUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.DateUnitRegex);\n        this.inConnectorRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.InConnectorRegex);\n        this.rangeUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RangeUnitRegex);\n        this.weekDayOfMonthRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayOfMonthRegex);\n\n        this.fromRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.FromRegex);\n        this.connectorAndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ConnectorAndRegex);\n        this.beforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.BeforeRegex2);\n\n        this.datePointExtractor = new BaseDateExtractor(new FrenchDateExtractorConfiguration());\n        this.integerExtractor = new FrenchIntegerExtractor();\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n    }\n\n    getFromTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.fromRegex, source);\n    }\n\n    getBetweenTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.beforeRegex, source);\n    }\n\n    hasConnectorToken(source: string): boolean {\n        return RegExpUtility.getFirstMatchIndex(this.connectorAndRegex, source).matched;\n    }\n}\n\nexport class FrenchDatePeriodParserConfiguration implements IDatePeriodParserConfiguration {\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly monthFrontBetweenRegex: RegExp;\n    readonly betweenRegex: RegExp;\n    readonly monthFrontSimpleCasesRegex: RegExp;\n    readonly simpleCasesRegex: RegExp;\n    readonly oneWordPeriodRegex: RegExp;\n    readonly monthWithYear: RegExp;\n    readonly monthNumWithYear: RegExp;\n    readonly yearRegex: RegExp;\n    readonly pastRegex: RegExp;\n    readonly futureRegex: RegExp;\n    readonly inConnectorRegex: RegExp;\n    readonly weekOfMonthRegex: RegExp;\n    readonly weekOfYearRegex: RegExp;\n    readonly quarterRegex: RegExp;\n    readonly quarterRegexYearFront: RegExp;\n    readonly seasonRegex: RegExp;\n    readonly weekOfRegex: RegExp;\n    readonly monthOfRegex: RegExp;\n    readonly whichWeekRegex: RegExp;\n    readonly restOfDateRegex: RegExp;\n    readonly tokenBeforeDate: string;\n    readonly dayOfMonth: ReadonlyMap<string, number>;\n    readonly monthOfYear: ReadonlyMap<string, number>;\n    readonly cardinalMap: ReadonlyMap<string, number>;\n    readonly seasonMap: ReadonlyMap<string, string>;\n    readonly unitMap: ReadonlyMap<string, string>;\n\n    readonly nextPrefixRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n    readonly thisPrefixRegex: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly laterEarlyPeriodRegex: RegExp;\n    readonly weekWithWeekDayRangeRegex: RegExp;\n\n    readonly cardinalExtractor: IExtractor;\n    readonly numberParser: IParser;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.tokenBeforeDate = FrenchDateTime.TokenBeforeDate;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.numberParser = config.numberParser;\n        this.durationExtractor = config.durationExtractor;\n        this.dateExtractor = config.dateExtractor;\n        this.durationParser = config.durationParser;\n        this.dateParser = config.dateParser;\n\n        this.monthFrontBetweenRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthFrontBetweenRegex);\n        this.betweenRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.BetweenRegex);\n        this.monthFrontSimpleCasesRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthFrontSimpleCasesRegex);\n        this.simpleCasesRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SimpleCasesRegex);\n        this.oneWordPeriodRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.OneWordPeriodRegex);\n        this.monthWithYear = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthWithYear);\n        this.monthNumWithYear = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthNumWithYear);\n        this.yearRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.YearRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PastSuffixRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NextSuffixRegex);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.NumberCombinedWithDurationUnit);\n        this.weekOfMonthRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekOfMonthRegex);\n        this.weekOfYearRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekOfYearRegex);\n        this.quarterRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.QuarterRegex);\n        this.quarterRegexYearFront = RegExpUtility.getSafeRegExp(FrenchDateTime.QuarterRegexYearFront);\n        this.seasonRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SeasonRegex);\n        this.whichWeekRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WhichWeekRegex);\n        this.weekOfRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekOfRegex);\n        this.monthOfRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthOfRegex);\n        this.restOfDateRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RestOfDateRegex);\n\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(\"(prochain|prochaine)\\b\");\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(\"(dernier)\\b\");\n        this.thisPrefixRegex = RegExpUtility.getSafeRegExp(\"(ce|cette)\\b\");\n\n        this.inConnectorRegex = config.utilityConfiguration.inConnectorRegex;\n        this.unitMap = config.unitMap;\n        this.cardinalMap = config.cardinalMap;\n        this.dayOfMonth = config.dayOfMonth;\n        this.monthOfYear = config.monthOfYear;\n        this.seasonMap = config.seasonMap;\n    }\n\n    getSwiftDayOrMonth(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = 0;\n\n        if (trimedText.endsWith(\"prochain\") || trimedText.endsWith(\"prochaine\")) {\n            swift = 1;\n        }\n\n        if (trimedText.endsWith(\"dernière\") || \n            trimedText.endsWith(\"dernières\") ||\n            trimedText.endsWith(\"derniere\") || \n            trimedText.endsWith(\"dernieres\")) {\n            swift = -1;\n        }\n\n        return swift;\n    }\n\n    getSwiftYear(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = -10;\n        if (trimedText.endsWith(\"prochain\") || trimedText.endsWith(\"prochaine\")){\n            swift = 1;\n        }\n\n        if (trimedText.endsWith(\"dernières\") || \n            trimedText.endsWith(\"dernière\") ||\n            trimedText.endsWith(\"dernieres\") || \n            trimedText.endsWith(\"derniere\") || \n            trimedText.endsWith(\"dernier\")) {\n            swift = -1;\n        } else if (trimedText.startsWith(\"cette\"))\n        {\n            swift = 0;\n        }\n\n        return swift;\n    }\n\n    isFuture(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return (trimedText.startsWith(\"cette\") ||\n            trimedText.endsWith(\"prochaine\") || \n            trimedText.endsWith(\"prochain\"));\n    }\n\n    isYearToDate(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return (trimedText === \"année à ce jour\" || \n            trimedText === \"an à ce jour\");\n    }\n\n    isMonthToDate(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText === \"mois à ce jour\";\n    }\n\n    isWeekOnly(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return (trimedText.endsWith(\"semaine\") && \n            !trimedText.endsWith(\"fin de semaine\"));\n    }\n\n    isWeekend(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return (trimedText.endsWith(\"fin de semaine\") || \n            trimedText.endsWith(\"le weekend\"));\n    }\n\n    isMonthOnly(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return trimedText.endsWith(\"mois\");\n    }\n\n    isYearOnly(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return (trimedText.endsWith(\"années\") || \n            trimedText.endsWith(\"ans\") || \n            (trimedText.endsWith(\"l'annees\") || \n            trimedText.endsWith(\"l'annee\"))\n        );\n    }\n\n    isLastCardinal(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return (trimedText === \"dernières\" ||\n            trimedText === \"dernière\" ||\n            trimedText === \"dernieres\" || \n            trimedText === \"derniere\"||\n            trimedText === \"dernier\");\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { ITimePeriodExtractorConfiguration, ITimePeriodParserConfiguration } from \"../baseTimePeriod\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { FrenchTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { FrenchDateTimeUtilityConfiguration } from \"./baseConfiguration\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport class FrenchTimePeriodExtractorConfiguration implements ITimePeriodExtractorConfiguration {\n    readonly simpleCasesRegex: RegExp[];\n    readonly tillRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly singleTimeExtractor: IDateTimeExtractor;\n    readonly utilityConfiguration: FrenchDateTimeUtilityConfiguration;\n\n    readonly fromRegex: RegExp;\n    readonly connectorAndRegex: RegExp;\n    readonly beforeRegex: RegExp;\n\n    constructor() {\n        this.singleTimeExtractor = new BaseTimeExtractor(new FrenchTimeExtractorConfiguration());\n        this.utilityConfiguration = new FrenchDateTimeUtilityConfiguration();\n\n        this.simpleCasesRegex = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumFromTo, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumBetweenAnd, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.PmRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.AmRegex, \"gis\")\n        ];\n\n        this.tillRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TillRegex, \"gis\");\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeOfDayRegex, \"gis\");\n\n        this.fromRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.FromRegex2, \"gis\");\n        this.connectorAndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ConnectorAndRegex, \"gis\");\n        this.beforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.BeforeRegex2, \"gis\");\n    }\n\n    getFromTokenIndex(text: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.fromRegex, text);\n    }\n\n    hasConnectorToken(text: string): boolean {\n        return RegExpUtility.getFirstMatchIndex(this.connectorAndRegex, text).matched;\n    }\n\n    getBetweenTokenIndex(text: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.beforeRegex, text);\n    }\n}\n\nexport class FrenchTimePeriodParserConfiguration implements ITimePeriodParserConfiguration {\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly timeParser: BaseTimeParser;\n    readonly pureNumberFromToRegex: RegExp;\n    readonly pureNumberBetweenAndRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.timeExtractor = config.timeExtractor;\n        this.timeParser = config.timeParser;\n        this.numbers = config.numbers;\n        this.utilityConfiguration = config.utilityConfiguration;\n        this.pureNumberFromToRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumFromTo, \"gis\");\n        this.pureNumberBetweenAndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumBetweenAnd, \"gis\");\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeOfDayRegex, \"gis\");\n    }\n\n    getMatchedTimexRange(text: string): { matched: boolean; timex: string; beginHour: number; endHour: number; endMin: number; } {\n\n        let trimedText = text.trim().toLowerCase();\n\n        if (trimedText.endsWith(\"s\"))\n        {\n            trimedText = trimedText.substring(0, trimedText.length - 1);\n        }\n\n        let beginHour = 0;\n        let endHour = 0;\n        let endMin = 0;\n        let timex = \"\";\n\n        if (trimedText.endsWith(\"matinee\") || \n            trimedText.endsWith(\"matin\") || \n            trimedText.endsWith(\"matinée\")) {\n            timex = \"TMO\";\n            beginHour = 8;\n            endHour = 12;\n        }\n        else if (trimedText.endsWith(\"apres-midi\")||\n            trimedText.endsWith(\"apres midi\") || \n            trimedText.endsWith(\"après midi\") || \n            trimedText.endsWith(\"après-midi\")) {\n            timex = \"TAF\";\n            beginHour = 12;\n            endHour = 16;\n        }\n        else if (trimedText.endsWith(\"soir\") || \n            trimedText.endsWith(\"soiree\") || \n            trimedText.endsWith(\"soirée\")) {\n            timex = \"TEV\";\n            beginHour = 16;\n            endHour = 20;\n        }\n        else if (trimedText === \"jour\" || \n            trimedText.endsWith(\"journee\") || \n            trimedText.endsWith(\"journée\")) {\n            timex = \"TDT\";\n            beginHour = 8;\n            endHour = 18;\n        }\n        else if (trimedText.endsWith(\"nuit\")) {\n            timex = \"TNI\";\n            beginHour = 20;\n            endHour = 23;\n            endMin = 59;\n        }\n        else {\n            timex = null;\n            return {\n                matched: false,\n                timex,\n                beginHour,\n                endHour,\n                endMin\n            };\n        }\n\n        return {\n            matched: true,\n            timex,\n            beginHour,\n            endHour,\n            endMin\n        };\n    }\n}","import { IExtractor, IParser, RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, FrenchCardinalExtractor } from \"recognizers-text-number\";\nimport { IDateTimePeriodExtractorConfiguration, IDateTimePeriodParserConfiguration, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser, IDateTimeExtractor } from \"../baseDateTime\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { IDateTimeParser, ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { FrenchDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { FrenchDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\";\nimport { FrenchDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { FrenchTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { DateTimeResolutionResult, DateUtils, FormatUtil } from \"../utilities\";\nimport { BaseTimePeriodExtractor } from \"../baseTimePeriod\";\nimport { FrenchTimePeriodExtractorConfiguration } from \"./timePeriodConfiguration\";\n\nexport class FrenchDateTimePeriodExtractorConfiguration implements IDateTimePeriodExtractorConfiguration {\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly singleDateExtractor: IDateTimeExtractor;\n    readonly singleTimeExtractor: IDateTimeExtractor;\n    readonly singleDateTimeExtractor: IDateTimeExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly simpleCasesRegexes: RegExp[];\n    readonly prepositionRegex: RegExp;\n    readonly tillRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly periodTimeOfDayWithDateRegex: RegExp;\n    readonly followedUnit: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly timeUnitRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n    readonly nextPrefixRegex: RegExp;\n    readonly relativeTimeUnitRegex: RegExp;\n    readonly restOfDateTimeRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly generalEndingRegex: RegExp;\n    readonly middlePauseRegex: RegExp;\n\n    readonly fromRegex: RegExp;\n    readonly connectorAndRegex: RegExp;\n    readonly beforeRegex: RegExp;\n\n\n    constructor() {\n        this.simpleCasesRegexes = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumFromTo),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumBetweenAnd),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.SpecificTimeOfDayRegex)\n        ]\n\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PrepositionRegex);\n        this.tillRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TillRegex);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PeriodSpecificTimeOfDayRegex);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PeriodTimeOfDayRegex);\n        this.followedUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeFollowedUnit);\n        this.timeUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeUnitRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PastSuffixRegex);\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NextSuffixRegex);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeNumberCombinedWithUnit);\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayRegex);\n        this.periodTimeOfDayWithDateRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PeriodTimeOfDayWithDateRegex);\n        this.relativeTimeUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RelativeTimeUnitRegex);\n        this.restOfDateTimeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RestOfDateTimeRegex);\n        this.generalEndingRegex= RegExpUtility.getSafeRegExp(FrenchDateTime.GeneralEndingRegex);\n        this.middlePauseRegex= RegExpUtility.getSafeRegExp(FrenchDateTime.MiddlePauseRegex);\n\n        this.fromRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.FromRegex2);\n        this.connectorAndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ConnectorAndRegex);\n        this.beforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.BeforeRegex);\n\n        this.cardinalExtractor = new FrenchCardinalExtractor();\n\n        this.singleDateExtractor = new BaseDateExtractor(new FrenchDateExtractorConfiguration());\n        this.singleTimeExtractor = new BaseTimeExtractor(new FrenchTimeExtractorConfiguration());\n        this.singleDateTimeExtractor = new BaseDateTimeExtractor(new FrenchDateTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new FrenchTimePeriodExtractorConfiguration());\n    }\n\n    getFromTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.fromRegex, source);\n    }\n\n    getBetweenTokenIndex(source: string): { matched: boolean; index: number; } {\n        return RegExpUtility.getFirstMatchIndex(this.beforeRegex, source);\n    }\n\n    hasConnectorToken(source: string): boolean {\n        return RegExpUtility.getFirstMatchIndex(this.connectorAndRegex, source).matched;\n    }\n}\n\nexport class FrenchDateTimePeriodParserConfiguration implements IDateTimePeriodParserConfiguration {\n    readonly pureNumberFromToRegex: RegExp;\n    readonly pureNumberBetweenAndRegex: RegExp;\n    readonly periodTimeOfDayWithDateRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly pastRegex: RegExp;\n    readonly futureRegex: RegExp;\n    readonly relativeTimeUnitRegex: RegExp;\n    readonly restOfDateTimeRegex: RegExp;\n    readonly timeOfDayRegex: RegExp;\n    readonly numberCombinedWithUnitRegex: RegExp;\n    readonly unitRegex: RegExp;\n\n    readonly nextPrefixRegex: RegExp;\n    readonly pastPrefixRegex: RegExp;\n    readonly thisPrefixRegex: RegExp;\n\n    readonly morningStartEndRegex: RegExp;\n    readonly afternoonStartEndRegex: RegExp;\n    readonly eveningStartEndRegex: RegExp;\n    readonly nightStartEndRegex: RegExp;\n\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly timeParser: BaseTimeParser;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly timePeriodParser: IDateTimeParser;\n    readonly durationParser: BaseDurationParser;\n    readonly cardinalExtractor: IExtractor;\n    readonly numberParser: IParser;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.dateExtractor = config.dateExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateTimeExtractor = config.dateTimeExtractor;\n        this.timePeriodExtractor = config.timePeriodExtractor;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.durationExtractor = config.durationExtractor;\n        this.numberParser = config.numberParser;\n        this.dateParser = config.dateParser;\n        this.timeParser = config.timeParser;\n        this.dateTimeParser = config.dateTimeParser;\n        this.timePeriodParser = config.timePeriodParser;\n        this.durationParser = config.durationParser;\n        this.unitMap = config.unitMap;\n        this.numbers = config.numbers;\n\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NextSuffixRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PastSuffixRegex);\n        this.thisPrefixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ThisPrefixRegex);\n\n        this.morningStartEndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.MorningStartEndRegex);\n        this.afternoonStartEndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AfternoonStartEndRegex);\n        this.eveningStartEndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.EveningStartEndRegex);\n        this.nightStartEndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NightStartEndRegex);\n\n        this.pureNumberFromToRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumFromTo);\n        this.pureNumberBetweenAndRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PureNumBetweenAnd);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SpecificTimeOfDayRegex);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeOfDayRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PastSuffixRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NextSuffixRegex);\n        this.numberCombinedWithUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeNumberCombinedWithUnit);\n        this.unitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.TimeUnitRegex);\n        this.periodTimeOfDayWithDateRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PeriodTimeOfDayWithDateRegex);\n        this.relativeTimeUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RelativeTimeUnitRegex);\n        this.restOfDateTimeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RestOfDateTimeRegex);\n    }\n\n    getMatchedTimeRange(source: string): { timeStr: string; beginHour: number; endHour: number; endMin: number; success: boolean; } {\n        let trimedText = source.trim().toLowerCase();\n        let timeStr = \"\";\n        let beginHour = 0;\n        let endHour = 0;\n        let endMin = 0;\n\n        if (RegExpUtility.getFirstMatchIndex(this.morningStartEndRegex, trimedText).matched) {\n            timeStr = \"TMO\";\n            beginHour = 8;\n            endHour = 12;\n        }\n        else if (RegExpUtility.getFirstMatchIndex(this.afternoonStartEndRegex, trimedText).matched) {\n            timeStr = \"TAF\";\n            beginHour = 12;\n            endHour = 16;\n        }\n        else if (RegExpUtility.getFirstMatchIndex(this.eveningStartEndRegex, trimedText).matched) {\n            timeStr = \"TEV\";\n            beginHour = 16;\n            endHour = 20;\n        }\n        else if (RegExpUtility.getFirstMatchIndex(this.nightStartEndRegex, trimedText).matched) {\n            timeStr = \"TNI\";\n            beginHour = 20;\n            endHour = 23;\n            endMin = 59;\n        }\n        else {\n            timeStr = null;\n            return {\n                success: false,\n                timeStr,\n                beginHour,\n                endHour,\n                endMin\n            };\n        }\n\n        return {\n            success: true,\n            timeStr,\n            beginHour,\n            endHour,\n            endMin\n        };\n    }\n\n    getSwiftPrefix(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = 0;\n\n        // TODO: Replace with a regex\n        if (trimedText.startsWith(\"prochain\") || \n            trimedText.endsWith(\"prochain\") ||\n            trimedText.startsWith(\"prochaine\") || \n            trimedText.endsWith(\"prochaine\")) {\n            swift = 1;\n        }\n        else if (trimedText.startsWith(\"derniere\") || \n            trimedText.startsWith(\"dernier\")||\n            trimedText.endsWith(\"derniere\") || \n            trimedText.endsWith(\"dernier\")) {\n            swift = -1;\n        }\n\n        return swift;\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { FrenchCardinalExtractor, FrenchIntegerExtractor, FrenchOrdinalExtractor, BaseNumberParser, FrenchNumberParserConfiguration } from \"recognizers-text-number\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { BaseDateParserConfiguration } from \"../parsers\";\nimport { BaseDateTime } from \"../../resources/baseDateTime\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { FrenchDateExtractorConfiguration, FrenchDateParserConfiguration } from \"./dateConfiguration\";\nimport { FrenchDateTimeExtractorConfiguration, FrenchDateTimeParserConfiguration } from \"./dateTimeConfiguration\";\nimport { FrenchDurationExtractorConfiguration, FrenchDurationParserConfiguration } from \"./durationConfiguration\";\nimport { FrenchDatePeriodExtractorConfiguration, FrenchDatePeriodParserConfiguration } from \"./datePeriodConfiguration\";\nimport { FrenchTimeExtractorConfiguration, FrenchTimeParserConfiguration } from \"./timeConfiguration\";\nimport { FrenchTimePeriodExtractorConfiguration, FrenchTimePeriodParserConfiguration } from \"./timePeriodConfiguration\";\nimport { FrenchDateTimePeriodExtractorConfiguration, FrenchDateTimePeriodParserConfiguration } from \"./dateTimePeriodConfiguration\";\n\nexport class FrenchDateTimeUtilityConfiguration implements IDateTimeUtilityConfiguration {\n    readonly agoRegex: RegExp;\n    readonly laterRegex: RegExp;\n    readonly inConnectorRegex: RegExp;\n    readonly rangeUnitRegex: RegExp;\n    readonly amDescRegex: RegExp;\n    readonly pmDescRegex: RegExp;\n    readonly amPmDescRegex: RegExp;\n\n    constructor() {\n        this.laterRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.LaterRegex);\n        this.agoRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AgoPrefixRegex);\n        this.inConnectorRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.InConnectorRegex);\n        this.rangeUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RangeUnitRegex);\n        this.amDescRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AmDescRegex);\n        this.pmDescRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PmDescRegex);\n        this.amPmDescRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AmPmDescRegex);\n    }\n}\n\nexport class FrenchCommonDateTimeParserConfiguration extends BaseDateParserConfiguration {\n\n    constructor() {\n        super();\n        this.utilityConfiguration = new FrenchDateTimeUtilityConfiguration();\n\n        this.unitMap = FrenchDateTime.UnitMap;\n        this.unitValueMap = FrenchDateTime.UnitValueMap;\n        this.seasonMap = FrenchDateTime.SeasonMap;\n        this.cardinalMap = FrenchDateTime.CardinalMap;\n        this.dayOfWeek = FrenchDateTime.DayOfWeek;\n        this.monthOfYear = FrenchDateTime.MonthOfYear;\n        this.numbers = FrenchDateTime.Numbers;\n        this.doubleNumbers = FrenchDateTime.DoubleNumbers;\n\n        this.cardinalExtractor = new FrenchCardinalExtractor();\n        this.integerExtractor = new FrenchIntegerExtractor();\n        this.ordinalExtractor = new FrenchOrdinalExtractor();\n\n        this.numberParser = new BaseNumberParser(new FrenchNumberParserConfiguration());\n        this.dateExtractor = new BaseDateExtractor(new FrenchDateExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new FrenchTimeExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new FrenchDateTimeExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new FrenchDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new FrenchTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new FrenchDateTimePeriodExtractorConfiguration());\n        this.durationParser = new BaseDurationParser(new FrenchDurationParserConfiguration(this));\n        this.dateParser = new BaseDateParser(new FrenchDateParserConfiguration(this));\n        this.timeParser = new BaseTimeParser(new FrenchTimeParserConfiguration(this));\n        this.dateTimeParser = new BaseDateTimeParser(new FrenchDateTimeParserConfiguration(this));\n        this.datePeriodParser = new BaseDatePeriodParser(new FrenchDatePeriodParserConfiguration(this));\n        this.timePeriodParser = new BaseTimePeriodParser(new FrenchTimePeriodParserConfiguration(this));\n        this.dateTimePeriodParser = new BaseDateTimePeriodParser(new FrenchDateTimePeriodParserConfiguration(this));\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, BaseNumberParser, FrenchOrdinalExtractor, FrenchIntegerExtractor, FrenchNumberParserConfiguration } from \"recognizers-text-number\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { IDateExtractorConfiguration, IDateParserConfiguration } from \"../baseDate\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { IDateTimeUtilityConfiguration } from \"../utilities\";\nimport { FrenchDateTimeUtilityConfiguration, FrenchCommonDateTimeParserConfiguration } from \"./baseConfiguration\";\nimport { FrenchDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { IDateTimeExtractor } from \"../baseDateTime\"\n\nexport class FrenchDateExtractorConfiguration implements IDateExtractorConfiguration {\n    readonly dateRegexList: RegExp[];\n    readonly implicitDateList: RegExp[];\n    readonly monthEnd: RegExp;\n    readonly ofMonth: RegExp;\n    readonly dateUnitRegex: RegExp;\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly dayOfWeek: ReadonlyMap<string, number>;\n    readonly nonDateUnitRegex : RegExp;\n    readonly ordinalExtractor: BaseNumberExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor() {\n        this.dateRegexList = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor1, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor2, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor3, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor4, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor5, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor6, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor7, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor8, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor9, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractorA, \"gis\"),\n        ];\n        this.implicitDateList = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.OnRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.RelaxedOnRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.SpecialDayRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.ThisRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.LastDateRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.NextDateRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.StrictWeekDay, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayOfMonthRegex, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.SpecialDate, \"gis\")\n        ];\n\n        this.monthEnd = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthEnd, \"gis\");\n        this.ofMonth = RegExpUtility.getSafeRegExp(FrenchDateTime.OfMonth, \"gis\");\n        this.dateUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.DateUnitRegex, \"gis\");\n        this.forTheRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ForTheRegex, \"gis\");\n        this.weekDayAndDayOfMothRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayAndDayOfMothRegex, \"gis\");\n        this.relativeMonthRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RelativeMonthRegex, \"gis\");\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayRegex, \"gis\");\n        this.dayOfWeek = FrenchDateTime.DayOfWeek;\n        this.ordinalExtractor = new FrenchOrdinalExtractor();\n        this.integerExtractor = new FrenchIntegerExtractor();\n        this.numberParser = new BaseNumberParser(new FrenchNumberParserConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n        this.utilityConfiguration = new FrenchDateTimeUtilityConfiguration();\n        this.nonDateUnitRegex = RegExpUtility.getSafeRegExp(\"(?<unit>heure|heures|hrs|secondes|seconde|secs|sec|minutes|minute|mins)\\b\",\"gis\");\n    }\n}\n\nexport class FrenchDateParserConfiguration implements IDateParserConfiguration {\n    readonly ordinalExtractor: BaseNumberExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly numberParser: BaseNumberParser;\n    readonly monthOfYear: ReadonlyMap<string, number>;\n    readonly dayOfMonth: ReadonlyMap<string, number>;\n    readonly dayOfWeek: ReadonlyMap<string, number>;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly cardinalMap: ReadonlyMap<string, number>;\n    readonly dateRegex: RegExp[];\n    readonly onRegex: RegExp;\n    readonly specialDayRegex: RegExp;\n    readonly nextRegex: RegExp;\n    readonly unitRegex: RegExp;\n    readonly strictWeekDay : RegExp;\n    readonly monthRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly lastRegex: RegExp;\n    readonly thisRegex: RegExp;\n    readonly weekDayOfMonthRegex: RegExp;\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n    readonly dateTokenPrefix: string;\n\n    constructor(config: FrenchCommonDateTimeParserConfiguration) {\n        this.ordinalExtractor = config.ordinalExtractor;\n        this.integerExtractor = config.integerExtractor;\n        this.cardinalExtractor = config.cardinalExtractor;\n        this.durationExtractor = config.durationExtractor;\n        this.numberParser = config.numberParser;\n        this.durationParser = config.durationParser;\n        this.monthOfYear = config.monthOfYear;\n        this.dayOfMonth = config.dayOfMonth;\n        this.dayOfWeek = config.dayOfWeek;\n        this.unitMap = config.unitMap;\n        this.cardinalMap = config.cardinalMap;\n        this.dateRegex = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor1, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor2, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor3, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor4, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor5, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor6, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor7, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor8, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractor9, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.DateExtractorA, \"gis\"),\n        ];\n        this.onRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.OnRegex, \"gis\");\n        this.specialDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SpecialDayRegex, \"gis\");\n        this.nextRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.NextDateRegex, \"gis\");\n        this.unitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.DateUnitRegex, \"gis\");\n        this.monthRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.MonthRegex, \"gis\");\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayRegex, \"gis\");\n        this.strictWeekDay = RegExpUtility.getSafeRegExp(FrenchDateTime.StrictWeekDay, \"gis\");\n        this.lastRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.LastDateRegex, \"gis\");\n        this.thisRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ThisRegex, \"gis\");\n        this.weekDayOfMonthRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayOfMonthRegex, \"gis\");\n        this.forTheRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.ForTheRegex, \"gis\");\n        this.weekDayAndDayOfMothRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.WeekDayAndDayOfMothRegex, \"gis\");\n        this.relativeMonthRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.RelativeMonthRegex, \"gis\");\n        this.utilityConfiguration = config.utilityConfiguration;\n        this.dateTokenPrefix = FrenchDateTime.DateTokenPrefix;\n    }\n\n    getSwiftDay(source: string): number {\n\n        let trimedText = source.trim().toLowerCase();\n        let swift = 0;\n\n        if (trimedText === \"aujourd'hui\" || trimedText === \"auj\") {\n            swift = 0;\n        } else if (trimedText === \"demain\" ||\n            trimedText.endsWith(\"a2m1\") ||\n            trimedText.endsWith(\"lendemain\") ||\n            trimedText.endsWith(\"jour suivant\")) {\n            swift = 1;\n        } else if (trimedText === \"hier\") {\n            swift = -1;\n        } else if (trimedText.endsWith(\"après demain\") ||\n            trimedText.endsWith(\"après-demain\")) {\n            swift = 2;\n        } else if (trimedText.endsWith(\"avant-hier\") ||\n            trimedText.endsWith(\"avant hier\")) {\n            swift = -2;\n        } else if (trimedText.endsWith(\"dernier\")) {\n            swift = -1;\n        }\n\n        return swift;\n    }\n\n    getSwiftMonth(source: string): number {\n        let trimedText = source.trim().toLowerCase();\n        let swift = 0;\n        if (trimedText.endsWith(\"prochaine\") || trimedText.endsWith(\"prochain\")) {\n            swift = 1;\n        } else if (trimedText === \"dernière\" ||\n            trimedText.endsWith(\"dernières\") ||\n            trimedText.endsWith(\"derniere\") ||\n            trimedText.endsWith(\"dernieres\")) {\n            swift = -1;\n        }\n\n        return swift;\n    }\n\n    isCardinalLast(source: string): boolean {\n        let trimedText = source.trim().toLowerCase();\n        return (trimedText.endsWith(\"dernière\") || \n            trimedText.endsWith(\"dernières\") || \n            trimedText.endsWith(\"derniere\") || \n            trimedText.endsWith(\"dernieres\"));\n    }\n}","import { IHolidayExtractorConfiguration, BaseHolidayParserConfiguration } from \"../baseHoliday\";\nimport { RegExpUtility } from \"recognizers-text\";\nimport { DateUtils } from \"../utilities\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\n\nexport class FrenchHolidayExtractorConfiguration implements IHolidayExtractorConfiguration {\n    readonly holidayRegexes: RegExp[];\n\n    constructor() {\n        this.holidayRegexes = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex1, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex2, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex3, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex4, \"gis\")\n        ];\n    }\n}\n\nexport class FrenchHolidayParserConfiguration extends BaseHolidayParserConfiguration {\n\n    constructor() {\n        super();\n\n        this.holidayRegexList = [\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex1, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex2, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex3, \"gis\"),\n            RegExpUtility.getSafeRegExp(FrenchDateTime.HolidayRegex4, \"gis\")\n        ];\n\n        this.holidayNames = FrenchDateTime.HolidayNames;\n        this.holidayFuncDictionary = this.initHolidayFuncs();\n    }\n\n    protected initHolidayFuncs(): ReadonlyMap<string, (year: number) => Date> {\n        return new Map<string, (year: number) => Date>(\n            [\n                ...super.initHolidayFuncs(),\n                [\"maosbirthday\", FrenchHolidayParserConfiguration.MaoBirthday],\n                [\"yuandan\", FrenchHolidayParserConfiguration.NewYear],\n                [\"teachersday\", FrenchHolidayParserConfiguration.TeacherDay],\n                [\"singleday\", FrenchHolidayParserConfiguration.SinglesDay],\n                [\"allsaintsday\", FrenchHolidayParserConfiguration.HalloweenDay],\n                [\"youthday\", FrenchHolidayParserConfiguration.YouthDay],\n                [\"childrenday\", FrenchHolidayParserConfiguration.ChildrenDay],\n                [\"femaleday\", FrenchHolidayParserConfiguration.FemaleDay],\n                [\"treeplantingday\", FrenchHolidayParserConfiguration.TreePlantDay],\n                [\"arborday\", FrenchHolidayParserConfiguration.TreePlantDay],\n                [\"girlsday\", FrenchHolidayParserConfiguration.GirlsDay],\n                [\"whiteloverday\", FrenchHolidayParserConfiguration.WhiteLoverDay],\n                [\"loverday\", FrenchHolidayParserConfiguration.ValentinesDay],\n                [\"christmas\", FrenchHolidayParserConfiguration.ChristmasDay],\n                [\"xmas\", FrenchHolidayParserConfiguration.ChristmasDay],\n                [\"newyear\", FrenchHolidayParserConfiguration.NewYear],\n                [\"newyearday\", FrenchHolidayParserConfiguration.NewYear],\n                [\"newyearsday\", FrenchHolidayParserConfiguration.NewYear],\n                [\"inaugurationday\", FrenchHolidayParserConfiguration.InaugurationDay],\n                [\"groundhougday\", FrenchHolidayParserConfiguration.GroundhogDay],\n                [\"valentinesday\", FrenchHolidayParserConfiguration.ValentinesDay],\n                [\"stpatrickday\", FrenchHolidayParserConfiguration.StPatrickDay],\n                [\"aprilfools\", FrenchHolidayParserConfiguration.FoolDay],\n                [\"stgeorgeday\", FrenchHolidayParserConfiguration.StGeorgeDay],\n                [\"mayday\", FrenchHolidayParserConfiguration.Mayday],\n                [\"cincodemayoday\", FrenchHolidayParserConfiguration.CincoDeMayoday],\n                [\"baptisteday\", FrenchHolidayParserConfiguration.BaptisteDay],\n                [\"usindependenceday\", FrenchHolidayParserConfiguration.UsaIndependenceDay],\n                [\"independenceday\", FrenchHolidayParserConfiguration.UsaIndependenceDay],\n                [\"bastilleday\", FrenchHolidayParserConfiguration.BastilleDay],\n                [\"halloweenday\", FrenchHolidayParserConfiguration.HalloweenDay],\n                [\"allhallowday\", FrenchHolidayParserConfiguration.AllHallowDay],\n                [\"allsoulsday\", FrenchHolidayParserConfiguration.AllSoulsday],\n                [\"guyfawkesday\", FrenchHolidayParserConfiguration.GuyFawkesDay],\n                [\"veteransday\", FrenchHolidayParserConfiguration.Veteransday],\n                [\"christmaseve\", FrenchHolidayParserConfiguration.ChristmasEve],\n                [\"newyeareve\", FrenchHolidayParserConfiguration.NewYearEve],\n                [\"fathersday\", FrenchHolidayParserConfiguration.FathersDay ],\n                [\"mothersday\", FrenchHolidayParserConfiguration.MothersDay],\n                [\"labourday\", FrenchHolidayParserConfiguration.LabourDay ]\n            ]);\n    }\n\n    // All JavaScript dates are zero-based (-1)\n    private static NewYear(year: number): Date { return new Date(year, 1 - 1, 1); }\n    private static NewYearEve(year: number): Date { return new Date(year, 12 - 1, 31); }\n    private static ChristmasDay(year: number): Date { return new Date(year, 12 - 1, 25); }\n    private static ChristmasEve(year: number): Date { return new Date(year, 12 - 1, 24); }\n    private static FemaleDay(year: number): Date { return new Date(year, 3 - 1, 8); }\n    private static ChildrenDay(year: number): Date { return new Date(year, 6 - 1, 1); }\n    private static HalloweenDay(year: number): Date { return new Date(year, 10 - 1, 31); }\n    private static EasterDay(year: number): Date { return DateUtils.minValue(); }\n\n    private static ValentinesDay(year: number): Date { return new Date(year, 2, 14);}\n    private static WhiteLoverDay(year: number): Date { return new Date(year, 3, 14);}\n    private static FoolDay(year: number): Date { return new Date(year, 4, 1);}\n    private static GirlsDay(year: number): Date { return new Date(year, 3, 7);}\n    private static TreePlantDay(year: number): Date { return new Date(year, 3, 12);}\n    private static YouthDay(year: number): Date { return new Date(year, 5, 4);}\n    private static TeacherDay(year: number): Date { return new Date(year, 9, 10);}\n    private static SinglesDay(year: number): Date { return new Date(year, 11, 11);}\n    private static MaoBirthday(year: number): Date { return new Date(year, 12, 26);}\n    private static InaugurationDay(year: number): Date { return new Date(year, 1, 20);}\n    private static GroundhogDay(year: number): Date { return new Date(year, 2, 2);}\n    private static StPatrickDay(year: number): Date { return new Date(year, 3, 17);}\n    private static StGeorgeDay(year: number): Date { return new Date(year, 4, 23);}\n    private static Mayday(year: number): Date { return new Date(year, 5, 1);}\n    private static CincoDeMayoday(year: number): Date { return new Date(year, 5, 5);}\n    private static BaptisteDay(year: number): Date { return new Date(year, 6, 24);}\n    private static UsaIndependenceDay(year: number): Date { return new Date(year, 7, 4);}\n    private static BastilleDay(year: number): Date { return new Date(year, 7, 14);}\n    private static AllHallowDay(year: number): Date { return new Date(year, 11, 1);}\n    private static AllSoulsday(year: number): Date { return new Date(year, 11, 2);}\n    private static GuyFawkesDay(year: number): Date { return new Date(year, 11, 5);}\n    private static Veteransday(year: number): Date { return new Date(year, 11, 11);}\n    protected static FathersDay(year: number): Date { return new Date(year, 6, 17);}\n    protected static MothersDay(year: number): Date { return new Date(year, 5, 27);}\n    protected static LabourDay(year: number): Date { return new Date(year, 5, 1);}\n\n    getSwiftYear(text: string): number {\n        let trimedText = text.trim().toLowerCase();\n        let swift = -10;\n\n        if (trimedText.endsWith(\"prochain\")) { // next - 'l'annee prochain')\n            swift = 1;\n        }\n        else if (trimedText.endsWith(\"dernier\")) { // last - 'l'annee dernier'\n            swift = -1;\n        }\n        else if (trimedText.startsWith(\"cette\")) { // this - 'cette annees'\n            swift = 0;\n        }\n\n        return swift;\n    }\n\n    sanitizeHolidayToken(holiday: string): string {\n        return holiday.replace(/ /g, \"\")\n            .replace(/'/g, \"\");\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { ISetExtractorConfiguration, ISetParserConfiguration } from \"../baseSet\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { FrenchDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { FrenchDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { FrenchDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\";\nimport { FrenchDatePeriodExtractorConfiguration } from \"./datePeriodConfiguration\";\nimport { FrenchDateTimePeriodExtractorConfiguration } from \"./dateTimePeriodConfiguration\";\nimport { ICommonDateTimeParserConfiguration } from \"../parsers\";\nimport { FrenchTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { FrenchTimePeriodExtractorConfiguration } from \"./timePeriodConfiguration\";\n\nexport class FrenchSetExtractorConfiguration implements ISetExtractorConfiguration {\n    readonly lastRegex: RegExp;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly beforeEachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n\n    constructor() {\n        this.lastRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SetLastRegex, \"gis\");\n        this.periodicRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PeriodicRegex, \"gis\");\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.EachUnitRegex, \"gis\");\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.EachPrefixRegex, \"gis\");\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.EachDayRegex, \"gis\");\n        this.beforeEachDayRegex = null;\n        this.setEachRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SetEachRegex, \"gis\");\n        this.setWeekDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SetWeekDayRegex, \"gis\");\n\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new FrenchTimeExtractorConfiguration());\n        this.dateExtractor = new BaseDateExtractor(new FrenchDateExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new FrenchDateTimeExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new FrenchDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new FrenchTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new FrenchDateTimePeriodExtractorConfiguration());\n    }\n}\n\nexport class FrenchSetParserConfiguration implements ISetParserConfiguration {\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly timeParser: BaseTimeParser;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly datePeriodParser: BaseDatePeriodParser;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodParser: BaseTimePeriodParser;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n\n    constructor(config: ICommonDateTimeParserConfiguration) {\n        this.durationExtractor = config.durationExtractor;\n        this.timeExtractor = config.timeExtractor;\n        this.dateExtractor = config.dateExtractor;\n        this.dateTimeExtractor = config.dateTimeExtractor;\n        this.datePeriodExtractor = config.datePeriodExtractor;\n        this.timePeriodExtractor = config.timePeriodExtractor;\n        this.dateTimePeriodExtractor = config.dateTimePeriodExtractor;\n        this.durationParser = config.durationParser;\n        this.timeParser = config.timeParser;\n        this.dateParser = config.dateParser;\n        this.dateTimeParser = config.dateTimeParser;\n        this.datePeriodParser = config.datePeriodParser;\n        this.timePeriodParser = config.timePeriodParser;\n        this.dateTimePeriodParser = config.dateTimePeriodParser;\n        this.unitMap = config.unitMap;\n\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.EachPrefixRegex, \"gis\");\n        this.periodicRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PeriodicRegex, \"gis\");\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.EachUnitRegex, \"gis\");\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.EachDayRegex, \"gis\");\n        this.setWeekDayRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SetWeekDayRegex, \"gis\");\n        this.setEachRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SetEachRegex, \"gis\");\n    }\n\n    getMatchedDailyTimex(text: string): { matched: boolean; timex: string; } {\n        let trimedText = text.trim().toLowerCase();\n        let timex = \"\";\n\n        if (trimedText === \"quotidien\" || trimedText === \"quotidienne\" || \n            trimedText === \"jours\" || trimedText === \"journellement\") {\n            timex = \"P1D\";\n        }\n        else if (trimedText === \"hebdomadaire\") {\n            timex = \"P1W\";\n        }\n        else if (trimedText === \"bihebdomadaire\") {\n            timex = \"P2W\";\n        }\n        else if (trimedText === \"mensuel\") {\n            timex = \"P1M\";\n        }\n        else if (trimedText === \"annuel\") {\n            timex = \"P1Y\";\n        }\n        else {\n            timex = null;\n            return {\n                timex,\n                matched: false\n            };\n        }\n\n        return {\n            timex,\n            matched: true\n        }\n    }\n\n    getMatchedUnitTimex(text: string): { matched: boolean; timex: string; } {\n        let trimedText = text.trim().toLowerCase();\n        let timex = \"\";\n\n        if (trimedText === \"jour\" || trimedText === \"journee\") {\n            timex = \"P1D\";\n        }\n        else if (trimedText === \"semaine\") {\n            timex = \"P1W\";\n        }\n        else if (trimedText === \"mois\") {\n            timex = \"P1M\";\n        }\n        else if (trimedText === \"an\" || trimedText === \"annee\") {\n            timex = \"P1Y\";\n        }\n        else {\n            timex = null;\n            return {\n                matched: false,\n                timex\n            };\n        }\n\n        return {\n            matched: true,\n            timex\n        };\n    }\n}","import { RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor, FrenchIntegerExtractor } from \"recognizers-text-number\";\nimport { IMergedExtractorConfiguration, IMergedParserConfiguration } from \"../baseMerged\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { IDateTimeExtractor, BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseHolidayExtractor, BaseHolidayParser } from \"../baseHoliday\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\";\nimport { BaseSetExtractor, BaseSetParser } from \"../baseSet\";\nimport { FrenchDateTime } from \"../../resources/frenchDateTime\";\nimport { FrenchDateExtractorConfiguration } from \"./dateConfiguration\";\nimport { FrenchDateTimeExtractorConfiguration } from \"./dateTimeConfiguration\";\nimport { FrenchDatePeriodExtractorConfiguration, FrenchDatePeriodParserConfiguration } from \"./datePeriodConfiguration\";\nimport { FrenchDurationExtractorConfiguration } from \"./durationConfiguration\";\nimport { FrenchHolidayExtractorConfiguration, FrenchHolidayParserConfiguration } from \"./holidayConfiguration\";\nimport { FrenchCommonDateTimeParserConfiguration } from \"./baseConfiguration\";\nimport { FrenchTimeExtractorConfiguration } from \"./timeConfiguration\";\nimport { FrenchTimePeriodExtractorConfiguration, FrenchTimePeriodParserConfiguration } from \"./timePeriodConfiguration\";\nimport { FrenchDateTimePeriodExtractorConfiguration, FrenchDateTimePeriodParserConfiguration } from \"./dateTimePeriodConfiguration\";\nimport { FrenchSetExtractorConfiguration, FrenchSetParserConfiguration } from \"./setConfiguration\";\n\nexport class FrenchMergedExtractorConfiguration implements IMergedExtractorConfiguration {\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly dateTimeExtractor: IDateTimeExtractor;\n    readonly datePeriodExtractor: IDateTimeExtractor;\n    readonly timePeriodExtractor: IDateTimeExtractor;\n    readonly dateTimePeriodExtractor: IDateTimeExtractor;\n    readonly holidayExtractor: IDateTimeExtractor;\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly setExtractor: IDateTimeExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly afterRegex: RegExp;\n    readonly beforeRegex: RegExp;\n    readonly sinceRegex: RegExp;\n    readonly fromToRegex: RegExp;\n    readonly singleAmbiguousMonthRegex: RegExp;\n    readonly prepositionSuffixRegex: RegExp;\n    readonly numberEndingPattern: RegExp\n    readonly filterWordRegexList:RegExp[];\n\n    constructor() {\n        this.beforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.BeforeRegex);\n        this.afterRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AfterRegex);\n        this.sinceRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SinceRegex);\n        this.fromToRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.FromToRegex);\n        this.singleAmbiguousMonthRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SingleAmbiguousMonthRegex);\n        this.prepositionSuffixRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.PrepositionSuffixRegex);\n        this.numberEndingPattern = RegExpUtility.getSafeRegExp(FrenchDateTime.NumberEndingPattern);\n\n        this.dateExtractor = new BaseDateExtractor(new FrenchDateExtractorConfiguration());\n        this.timeExtractor = new BaseTimeExtractor(new FrenchTimeExtractorConfiguration());\n        this.dateTimeExtractor = new BaseDateTimeExtractor(new FrenchDateTimeExtractorConfiguration());\n        this.datePeriodExtractor = new BaseDatePeriodExtractor(new FrenchDatePeriodExtractorConfiguration());\n        this.timePeriodExtractor = new BaseTimePeriodExtractor(new FrenchTimePeriodExtractorConfiguration());\n        this.dateTimePeriodExtractor = new BaseDateTimePeriodExtractor(new FrenchDateTimePeriodExtractorConfiguration());\n        this.durationExtractor = new BaseDurationExtractor(new FrenchDurationExtractorConfiguration());\n        this.setExtractor = new BaseSetExtractor(new FrenchSetExtractorConfiguration());\n        this.holidayExtractor = new BaseHolidayExtractor(new FrenchHolidayExtractorConfiguration());\n        this.integerExtractor = new FrenchIntegerExtractor();\n        this.filterWordRegexList = [];\n    }\n}\n\nexport class FrenchMergedParserConfiguration extends FrenchCommonDateTimeParserConfiguration implements IMergedParserConfiguration {\n    readonly beforeRegex: RegExp;\n    readonly afterRegex: RegExp;\n    readonly sinceRegex: RegExp;\n    readonly dateParser: BaseDateParser;\n    readonly holidayParser: BaseHolidayParser;\n    readonly timeParser: BaseTimeParser;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly datePeriodParser: BaseDatePeriodParser;\n    readonly timePeriodParser: BaseTimePeriodParser;\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser;\n    readonly durationParser: BaseDurationParser;\n    readonly setParser: BaseSetParser;\n\n    constructor() {\n        super();\n\n        this.beforeRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.BeforeRegex);\n        this.afterRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.AfterRegex);\n        this.sinceRegex = RegExpUtility.getSafeRegExp(FrenchDateTime.SinceRegex);\n\n        this.datePeriodParser = new BaseDatePeriodParser(new FrenchDatePeriodParserConfiguration(this));\n        this.timePeriodParser = new BaseTimePeriodParser(new FrenchTimePeriodParserConfiguration(this));\n        this.setParser = new BaseSetParser(new FrenchSetParserConfiguration(this));\n        this.holidayParser = new BaseHolidayParser(new FrenchHolidayParserConfiguration());\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseDateTime } from \"./baseDateTime\";\nexport namespace ChineseDateTime {\n\texport const MonthRegex = `(?<month>正月|一月|二月|三月|四月|五月|六月|七月|八月|九月|十月|十一月|十二月|01月|02月|03月|04月|05月|06月|07月|08月|09月|10月|11月|12月|1月|2月|3月|4月|5月|6月|7月|8月|9月|大年)`;\n\texport const DayRegex = `(?<day>01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|1|2|3|4|5|6|7|8|9)`;\n\texport const DateDayRegexInChinese = `(?<day>初一|三十|一日|十一日|二十一日|三十一日|二日|三日|四日|五日|六日|七日|八日|九日|十二日|十三日|十四日|十五日|十六日|十七日|十八日|十九日|二十二日|二十三日|二十四日|二十五日|二十六日|二十七日|二十八日|二十九日|一日|十一日|十日|二十一日|二十日|三十一日|三十日|二日|三日|四日|五日|六日|七日|八日|九日|十二日|十三日|十四日|十五日|十六日|十七日|十八日|十九日|二十二日|二十三日|二十四日|二十五日|二十六日|二十七日|二十八日|二十九日|十日|二十日|三十日|10日|11日|12日|13日|14日|15日|16日|17日|18日|19日|1日|20日|21日|22日|23日|24日|25日|26日|27日|28日|29日|2日|30日|31日|3日|4日|5日|6日|7日|8日|9日|一号|十一号|二十一号|三十一号|二号|三号|四号|五号|六号|七号|八号|九号|十二号|十三号|十四号|十五号|十六号|十七号|十八号|十九号|二十二号|二十三号|二十四号|二十五号|二十六号|二十七号|二十八号|二十九号|一号|十一号|十号|二十一号|二十号|三十一号|三十号|二号|三号|四号|五号|六号|七号|八号|九号|十二号|十三号|十四号|十五号|十六号|十七号|十八号|十九号|二十二号|二十三号|二十四号|二十五号|二十六号|二十七号|二十八号|二十九号|十号|二十号|三十号|10号|11号|12号|13号|14号|15号|16号|17号|18号|19号|1号|20号|21号|22号|23号|24号|25号|26号|27号|28号|29号|2号|30号|31号|3号|4号|5号|6号|7号|8号|9号)`;\n\texport const DayRegexNumInChinese = `(?<day>一|十一|二十一|三十一|二|三|四|五|六|七|八|九|十二|十三|十四|十五|十六|十七|十八|十九|二十二|二十三|二十四|二十五|二十六|二十七|二十八|二十九|一|十一|十|二十一|二十|三十一|三十|二|三|四|五|六|七|八|九|十二|十三|十四|十五|十六|十七|十八|十九|二十二|二十三|二十四|二十五|二十六|二十七|二十八|二十九|十|二十|廿|卅)`;\n\texport const MonthNumRegex = `(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)`;\n\texport const YearRegex = `(?<year>19\\\\d{2}|20\\\\d{2}|9\\\\d|0\\\\d|1\\\\d)`;\n\texport const ZeroToNineIntegerRegexChs = `[一二三四五六七八九零壹贰叁肆伍陆柒捌玖〇两千俩倆仨]`;\n\texport const DateYearInChineseRegex = `(?<yearchs>(${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}|${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}))`;\n\texport const WeekDayRegex = `(?<weekday>周日|周天|周一|周二|周三|周四|周五|周六|星期一|星期二|星期三|星期四|星期五|星期六|星期天|星期天)`;\n\texport const LunarRegex = `(农历|初一|正月|大年)`;\n\texport const DateThisRegex = `(这个|这一个|这|这一|本)${WeekDayRegex}`;\n\texport const DateLastRegex = `(上一个|上个|上一|上|最后一个|最后)(的)?${WeekDayRegex}`;\n\texport const DateNextRegex = `(下一个|下个|下一|下)(的)?${WeekDayRegex}`;\n\texport const SpecialDayRegex = `(最近|前天|后天|昨天|明天|今天|今日|明日|昨日)`;\n\texport const WeekDayOfMonthRegex = `(((${MonthRegex}|${MonthNumRegex})的\\\\s*)(?<cardinal>第一个|第二个|第三个|第四个|第五个|最后一个)\\\\s*${WeekDayRegex})`;\n\texport const DateThisRe = `这个|这一个|这|这一|本|今`;\n\texport const DateLastRe = `上个|上一个|上|上一|去`;\n\texport const DateNextRe = `下个|下一个|下|下一|明`;\n\texport const SpecialDate = `(?<thisyear>(${DateThisRe}|${DateLastRe}|${DateNextRe})年)?(?<thismonth>(${DateThisRe}|${DateLastRe}|${DateNextRe})月)?${DateDayRegexInChinese}`;\n\texport const DateUnitRegex = `(?<unit>年|个月|周|日|天)`;\n\texport const BeforeRegex = `之前|前`;\n\texport const AfterRegex = `之后|后`;\n\texport const DateRegexList1 = `(${LunarRegex}(\\\\s*))?(((${YearRegex}|${DateYearInChineseRegex})年)(\\\\s*))?${MonthRegex}(\\\\s*)${DateDayRegexInChinese}((\\\\s*|,|，)${WeekDayRegex})?(${BeforeRegex}|${AfterRegex})?`;\n\texport const DateRegexList2 = `(((${YearRegex}|${DateYearInChineseRegex})年)(\\\\s*))?(${LunarRegex}(\\\\s*))?${MonthRegex}(\\\\s*)${DateDayRegexInChinese}((\\\\s*|,|，)${WeekDayRegex})?(${BeforeRegex}|${AfterRegex})?`;\n\texport const DateRegexList3 = `(((${YearRegex}|${DateYearInChineseRegex})年)(\\\\s*))?(${LunarRegex}(\\\\s*))?${MonthRegex}(\\\\s*)(${DayRegexNumInChinese}|${DayRegex})((\\\\s*|,|，)${WeekDayRegex})?(${BeforeRegex}|${AfterRegex})?`;\n\texport const DateRegexList4 = `${MonthNumRegex}\\\\s*/\\\\s*${DayRegex}((\\\\s+|\\\\s*,\\\\s*)${YearRegex})?`;\n\texport const DateRegexList5 = `${DayRegex}\\\\s*/\\\\s*${MonthNumRegex}((\\\\s+|\\\\s*,\\\\s*)${YearRegex})?`;\n\texport const DateRegexList6 = `${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${DayRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${YearRegex}`;\n\texport const DateRegexList7 = `\\\\b${DayRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-]\\\\s*${YearRegex}`;\n\texport const DateRegexList8 = `${YearRegex}\\\\s*[/\\\\\\\\\\\\-\\\\. ]\\\\s*${MonthNumRegex}\\\\s*[/\\\\\\\\\\\\-\\\\. ]\\\\s*${DayRegex}`;\n\texport const DatePeriodTillRegex = `(?<till>到|至|--|-|—|——)`;\n\texport const DatePeriodDayRegexInChinese = `(?<day>初一|三十|一日|十一日|二十一日|三十一日|二日|三日|四日|五日|六日|七日|八日|九日|十二日|十三日|十四日|十五日|十六日|十七日|十八日|十九日|二十二日|二十三日|二十四日|二十五日|二十六日|二十七日|二十八日|二十九日|一日|十一日|十日|二十一日|二十日|三十一日|三十日|二日|三日|四日|五日|六日|七日|八日|九日|十二日|十三日|十四日|十五日|十六日|十七日|十八日|十九日|二十二日|二十三日|二十四日|二十五日|二十六日|二十七日|二十八日|二十九日|十日|二十日|三十日|10日|11日|12日|13日|14日|15日|16日|17日|18日|19日|1日|20日|21日|22日|23日|24日|25日|26日|27日|28日|29日|2日|30日|31日|3日|4日|5日|6日|7日|8日|9日|一号|十一号|二十一号|三十一号|二号|三号|四号|五号|六号|七号|八号|九号|十二号|十三号|十四号|十五号|十六号|十七号|十八号|十九号|二十二号|二十三号|二十四号|二十五号|二十六号|二十七号|二十八号|二十九号|一号|十一号|十号|二十一号|二十号|三十一号|三十号|二号|三号|四号|五号|六号|七号|八号|九号|十二号|十三号|十四号|十五号|十六号|十七号|十八号|十九号|二十二号|二十三号|二十四号|二十五号|二十六号|二十七号|二十八号|二十九号|十号|二十号|三十号|10号|11号|12号|13号|14号|15号|16号|17号|18号|19号|1号|20号|21号|22号|23号|24号|25号|26号|27号|28号|29号|2号|30号|31号|3号|4号|5号|6号|7号|8号|9号|一|十一|二十一|三十一|二|三|四|五|六|七|八|九|十二|十三|十四|十五|十六|十七|十八|十九|二十二|二十三|二十四|二十五|二十六|二十七|二十八|二十九|一|十一|十|二十一|二十|三十一|三十|二|三|四|五|六|七|八|九|十二|十三|十四|十五|十六|十七|十八|十九|二十二|二十三|二十四|二十五|二十六|二十七|二十八|二十九|十|二十|三十||廿|卅)`;\n\texport const DatePeriodThisRegex = `这个|这一个|这|这一`;\n\texport const DatePeriodLastRegex = `上个|上一个|上|上一`;\n\texport const DatePeriodNextRegex = `下个|下一个|下|下一`;\n\texport const RelativeMonthRegex = `(?<relmonth>(${DatePeriodThisRegex}|${DatePeriodLastRegex}|${DatePeriodNextRegex})\\\\s*月)`;\n\texport const DatePeriodYearRegex = `(?<year>19\\\\d{2}|20\\\\d{2})年?|(?<year>\\\\d\\\\d)年`;\n\texport const StrictYearRegex = `(?<year>19\\\\d{2}|20\\\\d{2})年?`;\n\texport const YearRegexInNumber = `(?<year>19\\\\d{2}|20\\\\d{2})`;\n\texport const DatePeriodYearInChineseRegex = `(?<yearchs>(${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}|${ZeroToNineIntegerRegexChs}${ZeroToNineIntegerRegexChs}))年`;\n\texport const MonthSuffixRegex = `(?<msuf>(${RelativeMonthRegex}|${MonthRegex}))`;\n\texport const SimpleCasesRegex = `((从)\\\\s*)?((${DatePeriodYearRegex}|${DatePeriodYearInChineseRegex})\\\\s*)?${MonthSuffixRegex}(${DatePeriodDayRegexInChinese}|${DayRegex})\\\\s*${DatePeriodTillRegex}\\\\s*(${DatePeriodDayRegexInChinese}|${DayRegex})((\\\\s+|\\\\s*,\\\\s*)${DatePeriodYearRegex})?`;\n\texport const YearAndMonth = `(${DatePeriodYearInChineseRegex}|${YearRegex})${MonthRegex}`;\n\texport const PureNumYearAndMonth = `(${YearRegexInNumber}\\\\s*[-\\\\.\\\\/]\\\\s*${MonthNumRegex})|(${MonthNumRegex}\\\\s*\\\\/\\\\s*${YearRegexInNumber})`;\n\texport const OneWordPeriodRegex = `(((明年|今年|去年)\\\\s*)?${MonthRegex}|(${DatePeriodThisRegex}|${DatePeriodLastRegex}|${DatePeriodNextRegex})\\\\s*(周末|周|月|年)|周末|今年|明年|去年|前年|后年)`;\n\texport const WeekOfMonthRegex = `(?<wom>${MonthSuffixRegex}的(?<cardinal>第一|第二|第三|第四|第五|最后一)\\\\s*周\\\\s*)`;\n\texport const UnitRegex = `(?<unit>年|(个)?月|周|日|天)`;\n\texport const FollowedUnit = `^\\\\s*${UnitRegex}`;\n\texport const NumberCombinedWithUnit = `(?<num>\\\\d+(\\\\.\\\\d*)?)${UnitRegex}`;\n\texport const YearToYear = `(${DatePeriodYearInChineseRegex}|${YearRegex})${DatePeriodTillRegex}(${DatePeriodYearInChineseRegex}|${YearRegex})`;\n\texport const MonthToMonth = `(${MonthRegex})${YearRegex}(${MonthRegex})`;\n\texport const PastRegex = `(?<past>(前|上|之前))`;\n\texport const FutureRegex = `(?<past>(后|下|之后))`;\n\texport const SeasonRegex = `(?<season>春|夏|秋|冬)(天|季)?`;\n\texport const SeasonWithYear = `((${YearRegex}|${DatePeriodYearInChineseRegex}|(?<yearrel>明年|今年|去年))(的)?)?${SeasonRegex}`;\n\texport const QuarterRegex = `((${YearRegex}|${DatePeriodYearInChineseRegex}|(?<yearrel>明年|今年|去年))(的)?)?(第(?<cardinal>1|2|3|4|一|二|三|四)季度)`;\n\texport const PrepositionRegex = `(?<prep>^的|在$)`;\n\texport const NowRegex = `(?<now>现在|马上|立刻|刚刚才|刚刚|刚才)`;\n\texport const NightRegex = `(?<night>早|晚)`;\n\texport const TimeOfTodayRegex = `(今晚|今早|今晨|明晚|明早|明晨|昨晚)(的|在)?`;\n\texport const DateTimePeriodTillRegex = `(?<till>到|直到|--|-|—|——)`;\n\texport const DateTimePeriodPrepositionRegex = `(?<prep>^\\\\s*的|在\\\\s*$)`;\n\texport const HourRegex = `(?<hour>00|01|02|03|04|05|06|07|08|09|0|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|1|2|3|4|5|6|7|8|9)`;\n\texport const HourNumRegex = `(?<hour>[零〇一二两三四五六七八九]|二十[一二三四]?|十[一二三四五六七八九]?)`;\n\texport const ZhijianRegex = `^\\\\s*(之间|之内|期间|中间|间)`;\n\texport const DateTimePeriodThisRegex = `这个|这一个|这|这一`;\n\texport const DateTimePeriodLastRegex = `上个|上一个|上|上一`;\n\texport const DateTimePeriodNextRegex = `下个|下一个|下|下一`;\n\texport const DescRegex = `(?<desc>pm|am|p\\\\.m\\\\.|a\\\\.m\\\\.|p|a)`;\n\texport const TimeOfDayRegex = `(?<timeOfDay>凌晨|清晨|早上|早|上午|中午|下午|午后|晚上|夜里|夜晚|半夜|夜间|深夜|傍晚|晚)`;\n\texport const SpecificTimeOfDayRegex = `(((${DateTimePeriodThisRegex}|${DateTimePeriodNextRegex}|${DateTimePeriodLastRegex})\\\\s+${TimeOfDayRegex})|(今晚|今早|今晨|明晚|明早|明晨|昨晚))`;\n\texport const DateTimePeriodUnitRegex = `(个)?(?<unit>(小时|分钟|秒钟|时|分|秒))`;\n\texport const DateTimePeriodFollowedUnit = `^\\\\s*${DateTimePeriodUnitRegex}`;\n\texport const DateTimePeriodNumberCombinedWithUnit = `\\\\b(?<num>\\\\d+(\\\\.\\\\d*)?)${DateTimePeriodUnitRegex}`;\n\texport const DurationYearRegex = `((19\\\\d{2}|20\\\\d{2})|两千)年`;\n\texport const DurationHalfSuffixRegex = `半`;\n\texport const DurationSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"M\", \"分钟\"],[\"S\", \"秒钟|秒\"],[\"H\", \"个小时|小时\"],[\"D\", \"天\"],[\"W\", \"星期|个星期|周\"],[\"Mon\", \"个月\"],[\"Y\", \"年\"]]);\n\texport const DurationAmbiguousUnits = [ '分钟','秒钟','秒','个小时','小时','天','星期','个星期','周','个月','年' ];\n\texport const LunarHolidayRegex = `((${DatePeriodYearRegex}|${DatePeriodYearInChineseRegex}|(?<yearrel>明年|今年|去年))(的)?)?(?<holiday>除夕|春节|中秋节|中秋|元宵节|端午节|端午|重阳节)`;\n\texport const HolidayRegexList1 = `((${DatePeriodYearRegex}|${DatePeriodYearInChineseRegex}|(?<yearrel>明年|今年|去年))(的)?)?(?<holiday>新年|五一|劳动节|元旦节|元旦|愚人节|圣诞节|植树节|国庆节|情人节|教师节|儿童节|妇女节|青年节|建军节|女生节|光棍节|双十一|清明节|清明)`;\n\texport const HolidayRegexList2 = `((${DatePeriodYearRegex}|${DatePeriodYearInChineseRegex}|(?<yearrel>明年|今年|去年))(的)?)?(?<holiday>母亲节|父亲节|感恩节|万圣节)`;\n\texport const SetUnitRegex = `(?<unit>年|月|周|星期|日|天|小时|时|分钟|分|秒钟|秒)`;\n\texport const SetEachUnitRegex = `(?<each>(每个|每一|每)\\\\s*${SetUnitRegex})`;\n\texport const SetEachPrefixRegex = `(?<each>(每)\\\\s*$)`;\n\texport const SetLastRegex = `(?<last>last|this|next)`;\n\texport const SetEachDayRegex = `(每|每一)(天|日)\\\\s*$`;\n\texport const TimeHourNumRegex = `(00|01|02|03|04|05|06|07|08|09|0|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|1|2|3|4|5|6|7|8|9)`;\n\texport const TimeMinuteNumRegex = `(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|0|1|2|3|4|5|6|7|8|9)`;\n\texport const TimeSecondNumRegex = `(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|0|1|2|3|4|5|6|7|8|9)`;\n\texport const TimeHourChsRegex = `([零〇一二两三四五六七八九]|二十[一二三四]?|十[一二三四五六七八九]?)`;\n\texport const TimeMinuteChsRegex = `([二三四五]?十[一二三四五六七八九]?|六十|[零〇一二三四五六七八九])`;\n\texport const TimeSecondChsRegex = `${TimeMinuteChsRegex}`;\n\texport const TimeClockDescRegex = `(点\\\\s*整|点\\\\s*钟|点|时)`;\n\texport const TimeMinuteDescRegex = `(分钟|分|)`;\n\texport const TimeSecondDescRegex = `(秒钟|秒)`;\n\texport const TimeBanHourPrefixRegex = `(第)`;\n\texport const TimeHourRegex = `(?<!${TimeBanHourPrefixRegex})(?<hour>${TimeHourChsRegex}|${TimeHourNumRegex})${TimeClockDescRegex}`;\n\texport const TimeMinuteRegex = `(?<min>${TimeMinuteChsRegex}|${TimeMinuteNumRegex})${TimeMinuteDescRegex}`;\n\texport const TimeSecondRegex = `(?<sec>${TimeSecondChsRegex}|${TimeSecondNumRegex})${TimeSecondDescRegex}`;\n\texport const TimeHalfRegex = `(?<half>过半|半)`;\n\texport const TimeQuarterRegex = `(?<quarter>[一两二三四1-4])\\\\s*(刻钟|刻)`;\n\texport const TimeChineseTimeRegex = `${TimeHourRegex}(${TimeQuarterRegex}|${TimeHalfRegex}|((过|又)?${TimeMinuteRegex})(${TimeSecondRegex})?)?`;\n\texport const TimeDigitTimeRegex = `(?<hour>${TimeHourNumRegex}):(?<min>${TimeMinuteNumRegex})(:(?<sec>${TimeSecondNumRegex}))?`;\n\texport const TimeDayDescRegex = `(?<daydesc>凌晨|清晨|早上|早|上午|中午|下午|午后|晚上|夜里|夜晚|半夜|午夜|夜间|深夜|傍晚|晚)`;\n\texport const TimeApproximateDescPreffixRegex = `(大[约概]|差不多|可能|也许|约|不超过|不多[于过]|最[多长少]|少于|[超短长多]过|几乎要|将近|差点|快要|接近|至少|起码|超出|不到)`;\n\texport const TimeApproximateDescSuffixRegex = `(之前|以前|以后|之后|前|后|左右)`;\n\texport const TimeRegexes1 = `${TimeApproximateDescPreffixRegex}?${TimeDayDescRegex}?${TimeChineseTimeRegex}${TimeApproximateDescSuffixRegex}?`;\n\texport const TimeRegexes2 = `${TimeApproximateDescPreffixRegex}?${TimeDayDescRegex}?${TimeDigitTimeRegex}${TimeApproximateDescSuffixRegex}?`;\n\texport const TimeRegexes3 = `差${TimeMinuteRegex}${TimeChineseTimeRegex}`;\n\texport const TimePeriodTimePeriodConnectWords = `(起|至|到|–|-|—|~|～)`;\n\texport const TimePeriodLeftChsTimeRegex = `(从)?(?<left>${TimeDayDescRegex}?(${TimeChineseTimeRegex}))`;\n\texport const TimePeriodRightChsTimeRegex = `${TimePeriodTimePeriodConnectWords}(?<right>${TimeDayDescRegex}?${TimeChineseTimeRegex})(之间)?`;\n\texport const TimePeriodLeftDigitTimeRegex = `(从)?(?<left>${TimeDayDescRegex}?(${TimeDigitTimeRegex}))`;\n\texport const TimePeriodRightDigitTimeRegex = `${TimePeriodTimePeriodConnectWords}(?<right>${TimeDayDescRegex}?${TimeDigitTimeRegex})(之间)?`;\n\texport const TimePeriodShortLeftChsTimeRegex = `(从)?(?<left>${TimeDayDescRegex}?(${TimeHourChsRegex}))`;\n\texport const TimePeriodShortLeftDigitTimeRegex = `(从)?(?<left>${TimeDayDescRegex}?(${TimeHourNumRegex}))`;\n\texport const TimePeriodRegexes1 = `(${TimePeriodLeftDigitTimeRegex}${TimePeriodRightDigitTimeRegex}|${TimePeriodLeftChsTimeRegex}${TimePeriodRightChsTimeRegex})`;\n\texport const TimePeriodRegexes2 = `(${TimePeriodShortLeftDigitTimeRegex}${TimePeriodRightDigitTimeRegex}|${TimePeriodShortLeftChsTimeRegex}${TimePeriodRightChsTimeRegex})`;\n\texport const ParserConfigurationBefore = `(前|之前)$`;\n\texport const ParserConfigurationAfter = `(后|之后)$`;\n\texport const ParserConfigurationLastWeekDayToken = '最后一个';\n\texport const ParserConfigurationNextMonthToken = '下一个';\n\texport const ParserConfigurationLastMonthToken = '上一个';\n\texport const ParserConfigurationDatePrefix = ' ';\n\texport const ParserConfigurationUnitMap: ReadonlyMap<string, string> = new Map<string, string>([[\"年\", \"Y\"],[\"月\", \"MON\"],[\"个月\", \"MON\"],[\"日\", \"D\"],[\"周\", \"W\"],[\"天\", \"D\"],[\"小时\", \"H\"],[\"时\", \"H\"],[\"分钟\", \"M\"],[\"分\", \"M\"],[\"秒钟\", \"S\"],[\"秒\", \"S\"],[\"星期\", \"W\"]]);\n\texport const ParserConfigurationUnitValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"years\", 31536000],[\"year\", 31536000],[\"months\", 2592000],[\"month\", 2592000],[\"weeks\", 604800],[\"week\", 604800],[\"days\", 86400],[\"day\", 86400],[\"hours\", 3600],[\"hour\", 3600],[\"hrs\", 3600],[\"hr\", 3600],[\"h\", 3600],[\"minutes\", 60],[\"minute\", 60],[\"mins\", 60],[\"min\", 60],[\"seconds\", 1],[\"second\", 1],[\"secs\", 1],[\"sec\", 1]]);\n\texport const ParserConfigurationSeasonMap: ReadonlyMap<string, string> = new Map<string, string>([[\"春\", \"SP\"],[\"夏\", \"SU\"],[\"秋\", \"FA\"],[\"冬\", \"WI\"]]);\n\texport const ParserConfigurationSeasonValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"SP\", 3],[\"SU\", 6],[\"FA\", 9],[\"WI\", 12]]);\n\texport const ParserConfigurationCardinalMap: ReadonlyMap<string, number> = new Map<string, number>([[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"一\", 1],[\"二\", 2],[\"三\", 3],[\"四\", 4],[\"五\", 5],[\"第一个\", 1],[\"第二个\", 2],[\"第三个\", 3],[\"第四个\", 4],[\"第五个\", 5],[\"第一\", 1],[\"第二\", 2],[\"第三\", 3],[\"第四\", 4],[\"第五\", 5]]);\n\texport const ParserConfigurationDayOfMonth: ReadonlyMap<string, number> = new Map<string, number>([[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"6\", 6],[\"7\", 7],[\"8\", 8],[\"9\", 9],[\"10\", 10],[\"11\", 11],[\"12\", 12],[\"13\", 13],[\"14\", 14],[\"15\", 15],[\"16\", 16],[\"17\", 17],[\"18\", 18],[\"19\", 19],[\"20\", 20],[\"21\", 21],[\"22\", 22],[\"23\", 23],[\"24\", 24],[\"25\", 25],[\"26\", 26],[\"27\", 27],[\"28\", 28],[\"29\", 29],[\"30\", 30],[\"31\", 31],[\"01\", 1],[\"02\", 2],[\"03\", 3],[\"04\", 4],[\"05\", 5],[\"06\", 6],[\"07\", 7],[\"08\", 8],[\"09\", 9],[\"1日\", 1],[\"2日\", 2],[\"3日\", 3],[\"4日\", 4],[\"5日\", 5],[\"6日\", 6],[\"7日\", 7],[\"8日\", 8],[\"9日\", 9],[\"10日\", 10],[\"11日\", 11],[\"12日\", 12],[\"13日\", 13],[\"14日\", 14],[\"15日\", 15],[\"16日\", 16],[\"17日\", 17],[\"18日\", 18],[\"19日\", 19],[\"20日\", 20],[\"21日\", 21],[\"22日\", 22],[\"23日\", 23],[\"24日\", 24],[\"25日\", 25],[\"26日\", 26],[\"27日\", 27],[\"28日\", 28],[\"29日\", 29],[\"30日\", 30],[\"31日\", 31],[\"一日\", 1],[\"十一日\", 11],[\"二十日\", 20],[\"十日\", 10],[\"二十一日\", 21],[\"三十一日\", 31],[\"二日\", 2],[\"三日\", 3],[\"四日\", 4],[\"五日\", 5],[\"六日\", 6],[\"七日\", 7],[\"八日\", 8],[\"九日\", 9],[\"十二日\", 12],[\"十三日\", 13],[\"十四日\", 14],[\"十五日\", 15],[\"十六日\", 16],[\"十七日\", 17],[\"十八日\", 18],[\"十九日\", 19],[\"二十二日\", 22],[\"二十三日\", 23],[\"二十四日\", 24],[\"二十五日\", 25],[\"二十六日\", 26],[\"二十七日\", 27],[\"二十八日\", 28],[\"二十九日\", 29],[\"三十日\", 30],[\"1号\", 1],[\"2号\", 2],[\"3号\", 3],[\"4号\", 4],[\"5号\", 5],[\"6号\", 6],[\"7号\", 7],[\"8号\", 8],[\"9号\", 9],[\"10号\", 10],[\"11号\", 11],[\"12号\", 12],[\"13号\", 13],[\"14号\", 14],[\"15号\", 15],[\"16号\", 16],[\"17号\", 17],[\"18号\", 18],[\"19号\", 19],[\"20号\", 20],[\"21号\", 21],[\"22号\", 22],[\"23号\", 23],[\"24号\", 24],[\"25号\", 25],[\"26号\", 26],[\"27号\", 27],[\"28号\", 28],[\"29号\", 29],[\"30号\", 30],[\"31号\", 31],[\"一号\", 1],[\"十一号\", 11],[\"二十号\", 20],[\"十号\", 10],[\"二十一号\", 21],[\"三十一号\", 31],[\"二号\", 2],[\"三号\", 3],[\"四号\", 4],[\"五号\", 5],[\"六号\", 6],[\"七号\", 7],[\"八号\", 8],[\"九号\", 9],[\"十二号\", 12],[\"十三号\", 13],[\"十四号\", 14],[\"十五号\", 15],[\"十六号\", 16],[\"十七号\", 17],[\"十八号\", 18],[\"十九号\", 19],[\"二十二号\", 22],[\"二十三号\", 23],[\"二十四号\", 24],[\"二十五号\", 25],[\"二十六号\", 26],[\"二十七号\", 27],[\"二十八号\", 28],[\"二十九号\", 29],[\"三十号\", 30],[\"初一\", 32],[\"三十\", 30],[\"一\", 1],[\"十一\", 11],[\"二十\", 20],[\"十\", 10],[\"二十一\", 21],[\"三十一\", 31],[\"二\", 2],[\"三\", 3],[\"四\", 4],[\"五\", 5],[\"六\", 6],[\"七\", 7],[\"八\", 8],[\"九\", 9],[\"十二\", 12],[\"十三\", 13],[\"十四\", 14],[\"十五\", 15],[\"十六\", 16],[\"十七\", 17],[\"十八\", 18],[\"十九\", 19],[\"二十二\", 22],[\"二十三\", 23],[\"二十四\", 24],[\"二十五\", 25],[\"二十六\", 26],[\"二十七\", 27],[\"二十八\", 28],[\"二十九\", 29]]);\n\texport const ParserConfigurationDayOfWeek: ReadonlyMap<string, number> = new Map<string, number>([[\"星期一\", 1],[\"星期二\", 2],[\"星期三\", 3],[\"星期四\", 4],[\"星期五\", 5],[\"星期六\", 6],[\"星期天\", 0],[\"星期日\", 0],[\"周一\", 1],[\"周二\", 2],[\"周三\", 3],[\"周四\", 4],[\"周五\", 5],[\"周六\", 6],[\"周日\", 0],[\"周天\", 0]]);\n\texport const ParserConfigurationMonthOfYear: ReadonlyMap<string, number> = new Map<string, number>([[\"1\", 1],[\"2\", 2],[\"3\", 3],[\"4\", 4],[\"5\", 5],[\"6\", 6],[\"7\", 7],[\"8\", 8],[\"9\", 9],[\"10\", 10],[\"11\", 11],[\"12\", 12],[\"01\", 1],[\"02\", 2],[\"03\", 3],[\"04\", 4],[\"05\", 5],[\"06\", 6],[\"07\", 7],[\"08\", 8],[\"09\", 9],[\"一月\", 1],[\"二月\", 2],[\"三月\", 3],[\"四月\", 4],[\"五月\", 5],[\"六月\", 6],[\"七月\", 7],[\"八月\", 8],[\"九月\", 9],[\"十月\", 10],[\"十一月\", 11],[\"十二月\", 12],[\"1月\", 1],[\"2月\", 2],[\"3月\", 3],[\"4月\", 4],[\"5月\", 5],[\"6月\", 6],[\"7月\", 7],[\"8月\", 8],[\"9月\", 9],[\"10月\", 10],[\"11月\", 11],[\"12月\", 12],[\"01月\", 1],[\"02月\", 2],[\"03月\", 3],[\"04月\", 4],[\"05月\", 5],[\"06月\", 6],[\"07月\", 7],[\"08月\", 8],[\"09月\", 9],[\"正月\", 13],[\"大年\", 13]]);\n\texport const DateTimeSimpleAmRegex = `(?<am>早|晨)`;\n\texport const DateTimeSimplePmRegex = `(?<pm>晚)`;\n\texport const DateTimePeriodMORegex = `(凌晨|清晨|早上|早|上午)`;\n\texport const DateTimePeriodAFRegex = `(中午|下午|午后|傍晚)`;\n\texport const DateTimePeriodEVRegex = `(晚上|夜里|夜晚|晚)`;\n\texport const DateTimePeriodNIRegex = `(半夜|夜间|深夜)`;\n\texport const DurationUnitValueMap: ReadonlyMap<string, number> = new Map<string, number>([[\"Y\", 31536000],[\"Mon\", 2592000],[\"W\", 604800],[\"D\", 86400],[\"H\", 3600],[\"M\", 60],[\"S\", 1]]);\n\texport const HolidayNoFixedTimex: ReadonlyMap<string, string> = new Map<string, string>([[\"父亲节\", \"-06-WXX-6-3\"],[\"母亲节\", \"-05-WXX-7-2\"],[\"感恩节\", \"-11-WXX-4-4\"]]);\n\texport const MergedBeforeRegex = `(前|之前)$`;\n\texport const MergedAfterRegex = `(后|之后)$`;\n\texport const TimeNumberDictionary: ReadonlyMap<string, number> = new Map<string, number>([[\"零\", 0],[\"一\", 1],[\"二\", 2],[\"三\", 3],[\"四\", 4],[\"五\", 5],[\"六\", 6],[\"七\", 7],[\"八\", 8],[\"九\", 9],[\"〇\", 0],[\"两\", 2],[\"十\", 10]]);\n\texport const TimeLowBoundDesc: ReadonlyMap<string, number> = new Map<string, number>([[\"中午\", 11],[\"下午\", 12],[\"午后\", 12],[\"晚上\", 18],[\"夜里\", 18],[\"夜晚\", 18],[\"夜间\", 18],[\"深夜\", 18],[\"傍晚\", 18],[\"晚\", 18]]);\n}\n","import { IModel, ModelResult, IExtractor, IParser, FormatUtility } from \"recognizers-text\";\nimport { UnitValue } from \"./parsers\";\n\nexport enum CompositeEntityType {\n    Age,\n    Currency,\n    Dimension,\n    Temperature\n}\n\nexport abstract class AbstractNumberWithUnitModel implements IModel {\n    protected extractorParsersMap: Map<IExtractor, IParser>;\n\n    abstract modelTypeName: string;\n\n    constructor(extractorParsersMap: Map<IExtractor, IParser>) {\n        this.extractorParsersMap = extractorParsersMap;\n    }\n\n    parse(query: string): Array<ModelResult> {\n        query = FormatUtility.preProcess(query, false);\n\n        let extractionResults = new Array<ModelResult>();\n        for (let kv of this.extractorParsersMap.entries()) {\n            let extractor = kv[0];\n            let parser = kv[1];\n            let extractResults = extractor.extract(query);\n            let parseResults = extractResults.map(r => parser.parse(r))\n                .filter(o => o.value !== null);\n            let modelResults = parseResults.map(o =>\n                ({\n                    start: o.start,\n                    end: o.start + o.length - 1,\n                    resolution: this.getResolution(o.value),\n                    text: o.text,\n                    typeName: this.modelTypeName\n                } as ModelResult));\n\n            modelResults.forEach(result => {\n                let bAdd = true;\n\n                extractionResults.forEach(extractionResult => {\n                    if (extractionResult.start === result.start && extractionResult.end === result.end) {\n                        bAdd = false;\n                    }\n                });\n\n                if (bAdd) {\n                    extractionResults.push(result);\n                }\n            });\n        }\n\n        return extractionResults;\n    }\n\n    private getResolution(data: any): any {\n        if(typeof data === 'undefined') return null;\n\n        return typeof data === \"string\"\n            ? { value: data.toString() }\n            : { value: (data as UnitValue).number, unit: (data as UnitValue).unit };\n    }\n}\n\nexport class AgeModel extends AbstractNumberWithUnitModel {\n    modelTypeName: string = \"age\"\n}\n\nexport class CurrencyModel extends AbstractNumberWithUnitModel {\n    modelTypeName: string = \"currency\";\n}\n\nexport class DimensionModel extends AbstractNumberWithUnitModel {\n    modelTypeName: string = \"dimension\";\n}\n\nexport class TemperatureModel extends AbstractNumberWithUnitModel {\n    modelTypeName: string = \"temperature\"\n}","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.gt` which doesn't coerce arguments to numbers.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * This method returns the first argument given to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escapeRegExp('[lodash](https://lodash.com/)');\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n */\nfunction escapeRegExp(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string))\n    ? string.replace(reRegExpChar, '\\\\$&')\n    : string;\n}\n\nmodule.exports = escapeRegExp;\n","import { IExtractor, ExtractResult, RegExpUtility, Match, StringUtility } from \"recognizers-text\";\nimport { Culture, CultureInfo } from \"recognizers-text-number\";\nimport max = require(\"lodash.max\");\nimport escapeRegExp = require(\"lodash.escaperegexp\");\n\nexport interface INumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n\n    readonly extractType: string;\n    readonly cultureInfo: CultureInfo;\n    readonly unitNumExtractor: IExtractor;\n    readonly buildPrefix: string;\n    readonly buildSuffix: string;\n    readonly connectorToken: string;\n}\n\nexport class NumberWithUnitExtractor implements IExtractor {\n    private readonly config: INumberWithUnitExtractorConfiguration;\n    private readonly suffixRegexes: Set<RegExp>;\n    private readonly prefixRegexes: Set<RegExp>;\n    private readonly separateRegex: RegExp;\n    private readonly maxPrefixMatchLen: number;\n\n    constructor(config: INumberWithUnitExtractorConfiguration) {\n        this.config = config;\n        if (this.config.suffixList && this.config.suffixList.size > 0) {\n            this.suffixRegexes = this.buildRegexFromSet(Array.from(this.config.suffixList.values()));\n        } else {\n            this.suffixRegexes = new Set<RegExp>(); // empty\n        }\n\n        if (this.config.prefixList && this.config.prefixList.size > 0) {\n            let maxLength = 0;\n\n            this.config.prefixList.forEach(preMatch => {\n                let len = max(preMatch.split('|').filter(s => s && s.length).map(s => s.length));\n                maxLength = maxLength >= len ? maxLength : len;\n            });\n\n            // 2 is the maxium length of spaces.\n            this.maxPrefixMatchLen = maxLength + 2;\n\n            this.prefixRegexes = this.buildRegexFromSet(Array.from(this.config.prefixList.values()));\n        } else {\n            this.prefixRegexes = new Set<RegExp>(); // empty\n        }\n\n        this.separateRegex = this.buildSeparateRegexFromSet();\n    }\n\n    extract(source: string): Array<ExtractResult> {\n        if (!this.preCheckStr(source)) {\n            return new Array<ExtractResult>();\n        }\n\n        let mappingPrefix = new Map<number, PrefixUnitResult>();\n        let matched = new Array<boolean>(source.length);\n        let numbers = this.config.unitNumExtractor.extract(source);\n        let result = new Array<ExtractResult>();\n        let sourceLen = source.length;\n\n        /* Mix prefix and numbers, make up a prefix-number combination */\n        if (this.maxPrefixMatchLen !== 0) {\n            numbers.forEach(num => {\n\n                if (num.start === undefined || num.length === undefined) {\n                    return;\n                }\n                let maxFindPref = Math.min(this.maxPrefixMatchLen, num.start);\n                if (maxFindPref === 0) {\n                    return;\n                }\n\n                /* Scan from left to right , find the longest match */\n                let leftStr = source.substring(num.start - maxFindPref, num.start - maxFindPref + maxFindPref);;\n                let lastIndex = leftStr.length;\n                let bestMatch: Match = null;\n                this.prefixRegexes.forEach(regex => {\n                    let collection = RegExpUtility.getMatches(regex, leftStr).filter(m => m.length);\n                    if (collection.length === 0) {\n                        return;\n                    }\n\n                    collection.forEach(match => {\n                        if (leftStr.substring(match.index, lastIndex).trim() === match.value) {\n                            if (bestMatch === null || bestMatch.index >= match.index) {\n                                bestMatch = match;\n                            }\n                        }\n                    });\n                });\n\n                if (bestMatch !== null) {\n                    let offSet = lastIndex - bestMatch.index;\n                    let unitStr = leftStr.substring(bestMatch.index, lastIndex);\n                    mappingPrefix.set(num.start, {\n                        offset: lastIndex - bestMatch.index,\n                        unitString: unitStr\n                    });\n                }\n            });\n        }\n\n        for (let num of numbers) {\n            if (num.start === undefined || num.length === undefined) {\n                continue;\n            }\n\n            let start = num.start\n            let length = num.length;\n            let maxFindLen = sourceLen - start - length;\n\n            let prefixUnit: PrefixUnitResult = mappingPrefix.has(start) ? mappingPrefix.get(start) : null;\n\n            if (maxFindLen > 0) {\n                let rightSub = source.substring(start + length, start + length + maxFindLen);\n                let unitMatch = Array.from(this.suffixRegexes.values()).map(r => RegExpUtility.getMatches(r, rightSub))\n                    .filter(m => m.length > 0);\n\n                let maxlen = 0;\n                for (let i = 0; i < unitMatch.length; i++) {\n                    for (let m of unitMatch[i]) {\n                        if (m.length > 0) {\n                            let endpos = m.index + m.length;\n                            if (m.index >= 0) {\n                                let midStr = rightSub.substring(0, Math.min(m.index, rightSub.length));\n                                if (maxlen < endpos && (StringUtility.isNullOrWhitespace(midStr) || midStr.trim() === this.config.connectorToken)) {\n                                    maxlen = endpos;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                if (maxlen !== 0) {\n                    for (let i = 0; i < length + maxlen; i++) {\n                        matched[i + start] = true;\n                    }\n\n                    let substr = source.substring(start, start + length + maxlen);\n                    let er = {\n                        start: start,\n                        length: length + maxlen,\n                        text: substr,\n                        type: this.config.extractType\n                    } as ExtractResult;\n\n                    if (prefixUnit !== null) {\n                        er.start -= prefixUnit.offset;\n                        er.length += prefixUnit.offset;\n                        er.text = prefixUnit.unitString + er.text;\n                    }\n                    /* Relative position will be used in Parser */\n                    num.start = start - er.start;\n                    er.data = num;\n\n                    result.push(er);\n                    continue;\n                }\n            }\n\n            if (prefixUnit !== null) {\n                let er = {\n                    start: num.start - prefixUnit.offset,\n                    length: num.length + prefixUnit.offset,\n                    text: prefixUnit.unitString + num.text,\n                    type: this.config.extractType\n                } as ExtractResult;\n\n                /* Relative position will be used in Parser */\n                num.start = start - er.start;\n                er.data = num;\n                result.push(er);\n            }\n        }\n\n        // extract Separate unit\n        if (this.separateRegex !== null) {\n            this.extractSeparateUnits(source, result);\n        }\n\n        return result;\n    }\n\n    validateUnit(source: string): boolean {\n        return source.substring(0, 1) !== '-';\n    }\n\n    protected preCheckStr(str: string) {\n        return str && str.length;\n    }\n\n\n    protected extractSeparateUnits(source: string, numDependResults: Array<ExtractResult>): void {\n        // Default is false\n        let matchResult = new Array<boolean>(source.length);\n        numDependResults.forEach(numDependResult => {\n            let start = numDependResult.start;\n            let i = 0;\n            do {\n                matchResult[start + i++] = true;\n            } while (i < numDependResult.length);\n        });\n\n        // Extract all SeparateUnits, then merge it with numDependResults\n        let matchCollection = RegExpUtility.getMatches(this.separateRegex, source);\n        if (matchCollection.length > 0) {\n            matchCollection.forEach(match => {\n                let i = 0;\n                while (i < match.length && !matchResult[match.index + i]) {\n                    i++;\n                }\n                if (i === match.length) {\n                    // Mark as extracted\n                    for (let j = 0; j < i; j++) {\n                        matchResult[j] = true;\n                    }\n                    numDependResults.push({\n                        start: match.index,\n                        length: match.length,\n                        text: match.value,\n                        type: this.config.extractType,\n                        data: null\n                    } as ExtractResult);\n                }\n            });\n        }\n    }\n\n    protected buildRegexFromSet(collection: Array<string>, ignoreCase: boolean = true): Set<RegExp> {\n        return new Set<RegExp>(\n            collection.map(regexString => {\n                let regexTokens = regexString.split('|').map(escapeRegExp);\n                let pattern = `${this.config.buildPrefix}(${regexTokens.join('|')})${this.config.buildSuffix}`;\n                let options = \"gs\";\n                if (ignoreCase) options += \"i\";\n                return RegExpUtility.getSafeRegExp(pattern, options);\n            }));\n    }\n\n    protected buildSeparateRegexFromSet(ignoreCase: boolean = true): RegExp {\n\n        let separateWords = new Set<string>();\n        if (this.config.prefixList && this.config.prefixList.size) {\n            for (let addWord of this.config.prefixList.values()) {\n                addWord.split('|').filter(s => s && s.length)\n                    .filter(this.validateUnit)\n                    .forEach(word => separateWords.add(word));\n            }\n        }\n\n        if (this.config.suffixList && this.config.suffixList.size) {\n            for (let addWord of this.config.suffixList.values()) {\n                addWord.split('|').filter(s => s && s.length)\n                    .filter(this.validateUnit)\n                    .forEach(word => separateWords.add(word));\n            }\n        }\n\n        if (this.config.ambiguousUnitList && this.config.ambiguousUnitList.length) {\n            for (let abandonWord of this.config.ambiguousUnitList) {\n                if (separateWords.has(abandonWord)) {\n                    separateWords.delete(abandonWord);\n                }\n            }\n        }\n\n        let regexTokens = Array.from(separateWords.values()).map(escapeRegExp);\n        if (regexTokens.length === 0) {\n            return null;\n        }\n\n        // Sort SeparateWords using descending length.\n        regexTokens = regexTokens.sort(this.dinoComparer);\n\n        let pattern = `${this.config.buildPrefix}(${regexTokens.join('|')})${this.config.buildSuffix}`;\n        let options = \"gs\";\n        if (ignoreCase) options += \"i\";\n        return RegExpUtility.getSafeRegExp(pattern, options);\n    }\n\n    protected dinoComparer(x: string, y: string): number {\n        if (x === null) {\n            if (y === null) {\n                // If x is null and y is null, they're\n                // equal.\n                return 0;\n            }\n            else {\n                // If x is null and y is not null, y\n                // is greater.\n                return 1;\n            }\n        }\n        else {\n            // If x is not null...\n            //\n            if (y === null)\n            // ...and y is null, x is greater.\n            {\n                return -1;\n            }\n            else {\n                // ...and y is not null, compare the\n                // lengths of the two strings.\n                //\n                let retval = y.length - x.length;\n\n                if (retval !== 0) {\n                    // If the strings are not of equal length,\n                    // the longer string is greater.\n                    //\n                    return retval;\n                }\n                else {\n                    // If the strings are of equal length,\n                    // sort them with ordinary string comparison.\n                    //\n                    let xl = x.toLowerCase();\n                    let yl = y.toLowerCase();\n                    if (xl < yl) {\n                        return -1;\n                    }\n\n                    if (xl > yl) {\n                        return 1;\n                    }\n\n                    return 0;\n                }\n            }\n        }\n    }\n}\n\nexport class PrefixUnitResult {\n    offset: number;\n    unitString: string;\n}","/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array ? array.length : 0;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","import { IExtractor, ExtractResult, IParser, ParseResult } from \"recognizers-text\";\nimport { CultureInfo } from \"recognizers-text-number\";\nimport last = require(\"lodash.last\");\n\nexport class UnitValue {\n    public number: string = \"\";\n    public unit: string = \"\";\n}\n\nexport class NumberWithUnitParser implements IParser {\n    protected readonly config: INumberWithUnitParserConfiguration;\n\n    constructor(config: INumberWithUnitParserConfiguration) {\n        this.config = config;\n    }\n\n    parse(extResult: ExtractResult): ParseResult {\n        let ret = new ParseResult(extResult);\n        let numberResult: ExtractResult;\n        if (extResult.data && typeof extResult.data === \"object\") {\n            numberResult = extResult.data as ExtractResult;\n        }\n        else // if there is no unitResult, means there is just unit\n        {\n            numberResult = { start: -1, length: 0, text: null, type: null };\n        }\n        // key contains units\n        let key = extResult.text;\n        let unitKeyBuild = '';\n        let unitKeys = new Array<string>();\n        for (let i = 0; i <= key.length; i++) {\n            if (i === key.length) {\n                if (unitKeyBuild.length !== 0) {\n                    this.addIfNotContained(unitKeys, unitKeyBuild.trim());\n                }\n            }\n            // numberResult.start is a relative position\n            else if (i === numberResult.start) {\n                if (unitKeyBuild.length !== 0) {\n                    this.addIfNotContained(unitKeys, unitKeyBuild.trim());\n                    unitKeyBuild = '';\n                }\n\n                let o = numberResult.start + numberResult.length - 1;\n                if (o !== null && !isNaN(o)) {\n                    i = o;\n                }\n            }\n            else {\n                unitKeyBuild += key[i];\n            }\n        }\n\n        /* Unit type depends on last unit in suffix.*/\n\n        let lastUnit = last(unitKeys).toLowerCase();\n        if (this.config.connectorToken && this.config.connectorToken.length && lastUnit.indexOf(this.config.connectorToken) === 0) {\n            lastUnit = lastUnit.substring(this.config.connectorToken.length).trim();\n        }\n        if (key && key.length && (this.config.unitMap !== null) && this.config.unitMap.has(lastUnit)) {\n            let unitValue = this.config.unitMap.get(lastUnit);\n            let numValue = numberResult.text && numberResult.text.length\n                ? this.config.internalNumberParser.parse(numberResult)\n                : null;\n\n            let resolutionStr = numValue ? numValue.resolutionStr : null;\n\n            ret.value =\n                {\n                    number: resolutionStr,\n                    unit: unitValue\n                } as UnitValue;\n\n            ret.resolutionStr = (`${resolutionStr} ${unitValue}`).trim();\n        }\n\n        return ret;\n    }\n\n    private addIfNotContained(keys: Array<string>, newKey: string): void {\n        if (!keys.some(key => key.includes(newKey))) {\n            keys.push(newKey);\n        }\n    }\n\n}\n\nexport interface INumberWithUnitParserConfiguration {\n    readonly unitMap: Map<string, string>;\n    readonly cultureInfo: CultureInfo;\n    readonly internalNumberParser: IParser;\n    readonly internalNumberExtractor: IExtractor;\n    readonly connectorToken: string;\n    BindDictionary(dictionary: Map<string, string>): void;\n}\n\nexport abstract class BaseNumberWithUnitParserConfiguration implements INumberWithUnitParserConfiguration {\n    unitMap: Map<string, string>;\n    cultureInfo: CultureInfo;\n    abstract internalNumberParser: IParser;\n    abstract internalNumberExtractor: IExtractor;\n    abstract connectorToken: string;\n\n    constructor(cultureInfo: CultureInfo) {\n        this.cultureInfo = cultureInfo;\n        this.unitMap = new Map<string, string>();\n    }\n\n    BindDictionary(dictionary: ReadonlyMap<string, string>): void {\n        if (!dictionary) return;\n        for (let key of dictionary.keys()) {\n            let value = dictionary.get(key);\n\n            if (!key || key.length === 0) {\n                continue;\n            }\n\n            let values = value.trim().split('|');\n            values.forEach(token => {\n                if (!token || token.length === 0 || this.unitMap.has(token)) {\n                    return;\n                }\n\n                this.unitMap.set(token, key);\n            });\n        }\n    }\n}","export class Constants {\n    static readonly SYS_UNIT: string = \"builtin.unit\";\n    static readonly SYS_UNIT_DIMENSION: string = \"builtin.unit.dimension\";\n    static readonly SYS_UNIT_AGE: string = \"builtin.unit.age\";\n    static readonly SYS_UNIT_AREA: string = \"builtin.unit.area\";\n    static readonly SYS_UNIT_CURRENCY: string = \"builtin.unit.currency\";\n    static readonly SYS_UNIT_LENGTH: string = \"builtin.unit.length\";\n    static readonly SYS_UNIT_SPEED: string = \"builtin.unit.speed\";\n    static readonly SYS_UNIT_TEMPERATURE: string = \"builtin.unit.temperature\";\n    static readonly SYS_UNIT_VOLUME: string = \"builtin.unit.volume\";\n    static readonly SYS_UNIT_WEIGHT: string = \"builtin.unit.weight\";\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace EnglishNumericWithUnit {\n\texport const AgeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Year\", \"years old|year old|year-old|years-old|-year-old|-years-old|years of age|year of age\"],[\"Month\", \"months old|month old|month-old|months-old|-month-old|-months-old|month of age|months of age\"],[\"Week\", \"weeks old|week old|week-old|weeks-old|-week-old|-weeks-old|week of age|weeks of age\"],[\"Day\", \"days old|day old|day-old|days-old|-day-old|-days-old|day of age|days of age\"]]);\n\texport const AreaSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Square kilometer\", \"sq km|sq kilometer|sq kilometre|sq kilometers|sq kilometres|square kilometer|square kilometre|square kilometers|square kilometres|km2|km^2|km²\"],[\"Square hectometer\", \"sq hm|sq hectometer|sq hectometre|sq hectometers|sq hectometres|square hectometer|square hectometre|square hectometers|square hectometres|hm2|hm^2|hm²|hectare|hectares\"],[\"Square decameter\", \"sq dam|sq decameter|sq decametre|sq decameters|sq decametres|square decameter|square decametre|square decameters|square decametres|sq dekameter|sq dekametre|sq dekameters|sq dekametres|square dekameter|square dekametre|square dekameters|square dekametres|dam2|dam^2|dam²\"],[\"Square meter\", \"sq m|sq meter|sq metre|sq meters|sq metres|sq metre|square meter|square meters|square metre|square metres|m2|m^2|m²\"],[\"Square decimeter\", \"sq dm|sq decimeter|sq decimetre|sq decimeters|sq decimetres|square decimeter|square decimetre|square decimeters|square decimetres|dm2|dm^2|dm²\"],[\"Square centimeter\", \"sq cm|sq centimeter|sq centimetre|sq centimeters|sq centimetres|square centimeter|square centimetre|square centimeters|square centimetres|cm2|cm^2|cm²\"],[\"Square millimeter\", \"sq mm|sq millimeter|sq millimetre|sq millimeters|sq millimetres|square millimeter|square millimetre|square millimeters|square millimetres|mm2|mm^2|mm²\"],[\"Square inch\", \"sq in|sq inch|square inch|square inches|in2|in^2|in²\"],[\"Square foot\", \"sqft|sq ft|sq foot|sq feet|square foot|square feet|feet2|feet^2|feet²|ft2|ft^2|ft²\"],[\"Square mile\", \"sq mi|sq mile|sqmiles|square mile|square miles|mi2|mi^2|mi²\"],[\"Square yard\", \"sq yd|sq yard|sq yards|square yard|square yards|yd2|yd^2|yd²\"],[\"Acre\", \"-acre|acre|acres\"]]);\n\texport const CurrencySuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Abkhazian apsar\", \"abkhazian apsar|apsars\"],[\"Afghan afghani\", \"afghan afghani|؋|afn|afghanis|afghani\"],[\"Pul\", \"pul\"],[\"Euro\", \"euros|euro|€|eur\"],[\"Cent\", \"cents|cent|-cents|-cent|sen\"],[\"Albanian lek\", \"albanian lek|leks|lek\"],[\"Qindarkë\", \"qindarkë|qindarkës|qindarke|qindarkes\"],[\"Angolan kwanza\", \"angolan kwanza|kz|aoa|kwanza|kwanzas|angolan kwanzas\"],[\"Armenian dram\", \"armenian drams|armenian dram\"],[\"Aruban florin\", \"aruban florin|ƒ|awg|aruban florins\"],[\"Bangladeshi taka\", \"bangladeshi taka|৳|bdt|taka|takas|bangladeshi takas\"],[\"Paisa\", \"poisha|paisa\"],[\"Bhutanese ngultrum\", \"Bhutanese ngultrum|nu.|btn\"],[\"Chetrum\", \"chetrums|chetrum\"],[\"Bolivian boliviano\", \"bolivian boliviano|bob|bs.|bolivia boliviano|bolivia bolivianos|bolivian bolivianos\"],[\"Bosnia and Herzegovina convertible mark\", \"bosnia and herzegovina convertible mark|bam\"],[\"Fening\", \"fenings|fenings\"],[\"Botswana pula\", \"botswana pula|bwp|pula|pulas|botswana pulas\"],[\"Thebe\", \"thebe\"],[\"Brazilian real\", \"brazilian real|r$|brl|brazil real|brazil reals|brazilian reals\"],[\"Bulgarian lev\", \"bulgarian lev|bgn|лв|bulgaria lev|bulgaria levs|bulgarian levs\"],[\"Stotinka\", \"stotinki|stotinka\"],[\"Cambodian riel\", \"cambodian riel|khr|៛|cambodia riel|cambodia riels|cambodian riels\"],[\"Cape Verdean escudo\", \"cape verdean escudo|cve\"],[\"Costa Rican colón\", \"costa rican colón|costa rican colóns|crc|₡|costa rica colón|costa rica colóns|costa rican colon|costa rican colons|costa rica colon|costa rica colons\"],[\"Salvadoran colón\", \"svc|salvadoran colón|salvadoran colóns|salvador colón|salvador colóns|salvadoran colon|salvadoran colons|salvador colon|salvador colons\"],[\"Céntimo\", \"céntimo\"],[\"Croatian kuna\", \"croatian kuna|kn|hrk|croatia kuna|croatian kunas|croatian kuna kunas\"],[\"Lipa\", \"lipa\"],[\"Czech koruna\", \"czech koruna|czk|Kč|czech korunas\"],[\"Haléř\", \"haléř\"],[\"Eritrean nakfa\", \"eritrean nakfa|nfk|ern|eritrean nakfas\"],[\"Ethiopian birr\", \"ethiopian birr|etb\"],[\"Gambian dalasi\", \"gmd\"],[\"Butut\", \"bututs|butut\"],[\"Georgian lari\", \"Georgian lari|lari|gel|₾\"],[\"Tetri\", \"tetri\"],[\"Ghanaian cedi\", \"Ghanaian cedi|ghs|₵|gh₵\"],[\"Pesewa\", \"pesewas|pesewa\"],[\"Guatemalan quetzal\", \"guatemalan quetzal|gtq|guatemala quetzal\"],[\"Haitian gourde\", \"haitian gourde|htg\"],[\"Honduran lempira\", \"honduran lempira|hnl\"],[\"Hungarian forint\", \"hungarian forint|huf|ft|hungary forint|hungary forints|hungarian forints\"],[\"Fillér\", \"fillér\"],[\"Iranian rial\", \"iranian rial|irr|iran rial|iran rials|iranian rials\"],[\"Yemeni rial\", \"yemeni rial|yer|yemeni rials\"],[\"Israeli new shekel\", \"₪|ils|agora\"],[\"Lithuanian litas\", \"ltl|lithuanian litas|lithuan litas|lithuanian lit|lithuan lit\"],[\"Japanese yen\", \"japanese yen|jpy|yen|-yen|¥|yens|japanese yens|japan yen|japan yens\"],[\"Kazakhstani tenge\", \"Kazakhstani tenge|kzt\"],[\"Kenyan shilling\", \"kenyan shilling|sh|kes\"],[\"North Korean won\", \"north korean won|kpw|north korean wons\"],[\"South Korean won\", \"south korean won|krw|south korean wons\"],[\"Korean won\", \"korean won|₩|korean wons\"],[\"Kyrgyzstani som\", \"kyrgyzstani som|kgs\"],[\"Uzbekitan som\", \"uzbekitan som|uzs\"],[\"Lao kip\", \"lao kip|lak|₭n|₭\"],[\"Att\", \"att\"],[\"Lesotho loti\", \"lesotho loti|lsl|loti\"],[\"Sente\", \"sente|lisente\"],[\"South African rand\", \"south african rand|zar|south africa rand|south africa rands|south african rands\"],[\"Macanese pataca\", \"macanese pataca|mop$|mop\"],[\"Avo\", \"avos|avo\"],[\"Macedonian denar\", \"macedonian denar|mkd|ден\"],[\"Deni\", \"deni\"],[\"Malagasy ariary\", \"malagasy ariary|mga\"],[\"Iraimbilanja\", \"iraimbilanja\"],[\"Malawian kwacha\", \"malawian kwacha|mk|mwk\"],[\"Tambala\", \"tambala\"],[\"Malaysian ringgit\", \"malaysian ringgit|rm|myr|malaysia ringgit|malaysia ringgits|malaysian ringgits\"],[\"Mauritanian ouguiya\", \"mauritanian ouguiya|um|mro|mauritania ouguiya|mauritania ouguiyas|mauritanian ouguiyas\"],[\"Khoums\", \"khoums\"],[\"Mongolian tögrög\", \"mongolian tögrög|mnt|₮|mongolia tögrög|mongolia tögrögs|mongolian tögrögs|mongolian togrog|mongolian togrogs|mongolia togrog|mongolia togrogs\"],[\"Mozambican metical\", \"mozambican metical|mt|mzn|mozambica metical|mozambica meticals|mozambican meticals\"],[\"Burmese kyat\", \"Burmese kyat|ks|mmk\"],[\"Pya\", \"pya\"],[\"Nicaraguan córdoba\", \"nicaraguan córdoba|nio\"],[\"Nigerian naira\", \"nigerian naira|naira|ngn|₦|nigeria naira|nigeria nairas|nigerian nairas\"],[\"Kobo\", \"kobo\"],[\"Turkish lira\", \"turkish lira|try|tl|turkey lira|turkey liras|turkish liras\"],[\"Kuruş\", \"kuruş\"],[\"Omani rial\", \"omani rial|omr|ر.ع.\"],[\"Panamanian balboa\", \"panamanian balboa|b/.|pab\"],[\"Centesimo\", \"centesimo|céntimo\"],[\"Papua New Guinean kina\", \"papua new guinean kina|kina|pgk\"],[\"Toea\", \"toea\"],[\"Paraguayan guaraní\", \"paraguayan guaraní|₲|pyg\"],[\"Peruvian sol\", \"peruvian sol|soles|sol|peruvian nuevo sol\"],[\"Polish złoty\", \"złoty|polish złoty|zł|pln|zloty|polish zloty|poland zloty|poland złoty\"],[\"Grosz\", \"groszy|grosz|grosze\"],[\"Qatari riyal\", \"qatari riyal|qar|qatari riyals|qatar riyal|qatar riyals\"],[\"Saudi riyal\", \"saudi riyal|sar|saudi riyals\"],[\"Riyal\", \"riyal|riyals|rial|﷼\"],[\"Dirham\", \"dirham|dirhem|dirhm\"],[\"Halala\", \"halalas|halala\"],[\"Samoan tālā\", \"samoan tālā|tālā|tala|ws$|samoa|wst|samoan tala\"],[\"Sene\", \"sene\"],[\"São Tomé and Príncipe dobra\", \"são tomé and príncipe dobra|dobras|dobra|std\"],[\"Sierra Leonean leone\", \"sierra Leonean leone|sll|leone|le\"],[\"Peseta\", \"pesetas|peseta\"],[\"Netherlands guilder\", \"florin|netherlands antillean guilder|ang|ƒ|nederlandse gulden|guilders|guilder|gulden|-guilders|-guilder|dutch guilders|dutch guilder|fl\"],[\"Swazi lilangeni\", \"swazi lilangeni|lilangeni|szl|emalangeni\"],[\"Tajikistani somoni\", \"tajikistani somoni|tjs|somoni\"],[\"Diram\", \"dirams|diram\"],[\"Thai baht\", \"thai baht|฿|thb|baht\"],[\"Satang\", \"satang|satangs\"],[\"Tongan paʻanga\", \"tongan paʻanga|paʻanga|tongan pa'anga|pa'anga\"],[\"Seniti\", \"seniti\"],[\"Ukrainian hryvnia\", \"ukrainian hryvnia|hyrvnia|uah|₴|ukrain hryvnia|ukrain hryvnias|ukrainian hryvnias\"],[\"Vanuatu vatu\", \"vanuatu vatu|vatu|vuv\"],[\"Venezuelan bolívar\", \"venezuelan bolívar|venezuelan bolívars|bs.f.|vef|bolívar fuerte|venezuelan bolivar|venezuelan bolivars|venezuela bolivar|venezuela bolivarsvenezuelan bolivar|venezuelan bolivars\"],[\"Vietnamese dong\", \"vietnamese dong|vnd|đồng|vietnam dong|vietnamese dongs|vietnam dongs\"],[\"Zambian kwacha\", \"zambian kwacha|zk|zmw|zambia kwacha|kwachas|zambian kwachas\"],[\"Moroccan dirham\", \"moroccan dirham|mad|د.م.\"],[\"United Arab Emirates dirham\", \"united arab emirates dirham|د.إ|aed\"],[\"Azerbaijani manat\", \"azerbaijani manat|azn\"],[\"Turkmenistan manat\", \"turkmenistan manat|turkmenistan new manat|tmt\"],[\"Manat\", \"manats|manat\"],[\"Qəpik\", \"qəpik\"],[\"Somali shilling\", \"somali shillings|somali shilling|shilin soomaali|-shilin soomaali|scellino|shilin|sh.so.|sos\"],[\"Somaliland shilling\", \"somaliland shillings|somaliland shilling|soomaaliland shilin\"],[\"Tanzanian shilling\", \"tanzanian shilling|tanzanian shillings|tsh|tzs|tanzania shilling|tanzania shillings\"],[\"Ugandan shilling\", \"ugandan shilling|ugandan shillings|sh|ugx|uganda shilling|uganda shillings\"],[\"Romanian leu\", \"romanian leu|lei|ron|romania leu\"],[\"Moldovan leu\", \"moldovan leu|mdl|moldova leu\"],[\"Leu\", \"leu\"],[\"Ban\", \"bani|-ban|ban\"],[\"Nepalese rupee\", \"nepalese rupee|npr\"],[\"Pakistani rupee\", \"pakistani rupee|pkr\"],[\"Indian rupee\", \"indian rupee|inr|₹|india rupee\"],[\"Seychellois rupee\", \"seychellois rupee|scr|sr|sre\"],[\"Mauritian rupee\", \"mauritian rupee|mur\"],[\"Maldivian rufiyaa\", \"maldivian rufiyaa|rf|mvr|.ރ|maldive rufiyaa\"],[\"Sri Lankan rupee\", \"sri Lankan rupee|lkr|රු|ரூ\"],[\"Indonesian rupiah\", \"Indonesian rupiah|rupiah|perak|rp|idr\"],[\"Rupee\", \"rupee|rs\"],[\"Danish krone\", \"danish krone|dkk|denmark krone|denmark krones|danish krones\"],[\"Norwegian krone\", \"norwegian krone|nok|norway krone|norway krones|norwegian krones\"],[\"Faroese króna\", \"faroese króna|faroese krona\"],[\"Icelandic króna\", \"icelandic króna|isk|icelandic krona|iceland króna|iceland krona\"],[\"Swedish krona\", \"swedish krona|sek|swedan krona\"],[\"Krone\", \"kronor|krona|króna|krone|krones|kr|-kr\"],[\"Øre\", \"Øre|oyra|eyrir\"],[\"West African CFA franc\", \"west african cfa franc|xof|west africa cfa franc|west africa franc|west african franc\"],[\"Central African CFA franc\", \"central african cfa franc|xaf|central africa cfa franc|central african franc|central africa franc\"],[\"Comorian franc\", \"comorian franc|kmf\"],[\"Congolese franc\", \"congolese franc|cdf\"],[\"Burundian franc\", \"burundian franc|bif\"],[\"Djiboutian franc\", \"djiboutian franc|djf\"],[\"CFP franc\", \"cfp franc|xpf\"],[\"Guinean franc\", \"guinean franc|gnf\"],[\"Swiss franc\", \"swiss francs|swiss franc|chf|sfr.\"],[\"Rwandan franc\", \"Rwandan franc|rwf|rf|r₣|frw\"],[\"Belgian franc\", \"belgian franc|bi.|b.fr.|bef|belgium franc\"],[\"Rappen\", \"rappen|-rappen\"],[\"Franc\", \"francs|franc|fr.|fs\"],[\"Centime\", \"centimes|centime|santim\"],[\"Russian ruble\", \"russian ruble|₽|rub|russia ruble|russia ₽|russian ₽|russian rubles|russia rubles\"],[\"New Belarusian ruble\", \"new belarusian ruble|byn|new belarus ruble|new belarus rubles|new belarusian rubles\"],[\"Old Belarusian ruble\", \"old belarusian ruble|byr|old belarus ruble|old belarus rubles|old belarusian rubles\"],[\"Transnistrian ruble\", \"transnistrian ruble|prb|р.\"],[\"Belarusian ruble\", \"belarusian ruble|belarus ruble|belarus rubles|belarusian rubles\"],[\"Kopek\", \"kopek|kopeks\"],[\"Kapyeyka\", \"kapyeyka\"],[\"Ruble\", \"rubles|ruble|br\"],[\"Algerian dinar\", \"algerian dinar|د.ج|dzd|algerian dinars|algeria dinar|algeria dinars\"],[\"Bahraini dinar\", \"bahraini dinars|bahraini dinar|bhd|.د.ب\"],[\"Santeem\", \"santeem|santeems\"],[\"Iraqi dinar\", \"iraqi dinars|iraqi dinar|iraq dinars|iraq dinar|iqd|ع.د\"],[\"Jordanian dinar\", \"jordanian dinars|jordanian dinar|د.ا|jod|jordan dinar|jordan dinars\"],[\"Kuwaiti dinar\", \"kuwaiti dinars|kuwaiti dinar|kwd|د.ك\"],[\"Libyan dinar\", \"libyan dinars|libyan dinar|libya dinars|libya dinar|lyd\"],[\"Serbian dinar\", \"serbian dinars|serbian dinar|din.|rsd|дин.|serbia dinars|serbia dinar\"],[\"Tunisian dinar\", \"tunisian dinars|tunisian dinar|tnd|tunisia dinars|tunisia dinar\"],[\"Yugoslav dinar\", \"yugoslav dinars|yugoslav dinar|yun\"],[\"Dinar\", \"dinars|dinar|denar|-dinars|-dinar\"],[\"Fils\", \"fils|fulūs|-fils|-fil\"],[\"Para\", \"para|napa\"],[\"Millime\", \"millimes|millime\"],[\"Argentine peso\", \"argentine peso|ars|argetina peso|argetina pesos|argentine pesos\"],[\"Chilean peso\", \"chilean pesos|chilean peso|clp|chile peso|chile peso\"],[\"Colombian peso\", \"colombian pesos|colombian peso|cop|colombia peso|colombia pesos\"],[\"Cuban convertible peso\", \"cuban convertible pesos|cuban convertible peso|cuc|cuba convertible pesos|cuba convertible peso\"],[\"Cuban peso\", \"cuban pesos|cuban peso|cup|cuba pesos|cuba peso\"],[\"Dominican peso\", \"dominican pesos|dominican peso|dop|dominica pesos|dominica peso\"],[\"Mexican peso\", \"mexican pesos|mexican peso|mxn|mexico pesos|mexico peso\"],[\"Philippine peso\", \"piso|philippine pesos|philippine peso|₱|php\"],[\"Uruguayan peso\", \"uruguayan pesos|uruguayan peso|uyu\"],[\"Peso\", \"pesos|peso\"],[\"Centavo\", \"centavos|centavo\"],[\"Alderney pound\", \"alderney pounds|alderney pound|alderney £\"],[\"British pound\", \"british pounds|british pound|british £|gbp|pound sterling|pound sterlings|sterling|pound scot|pound scots\"],[\"Guernsey pound\", \"guernsey pounds|guernsey £|ggp\"],[\"Ascension pound\", \"ascension pounds|ascension pound|ascension £\"],[\"Saint Helena pound\", \"saint helena pounds|saint helena pound|saint helena £|shp\"],[\"Egyptian pound\", \"egyptian pounds|egyptian pound|egyptian £|egp|ج.م|egypt pounds|egypt pound\"],[\"Falkland Islands pound\", \"falkland islands pounds|falkland islands pound|falkland islands £|fkp|falkland island pounds|falkland island pound|falkland island £\"],[\"Gibraltar pound\", \"gibraltar pounds|gibraltar pound|gibraltar £|gip\"],[\"Manx pound\", \"manx pounds|manx pound|manx £|imp\"],[\"Jersey pound\", \"jersey pounds|jersey pound|jersey £|jep\"],[\"Lebanese pound\", \"lebanese pounds|lebanese pound|lebanese £|lebanan pounds|lebanan pound|lebanan £|lbp|ل.ل\"],[\"South Georgia and the South Sandwich Islands pound\", \"south georgia and the south sandwich islands pounds|south georgia and the south sandwich islands pound|south georgia and the south sandwich islands £\"],[\"South Sudanese pound\", \"south sudanese pounds|south sudanese pound|south sudanese £|ssp|south sudan pounds|south sudan pound|south sudan £\"],[\"Sudanese pound\", \"sudanese pounds|sudanese pound|sudanese £|ج.س.|sdg|sudan pounds|sudan pound|sudan £\"],[\"Syrian pound\", \"syrian pounds|syrian pound|syrian £|ل.س|syp|syria pounds|syria pound|syria £\"],[\"Tristan da Cunha pound\", \"tristan da cunha pounds|tristan da cunha pound|tristan da cunha £\"],[\"Pound\", \"pounds|pound|-pounds|-pound|£\"],[\"Pence\", \"pence\"],[\"Shilling\", \"shillings|shilling|shilingi\"],[\"Penny\", \"pennies|penny\"],[\"United States dollar\", \"united states dollars|united states dollar|united states $|u.s. dollars|u.s. dollar|u s dollar|u s dollars|usd|american dollars|american dollar|us$|us dollar|us dollars|u.s dollar|u.s dollars\"],[\"East Caribbean dollar\", \"east caribbean dollars|east caribbean dollar|east Caribbean $|xcd\"],[\"Australian dollar\", \"australian dollars|australian dollar|australian $|australian$|aud|australia dollars|australia dollar|australia $|australia$\"],[\"Bahamian dollar\", \"bahamian dollars|bahamian dollar|bahamian $|bahamian$|bsd|bahamia dollars|bahamia dollar|bahamia $|bahamia$\"],[\"Barbadian dollar\", \"barbadian dollars|barbadian dollar|barbadian $|bbd\"],[\"Belize dollar\", \"belize dollars|belize dollar|belize $|bzd\"],[\"Bermudian dollar\", \"bermudian dollars|bermudian dollar|bermudian $|bmd|bermudia dollars|bermudia dollar|bermudia $\"],[\"British Virgin Islands dollar\", \"british virgin islands dollars|british virgin islands dollar|british virgin islands $|bvi$|virgin islands dollars|virgin islands dolalr|virgin islands $|virgin island dollars|virgin island dollar|virgin island $\"],[\"Brunei dollar\", \"brunei dollar|brunei $|bnd\"],[\"Sen\", \"sen\"],[\"Singapore dollar\", \"singapore dollars|singapore dollar|singapore $|s$|sgd\"],[\"Canadian dollar\", \"canadian dollars|canadian dollar|canadian $|cad|can$|c$|canada dollars|canada dolllar|canada $\"],[\"Cayman Islands dollar\", \"cayman islands dollars|cayman islands dollar|cayman islands $|kyd|ci$|cayman island dollar|cayman island doolars|cayman island $\"],[\"New Zealand dollar\", \"new zealand dollars|new zealand dollar|new zealand $|nz$|nzd|kiwi\"],[\"Cook Islands dollar\", \"cook islands dollars|cook islands dollar|cook islands $|cook island dollars|cook island dollar|cook island $\"],[\"Fijian dollar\", \"fijian dollars|fijian dollar|fijian $|fjd|fiji dollars|fiji dollar|fiji $\"],[\"Guyanese dollar\", \"guyanese dollars|guyanese dollar|gyd|gy$\"],[\"Hong Kong dollar\", \"hong kong dollars|hong kong dollar|hong kong $|hk$|hkd|hk dollars|hk dollar|hk $|hongkong$\"],[\"Jamaican dollar\", \"jamaican dollars|jamaican dollar|jamaican $|j$|jamaica dollars|jamaica dollar|jamaica $|jmd\"],[\"Kiribati dollar\", \"kiribati dollars|kiribati dollar|kiribati $\"],[\"Liberian dollar\", \"liberian dollars|liberian dollar|liberian $|liberia dollars|liberia dollar|liberia $|lrd\"],[\"Micronesian dollar\", \"micronesian dollars|micronesian dollar|micronesian $\"],[\"Namibian dollar\", \"namibian dollars|namibian dollar|namibian $|nad|n$|namibia dollars|namibia dollar|namibia $\"],[\"Nauruan dollar\", \"nauruan dollars|nauruan dollar|nauruan $\"],[\"Niue dollar\", \"niue dollars|niue dollar|niue $\"],[\"Palauan dollar\", \"palauan dollars|palauan dollar|palauan $\"],[\"Pitcairn Islands dollar\", \"pitcairn islands dollars|pitcairn islands dollar|pitcairn islands $|pitcairn island dollars|pitcairn island dollar|pitcairn island $\"],[\"Solomon Islands dollar\", \"solomon islands dollars|solomon islands dollar|solomon islands $|si$|sbd|solomon island dollars|solomon island dollar|solomon island $\"],[\"Surinamese dollar\", \"surinamese dollars|surinamese dollar|surinamese $|srd\"],[\"New Taiwan dollar\", \"new taiwan dollars|new taiwan dollar|nt$|twd|ntd\"],[\"Trinidad and Tobago dollar\", \"trinidad and tobago dollars|trinidad and tobago dollar|trinidad and tobago $|trinidad $|trinidad dollar|trinidad dollars|trinidadian dollar|trinidadian dollars|trinidadian $|ttd\"],[\"Tuvaluan dollar\", \"tuvaluan dollars|tuvaluan dollar|tuvaluan $\"],[\"Dollar\", \"dollars|dollar|$\"],[\"Chinese yuan\", \"yuan|chinese yuan|renminbi|cny|rmb|￥\"],[\"Fen\", \"fen\"],[\"Jiao\", \"jiao\"],[\"Finnish markka\", \"suomen markka|finnish markka|finsk mark|fim|markkaa|markka\"],[\"Penni\", \"penniä|penni\"]]);\n\texport const CurrencyPrefixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Dollar\", \"$\"],[\"United States dollar\", \"united states $|us$|us $|u.s. $|u.s $\"],[\"East Caribbean dollar\", \"east caribbean $\"],[\"Australian dollar\", \"australian $|australia $\"],[\"Bahamian dollar\", \"bahamian $|bahamia $\"],[\"Barbadian dollar\", \"barbadian $|barbadin $\"],[\"Belize dollar\", \"belize $\"],[\"Bermudian dollar\", \"bermudian $\"],[\"British Virgin Islands dollar\", \"british virgin islands $|bvi$|virgin islands $|virgin island $|british virgin island $\"],[\"Brunei dollar\", \"brunei $|b$\"],[\"Sen\", \"sen\"],[\"Singapore dollar\", \"singapore $|s$\"],[\"Canadian dollar\", \"canadian $|can$|c$|c $|canada $\"],[\"Cayman Islands dollar\", \"cayman islands $|ci$|cayman island $\"],[\"New Zealand dollar\", \"new zealand $|nz$|nz $\"],[\"Cook Islands dollar\", \"cook islands $|cook island $\"],[\"Fijian dollar\", \"fijian $|fiji $\"],[\"Guyanese dollar\", \"gy$|gy $|g$|g $\"],[\"Hong Kong dollar\", \"hong kong $|hk$|hkd|hk $\"],[\"Jamaican dollar\", \"jamaican $|j$|jamaica $\"],[\"Kiribati dollar\", \"kiribati $\"],[\"Liberian dollar\", \"liberian $|liberia $\"],[\"Micronesian dollar\", \"micronesian $\"],[\"Namibian dollar\", \"namibian $|nad|n$|namibia $\"],[\"Nauruan dollar\", \"nauruan $\"],[\"Niue dollar\", \"niue $\"],[\"Palauan dollar\", \"palauan $\"],[\"Pitcairn Islands dollar\", \"pitcairn islands $|pitcairn island $\"],[\"Solomon Islands dollar\", \"solomon islands $|si$|si $|solomon island $\"],[\"Surinamese dollar\", \"surinamese $|surinam $\"],[\"New Taiwan dollar\", \"nt$|nt $\"],[\"Trinidad and Tobago dollar\", \"trinidad and tobago $|trinidad $|trinidadian $\"],[\"Tuvaluan dollar\", \"tuvaluan $\"],[\"Samoan tālā\", \"ws$\"],[\"Chinese yuan\", \"￥\"],[\"Japanese yen\", \"¥\"],[\"Euro\", \"€\"],[\"Pound\", \"£\"],[\"Costa Rican colón\", \"₡\"],[\"Turkish lira\", \"₺\"]]);\n\texport const AmbiguousCurrencyUnitList = [ 'din.','kiwi','kina','kobo','lari','lipa','napa','para','sfr.','taka','tala','toea','vatu','yuan','ang','ban','bob','btn','byr','cad','cop','cup','dop','gip','jod','kgs','lak','lei','mga','mop','nad','omr','pul','sar','sbd','scr','sdg','sek','sen','sol','sos','std','try','yer','yen' ];\n\texport const InformationSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Bit\", \"-bit|bit|bits\"],[\"Kilobit\", \"kilobit|kilobits|kb|kbit\"],[\"Megabit\", \"megabit|megabits|Mb|Mbit\"],[\"Gigabit\", \"gigabit|gigabits|Gb|Gbit\"],[\"Terabit\", \"terabit|terabits|Tb|Tbit\"],[\"Petabit\", \"petabit|petabits|Pb|Pbit\"],[\"Byte\", \"-byte|byte|bytes\"],[\"Kilobyte\", \"-kilobyte|-kilobytes|kilobyte|kB|kilobytes|kilo byte|kilo bytes|kByte\"],[\"Megabyte\", \"-megabyte|-megabytes|megabyte|mB|megabytes|mega byte|mega bytes|MByte\"],[\"Gigabyte\", \"-gigabyte|-gigabytes|gigabyte|gB|gigabytes|giga byte|giga bytes|GByte\"],[\"Terabyte\", \"-terabyte|-terabytes|terabyte|tB|terabytes|tera byte|tera bytes|TByte\"],[\"Petabyte\", \"-petabyte|-petabytes|petabyte|pB|petabytes|peta byte|peta bytes|PByte\"]]);\n\texport const AmbiguousDimensionUnitList = [ 'barrel','barrels','grain','pound','stone','yards','yard','cord','dram','feet','foot','gill','knot','peck','cup','fps','pts','in','\\\\\\\"' ];\n\texport const BuildPrefix = `(?<=(\\\\s|^|\\\\W))`;\n\texport const BuildSuffix = `(?=(\\\\s|\\\\W|$))`;\n\texport const LenghtSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilometer\", \"km|kilometer|kilometre|kilometers|kilometres|kilo meter|kilo meters|kilo metres|kilo metre\"],[\"Hectometer\", \"hm|hectometer|hectometre|hectometers|hectometres|hecto meter|hecto meters|hecto metres|hecto metre\"],[\"Decameter\", \"dam|decameter|decametre|decameters|decametres|deca meter|deca meters|deca metres|deca metre\"],[\"Meter\", \"m|meter|metre|meters|metres\"],[\"Decimeter\", \"dm|decimeter|decimeters|decimetre|decimetres|deci meter|deci meters|deci metres|deci metre\"],[\"Centimeter\", \"cm|centimeter|centimeters|centimetre|centimetres|centi meter|centi meters|centi metres|centi metre\"],[\"Millimeter\", \"mm|millimeter|millimeters|millimetre|millimetres|milli meter|milli meters|milli metres|milli metre\"],[\"Micrometer\", \"μm|micrometer|micrometre|micrometers|micrometres|micro meter|micro meters|micro metres|micro metre\"],[\"Nanometer\", \"nm|nanometer|nanometre|nanometers|nanometres|nano meter|nano meters|nano metres|nano metre\"],[\"Picometer\", \"pm|picometer|picometre|picometers|picometres|pico meter|pico meters|pico metres|pico metre\"],[\"Mile\", \"-mile|mile|miles\"],[\"Yard\", \"yard|yards\"],[\"Inch\", \"-inch|inch|inches|in|\\\\\\\"\"],[\"Foot\", \"-foot|foot|feet|ft\"],[\"Light year\", \"light year|light-year|light years|light-years\"],[\"Pt\", \"pt|pts\"]]);\n\texport const AmbiguousLengthUnitList = [ 'm','yard','yards','pm','pt','pts' ];\n\texport const SpeedSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Meter per second\", \"meters / second|m/s|meters per second|metres per second|meter per second|metre per second\"],[\"Kilometer per hour\", \"km/h|kilometres per hour|kilometers per hour|kilometer per hour|kilometre per hour\"],[\"Kilometer per minute\", \"km/min|kilometers per minute|kilometres per minute|kilometer per minute|kilometre per minute\"],[\"Kilometer per second\", \"km/s|kilometers per second|kilometres per second|kilometer per second|kilometre per second\"],[\"Mile per hour\", \"mph|mile per hour|miles per hour|mi/h|mile / hour|miles / hour|miles an hour\"],[\"Knot\", \"kt|knot|kn\"],[\"Foot per second\", \"ft/s|foot/s|foot per second|feet per second|fps\"],[\"Foot per minute\", \"ft/min|foot/min|foot per minute|feet per minute\"],[\"Yard per minute\", \"yards per minute|yard per minute|yards / minute|yards/min|yard/min\"],[\"Yard per second\", \"yards per second|yard per second|yards / second|yards/s|yard/s\"]]);\n\texport const TemperatureSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"F\", \"degrees fahrenheit|degree fahrenheit|deg fahrenheit|degs fahrenheit|fahrenheit|°f|degrees farenheit|degree farenheit|deg farenheit|degs farenheit|degrees f|degree f|deg f|degs f|farenheit|f\"],[\"K\", \"k|kelvin\"],[\"R\", \"rankine|°r\"],[\"D\", \"delisle|°de\"],[\"C\", \"degrees celsius|degree celsius|deg celsius|degs celsius|celsius|degrees celcius|degree celcius|celcius|deg celcius|degs celcius|degrees centigrade|degree centigrade|centigrade|degrees centigrate|degree centigrate|degs centigrate|deg centigrate|centigrate|degrees c|degree c|deg c|degs c|°c|c\"],[\"Degree\", \"degree|degrees|deg.|deg|°\"]]);\n\texport const AmbiguousTemperatureUnitList = [ 'c','f','k' ];\n\texport const VolumeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Cubic meter\", \"m3|cubic meter|cubic meters|cubic metre|cubic metres\"],[\"Cubic centimeter\", \"cubic centimeter|cubic centimetre|cubic centimeters|cubic centimetres\"],[\"Cubic millimiter\", \"cubic millimiter|cubic millimitre|cubic millimiters|cubic millimitres\"],[\"Hectoliter\", \"hectoliter|hectolitre|hectoliters|hectolitres\"],[\"Decaliter\", \"decaliter|decalitre|dekaliter|dekalitre|decaliters|decalitres|dekaliters|dekalitres\"],[\"Liter\", \"l|litre|liter|liters|litres\"],[\"Deciliter\", \"dl|deciliter|decilitre|deciliters|decilitres\"],[\"Centiliter\", \"cl|centiliter|centilitre|centiliters|centilitres\"],[\"Milliliter\", \"ml|mls|millilitre|milliliter|millilitres|milliliters\"],[\"Cubic yard\", \"cubic yard|cubic yards\"],[\"Cubic inch\", \"cubic inch|cubic inches\"],[\"Cubic foot\", \"cubic foot|cubic feet\"],[\"Cubic mile\", \"cubic mile|cubic miles\"],[\"Fluid ounce\", \"fl oz|fluid ounce|fluid ounces\"],[\"Teaspoon\", \"teaspoon|teaspoons\"],[\"Tablespoon\", \"tablespoon|tablespoons\"],[\"Pint\", \"pint|pints\"],[\"Volume unit\", \"fluid dram|gill|quart|minim|barrel|cord|peck|bushel|hogshead\"]]);\n\texport const AmbiguousVolumeUnitList = [ 'l','ounce','oz','cup','peck','cord','gill' ];\n\texport const WeightSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilogram\", \"kg|kilogram|kilograms|kilo|kilos\"],[\"Gram\", \"g|gram|grams\"],[\"Milligram\", \"mg|milligram|milligrams\"],[\"Barrel\", \"barrels|barrel\"],[\"Gallon\", \"-gallon|gallons|gallon\"],[\"Metric ton\", \"metric tons|metric ton\"],[\"Ton\", \"-ton|ton|tons|tonne|tonnes\"],[\"Pound\", \"pound|pounds|lb\"],[\"Ounce\", \"-ounce|ounce|oz|ounces\"],[\"Weight unit\", \"pennyweight|grain|british long ton|US short hundredweight|stone|dram\"]]);\n\texport const AmbiguousWeightUnitList = [ 'g','oz','stone','dram' ];\n}\n","import { IExtractor, IParser } from \"recognizers-text\";\nimport { Culture, CultureInfo, NumberMode, AgnosticNumberParserFactory, AgnosticNumberParserType, EnglishNumberExtractor, EnglishNumberParserConfiguration } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { INumberWithUnitExtractorConfiguration } from \"../extractors\";\nimport { BaseNumberWithUnitParserConfiguration } from \"../parsers\";\nimport { EnglishNumericWithUnit } from \"../../resources/englishNumericWithUnit\";\n\nexport abstract class EnglishNumberWithUnitExtractorConfiguration implements INumberWithUnitExtractorConfiguration {\n    abstract readonly suffixList: ReadonlyMap<string, string>;\n    abstract readonly prefixList: ReadonlyMap<string, string>;\n    abstract readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly abstract extractType: string;\n\n    readonly cultureInfo: CultureInfo;\n    readonly unitNumExtractor: IExtractor;\n    readonly buildPrefix: string;\n    readonly buildSuffix: string;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        this.cultureInfo = ci;\n        this.unitNumExtractor = new EnglishNumberExtractor();\n\n        this.buildPrefix = EnglishNumericWithUnit.BuildPrefix;\n        this.buildSuffix = EnglishNumericWithUnit.BuildSuffix;\n        this.connectorToken = '';\n    }\n}\n\nexport class EnglishNumberWithUnitParserConfiguration extends BaseNumberWithUnitParserConfiguration {\n    readonly internalNumberParser: IParser;\n    readonly internalNumberExtractor: IExtractor;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        super(ci);\n\n        this.internalNumberExtractor = new EnglishNumberExtractor(NumberMode.Default);\n        this.internalNumberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new EnglishNumberParserConfiguration());\n        this.connectorToken = '';\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { EnglishNumberWithUnitExtractorConfiguration, EnglishNumberWithUnitParserConfiguration } from \"./base\";\nimport { EnglishNumericWithUnit } from \"../../resources/englishNumericWithUnit\";\n\nexport class EnglishCurrencyExtractorConfiguration extends EnglishNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_CURRENCY;\n\n        // Reference Source: https:// en.wikipedia.org/wiki/List_of_circulating_currencies\n        this.suffixList = EnglishNumericWithUnit.CurrencySuffixList;\n        this.prefixList = EnglishNumericWithUnit.CurrencyPrefixList;\n        this.ambiguousUnitList = EnglishNumericWithUnit.AmbiguousCurrencyUnitList;\n    }\n}\n\nexport class EnglishCurrencyParserConfiguration extends EnglishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.BindDictionary(EnglishNumericWithUnit.CurrencySuffixList);\n        this.BindDictionary(EnglishNumericWithUnit.CurrencyPrefixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { EnglishNumberWithUnitExtractorConfiguration, EnglishNumberWithUnitParserConfiguration } from \"./base\";\nimport { EnglishNumericWithUnit } from \"../../resources/englishNumericWithUnit\";\n\nexport class EnglishTemperatureExtractorConfiguration extends EnglishNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_TEMPERATURE;\n\n        this.suffixList = EnglishNumericWithUnit.TemperatureSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = EnglishNumericWithUnit.AmbiguousTemperatureUnitList;\n    }\n}\n\nexport class EnglishTemperatureParserConfiguration extends EnglishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.BindDictionary(EnglishNumericWithUnit.TemperatureSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { EnglishNumberWithUnitExtractorConfiguration, EnglishNumberWithUnitParserConfiguration } from \"./base\";\nimport { EnglishNumericWithUnit } from \"../../resources/englishNumericWithUnit\";\n\nconst dimensionSuffixList = new Map<string, string>([\n    ...EnglishNumericWithUnit.InformationSuffixList,\n    ...EnglishNumericWithUnit.AreaSuffixList,\n    ...EnglishNumericWithUnit.LenghtSuffixList,\n    ...EnglishNumericWithUnit.SpeedSuffixList,\n    ...EnglishNumericWithUnit.VolumeSuffixList,\n    ...EnglishNumericWithUnit.WeightSuffixList\n]);\n\nexport class EnglishDimensionExtractorConfiguration extends EnglishNumberWithUnitExtractorConfiguration {\n\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_DIMENSION;\n\n        this.suffixList = dimensionSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = EnglishNumericWithUnit.AmbiguousDimensionUnitList\n    }\n}\n\nexport class EnglishDimensionParserConfiguration extends EnglishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.BindDictionary(dimensionSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { EnglishNumberWithUnitExtractorConfiguration, EnglishNumberWithUnitParserConfiguration } from \"./base\";\nimport { EnglishNumericWithUnit } from \"../../resources/englishNumericWithUnit\";\n\nexport class EnglishAgeExtractorConfiguration extends EnglishNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_AGE;\n\n        this.suffixList = EnglishNumericWithUnit.AgeSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = new Array<string>();\n    }\n}\n\nexport class EnglishAgeParserConfiguration extends EnglishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.English);\n        }\n\n        super(ci);\n\n        this.BindDictionary(EnglishNumericWithUnit.AgeSuffixList);\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace SpanishNumericWithUnit {\n\texport const AgeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Año\", \"años|año\"],[\"Mes\", \"meses|mes\"],[\"Semana\", \"semanas|semana\"],[\"Día\", \"dias|días|día|dia\"]]);\n\texport const AreaSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilómetro cuadrado\", \"kilómetro cuadrado|kilómetros cuadrados|km2|km^2|km²\"],[\"Hectómetro cuadrado\", \"hectómetro cuadrado|hectómetros cuadrados|hm2|hm^2|hm²|hectárea|hectáreas\"],[\"Decámetro cuadrado\", \"decámetro cuadrado|decámetros cuadrados|dam2|dam^2|dam²|área|áreas\"],[\"Metro cuadrado\", \"metro cuadrado|metros cuadrados|m2|m^2|m²\"],[\"Decímetro cuadrado\", \"decímetro cuadrado|decímetros cuadrados|dm2|dm^2|dm²\"],[\"Centímetro cuadrado\", \"centímetro cuadrado|centímetros cuadrados|cm2|cm^2|cm²\"],[\"Milímetro cuadrado\", \"milímetro cuadrado|milímetros cuadrados|mm2|mm^2|mm²\"],[\"Pulgada cuadrado\", \"pulgada cuadrada|pulgadas cuadradas\"],[\"Pie cuadrado\", \"pie cuadrado|pies cuadrados|pie2|pie^2|pie²|ft2|ft^2|ft²\"],[\"Yarda cuadrado\", \"yarda cuadrada|yardas cuadradas|yd2|yd^2|yd²\"],[\"Acre\", \"acre|acres\"]]);\n\texport const AreaAmbiguousValues = [ 'área','áreas' ];\n\texport const CurrencySuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Dólar\", \"dólar|dólares\"],[\"Peso\", \"peso|pesos\"],[\"Rublo\", \"rublo|rublos\"],[\"Libra\", \"libra|libras\"],[\"Florín\", \"florín|florines\"],[\"Dinar\", \"dinar|dinares\"],[\"Franco\", \"franco|francos\"],[\"Rupia\", \"rupia|rupias\"],[\"Escudo\", \"escudo|escudos\"],[\"Chelín\", \"chelín|chelines\"],[\"Lira\", \"lira|liras\"],[\"Centavo\", \"centavo|centavos\"],[\"Céntimo\", \"céntimo|céntimos\"],[\"Centésimo\", \"centésimo|centésimos\"],[\"Penique\", \"penique|peniques\"],[\"Euro\", \"euro|euros|€|eur\"],[\"Céntimo de Euro\", \"céntimo de euro|céntimos de euros\"],[\"Dólar del Caribe Oriental\", \"dólar del Caribe Oriental|dólares del Caribe Oriental|ec$|xcd\"],[\"Centavo del Caribe Oriental\", \"centavo del Caribe Oriental|centavos del Caribe Oriental\"],[\"Franco CFA de África Occidental\", \"franco CFA de África Occidental|francos CFA de África Occidental|fcfa|xof\"],[\"Céntimo de CFA de África Occidental\", \"céntimo de CFA de África Occidental|céntimos de CFA de África Occidental\"],[\"Franco CFA de África Central\", \"franco CFA de África Central|francos CFA de África Central|xaf\"],[\"Céntimo de CFA de África Central\", \"céntimo de CFA de África Central|céntimos de CFA de África Central\"],[\"Apsar\", \"apsar|apsares\"],[\"Afgani afgano\", \"afgani afgano|؋|afn|afganis|afgani\"],[\"Pul\", \"pul|puls\"],[\"Lek albanés\", \"lek|lekë|lekes|lek albanés\"],[\"Qindarka\", \"qindarka|qindarkë|qindarkas\"],[\"Kwanza angoleño\", \"kwanza angoleño|kwanzas angoleños|kwanza angoleños|kwanzas angoleño|kwanzas|aoa|kz\"],[\"Cêntimo angoleño\", \"cêntimo angoleño|cêntimo|cêntimos\"],[\"Florín antillano neerlandés\", \"florín antillano neerlandés|florínes antillano neerlandés|ƒ antillano neerlandés|ang|naƒ\"],[\"Cent antillano neerlandés\", \"cent|centen\"],[\"Riyal saudí\", \"riyal saudí|riyales saudí|sar\"],[\"Halalá saudí\", \"halalá saudí|hallalah\"],[\"Dinar argelino\", \"dinar argelino|dinares argelinos|dzd\"],[\"Céntimo argelino\", \"centimo argelino|centimos argelinos|\"],[\"Peso argentino\", \"peso argentino|pesos argentinos|peso|pesos|ar$|ars\"],[\"Centavo argentino\", \"centavo argentino|centavos argentinos|centavo|ctvo.|ctvos.\"],[\"Dram armenio\", \"dram armenio|dram armenios|dram|դր.\"],[\"Luma armenio\", \"luma armenio|luma armenios\"],[\"Florín arubeño\", \"florín arubeño|florines arubeños|ƒ arubeños|aƒ|awg\"],[\"Yotin arubeño\", \"yotin arubeño|yotines arubeños\"],[\"Dólar australiano\", \"dólar australiano|dólares australianos|a$|aud\"],[\"Centavo australiano\", \"centavo australiano|centavos australianos\"],[\"Manat azerí\", \"manat azerí|man|azn\"],[\"Qəpik azerí\", \"qəpik azerí|qəpik\"],[\"Dólar bahameño\", \"dólar bahameño|dólares bahameños|b$|bsd\"],[\"Centavo bahameño\", \"centavo bahameño|centavos bahameños\"],[\"Dinar bahreiní\", \"dinar bahreiní|dinares bahreinies|bhd\"],[\"Fil bahreiní\", \"fil bahreiní|fils bahreinies\"],[\"Taka bangladeshí\", \"taka bangladeshí|takas bangladeshí|bdt\"],[\"Poisha bangladeshí\", \"poisha bangladeshí|poishas bangladeshí\"],[\"Dólar de Barbados\", \"dólar de barbados|dólares de barbados|bbd\"],[\"Centavo de Barbados\", \"centavo de barbados|centavos de barbados\"],[\"Dólar beliceño\", \"dólar beliceño|dólares beliceños|bz$|bzd\"],[\"Centavo beliceño\", \"centavo beliceño|centavos beliceños\"],[\"Dólar bermudeño\", \"dólar bermudeño|dólares bermudeños|bd$|bmd\"],[\"Centavo bermudeño\", \"centavo bermudeño|centavos bermudeños\"],[\"Rublo bielorruso\", \"rublo bielorruso|rublos bielorrusos|br|byr\"],[\"Kópek bielorruso\", \"kópek bielorruso|kópeks bielorrusos|kap\"],[\"Kyat birmano\", \"kyat birmano|kyats birmanos|mmk\"],[\"Pya birmano\", \"pya birmano|pyas birmanos\"],[\"Boliviano\", \"boliviano|bolivianos|bob|bs\"],[\"Centésimo Boliviano\", \"centésimo boliviano|centésimos bolivianos\"],[\"Marco bosnioherzegovino\", \"marco convertible|marco bosnioherzegovino|marcos convertibles|marcos bosnioherzegovinos|bam\"],[\"Feningas bosnioherzegovino\", \"feninga convertible|feninga bosnioherzegovina|feningas convertibles\"],[\"Pula\", \"pula|bwp\"],[\"Thebe\", \"thebe\"],[\"Real brasileño\", \"real brasileño|reales brasileños|r$|brl\"],[\"Centavo brasileño\", \"centavo brasileño|centavos brasileños\"],[\"Dólar de Brunéi\", \"dólar de brunei|dólares de brunéi|bnd\"],[\"Sen de Brunéi\", \"sen|sen de brunéi\"],[\"Lev búlgaro\", \"lev búlgaro|leva búlgaros|lv|bgn\"],[\"Stotinki búlgaro\", \"stotinka búlgaro|stotinki búlgaros\"],[\"Franco de Burundi\", \"franco de burundi|francos de burundi|fbu|fib\"],[\"Céntimo Burundi\", \"céntimo burundi|céntimos burundies\"],[\"Ngultrum butanés\", \"ngultrum butanés|ngultrum butaneses|btn\"],[\"Chetrum  butanés\", \"chetrum butanés|chetrum butaneses\"],[\"Escudo caboverdiano\", \"escudo caboverdiano|escudos caboverdianos|cve\"],[\"Riel camboyano\", \"riel camboyano|rieles camboyanos|khr\"],[\"Dólar canadiense\", \"dólar canadiense|dólares canadienses|c$|cad\"],[\"Centavo canadiense\", \"centavo canadiense|centavos canadienses\"],[\"Peso chileno\", \"peso chileno|pesos chilenos|cpl\"],[\"Yuan chino\", \"yuan chino|yuanes chinos|yuan|yuanes|renminbi|rmb|cny|¥\"],[\"Peso colombiano\", \"peso colombiano|pesos colombianos|cop|col$\"],[\"Centavo colombiano\", \"centavo colombiano|centavos colombianos\"],[\"Franco comorano\", \"franco comorano|francos comoranos|kmf|₣\"],[\"Franco congoleño\", \"franco congoleño|francos congoleños|cdf\"],[\"Céntimo congoleño\", \"céntimo congoleño|céntimos congoleños\"],[\"Won norcoreano\", \"won norcoreano|wŏn norcoreano|wŏn norcoreanos|kpw\"],[\"Chon norcoreano\", \"chon norcoreano|chŏn norcoreano|chŏn norcoreanos|chon norcoreanos\"],[\"Won surcoreano\", \"wŏn surcoreano|won surcoreano|wŏnes surcoreanos|wones surcoreanos|krw\"],[\"Chon surcoreano\", \"chon surcoreano|chŏn surcoreano|chŏn surcoreanos|chon surcoreanos\"],[\"Colón costarricense\", \"colón costarricense|colones costarricenses|crc\"],[\"Kuna croata\", \"kuna croata|kuna croatas|hrk\"],[\"Lipa croata\", \"lipa croata|lipa croatas\"],[\"Peso cubano\", \"peso cubano|pesos cubanos|cup\"],[\"Peso cubano convertible\", \"peso cubano convertible|pesos cubanos convertible|cuc\"],[\"Corona danesa\", \"corona danesa|coronas danesas|dkk\"],[\"Libra egipcia\", \"libra egipcia|libras egipcias|egp|le\"],[\"Piastra egipcia\", \"piastra egipcia|piastras egipcias\"],[\"Colón salvadoreño\", \"colón salvadoreño|colones salvadoreños|svc\"],[\"Dirham de los Emiratos Árabes Unidos\", \"dirham|dirhams|dirham de los Emiratos Árabes Unidos|aed|dhs\"],[\"Nakfa\", \"nakfa|nfk|ern\"],[\"Céntimo de Nakfa\", \"céntimo de nakfa|céntimos de nakfa\"],[\"Peseta\", \"peseta|pesetas|pts.|ptas.|esp\"],[\"Dólar estadounidense\", \"dólar estadounidense|dólares estadounidenses|usd|u$d|us$\"],[\"Corona estonia\", \"corona estonia|coronas estonias|eek\"],[\"Senti estonia\", \"senti estonia|senti estonias\"],[\"Birr etíope\", \"birr etíope|birr etíopes|br|etb\"],[\"Santim etíope\", \"santim etíope|santim etíopes\"],[\"Peso filipino\", \"peso filipino|pesos filipinos|php\"],[\"Marco finlandés\", \"marco finlandés|marcos finlandeses\"],[\"Dólar fiyiano\", \"dólar fiyiano|dólares fiyianos|fj$|fjd\"],[\"Centavo fiyiano\", \"centavo fiyiano|centavos fiyianos\"],[\"Dalasi\", \"dalasi|gmd\"],[\"Bututs\", \"butut|bututs\"],[\"Lari georgiano\", \"lari georgiano|lari georgianos|gel\"],[\"Tetri georgiano\", \"tetri georgiano|tetri georgianos\"],[\"Cedi\", \"cedi|ghs|gh₵\"],[\"Pesewa\", \"pesewa\"],[\"Libra gibraltareña\", \"libra gibraltareña|libras gibraltareñas|gip\"],[\"Penique gibraltareña\", \"penique gibraltareña|peniques gibraltareñas\"],[\"Quetzal guatemalteco\", \"quetzal guatemalteco|quetzales guatemaltecos|quetzal|quetzales|gtq\"],[\"Centavo guatemalteco\", \"centavo guatemalteco|centavos guatemaltecos\"],[\"Libra de Guernsey\", \"libra de Guernsey|libras de Guernsey|ggp\"],[\"Penique de Guernsey\", \"penique de Guernsey|peniques de Guernsey\"],[\"Franco guineano\", \"franco guineano|francos guineanos|gnf|fg\"],[\"Céntimo guineano\", \"céntimo guineano|céntimos guineanos\"],[\"Dólar guyanés\", \"dólar guyanés|dólares guyaneses|gyd|gy\"],[\"Gourde haitiano\", \"gourde haitiano|gourde haitianos|htg\"],[\"Céntimo haitiano\", \"céntimo haitiano|céntimos haitianos\"],[\"Lempira hondureño\", \"lempira hondureño|lempira hondureños|hnl\"],[\"Centavo hondureño\", \"centavo hondureño|centavos hondureño\"],[\"Dólar de Hong Kong\", \"dólar de hong kong|dólares de hong kong|hk$|hkd\"],[\"Forinto húngaro\", \"forinto húngaro|forinto húngaros|huf\"],[\"Rupia india\", \"rupia india|rupias indias|inr\"],[\"Paisa india\", \"paisa india|paise indias\"],[\"Rupia indonesia\", \"rupia indonesia|rupias indonesias|idr\"],[\"Sen indonesia\", \"sen indonesia|sen indonesias\"],[\"Rial iraní\", \"rial iraní|rial iranies|irr\"],[\"Dinar iraquí\", \"dinar iraquí|dinares iraquies|iqd\"],[\"Fil iraquí\", \"fil iraquí|fils iraquies\"],[\"Libra manesa\", \"libra manesa|libras manesas|imp\"],[\"Penique manes\", \"penique manes|peniques maneses\"],[\"Corona islandesa\", \"corona islandesa|coronas islandesas|isk|íkr\"],[\"Aurar islandes\", \"aurar islandes|aurar islandeses\"],[\"Dólar de las Islas Caimán\", \"dólar de las Islas Caimán|dólares de las Islas Caimán|ci$|kyd\"],[\"Dólar de las Islas Cook\", \"dólar de las Islas Cook|dólares de las Islas Cook\"],[\"Corona feroesa\", \"corona feroesa|coronas feroesas|fkr\"],[\"Libra malvinense\", \"libra malvinense|libras malvinenses|fk£|fkp\"],[\"Dólar de las Islas Salomón\", \"dólar de las Islas Salomón|dólares de las Islas Salomón|sbd\"],[\"Nuevo shéquel\", \"nuevo shéquel|nuevos shéquel|ils\"],[\"Agorot\", \"agorot\"],[\"Dólar jamaiquino\", \"dólar jamaiquino|dólares jamaiquinos|j$|ja$|jmd\"],[\"Yen\", \"yen|yenes|jpy\"],[\"Libra de Jersey\", \"libra de Jersey|libras de Jersey|jep\"],[\"Dinar jordano\", \"dinar jordano|dinares jordanos|jd|jod\"],[\"Piastra jordano\", \"piastra jordano|piastras jordanos\"],[\"Tenge kazajo\", \"tenge|tenge kazajo|kzt\"],[\"Chelín keniano\", \"chelín keniano|chelines kenianos|ksh|kes\"],[\"Som kirguís\", \"som kirguís|kgs\"],[\"Tyiyn\", \"tyiyn\"],[\"Dólar de Kiribati\", \"dólar de Kiribati|dólares de Kiribati\"],[\"Dinar kuwaití\", \"dinar kuwaití|dinares kuwaití\"],[\"Kip laosiano\", \"kip|kip laosiano|kip laosianos|lak\"],[\"Att laosiano\", \"att|att laosiano|att laosianos\"],[\"Loti\", \"loti|maloti|lsl\"],[\"Sente\", \"sente|lisente\"],[\"Libra libanesa\", \"libra libanesa|libras libanesas|lbp\"],[\"Dólar liberiano\", \"dólar liberiano|dólares liberianos|l$|lrd\"],[\"Dinar libio\", \"dinar libio|dinares libios|ld|lyd\"],[\"Dirham libio\", \"dirham libio|dirhams libios\"],[\"Litas lituana\", \"litas lituana|litai lituanas|ltl\"],[\"Pataca macaense\", \"pataca macaense|patacas macaenses|mop$|mop\"],[\"Avo macaense\", \"avo macaense|avos macaenses\"],[\"Ho macaense\", \"ho macaense|ho macaenses\"],[\"Denar macedonio\", \"denar macedonio|denare macedonios|den|mkd\"],[\"Deni macedonio\", \"deni macedonio|deni macedonios\"],[\"Ariary malgache\", \"ariary malgache|ariary malgaches|mga\"],[\"Iraimbilanja malgache\", \"iraimbilanja malgache|iraimbilanja malgaches\"],[\"Ringgit malayo\", \"ringgit malayo|ringgit malayos|rm|myr\"],[\"Sen malayo\", \"sen malayo|sen malayos\"],[\"Kwacha malauí\", \"kwacha malauí|mk|mwk\"],[\"Támbala malauí\", \"támbala malauí\"],[\"Rupia de Maldivas\", \"rupia de Maldivas|rupias de Maldivas|mvr\"],[\"Dirham marroquí\", \"dirham marroquí|dirhams marroquies|mad\"],[\"Rupia de Mauricio\", \"rupia de Mauricio|rupias de Mauricio|mur\"],[\"Uguiya\", \"uguiya|uguiyas|mro\"],[\"Jum\", \"jum|jums\"],[\"Peso mexicano\", \"peso mexicano|pesos mexicanos|mxn\"],[\"Centavo mexicano\", \"centavo mexicano|centavos mexicanos\"],[\"Leu moldavo\", \"leu moldavo|lei moldavos|mdl\"],[\"Ban moldavo\", \"ban moldavo|bani moldavos\"],[\"Tugrik mongol\", \"tugrik mongol|tugrik|tugrik mongoles|tug|mnt\"],[\"Metical mozambiqueño\", \"metical|metical mozambiqueño|meticales|meticales mozambiqueños|mtn|mzn\"],[\"Dram de Nagorno Karabaj\", \"dram de Nagorno Karabaj|drams de Nagorno Karabaj|\"],[\"Luma de Nagorno Karabaj\", \"luma de Nagorno Karabaj\"],[\"Dólar namibio\", \"dólar namibio|dólares namibios|n$|nad\"],[\"Centavo namibio\", \"centavo namibio|centavos namibios\"],[\"Rupia nepalí\", \"rupia nepalí|rupias nepalies|npr\"],[\"Paisa nepalí\", \"paisa nepalí|paisas nepalies\"],[\"Córdoba nicaragüense\", \"córdoba nicaragüense|córdobas nicaragüenses|c$|nio\"],[\"Centavo nicaragüense\", \"centavo nicaragüense|centavos nicaragüenses\"],[\"Naira\", \"naira|ngn\"],[\"Kobo\", \"kobo\"],[\"Corona noruega\", \"corona noruega|coronas noruegas|nok\"],[\"Franco CFP\", \"franco cfp|francos cfp|xpf\"],[\"Dólar neozelandés\", \"dólar neozelandés|dólares neozelandeses|dólar de Nueva Zelanda|dólares de Nueva Zelanda|nz$|nzd\"],[\"Centavo neozelandés\", \"centavo neozelandés|centavo de Nueva Zelanda|centavos de Nueva Zelanda|centavos neozelandeses\"],[\"Rial omaní\", \"rial omaní|riales omanies|omr\"],[\"Baisa omaní\", \"baisa omaní|baisa omanies\"],[\"Florín neerlandés\", \"florín neerlandés|florines neerlandeses|nlg\"],[\"Rupia pakistaní\", \"rupia pakistaní|rupias pakistanies|pkr\"],[\"Paisa pakistaní\", \"paisa pakistaní|paisas pakistanies\"],[\"Balboa panameño\", \"balboa panameño|balboa panameños|pab\"],[\"Centésimo panameño\", \"centésimo panameño|centésimos panameños\"],[\"Kina\", \"kina|pkg|pgk\"],[\"Toea\", \"toea\"],[\"Guaraní\", \"guaraní|guaranies|gs|pyg\"],[\"Sol\", \"sol|soles|nuevo sol|pen|s#.\"],[\"Céntimo de sol\", \"céntimo de sol|céntimos de sol\"],[\"Złoty\", \"złoty|esloti|eslotis|zł|pln\"],[\"Groszy\", \"groszy\"],[\"Riyal qatarí\", \"riyal qatarí|riyal qataries|qr|qar\"],[\"Dirham qatarí\", \"dirham qatarí|dirhams qataries\"],[\"Libra esterlina\", \"libra esterlina|libras esterlinas|gbp\"],[\"Corona checa\", \"corona checa|coronas checas|kc|czk\"],[\"Peso dominicano\", \"peso dominicano|pesos dominicanos|rd$|dop\"],[\"Centavo dominicano\", \"centavo dominicano|centavos dominicanos\"],[\"Franco ruandés\", \"franco ruandés|francos ruandeses|rf|rwf\"],[\"Céntimo ruandés\", \"céntimo ruandés|céntimos ruandeses\"],[\"Leu rumano\", \"leu rumano|lei rumanos|ron\"],[\"Ban rumano\", \"ban rumano|bani rumanos\"],[\"Rublo ruso\", \"rublo ruso|rublos rusos|rub\"],[\"Kopek ruso\", \"kopek ruso|kopeks rusos\"],[\"Tala\", \"tala|tālā|ws$|sat|wst\"],[\"Sene\", \"sene\"],[\"Libra de Santa Helena\", \"libra de Santa Helena|libras de Santa Helena|shp\"],[\"Penique de Santa Helena\", \"penique de Santa Helena|peniques de Santa Helena\"],[\"Dobra\", \"dobra|db|std\"],[\"Dinar serbio\", \"dinar serbio|dinares serbios|rsd\"],[\"Para serbio\", \"para serbio|para serbios\"],[\"Rupia de Seychelles\", \"rupia de Seychelles|rupias de Seychelles|scr\"],[\"Centavo de Seychelles\", \"centavo de Seychelles|centavos de Seychelles\"],[\"Leone\", \"leone|le|sll\"],[\"Dólar de Singapur\", \"dólar de singapur|dólares de singapur|sgb\"],[\"Centavo de Singapur\", \"centavo de Singapur|centavos de Singapur\"],[\"Libra siria\", \"libra siria|libras sirias|s£|syp\"],[\"Piastra siria\", \"piastra siria|piastras sirias\"],[\"Chelín somalí\", \"chelín somalí|chelines somalies|sos\"],[\"Centavo somalí\", \"centavo somalí|centavos somalies\"],[\"Chelín somalilandés\", \"chelín somalilandés|chelines somalilandeses\"],[\"Centavo somalilandés\", \"centavo somalilandés|centavos somalilandeses\"],[\"Rupia de Sri Lanka\", \"rupia de Sri Lanka|rupias de Sri Lanka|lkr\"],[\"Céntimo de Sri Lanka\", \"céntimo de Sri Lanka|céntimos de Sri Lanka\"],[\"Lilangeni\", \"lilangeni|emalangeni|szl\"],[\"Rand sudafricano\", \"rand|rand sudafricano|zar\"],[\"Libra sudanesa\", \"libra sudanesa|libras sudanesas|sdg\"],[\"Piastra sudanesa\", \"piastra sudanesa|piastras sudanesas\"],[\"Libra sursudanesa\", \"libra sursudanesa|libras sursudanesa|ssp\"],[\"Piastra sursudanesa\", \"piastra sursudanesa|piastras sursudanesas\"],[\"Corona sueca\", \"corona sueca|coronas suecas|sek\"],[\"Franco suizo\", \"franco suizo|francos suizos|sfr|chf\"],[\"Rappen suizo\", \"rappen suizo|rappens suizos\"],[\"Dólar surinamés\", \"óolar surinamés|dólares surinameses|srd\"],[\"Centavo surinamés\", \"centavo surinamés|centavos surinamés\"],[\"Baht tailandés\", \"baht tailandés|baht tailandeses|thb\"],[\"Satang tailandés\", \"satang tailandés|satang tailandeses\"],[\"Nuevo dólar taiwanés\", \"nuevo dólar taiwanés|dólar taiwanés|dólares taiwaneses|twd\"],[\"Centavo taiwanés\", \"centavo taiwanés|centavos taiwaneses\"],[\"Chelín tanzano\", \"chelín tanzano|chelines tanzanos|tzs\"],[\"Centavo tanzano\", \"centavo tanzano|centavos tanzanos\"],[\"Somoni tayiko\", \"somoni tayiko|somoni|tjs\"],[\"Diram\", \"diram|dirams\"],[\"Paʻanga\", \"dólar tongano|dólares tonganos|paʻanga|pa'anga|top\"],[\"Seniti\", \"seniti\"],[\"Rublo de Transnistria\", \"rublo de Transnistria|rublos de Transnistria\"],[\"Kopek de Transnistria\", \"kopek de Transnistria|kopeks de Transnistria\"],[\"Dólar trinitense\", \"dólar trinitense|dólares trinitenses|ttd\"],[\"Centavo trinitense\", \"centavo trinitense|centavos trinitenses\"],[\"Dinar tunecino\", \"dinar tunecino|dinares tunecinos|tnd\"],[\"Millime tunecino\", \"millime tunecino|millimes tunecinos\"],[\"Lira turca\", \"lira turca|liras turcas|try\"],[\"Kuruş turca\", \"kuruş turca|kuruş turcas\"],[\"Manat turkmeno\", \"manat turkmeno|manat turkmenos|tmt\"],[\"Tennesi turkmeno\", \"tennesi turkmeno|tenge turkmeno\"],[\"Dólar tuvaluano\", \"dólar tuvaluano|dólares tuvaluanos\"],[\"Centavo tuvaluano\", \"centavo tuvaluano|centavos tuvaluanos\"],[\"Grivna\", \"grivna|grivnas|uah\"],[\"Kopiyka\", \"kopiyka|kópeks\"],[\"Chelín ugandés\", \"chelín ugandés|chelines ugandeses|ugx\"],[\"Centavo ugandés\", \"centavo ugandés|centavos ugandeses\"],[\"Peso uruguayo\", \"peso uruguayo|pesos uruguayos|uyu\"],[\"Centésimo uruguayo\", \"centésimo uruguayo|centésimos uruguayos\"],[\"Som uzbeko\", \"som uzbeko|som uzbekos|uzs\"],[\"Tiyin uzbeko\", \"tiyin uzbeko|tiyin uzbekos\"],[\"Vatu\", \"vatu|vuv\"],[\"Bolívar fuerte\", \"bolívar fuerte|bolívar|bolívares|vef\"],[\"Céntimo de bolívar\", \"céntimo de bolívar|céntimos de bolívar\"],[\"Đồng vietnamita\", \"Đồng vietnamita|dong vietnamita|dong vietnamitas|vnd\"],[\"Hào vietnamita\", \"Hào vietnamita|hao vietnamita|hao vietnamitas\"],[\"Rial yemení\", \"rial yemení|riales yemenies|yer\"],[\"Fils yemení\", \"fils yemení|fils yemenies\"],[\"Franco yibutiano\", \"franco yibutiano|francos yibutianos|djf\"],[\"Dinar yugoslavo\", \"dinar yugoslavo|dinares yugoslavos|yud\"],[\"Kwacha zambiano\", \"kwacha zambiano|kwacha zambianos|zmw\"],[\"Ngwee zambiano\", \"ngwee zambiano|ngwee zambianos\"]]);\n\texport const CurrencyPrefixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Dólar\", \"$\"],[\"Dólar estadounidense\", \"us$|u$d|usd\"],[\"Dólar del Caribe Oriental\", \"ec$|xcd\"],[\"Dólar australiano\", \"a$|aud\"],[\"Dólar bahameño\", \"b$|bsd\"],[\"Dólar de Barbados\", \"bds$|bbd\"],[\"Dólar beliceño\", \"bz$|bzd\"],[\"Dólar bermudeño\", \"bd$|bmd\"],[\"Dólar de Brunéi\", \"brunéi $|bnd\"],[\"Dólar de Singapur\", \"s$|sgd\"],[\"Dólar canadiense\", \"c$|can$|cad\"],[\"Dólar de las Islas Caimán\", \"ci$|kyd\"],[\"Dólar neozelandés\", \"nz$|nzd\"],[\"Dólar fiyiano\", \"fj$|fjd\"],[\"Dólar guyanés\", \"gy$|gyd\"],[\"Dólar de Hong Kong\", \"hk$|hkd\"],[\"Dólar jamaiquino\", \"j$|ja$|jmd\"],[\"Dólar liberiano\", \"l$|lrd\"],[\"Dólar namibio\", \"n$|nad\"],[\"Dólar de las Islas Salomón\", \"si$|sbd\"],[\"Nuevo dólar taiwanés\", \"nt$|twd\"],[\"Real brasileño\", \"r$|brl\"],[\"Guaraní\", \"₲|gs.|pyg\"],[\"Dólar trinitense\", \"tt$|ttd\"],[\"Yuan chino\", \"￥|cny|rmb\"],[\"Yen\", \"¥|jpy\"],[\"Euro\", \"€|eur\"],[\"Florín\", \"ƒ\"],[\"Libra\", \"£|gbp\"],[\"Colón costarricense\", \"₡\"],[\"Lira turca\", \"₺\"]]);\n\texport const AmbiguousCurrencyUnitList = [ 'le' ];\n\texport const DimensionSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilómetro\", \"km|kilometro|kilómetro|kilometros|kilómetros\"],[\"Hectómetro\", \"hm|hectometro|hectómetro|hectometros|hectómetros\"],[\"Decámetro\", \"decametro|decámetro|decametros|decámetros|dam\"],[\"Metro\", \"m|m.|metro|metros\"],[\"Decímetro\", \"dm|decimetro|decímetro|decimetros|decímetros\"],[\"Centímetro\", \"cm|centimetro|centímetro|centimetros|centimetros\"],[\"Milímetro\", \"mm|milimetro|milímetro|milimetros|milímetros\"],[\"Micrómetro\", \"µm|um|micrometro|micrómetro|micrometros|micrómetros|micrón|micrónes\"],[\"Nanómetro\", \"nm|nanometro|nanómetro|nanometros|nanómetros\"],[\"Picómetro\", \"pm|picometro|picómetro|picometros|picometros\"],[\"Milla\", \"mi|milla|millas\"],[\"Yarda\", \"yd|yarda|yardas\"],[\"Pulgada\", \"pulgada|pulgadas|\\\\\\\"\"],[\"Pie\", \"pie|pies|ft\"],[\"Año luz\", \"año luz|años luz|al\"],[\"Metro por segundo\", \"metro/segundo|m/s|metro por segundo|metros por segundo|metros por segundos\"],[\"Kilómetro por hora\", \"km/h|kilómetro por hora|kilometro por hora|kilómetros por hora|kilometros por hora|kilómetro/hora|kilometro/hora|kilómetros/hora|kilometros/hora\"],[\"Kilómetro por minuto\", \"km/min|kilómetro por minuto|kilometro por minuto|kilómetros por minuto|kilometros por minuto|kilómetro/minuto|kilometro/minuto|kilómetros/minuto|kilometros/minuto\"],[\"Kilómetro por segundo\", \"km/seg|kilómetro por segundo|kilometro por segundo|kilómetros por segundo|kilometros por segundo|kilómetro/segundo|kilometro/segundo|kilómetros/segundo|kilometros/segundo\"],[\"Milla por hora\", \"mph|milla por hora|mi/h|milla/hora|millas/hora|millas por hora\"],[\"Nudo\", \"kt|nudo|nudos|kn\"],[\"Pie por segundo\", \"ft/s|pie/s|ft/seg|pie/seg|pie por segundo|pies por segundo\"],[\"Pie por minuto\", \"ft/min|pie/min|pie por minuto|pies por minuto\"],[\"Yarda por minuto\", \"yardas por minuto|yardas/minuto|yardas/min\"],[\"Yarda por segundo\", \"yardas por segundo|yardas/segundo|yardas/seg\"],[\"Kilómetro cuadrado\", \"kilómetro cuadrado|kilómetros cuadrados|km2|km^2|km²\"],[\"Hectómetro cuadrado\", \"hectómetro cuadrado|hectómetros cuadrados|hm2|hm^2|hm²|hectárea|hectáreas\"],[\"Decámetro cuadrado\", \"decámetro cuadrado|decámetros cuadrados|dam2|dam^2|dam²|área|áreas\"],[\"Metro cuadrado\", \"metro cuadrado|metros cuadrados|m2|m^2|m²\"],[\"Decímetro cuadrado\", \"decímetro cuadrado|decímetros cuadrados|dm2|dm^2|dm²\"],[\"Centímetro cuadrado\", \"centímetro cuadrado|centímetros cuadrados|cm2|cm^2|cm²\"],[\"Milímetro cuadrado\", \"milímetro cuadrado|milímetros cuadrados|mm2|mm^2|mm²\"],[\"Pulgada cuadrado\", \"pulgada cuadrada|pulgadas cuadradas\"],[\"Pie cuadrado\", \"pie cuadrado|pies cuadrados|pie2|pie^2|pie²|ft2|ft^2|ft²\"],[\"Yarda cuadrado\", \"yarda cuadrada|yardas cuadradas|yd2|yd^2|yd²\"],[\"Acre\", \"acre|acres\"],[\"Kilómetro cúbico\", \"kilómetro cúbico|kilómetros cúbico|km3|km^3|km³\"],[\"Hectómetro cúbico\", \"hectómetro cúbico|hectómetros cúbico|hm3|hm^3|hm³\"],[\"Decámetro cúbico\", \"decámetro cúbico|decámetros cúbico|dam3|dam^3|dam³\"],[\"Metro cúbico\", \"metro cúbico|metros cúbico|m3|m^3|m³\"],[\"Decímetro cúbico\", \"decímetro cúbico|decímetros cúbico|dm3|dm^3|dm³\"],[\"Centímetro cúbico\", \"centímetro cúbico|centímetros cúbico|cc|cm3|cm^3|cm³\"],[\"Milímetro cúbico\", \"milímetro cúbico|milímetros cúbico|mm3|mm^3|mm³\"],[\"Pulgada cúbica\", \"pulgada cúbics|pulgadas cúbicas\"],[\"Pie cúbico\", \"pie cúbico|pies cúbicos|pie3|pie^3|pie³|ft3|ft^3|ft³\"],[\"Yarda cúbica\", \"yarda cúbica|yardas cúbicas|yd3|yd^3|yd³\"],[\"Hectolitro\", \"hectolitro|hectolitros|hl\"],[\"Litro\", \"litro|litros|lts|l\"],[\"Mililitro\", \"mililitro|mililitros|ml\"],[\"Galón\", \"galón|galones\"],[\"Pinta\", \"pinta|pintas\"],[\"Barril\", \"barril|barriles\"],[\"Onza líquida\", \"onza líquida|onzas líquidas\"],[\"Tonelada métrica\", \"tonelada métrica|toneladas métricas\"],[\"Tonelada\", \"ton|tonelada|toneladas\"],[\"Kilogramo\", \"kg|kilogramo|kilogramos\"],[\"Hectogramo\", \"hg|hectogramo|hectogramos\"],[\"Decagramo\", \"dag|decagramo|decagramos\"],[\"Gramo\", \"g|gr|gramo|gramos\"],[\"Decigramo\", \"dg|decigramo|decigramos\"],[\"Centigramo\", \"cg|centigramo|centigramos\"],[\"Miligramo\", \"mg|miligramo|miligramos\"],[\"Microgramo\", \"µg|ug|microgramo|microgramos\"],[\"Nanogramo\", \"ng|nanogramo|nanogramos\"],[\"Picogramo\", \"pg|picogramo|picogramos\"],[\"Libra\", \"lb|libra|libras\"],[\"Onza\", \"oz|onza|onzas\"],[\"Grano\", \"grano|granos\"],[\"Quilate\", \"ct|kt|quilate|quilates\"],[\"bit\", \"bit|bits\"],[\"kilobit\", \"kilobit|kilobits|kb|kbit\"],[\"megabit\", \"megabit|megabits|Mb|Mbit\"],[\"gigabit\", \"gigabit|gigabits|Gb|Gbit\"],[\"terabit\", \"terabit|terabits|Tb|Tbit\"],[\"petabit\", \"petabit|petabits|Pb|Pbit\"],[\"kibibit\", \"kibibit|kibibits|kib|kibit\"],[\"mebibit\", \"mebibit|mebibits|Mib|Mibit\"],[\"gibibit\", \"gibibit|gibibits|Gib|Gibit\"],[\"tebibit\", \"tebibit|tebibits|Tib|Tibit\"],[\"pebibit\", \"pebibit|pebibits|Pib|Pibit\"],[\"byte\", \"byte|bytes\"],[\"kilobyte\", \"kilobyte|kilobytes|kB|kByte\"],[\"megabyte\", \"megabyte|megabytes|MB|MByte\"],[\"gigabyte\", \"gigabyte|gigabytes|GB|GByte\"],[\"terabyte\", \"terabyte|terabytes|TB|TByte\"],[\"petabyte\", \"petabyte|petabytes|PB|PByte\"],[\"kibibyte\", \"kibibyte|kibibytes|kiB|kiByte\"],[\"mebibyte\", \"mebibyte|mebibytes|MiB|MiByte\"],[\"gibibyte\", \"gibibyte|gibibytes|GiB|GiByte\"],[\"tebibyte\", \"tebibyte|tebibytes|TiB|TiByte\"],[\"pebibyte\", \"pebibyte|pebibytes|PiB|PiByte\"]]);\n\texport const AmbiguousDimensionUnitList = [ 'al','mi','área','áreas','pie','pies' ];\n\texport const LengthSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilómetro\", \"km|kilometro|kilómetro|kilometros|kilómetros\"],[\"Hectómetro\", \"hm|hectometro|hectómetro|hectometros|hectómetros\"],[\"Decámetro\", \"decametro|decámetro|decametros|decámetros|dam\"],[\"Metro\", \"m|m.|metro|metros\"],[\"Decímetro\", \"dm|decimetro|decímetro|decimetros|decímetros\"],[\"Centímetro\", \"cm|centimetro|centímetro|centimetros|centimetros\"],[\"Milímetro\", \"mm|milimetro|milímetro|milimetros|milímetros\"],[\"Micrómetro\", \"µm|um|micrometro|micrómetro|micrometros|micrómetros|micrón|micrónes\"],[\"Nanómetro\", \"nm|nanometro|nanómetro|nanometros|nanómetros\"],[\"Picómetro\", \"pm|picometro|picómetro|picometros|picómetros\"],[\"Milla\", \"mi|milla|millas\"],[\"Yarda\", \"yd|yarda|yardas\"],[\"Pulgada\", \"pulgada|pulgadas|\\\\\\\"\"],[\"Pie\", \"pie|pies|ft\"],[\"Año luz\", \"año luz|años luz|al\"]]);\n\texport const AmbiguousLengthUnitList = [ 'mi','área','áreas' ];\n\texport const BuildPrefix = `(?<=(\\\\s|^|\\\\P{L}))`;\n\texport const BuildSuffix = `(?=(\\\\s|\\\\P{L}|$))`;\n\texport const ConnectorToken = 'de';\n\texport const SpeedSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Metro por segundo\", \"metro/segundo|m/s|metro por segundo|metros por segundo|metros por segundos\"],[\"Kilómetro por hora\", \"km/h|kilómetro por hora|kilometro por hora|kilómetros por hora|kilometros por hora|kilómetro/hora|kilometro/hora|kilómetros/hora|kilometros/hora\"],[\"Kilómetro por minuto\", \"km/min|kilómetro por minuto|kilometro por minuto|kilómetros por minuto|kilometros por minuto|kilómetro/minuto|kilometro/minuto|kilómetros/minuto|kilometros/minuto\"],[\"Kilómetro por segundo\", \"km/seg|kilómetro por segundo|kilometro por segundo|kilómetros por segundo|kilometros por segundo|kilómetro/segundo|kilometro/segundo|kilómetros/segundo|kilometros/segundo\"],[\"Milla por hora\", \"mph|milla por hora|mi/h|milla/hora|millas/hora|millas por hora\"],[\"Nudo\", \"kt|nudo|nudos|kn\"],[\"Pie por segundo\", \"ft/s|pie/s|ft/seg|pie/seg|pie por segundo|pies por segundo\"],[\"Pie por minuto\", \"ft/min|pie/min|pie por minuto|pies por minuto\"],[\"Yarda por minuto\", \"yardas por minuto|yardas/minuto|yardas/min\"],[\"Yarda por segundo\", \"yardas por segundo|yardas/segundo|yardas/seg\"]]);\n\texport const AmbiguousSpeedUnitList = [ 'nudo','nudos' ];\n\texport const TemperatureSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kelvin\", \"k|kelvin\"],[\"Rankine\", \"r|rankine\"],[\"Grado Celsius\", \"°c|grados c|grado celsius|grados celsius|celsius|grado centígrado|grados centígrados|centígrado|centígrados\"],[\"Grado Fahrenheit\", \"°f|grados f|grado fahrenheit|grados fahrenheit|fahrenheit\"],[\"Grado Réaumur\", \"°r|°re|grados r|grado réaumur|grados réaumur|réaumur\"],[\"Grado Delisle\", \"°d|grados d|grado delisle|grados delisle|delisle\"],[\"Grado\", \"°|grados|grado\"]]);\n\texport const VolumeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilómetro cúbico\", \"kilómetro cúbico|kilómetros cúbico|km3|km^3|km³\"],[\"Hectómetro cúbico\", \"hectómetro cúbico|hectómetros cúbico|hm3|hm^3|hm³\"],[\"Decámetro cúbico\", \"decámetro cúbico|decámetros cúbico|dam3|dam^3|dam³\"],[\"Metro cúbico\", \"metro cúbico|metros cúbico|m3|m^3|m³\"],[\"Decímetro cúbico\", \"decímetro cúbico|decímetros cúbico|dm3|dm^3|dm³\"],[\"Centímetro cúbico\", \"centímetro cúbico|centímetros cúbico|cc|cm3|cm^3|cm³\"],[\"Milímetro cúbico\", \"milímetro cúbico|milímetros cúbico|mm3|mm^3|mm³\"],[\"Pulgada cúbica\", \"pulgada cúbica|pulgadas cúbicas\"],[\"Pie cúbico\", \"pie cúbico|pies cúbicos|pie3|pie^3|pie³|ft3|ft^3|ft³\"],[\"Yarda cúbica\", \"yarda cúbica|yardas cúbicas|yd3|yd^3|yd³\"],[\"Hectolitro\", \"hectolitro|hectolitros|hl\"],[\"Litro\", \"litro|litros|lts|l\"],[\"Mililitro\", \"mililitro|mililitros|ml\"],[\"Galón\", \"galón|galones\"],[\"Pinta\", \"pinta|pintas\"],[\"Barril\", \"barril|barriles|bbl\"],[\"Onza líquida\", \"onza líquida|onzas líquidas\"]]);\n\texport const WeightSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Tonelada métrica\", \"tonelada métrica|toneladas métricas\"],[\"Tonelada\", \"ton|tonelada|toneladas\"],[\"Kilogramo\", \"kg|kilogramo|kilogramos\"],[\"Hectogramo\", \"hg|hectogramo|hectogramos\"],[\"Decagramo\", \"dag|decagramo|decagramos\"],[\"Gramo\", \"g|gr|gramo|gramos\"],[\"Decigramo\", \"dg|decigramo|decigramos\"],[\"Centigramo\", \"cg|centigramo|centigramos\"],[\"Miligramo\", \"mg|miligramo|miligramos\"],[\"Microgramo\", \"µg|ug|microgramo|microgramos\"],[\"Nanogramo\", \"ng|nanogramo|nanogramos\"],[\"Picogramo\", \"pg|picogramo|picogramos\"],[\"Libra\", \"lb|libra|libras\"],[\"Onza\", \"oz|onza|onzas\"],[\"Grano\", \"grano|granos|gr\"],[\"Quilate\", \"ct|kt|quilate|quilates\"]]);\n}\n","import { IExtractor, IParser } from \"recognizers-text\";\nimport { Culture, CultureInfo, NumberMode, AgnosticNumberParserFactory, AgnosticNumberParserType, SpanishNumberExtractor, SpanishNumberParserConfiguration } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { INumberWithUnitExtractorConfiguration } from \"../extractors\";\nimport { BaseNumberWithUnitParserConfiguration } from \"../parsers\";\nimport { SpanishNumericWithUnit } from \"../../resources/spanishNumericWithUnit\";\n\nexport abstract class SpanishNumberWithUnitExtractorConfiguration implements INumberWithUnitExtractorConfiguration {\n    abstract readonly suffixList: ReadonlyMap<string, string>;\n    abstract readonly prefixList: ReadonlyMap<string, string>;\n    abstract readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly abstract extractType: string;\n\n    readonly cultureInfo: CultureInfo;\n    readonly unitNumExtractor: IExtractor;\n    readonly buildPrefix: string;\n    readonly buildSuffix: string;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        this.cultureInfo = ci;\n        this.unitNumExtractor = new SpanishNumberExtractor();\n\n        this.buildPrefix = SpanishNumericWithUnit.BuildPrefix;\n        this.buildSuffix = SpanishNumericWithUnit.BuildSuffix;\n        this.connectorToken = SpanishNumericWithUnit.ConnectorToken;\n    }\n}\n\nexport class SpanishNumberWithUnitParserConfiguration extends BaseNumberWithUnitParserConfiguration {\n    readonly internalNumberParser: IParser;\n    readonly internalNumberExtractor: IExtractor;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        super(ci);\n\n        this.internalNumberExtractor = new SpanishNumberExtractor(NumberMode.Default);\n        this.internalNumberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new SpanishNumberParserConfiguration());\n        this.connectorToken = SpanishNumericWithUnit.ConnectorToken;\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { SpanishNumberWithUnitExtractorConfiguration, SpanishNumberWithUnitParserConfiguration } from \"./base\";\nimport { SpanishNumericWithUnit } from \"../../resources/spanishNumericWithUnit\";\n\nexport class SpanishCurrencyExtractorConfiguration extends SpanishNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_CURRENCY;\n\n        // Reference Source: https:// en.wikipedia.org/wiki/List_of_circulating_currencies\n        this.suffixList = SpanishNumericWithUnit.CurrencySuffixList;\n        this.prefixList = SpanishNumericWithUnit.CurrencyPrefixList;\n        this.ambiguousUnitList = SpanishNumericWithUnit.AmbiguousCurrencyUnitList;\n    }\n}\n\nexport class SpanishCurrencyParserConfiguration extends SpanishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.BindDictionary(SpanishNumericWithUnit.CurrencySuffixList);\n        this.BindDictionary(SpanishNumericWithUnit.CurrencyPrefixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { SpanishNumberWithUnitExtractorConfiguration, SpanishNumberWithUnitParserConfiguration } from \"./base\";\nimport { SpanishNumericWithUnit } from \"../../resources/spanishNumericWithUnit\";\n\nexport class SpanishTemperatureExtractorConfiguration extends SpanishNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_TEMPERATURE;\n\n        this.suffixList = SpanishNumericWithUnit.TemperatureSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = new Array<string>();\n    }\n}\n\nexport class SpanishTemperatureParserConfiguration extends SpanishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.BindDictionary(SpanishNumericWithUnit.TemperatureSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { SpanishNumberWithUnitExtractorConfiguration, SpanishNumberWithUnitParserConfiguration } from \"./base\";\nimport { SpanishNumericWithUnit } from \"../../resources/spanishNumericWithUnit\";\n\nexport class SpanishDimensionExtractorConfiguration extends SpanishNumberWithUnitExtractorConfiguration {\n\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_DIMENSION;\n\n        this.suffixList = SpanishNumericWithUnit.DimensionSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = SpanishNumericWithUnit.AmbiguousDimensionUnitList\n    }\n}\n\nexport class SpanishDimensionParserConfiguration extends SpanishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.BindDictionary(SpanishNumericWithUnit.DimensionSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { SpanishNumberWithUnitExtractorConfiguration, SpanishNumberWithUnitParserConfiguration } from \"./base\";\nimport { SpanishNumericWithUnit } from \"../../resources/spanishNumericWithUnit\";\n\nexport class SpanishAgeExtractorConfiguration extends SpanishNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_AGE;\n\n        this.suffixList = SpanishNumericWithUnit.AgeSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = new Array<string>();\n    }\n}\n\nexport class SpanishAgeParserConfiguration extends SpanishNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Spanish);\n        }\n\n        super(ci);\n\n        this.BindDictionary(SpanishNumericWithUnit.AgeSuffixList);\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace PortugueseNumericWithUnit {\n\texport const AgeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Ano\", \"anos|ano\"],[\"Mês\", \"meses|mes|mês\"],[\"Semana\", \"semanas|semana\"],[\"Dia\", \"dias|dia\"]]);\n\texport const AreaSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Quilômetro quadrado\", \"quilômetro quadrado|quilómetro quadrado|quilometro quadrado|quilômetros quadrados|quilómetros quadrados|quilomeros quadrados|km2|km^2|km²\"],[\"Hectare\", \"hectômetro quadrado|hectómetro quadrado|hectômetros quadrados|hectómetros cuadrados|hm2|hm^2|hm²|hectare|hectares\"],[\"Decâmetro quadrado\", \"decâmetro quadrado|decametro quadrado|decâmetros quadrados|decametro quadrado|dam2|dam^2|dam²|are|ares\"],[\"Metro quadrado\", \"metro quadrado|metros quadrados|m2|m^2|m²\"],[\"Decímetro quadrado\", \"decímetro quadrado|decimentro quadrado|decímetros quadrados|decimentros quadrados|dm2|dm^2|dm²\"],[\"Centímetro quadrado\", \"centímetro quadrado|centimetro quadrado|centímetros quadrados|centrimetros quadrados|cm2|cm^2|cm²\"],[\"Milímetro quadrado\", \"milímetro quadrado|milimetro quadrado|milímetros quadrados|militmetros quadrados|mm2|mm^2|mm²\"],[\"Polegada quadrada\", \"polegada quadrada|polegadas quadradas|in2|in^2|in²\"],[\"Pé quadrado\", \"pé quadrado|pe quadrado|pés quadrados|pes quadrados|pé2|pé^2|pé²|sqft|sq ft|ft2|ft^2|ft²\"],[\"Jarda quadrada\", \"jarda quadrada|jardas quadradas|yd2|yd^2|yd²\"],[\"Milha quadrada\", \"milha quadrada|milhas quadradas|mi2|mi^2|mi²\"],[\"Acre\", \"acre|acres\"]]);\n\texport const CurrencySuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Dólar\", \"dólar|dolar|dólares|dolares\"],[\"Peso\", \"peso|pesos\"],[\"Coroa\", \"coroa|coroas\"],[\"Rublo\", \"rublo|rublos\"],[\"Libra\", \"libra|libras\"],[\"Florim\", \"florim|florins|ƒ\"],[\"Dinar\", \"dinar|dinares\"],[\"Franco\", \"franco|francos\"],[\"Rupia\", \"rúpia|rupia|rúpias|rupias\"],[\"Escudo\", \"escudo|escudos\"],[\"Xelim\", \"xelim|xelins|xelims\"],[\"Lira\", \"lira|liras\"],[\"Centavo\", \"centavo|cêntimo|centimo|centavos|cêntimos|centimo\"],[\"Centésimo\", \"centésimo|centésimos\"],[\"Pêni\", \"pêni|péni|peni|penies|pennies\"],[\"Manat\", \"manat|manate|mánate|man|manats|manates|mánates\"],[\"Euro\", \"euro|euros|€|eur\"],[\"Centavo de Euro\", \"centavo de euro|cêntimo de euro|centimo de euro|centavos de euro|cêntimos de euro|centimos de euro\"],[\"Dólar do Caribe Oriental\", \"dólar do Caribe Oriental|dolar do Caribe Oriental|dólares do Caribe Oriental|dolares do Caribe Oriental|dólar das Caraíbas Orientais|dolar das Caraibas Orientais|dólares das Caraíbas Orientais|dolares das Caraibas Orientais|ec$|xcd\"],[\"Centavo do Caribe Oriental\", \"centavo do Caribe Oriental|centavo das Caraíbas Orientais|cêntimo do Caribe Oriental|cêntimo das Caraíbas Orientais|centavos do Caribe Oriental|centavos das Caraíbas Orientais|cêntimos do Caribe Oriental|cêntimos das Caraíbas Orientais\"],[\"Franco CFA da África Ocidental\", \"franco CFA da África Ocidental|franco CFA da Africa Ocidental|francos CFA da África Occidental|francos CFA da Africa Occidental|franco CFA Ocidental|xof\"],[\"Centavo de CFA da África Ocidental\", \"centavo de CFA da Africa Occidental|centavos de CFA da África Ocidental|cêntimo de CFA da Africa Occidental|cêntimos de CFA da África Ocidental\"],[\"Franco CFA da África Central\", \"franco CFA da África Central|franco CFA da Africa Central|francos CFA da África Central|francos CFA da Africa Central|franco CFA central|xaf\"],[\"Centavo de CFA da África Central\", \"centavo de CFA de África Central|centavos de CFA da África Central|cêntimo de CFA de África Central|cêntimos de CFA da África Central\"],[\"Apsar abcásio\", \"apsar abcásio|apsar abecásio|apsar abcasio|apsar|apsares\"],[\"Afegani afegão\", \"afegani afegão|afegane afegão|؋|afn|afegane|afgane|afegâni|afeganis|afeganes|afganes|afegânis\"],[\"Pul\", \"pul|pules|puls\"],[\"Lek albanês\", \"lek|lekë|lekes|lek albanês|leque|leques|all\"],[\"Qindarke\", \"qindarka|qindarkë|qindarke|qindarkas\"],[\"Kwanza angolano\", \"kwanza angolano|kwanzas angolanos|kwanza|kwanzas|aoa|kz\"],[\"Cêntimo angolano\", \"cêntimo angolano|cêntimo|cêntimos\"],[\"Florim das Antilhas Holandesas\", \"florim das antilhas holandesas|florim das antilhas neerlandesas|ang\"],[\"Rial saudita\", \"rial saudita|riais sauditas|riyal saudita|riyals sauditas|riyal|riyals|sar\"],[\"Halala saudita\", \"halala saudita|halala|hallalah\"],[\"Dinar argelino\", \"dinar argelino|dinares argelinos|dzd\"],[\"Cêntimo argelino\", \"centimo argelino|centimos argelinos|cêntimo argelino|cêntimos argelinos|centavo argelino|centavos argelinos\"],[\"Peso argentino\", \"peso argentino|pesos argentinos|peso|pesos|ar$|ars\"],[\"Centavo argentino\", \"centavo argentino|centavos argentinos|centavo|ctvo.|ctvos.\"],[\"Dram armênio\", \"dram armênio|dram armênios|dram arménio|dram arménios|dram armenio|dram armenios|dram|drame|drames|դր.\"],[\"Luma armênio\", \"luma armênio|lumas armênios|luma arménio|lumas arménios|luma armenio|lumas armenios|luma|lumas\"],[\"Florim arubano\", \"florín arubeño|florines arubeños|ƒ arubeños|aƒ|awg\"],[\"Dólar australiano\", \"dólar australiano|dólares australianos|dolar australiano|dolares australianos|a$|aud\"],[\"Centavo australiano\", \"centavo australiano|centavos australianos\"],[\"Manat azeri\", \"manat azeri|manats azeris|azn|manat azerbaijanês|manat azerbaijano|manats azerbaijaneses|manats azerbaijanos\"],[\"Qəpik azeri\", \"qəpik azeri|qəpik|qəpiks\"],[\"Dólar bahamense\", \"dólar bahamense|dólares bahamense|dolar bahamense|dolares bahamense|dólar baamiano|dólares baamiano|dolar baamiano|dolares baamiano|b$|bsd\"],[\"Centavo bahamense\", \"centavo bahamense|centavos bahamense\"],[\"Dinar bareinita\", \"dinar bareinita|dinar baremita|dinares bareinitas|dinares baremitas|bhd\"],[\"Fil bareinita\", \"fil bareinita|fil baremita|fils bareinitas|fils baremitas\"],[\"Taka bengali\", \"taka bengali|takas bengalis|taca|tacas|taka|takas|bdt\"],[\"Poisha bengali\", \"poisha bengali|poishas bengalis\"],[\"Dólar de Barbados\", \"dólar de barbados|dólares de barbados|dolar de barbados|dolares de barbados|dólar dos barbados|dólares dos barbados|bbd\"],[\"Centavo de Barbados\", \"centavo de barbados|centavos de barbados|centavo dos barbados|centavos dos barbados\"],[\"Dólar de Belize\", \"dólar de belize|dólares de belize|dolar de belize|dolares de belize|dólar do belize|dólares do belize|dolar do belize|dolares do belize|bz$|bzd\"],[\"Centavo de Belize\", \"centavo de belize|centavos de belize|cêntimo do belize|cêntimos do belize\"],[\"Dólar bermudense\", \"dólar bermudense|dólares bermudenses|bd$|bmd\"],[\"Centavo bermudense\", \"centavo bermudense|centavos bermudenses|cêntimo bermudense| cêntimos bermudenses\"],[\"Rublo bielorrusso\", \"rublo bielorrusso|rublos bielorrussos|br|byr\"],[\"Copeque bielorusso\", \"copeque bielorrusso|copeques bielorrussos|kopek bielorrusso|kopeks bielorrussos|kap\"],[\"Quiate mianmarense\", \"quiate mianmarense|quiates mianmarenses|kyat mianmarense|kyates mianmarenses|quiate myanmarense|quiates myanmarenses|kyat myanmarense|kyates myanmarenses|quiate birmanês|quite birmanes|quiates birmaneses|kyat birmanês|kyat birmanes|kyates birmaneses|mmk\"],[\"Pya mianmarense\", \"pya mianmarense|pyas mianmarenses|pya myanmarense|pyas myanmarenses|pya birmanês|pya birmanes|pyas birmaneses\"],[\"Boliviano\", \"boliviano|bolivianos|bob|bs\"],[\"Centavo Boliviano\", \"centavo boliviano|centavos bolivianos\"],[\"Marco da Bósnia e Herzegovina\", \"marco conversível|marco conversivel|marco convertível|marco convertivel|marcos conversíveis|marcos conversiveis|marcos convertíveis|marcos convertivies|bam\"],[\"Fening da Bósnia e Herzegovina\", \"fening conversível|fening conversivel|fening convertível|fening convertivel|fenings conversíveis|fenings conversiveis|fenings convertíveis|fenings convertiveis\"],[\"Pula\", \"pula|pulas|bwp\"],[\"Thebe\", \"thebe|thebes\"],[\"Real brasileiro\", \"real brasileiro|real do brasil|real|reais brasileiros|reais do brasil|reais|r$|brl\"],[\"Centavo brasileiro\", \"centavo de real|centavo brasileiro|centavos de real|centavos brasileiros\"],[\"Dólar de Brunei\", \"dólar de brunei|dolar de brunei|dólar do brunei|dolar do brunei|dólares de brunéi|dolares de brunei|dólares do brunei|dolares do brunei|bnd\"],[\"Sen de Brunei\", \"sen de brunei|sen do brunei|sens de brunei|sens do brunei\"],[\"Lev búlgaro\", \"lev búlgaro|leve búlgaro|leves búlgaros|lev bulgaro|leve bulgaro|leves bulgaros|lv|bgn\"],[\"Stotinka búlgaro\", \"stotinka búlgaro|stotinki búlgaros|stotinka bulgaro|stotinki bulgaros\"],[\"Franco do Burundi\", \"franco do burundi|francos do burundi|fbu|fib\"],[\"Centavo Burundi\", \"centavo burundi|cêntimo burundi|centimo burundi|centavos burundi|cêntimo burundi|centimo burundi\"],[\"Ngultrum butanês\", \"ngultrum butanês|ngultrum butanes|ngúltrume butanês|ngultrume butanes|ngultrum butaneses|ngúltrumes butaneses|ngultrumes butaneses|btn\"],[\"Chetrum  butanês\", \"chetrum butanês|chetrum butanes|chetrum butaneses\"],[\"Escudo cabo-verdiano\", \"escudo cabo-verdiano|escudos cabo-verdianos|cve\"],[\"Riel cambojano\", \"riel cambojano|riéis cambojanos|rieis cambojanos|khr\"],[\"Dólar canadense\", \"dólar canadense|dolar canadense|dólares canadenses|dolares canadenses|c$|cad\"],[\"Centavo canadense\", \"centavo canadense|centavos canadenses\"],[\"Peso chileno\", \"peso chileno|pesos chilenos|cpl\"],[\"Yuan chinês\", \"yuan chinês|yuan chines|yuans chineses|yuan|yuans|renminbi|rmb|cny|¥\"],[\"Peso colombiano\", \"peso colombiano|pesos colombianos|cop|col$\"],[\"Centavo colombiano\", \"centavo colombiano|centavos colombianos\"],[\"Franco comorense\", \"franco comorense|francos comorenses|kmf|₣\"],[\"Franco congolês\", \"franco congolês|franco congoles|francos congoleses|cdf\"],[\"Centavo congolês\", \"centavo congolês|centavo congoles|centavos congoleses|cêntimo congolês|centimo congoles|cêntimos congoleses|cêntimos congoleses\"],[\"Won norte-coreano\", \"won norte-coreano|wŏn norte-coreano|won norte-coreanos|wŏn norte-coreanos|kpw\"],[\"Chon norte-coreano\", \"chon norte-coreano|chŏn norte-coreano|chŏn norte-coreanos|chon norte-coreanos\"],[\"Won sul-coreano\", \"wŏn sul-coreano|won sul-coreano|wŏnes sul-coreanos|wones sul-coreanos|krw\"],[\"Jeon sul-coreano\", \"jeons sul-coreano|jeons sul-coreanos\"],[\"Colón costarriquenho\", \"colón costarriquenho|colon costarriquenho|colons costarriquenho|colones costarriquenhos|crc\"],[\"Kuna croata\", \"kuna croata|kunas croatas|hrk\"],[\"Lipa croata\", \"lipa croata|lipas croatas\"],[\"Peso cubano\", \"peso cubano|pesos cubanos|cup\"],[\"Peso cubano convertível\", \"peso cubano conversível|pesos cubanos conversíveis|peso cubano conversivel|pesos cubanos conversiveis|peso cubano convertível|pesos cubanos convertíveis|peso cubano convertivel|pesos cubanos convertiveis|cuc\"],[\"Coroa dinamarquesa\", \"coroa dinamarquesa|coroas dinamarquesas|dkk\"],[\"Libra egípcia\", \"libra egípcia|libra egipcia|libras egípcias|libras egipcias|egp|le\"],[\"Piastra egípcia\", \"piastra egípcia|piastra egipcia|pisastras egípcias|piastras egipcias\"],[\"Dirham dos Emirados Árabes Unidos\", \"dirham|dirhams|dirham dos emirados arabes unidos|aed|dhs\"],[\"Nakfa\", \"nakfa|nfk|ern\"],[\"Centavo de Nakfa\", \"cêntimo de nakfa|cêntimos de nakfa|centavo de nafka|centavos de nafka\"],[\"Peseta\", \"peseta|pesetas|pts.|ptas.|esp\"],[\"Dólar estadunidense\", \"dólar dos estados unidos|dolar dos estados unidos|dólar estadunidense|dólar americano|dólares dos estados unidos|dolares dos estados unidos|dólares estadunidenses|dólares americanos|dolar estadunidense|dolar americano|dolares estadunidenses|dolares americanos|usd|u$d|us$\"],[\"Coroa estoniana\", \"coroa estoniana|coroas estonianas|eek\"],[\"Senti estoniano\", \"senti estoniano|senti estonianos\"],[\"Birr etíope\", \"birr etíope|birr etiope|birr etíopes|birr etiopes|br|etb\"],[\"Santim etíope\", \"santim etíope|santim etiope|santim etíopes|santim etiopes\"],[\"Peso filipino\", \"peso filipino|pesos filipinos|php\"],[\"Marco finlandês\", \"marco finlandês|marco finlandes|marcos finlandeses\"],[\"Dólar fijiano\", \"dólar fijiano|dolar fijiano|dólares fijianos|dolares fijianos|fj$|fjd\"],[\"Centavo fijiano\", \"centavo fijiano|centavos fijianos\"],[\"Dalasi gambiano\", \"dalasi|gmd\"],[\"Bututs\", \"butut|bututs\"],[\"Lari georgiano\", \"lari georgiano|lari georgianos|gel\"],[\"Tetri georgiano\", \"tetri georgiano|tetri georgianos\"],[\"Cedi\", \"cedi|ghs|gh₵\"],[\"Pesewa\", \"pesewa\"],[\"Libra de Gibraltar\", \"libra de gibraltar|libras de gibraltar|gip\"],[\"Peni de Gibraltar\", \"peni de gibraltar|penies de gibraltar\"],[\"Quetzal guatemalteco\", \"quetzal guatemalteco|quetzales guatemaltecos|quetzal|quetzales|gtq\"],[\"Centavo guatemalteco\", \"centavo guatemalteco|centavos guatemaltecos\"],[\"Libra de Guernsey\", \"libra de Guernsey|libras de Guernsey|ggp\"],[\"Peni de Guernsey\", \"peni de Guernsey|penies de Guernsey\"],[\"Franco da Guiné\", \"franco da guiné|franco da guine| franco guineense|francos da guiné|francos da guine|francos guineense|gnf|fg\"],[\"Centavo da Guiné\", \"cêntimo guineense|centimo guineense|centavo guineense|cêntimos guineenses|centimos guineenses|centavos guineenses\"],[\"Dólar guianense\", \"dólar guianense|dólares guianense|dolar guianense|dolares guianense|gyd|gy\"],[\"Gurde haitiano\", \"gurde haitiano|gourde|gurdes haitianos|htg\"],[\"Centavo haitiano\", \"cêntimo haitiano|cêntimos haitianos|centavo haitiano|centavos haitianos\"],[\"Lempira hondurenha\", \"lempira hondurenha|lempiras hondurenhas|lempira|lempiras|hnl\"],[\"Centavo hondurenho\", \"centavo hondurenho|centavos hondurehos|cêntimo hondurenho|cêntimos hondurenhos\"],[\"Dólar de Hong Kong\", \"dólar de hong kong|dolar de hong kong|dólares de hong kong|dolares de hong kong|hk$|hkd\"],[\"Florim húngaro\", \"florim húngaro|florim hungaro|florins húngaros|florins hungaros|forinte|forintes|huf\"],[\"Filér húngaro\", \"fillér|filér|filler|filer\"],[\"Rupia indiana\", \"rúpia indiana|rupia indiana|rupias indianas|inr\"],[\"Paisa indiana\", \"paisa indiana|paisas indianas\"],[\"Rupia indonésia\", \"rupia indonesia|rupia indonésia|rupias indonesias|rupias indonésias|idr\"],[\"Sen indonésio\", \"send indonésio|sen indonesio|sen indonésios|sen indonesios\"],[\"Rial iraniano\", \"rial iraniano|riais iranianos|irr\"],[\"Dinar iraquiano\", \"dinar iraquiano|dinares iraquianos|iqd\"],[\"Fil iraquiano\", \"fil iraquiano|fils iraquianos|files iraquianos\"],[\"Libra manesa\", \"libra manesa|libras manesas|imp\"],[\"Peni manês\", \"peni manes|peni manês|penies maneses\"],[\"Coroa islandesa\", \"coroa islandesa|coroas islandesas|isk|íkr\"],[\"Aurar islandês\", \"aurar islandês|aurar islandes|aurar islandeses|eyrir\"],[\"Dólar das Ilhas Cayman\", \"dólar das ilhas cayman|dolar das ilhas cayman|dólar das ilhas caimão|dólares das ilhas cayman|dolares das ilhas cayman|dólares das ilhas caimão|ci$|kyd\"],[\"Dólar das Ilhas Cook\", \"dólar das ilhas cook|dolar das ilhas cook|dólares das ilhas cook|dolares das ilhas cook\"],[\"Coroa feroesa\", \"coroa feroesa|coroas feroesas|fkr\"],[\"Libra das Malvinas\", \"libra das malvinas|libras das malvinas|fk£|fkp\"],[\"Dólar das Ilhas Salomão\", \"dólar das ilhas salomão|dolar das ilhas salomao|dólares das ilhas salomão|dolares das ilhas salomao|sbd\"],[\"Novo shekel israelense\", \"novo shekel|novos shekeles|novo shequel|novo siclo|novo xéquel|shekeles novos|novos sheqalim|sheqalim novos|ils\"],[\"Agora\", \"agora|agorot\"],[\"Dólar jamaicano\", \"dólar jamaicano|dolar jamaicano|dólares jamaicanos|dolares jamaicanos|j$|ja$|jmd\"],[\"Yen\", \"yen|iene|yenes|ienes|jpy\"],[\"Libra de Jersey\", \"libra de Jersey|libras de Jersey|jep\"],[\"Dinar jordaniano\", \"dinar jordaniano|dinar jordano|dinares jordanianos|dinares jordanos|jd|jod\"],[\"Piastra jordaniana\", \"piastra jordaniana|piastra jordano|piastras jordanianas|piastra jordaniano|piastras jordanianos|piastras jordanos\"],[\"Tengue cazaque\", \"tenge|tengue|tengué|tengue cazaque|kzt\"],[\"Tiyin\", \"tiyin|tiyins\"],[\"Xelim queniano\", \"xelim queniano|xelins quenianos|ksh|kes\"],[\"Som quirguiz\", \"som quirguiz|som quirguizes|soms quirguizes|kgs\"],[\"Tyiyn\", \"tyiyn|tyiyns\"],[\"Dólar de Kiribati\", \"dólar de kiribati|dolar de kiribati|dólares de kiribati|dolares de kiribati\"],[\"Dinar kuwaitiano\", \"dinar kuwaitiano|dinar cuaitiano|dinares kuwaitiano|dinares cuaitianos|kwd\"],[\"Quipe laosiano\", \"quipe|quipes|kipe|kipes|kip|kip laosiano|kip laociano|kips laosianos|kips laocianos|lak\"],[\"Att laosiano\", \"at|att|att laosiano|att laosianos\"],[\"Loti do Lesoto\", \"loti|lóti|maloti|lotis|lótis|lsl\"],[\"Sente\", \"sente|lisente\"],[\"Libra libanesa\", \"libra libanesa|libras libanesas|lbp\"],[\"Dólar liberiano\", \"dólar liberiano|dolar liberiano|dólares liberianos|dolares liberianos|l$|lrd\"],[\"Dinar libio\", \"dinar libio|dinar líbio|dinares libios|dinares líbios|ld|lyd\"],[\"Dirham libio\", \"dirham libio|dirhams libios|dirham líbio|dirhams líbios\"],[\"Litas lituana\", \"litas lituana|litai lituanas|ltl\"],[\"Pataca macaense\", \"pataca macaense|patacas macaenses|mop$|mop\"],[\"Avo macaense\", \"avo macaense|avos macaenses\"],[\"Ho macaense\", \"ho macaense|ho macaenses\"],[\"Dinar macedônio\", \"denar macedonio|denare macedonios|denar macedônio|denar macedónio|denare macedônio|denare macedónio|dinar macedonio|dinar macedônio|dinar macedónio|dinares macedonios|dinares macedônios|dinares macedónios|den|mkd\"],[\"Deni macedônio\", \"deni macedonio|deni macedônio|deni macedónio|denis macedonios|denis macedônios|denis macedónios\"],[\"Ariary malgaxe\", \"ariai malgaxe|ariary malgaxe|ariary malgaxes|ariaris|mga\"],[\"Iraimbilanja\", \"iraimbilanja|iraimbilanjas\"],[\"Ringuite malaio\", \"ringgit malaio|ringgit malaios|ringgits malaios|ringuite malaio|ringuites malaios|rm|myr\"],[\"Sen malaio\", \"sen malaio|sen malaios|centavo malaio|centavos malaios|cêntimo malaio|cêntimos malaios\"],[\"Kwacha do Malawi\", \"kwacha|cuacha|quacha|mk|mwk\"],[\"Tambala\", \"tambala|tambalas|tambala malawi\"],[\"Rupia maldiva\", \"rupia maldiva|rupias maldivas|rupia das maldivas| rupias das maldivas|mvr\"],[\"Dirame marroquino\", \"dirame marroquino|dirham marroquinho|dirhams marroquinos|dirames marroquinos|mad\"],[\"Rupia maurícia\", \"rupia maurícia|rupia de Maurício|rupia mauricia|rupia de mauricio|rupias de mauricio|rupias de maurício|rupias mauricias|rupias maurícias|mur\"],[\"Uguia\", \"uguia|uguias|oguia|ouguiya|oguias|mro\"],[\"Kume\", \"kumes|kume|khoums\"],[\"Peso mexicano\", \"peso mexicano|pesos mexicanos|mxn\"],[\"Centavo mexicano\", \"centavo mexicano|centavos mexicanos\"],[\"Leu moldávio\", \"leu moldavo|lei moldavos|leu moldávio|leu moldavio|lei moldávios|lei moldavios|leus moldavos|leus moldavios|leus moldávios|mdl\"],[\"Ban moldávio\", \"ban moldavo|bani moldavos\"],[\"Tugrik mongol\", \"tugrik mongol|tugrik|tugriks mongóis|tugriks mongois|tug|mnt\"],[\"Metical moçambicao\", \"metical|metical moçambicano|metical mocambicano|meticais|meticais moçambicanos|meticais mocambicanos|mtn|mzn\"],[\"Dólar namibiano\", \"dólar namibiano|dólares namibianos|dolar namibio|dolares namibios|n$|nad\"],[\"Centavo namibiano\", \"centavo namibiano|centavos namibianos|centavo namibio|centavos namibianos\"],[\"Rupia nepalesa\", \"rupia nepalesa|rupias nepalesas|npr\"],[\"Paisa nepalesa\", \"paisa nepalesa|paisas nepalesas\"],[\"Córdova nicaraguense\", \"córdova nicaraguense|cordova nicaraguense|cordova nicaraguana|córdoba nicaragüense|córdobas nicaragüenses|cordobas nicaraguenses|córdovas nicaraguenses|cordovas nicaraguenses|córdovas nicaraguanasc$|nio\"],[\"Centavo nicaraguense\", \"centavo nicaragüense|centavos nicaraguenses|centavo nicaraguano|centavos nicaraguenses|centavo nicaraguano|centavos nicaraguanos\"],[\"Naira\", \"naira|ngn\"],[\"Kobo\", \"kobo\"],[\"Coroa norueguesa\", \"coroa norueguesa|coroas norueguesas|nok\"],[\"Franco CFP\", \"franco cfp|francos cfp|xpf\"],[\"Dólar neozelandês\", \"dólar neozelandês|dolar neozelandes|dólares neozelandeses|dolares neozelandeses|dólar da nova zelândia|dolar da nova zelandia|dólares da nova zelândia|dolares da nova zelandia|nz$|nzd\"],[\"Centavo neozelandês\", \"centavo neozelandês|centavo neozelandes|centavo da nova zelandia|centavo da nova zelândia|centavos da nova zelandia|centavos neozelandeses|centavos da nova zelândia\"],[\"Rial omanense\", \"rial omani|riais omanis|rial omanense|riais omanenses|omr\"],[\"Baisa omanense\", \"baisa omani|baisas omanis|baisa omanense|baisas omanenses\"],[\"Florim holandês\", \"florim holandês|florim holandes|florins holandeses|nlg\"],[\"Rupia paquistanesa\", \"rupia paquistanesa|rupias paquistanesas|pkr\"],[\"Paisa paquistanesa\", \"paisa paquistanesa|paisas paquistanesasas\"],[\"Balboa panamenho\", \"balboa panamenho|balboas panamenhos|balboa|pab|balboa panamense|balboas panamenses\"],[\"Centavo panamenho\", \"centavo panamenho|cêntimo panamenho|centavos panamenhos|cêntimos panamenhos|cêntimo panamense|cêntimos panamenses\"],[\"Kina\", \"kina|kina papuásia|kinas|kinas papuásias|pkg|pgk\"],[\"Toea\", \"toea\"],[\"Guarani\", \"guarani|guaranis|gs|pyg\"],[\"Novo Sol\", \"novo sol peruano|novos sóis peruanos|sol|soles|sóis|nuevo sol|pen|s#.\"],[\"Centavo de sol\", \"cêntimo de sol|cêntimos de sol|centavo de sol|centavos de sol\"],[\"Złoty\", \"złoty|złotys|zloty|zlotys|zloti|zlotis|zlóti|zlótis|zlote|zł|pln\"],[\"Groszy\", \"groszy|grosz\"],[\"Rial catariano\", \"rial qatari|riais qataris|rial catarense|riais catarenses|rial catariano|riais catarianos|qr|qar\"],[\"Dirame catariano\", \"dirame catariano|dirames catarianos|dirame qatari|dirames qataris|dirame catarense|dirames catarenses|dirham qatari|dirhams qataris|dirham catarense|dirhams catarenses|dirham catariano|dirhams catariano\"],[\"Libra esterlina\", \"libra esterlina|libras esterlinas|gbp\"],[\"Coroa checa\", \"coroa checa|coroas checas|kc|czk\"],[\"Peso dominicano\", \"peso dominicano|pesos dominicanos|rd$|dop\"],[\"Centavo dominicano\", \"centavo dominicano|centavos dominicanos\"],[\"Franco ruandês\", \"franco ruandês|franco ruandes|francos ruandeses|rf|rwf\"],[\"Céntimo ruandês\", \"cêntimo ruandês|centimo ruandes|centavo ruandês|centavo ruandes|cêntimos ruandeses|centimos ruandeses|centavos ruandeses\"],[\"Leu romeno\", \"leu romeno|lei romenos|leus romenos|ron\"],[\"Ban romeno\", \"ban romeno|bani romeno|bans romenos\"],[\"Rublo russo\", \"rublo russo|rublos russos|rub|р.\"],[\"Copeque ruso\", \"copeque russo|copeques russos|kopek ruso|kopeks rusos|copeque|copeques|kopek|kopeks\"],[\"Tala samoano\", \"tala|tālā|talas|tala samonano|talas samoanos|ws$|sat|wst\"],[\"Sene samoano\", \"sene\"],[\"Libra de Santa Helena\", \"libra de santa helena|libras de santa helena|shp\"],[\"Pêni de Santa Helena\", \"peni de santa helena|penies de santa helena\"],[\"Dobra\", \"dobra|dobras|db|std\"],[\"Dinar sérvio\", \"dinar sérvio|dinar servio|dinar serbio|dinares sérvios|dinares servios|dinares serbios|rsd\"],[\"Para sérvio\", \"para sérvio|para servio|para serbio|paras sérvios|paras servios|paras serbios\"],[\"Rupia seichelense\", \"rupia de seicheles|rupias de seicheles|rupia seichelense|rupias seichelenses|scr\"],[\"Centavo seichelense\", \"centavo de seicheles|centavos de seicheles|centavo seichelense|centavos seichelenses\"],[\"Leone serra-leonino\", \"leone|leones|leone serra-leonino|leones serra-leoninos|le|sll\"],[\"Dólar de Cingapura\", \"dólar de singapura|dolar de singapura|dórar de cingapura|dolar de cingapura|dólares de singapura|dolares de singapura|dólares de cingapura|dolares de cingapura|sgb\"],[\"Centavo de Cingapura\", \"centavo de singapura|centavos de singapura|centavo de cingapura|centavos de cingapura\"],[\"Libra síria\", \"libra síria|libra siria|libras sírias|libras sirias|s£|syp\"],[\"Piastra síria\", \"piastra siria|piastras sirias|piastra síria|piastras sírias\"],[\"Xelim somali\", \"xelim somali|xelins somalis|xelim somaliano|xelins somalianos|sos\"],[\"Centavo somali\", \"centavo somapli|centavos somalis|centavo somaliano|centavos somalianos\"],[\"Xelim da Somalilândia\", \"xelim da somalilândia|xelins da somalilândia|xelim da somalilandia|xelins da somalilandia\"],[\"Centavo da Somalilândia\", \"centavo da somalilândia|centavos da somalilândia|centavo da somalilandia|centavos da somalilandia\"],[\"Rupia do Sri Lanka\", \"rupia do sri lanka|rupia do sri lanca|rupias do sri lanka|rupias do sri lanca|rupia cingalesa|rupias cingalesas|lkr\"],[\"Lilangeni\", \"lilangeni|lilangenis|emalangeni|szl\"],[\"Rand sul-africano\", \"rand|rand sul-africano|rands|rands sul-africanos|zar\"],[\"Libra sudanesa\", \"libra sudanesa|libras sudanesas|sdg\"],[\"Piastra sudanesa\", \"piastra sudanesa|piastras sudanesas\"],[\"Libra sul-sudanesa\", \"libra sul-sudanesa|libras sul-sudanesas|ssp\"],[\"Piastra sul-sudanesa\", \"piastra sul-sudanesa|piastras sul-sudanesas\"],[\"Coroa sueca\", \"coroa sueca|coroas suecas|sek\"],[\"Franco suíço\", \"franco suíço|franco suico|francos suíços|francos suicos|sfr|chf\"],[\"Rappen suíço\", \"rappen suíço|rappen suico|rappens suíços|rappens suicos\"],[\"Dólar surinamês\", \"dólar surinamês|dolar surinames|dólar do Suriname|dolar do Suriname|dólares surinameses|dolares surinameses|dólares do Suriname|dolares do Suriname|srd\"],[\"Centavo surinamês\", \"centavo surinamês|centavo surinames|centavos surinameses\"],[\"Baht tailandês\", \"baht tailandês|bath tailandes|baht tailandeses|thb\"],[\"Satang tailandês\", \"satang tailandês|satang tailandes|satang tailandeses\"],[\"Novo dólar taiwanês\", \"novo dólar taiwanês|novo dolar taiwanes|dólar taiwanês|dolar taiwanes|dólares taiwaneses|dolares taiwaneses|twd\"],[\"Centavo taiwanês\", \"centavo taiwanês|centavo taiwanes|centavos taiwaneses\"],[\"Xelim tanzaniano\", \"xelim tanzaniano|xelins tanzanianos|tzs\"],[\"Centavo tanzaniano\", \"centavo tanzaniano|centavos tanzanianos\"],[\"Somoni tajique\", \"somoni tajique|somoni|somonis tajiques|somonis|tjs\"],[\"Diram tajique\", \"diram tajique|dirams tajiques|dirames tajiques\"],[\"Paʻanga\", \"paanga|paangas|paʻanga|pa'anga|top\"],[\"Seniti\", \"seniti\"],[\"Rublo transdniestriano\", \"rublo transdniestriano|rublos transdniestriano\"],[\"Copeque transdniestriano\", \"copeque transdniestriano|copeques transdniestriano\"],[\"Dólar de Trinidade e Tobago\", \"dólar de trinidade e tobago|dólares trinidade e tobago|dolar de trinidade e tobago|dolares trinidade e tobago|dólar de trinidad e tobago|dólares trinidad e tobago|ttd\"],[\"Centavo de Trinidade e Tobago\", \"centavo de trinidade e tobago|centavos de trinidade e tobago|centavo de trinidad e tobago|centavos de trinidad e tobago\"],[\"Dinar tunisiano\", \"dinar tunisiano|dinares tunisianos|dinar tunisino|dinares tunisinos|tnd\"],[\"Milim tunisiano\", \"milim tunisiano|milim tunesianos|millime tunisianos|millimes tunisianos|milim tunisino|milim tunisinos|millime tunisinos|millimes tunisinos\"],[\"Lira turca\", \"lira turca|liras turcas|try\"],[\"Kuruş turco\", \"kuruş turco|kuruş turcos\"],[\"Manat turcomeno\", \"manat turcomeno|manats turcomenos|tmt\"],[\"Tennesi turcomeno\", \"tennesi turcomeno|tennesis turcomenos|tenge turcomenos|tenges turcomenos\"],[\"Dólar tuvaluano\", \"dólar tuvaluano|dolar tuvaluano|dólares tuvaluanos|dolares tuvaluanos\"],[\"Centavo tuvaluano\", \"centavo tuvaluano|centavos tuvaluanos\"],[\"Grívnia\", \"grívnia|grivnia|grívnias|grivnias|grivna|grivnas|uah\"],[\"Copeque ucraniano\", \"kopiyka|copeque ucraniano|copeques ucranianos\"],[\"Xelim ugandês\", \"xelim ugandês|xelim ugandes|xelins ugandeses|ugx\"],[\"Centavo ugandês\", \"centavo ugandês|centavo ugandes|centavos ugandeses\"],[\"Peso uruguaio\", \"peso uruguaio|pesos uruguayis|uyu\"],[\"Centésimo uruguayo\", \"centésimo uruguaio|centesimo uruguaio|centésimos uruguaios|centesimos uruguaios\"],[\"Som uzbeque\", \"som uzbeque|som uzbeques|soms uzbeques|somes uzbeques|som usbeque|som usbeques|soms usbeques|somes usbeques|uzs\"],[\"Tiyin uzbeque\", \"tiyin uzbeque|tiyin uzbeques|tiyins uzbeques|tiyin usbeque|tiyin usbeques|tiyins usbeques\"],[\"Vatu\", \"vatu|vatus|vuv\"],[\"Bolívar forte venezuelano\", \"bolívar forte|bolivar forte|bolívar|bolivar|bolívares|bolivares|vef\"],[\"Centavo de bolívar\", \"cêntimo de bolívar|cêntimos de bolívar|centavo de bolívar|centavo de bolivar|centavos de bolívar|centavos de bolivar\"],[\"Dongue vietnamita\", \"dongue vietnamita|Đồng vietnamita|dong vietnamita|dongues vietnamitas|dongs vietnamitas|vnd\"],[\"Hào vietnamita\", \"hào vietnamita|hao vietnamita|hào vietnamitas|hàos vietnamitas|haos vietnamitas\"],[\"Rial iemenita\", \"rial iemenita|riais iemenitas|yer\"],[\"Fils iemenita\", \"fils iemenita|fils iemenitas\"],[\"Franco djibutiano\", \"franco djibutiano|francos djibutianos|franco jibutiano|francos jibutianos|djf\"],[\"Dinar iugoslavo\", \"dinar iugoslavo|dinares iugoslavos|dinar jugoslavo|dinares jugoslavos|yud\"],[\"Kwacha zambiano\", \"kwacha zambiano|kwacha zambianos|kwachas zambianos|zmw\"],[\"Ngwee zambiano\", \"ngwee zambiano|ngwee zambianos|ngwees zambianos\"]]);\n\texport const CurrencyPrefixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Dólar\", \"$\"],[\"Dólar estadunidense\", \"us$|u$d|usd\"],[\"Dólar do Caribe Oriental\", \"ec$|xcd\"],[\"Dólar australiano\", \"a$|aud\"],[\"Dólar bahamense\", \"b$|bsd\"],[\"Dólar de Barbados\", \"bds$|bbd\"],[\"Dólar de Belizebe\", \"bz$|bzd\"],[\"Dólar bermudense\", \"bd$|bmd\"],[\"Dólar de Brunebi\", \"brunéi $|bnd\"],[\"Dólar de Cingapura\", \"s$|sgd\"],[\"Dólar canadense\", \"c$|can$|cad\"],[\"Dólar das Ilhas Cayman\", \"ci$|kyd\"],[\"Dólar neozelandês\", \"nz$|nzd\"],[\"Dólar fijgiano\", \"fj$|fjd\"],[\"Dólar guianense\", \"gy$|gyd\"],[\"Dólar de Hong Kong\", \"hk$|hkd\"],[\"Dólar jamaicano\", \"j$|ja$|jmd\"],[\"Dólar liberiano\", \"l$|lrd\"],[\"Dólar namibiano\", \"n$|nad\"],[\"Dólar das Ilhas Salomão\", \"si$|sbd\"],[\"Novo dólar taiwanês\", \"nt$|twd\"],[\"Real brasileiro\", \"r$|brl\"],[\"Guarani\", \"₲|gs.|pyg\"],[\"Dólar de Trinidade e Tobago\", \"tt$|ttd\"],[\"Yuan chinês\", \"￥|cny|rmb\"],[\"Yen\", \"¥|jpy\"],[\"Euro\", \"€|eur\"],[\"Florim\", \"ƒ\"],[\"Libra\", \"£|gbp\"],[\"Colón costarriquenho\", \"₡\"],[\"Lira turca\", \"₺\"]]);\n\texport const AmbiguousCurrencyUnitList = [ 'le' ];\n\texport const InformationSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"bit\", \"bit|bits\"],[\"kilobit\", \"kilobit|kilobits|kb|kbit\"],[\"megabit\", \"megabit|megabits|Mb|Mbit\"],[\"gigabit\", \"gigabit|gigabits|Gb|Gbit\"],[\"terabit\", \"terabit|terabits|Tb|Tbit\"],[\"petabit\", \"petabit|petabits|Pb|Pbit\"],[\"kibibit\", \"kibibit|kibibits|kib|kibit\"],[\"mebibit\", \"mebibit|mebibits|Mib|Mibit\"],[\"gibibit\", \"gibibit|gibibits|Gib|Gibit\"],[\"tebibit\", \"tebibit|tebibits|Tib|Tibit\"],[\"pebibit\", \"pebibit|pebibits|Pib|Pibit\"],[\"byte\", \"byte|bytes\"],[\"kilobyte\", \"kilobyte|kilobytes|kB|kByte\"],[\"megabyte\", \"megabyte|megabytes|MB|MByte\"],[\"gigabyte\", \"gigabyte|gigabytes|GB|GByte\"],[\"terabyte\", \"terabyte|terabytes|TB|TByte\"],[\"petabyte\", \"petabyte|petabytes|PB|PByte\"],[\"kibibyte\", \"kibibyte|kibibytes|kiB|kiByte\"],[\"mebibyte\", \"mebibyte|mebibytes|MiB|MiByte\"],[\"gibibyte\", \"gibibyte|gibibytes|GiB|GiByte\"],[\"tebibyte\", \"tebibyte|tebibytes|TiB|TiByte\"],[\"pebibyte\", \"pebibyte|pebibytes|PiB|PiByte\"]]);\n\texport const AmbiguousDimensionUnitList = [ 'ton','tonelada','área','area','áreas','areas','milha','milhas' ];\n\texport const BuildPrefix = `(?<=(\\\\s|^|\\\\P{L}))`;\n\texport const BuildSuffix = `(?=(\\\\s|\\\\P{L}|$))`;\n\texport const ConnectorToken = 'de';\n\texport const LenghtSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Quilômetro\", \"km|quilometro|quilômetro|quilómetro|quilometros|quilômetros|quilómetros\"],[\"Hectômetro\", \"hm|hectometro|hectômetro|hectómetro|hectometros|hectômetros|hectómetros\"],[\"Decâmetro\", \"decametro|decâmetro|decámetro|decametros|decâmetro|decámetros|dam\"],[\"Metro\", \"m|m.|metro|metros\"],[\"Decímetro\", \"dm|decimetro|decímetro|decimetros|decímetros\"],[\"Centímetro\", \"cm|centimetro|centímetro|centimetros|centimetros\"],[\"Milímetro\", \"mm|milimetro|milímetro|milimetros|milímetros\"],[\"Micrômetro\", \"µm|um|micrometro|micrômetro|micrómetro|micrometros|micrômetros|micrómetros|micron|mícron|microns|mícrons|micra\"],[\"Nanômetro\", \"nm|nanometro|nanômetro|nanómetro|nanometros|nanômetros|nanómetros|milimicron|milimícron|milimicrons|milimícrons\"],[\"Picômetro\", \"pm|picometro|picômetro|picómetro|picometros|picômetros|picómetros\"],[\"Milha\", \"mi|milha|milhas\"],[\"Jarda\", \"yd|jarda|jardas\"],[\"Polegada\", \"polegada|polegadas|\\\\\\\"\"],[\"Pé\", \"pé|pe|pés|pes|ft\"],[\"Ano luz\", \"ano luz|anos luz|al\"]]);\n\texport const AmbiguousLengthUnitList = [ 'mi','milha','milhas' ];\n\texport const SpeedSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Metro por segundo\", \"metro/segundo|m/s|metro por segundo|metros por segundo|metros por segundos\"],[\"Quilômetro por hora\", \"km/h|quilômetro por hora|quilómetro por hora|quilometro por hora|quilômetros por hora|quilómetros por hora|quilometros por hora|quilômetro/hora|quilómetro/hora|quilometro/hora|quilômetros/hora|quilómetros/hora|quilometros/hora\"],[\"Quilômetro por minuto\", \"km/min|quilômetro por minuto|quilómetro por minuto|quilometro por minuto|quilômetros por minuto|quilómetros por minuto|quilometros por minuto|quilômetro/minuto|quilómetro/minuto|quilometro/minuto|quilômetros/minuto|quilómetros/minuto|quilometros/minuto\"],[\"Quilômetro por segundo\", \"km/seg|quilômetro por segundo|quilómetro por segundo|quilometro por segundo|quilômetros por segundo|quilómetros por segundo|quilometros por segundo|quilômetro/segundo|quilómetro/segundo|quilometro/segundo|quilômetros/segundo|quilómetros/segundo|quilometros/segundo\"],[\"Milha por hora\", \"mph|milha por hora|mi/h|milha/hora|milhas/hora|milhas por hora\"],[\"Nó\", \"kt|nó|nós|kn\"],[\"Pé por segundo\", \"ft/s|pé/s|pe/s|ft/seg|pé/seg|pe/seg|pé por segundo|pe por segundo|pés por segundo|pes por segundo\"],[\"Pé por minuto\", \"ft/min|pé/mind|pe/min|pé por minuto|pe por minuto|pés por minuto|pes por minuto\"],[\"Jarda por minuto\", \"jardas por minuto|jardas/minuto|jardas/min\"],[\"Jarda por segundo\", \"jardas por segundo|jardas/segundo|jardas/seg\"]]);\n\texport const AmbiguousSpeedUnitList = [ 'nó','no','nós','nos' ];\n\texport const TemperatureSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kelvin\", \"k|kelvin\"],[\"Grau Rankine\", \"r|°r|°ra|grau rankine|graus rankine| rankine\"],[\"Grau Celsius\", \"°c|grau c|grau celsius|graus c|graus celsius|celsius|grau centígrado|grau centrigrado|graus centígrados|graus centigrados|centígrado|centígrados|centigrado|centigrados\"],[\"Grau Fahrenheit\", \"°f|grau f|graus f|grau fahrenheit|graus fahrenheit|fahrenheit\"],[\"Grau\", \"°|graus|grau\"]]);\n\texport const VolumeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Quilômetro cúbico\", \"quilômetro cúbico|quilómetro cúbico|quilometro cubico|quilômetros cúbicos|quilómetros cúbicos|quilometros cubicos|km3|km^3|km³\"],[\"Hectômetro cúbico\", \"hectômetro cúbico|hectómetro cúbico|hectometro cubico|hectômetros cúbicos|hectómetros cúbicos|hectometros cubicos|hm3|hm^3|hm³\"],[\"Decâmetro cúbico\", \"decâmetro cúbico|decámetro cúbico|decametro cubico|decâmetros cúbicos|decámetros cúbicos|decametros cubicosdam3|dam^3|dam³\"],[\"Metro cúbico\", \"metro cúbico|metro cubico|metros cúbicos|metros cubicos|m3|m^3|m³\"],[\"Decímetro cúbico\", \"decímetro cúbico|decimetro cubico|decímetros cúbicos|decimetros cubicos|dm3|dm^3|dm³\"],[\"Centímetro cúbico\", \"centímetro cúbico|centimetro cubico|centímetros cúbicos|centrimetros cubicos|cc|cm3|cm^3|cm³\"],[\"Milímetro cúbico\", \"milímetro cúbico|milimetro cubico|milímetros cúbicos|milimetros cubicos|mm3|mm^3|mm³\"],[\"Polegada cúbica\", \"polegada cúbica|polegada cubica|polegadas cúbicas|polegadas cubicas\"],[\"Pé cúbico\", \"pé cúbico|pe cubico|pés cúbicos|pes cubicos|pé3|pe3|pé^3|pe^3|pé³|pe³|ft3|ft^3|ft³\"],[\"Jarda cúbica\", \"jarda cúbica|jarda cubica|jardas cúbicas|jardas cubicas|yd3|yd^3|yd³\"],[\"Hectolitro\", \"hectolitro|hectolitros|hl\"],[\"Litro\", \"litro|litros|lts|l\"],[\"Mililitro\", \"mililitro|mililitros|ml\"],[\"Galão\", \"galão|galões|galao|galoes\"],[\"Pint\", \"pinta|pintas|pinto|pintos|quartilho|quartilhos|pint|pints\"],[\"Barril\", \"barril|barris|bbl\"],[\"Onça líquida\", \"onça líquida|onca liquida|onças líquidas|oncas liquidas\"]]);\n\texport const WeightSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Tonelada métrica\", \"tonelada métrica|tonelada metrica|toneladas métricas|toneladas metricas\"],[\"Tonelada\", \"ton|tonelada|toneladas\"],[\"Quilograma\", \"kg|quilograma|quilogramas|quilo|quilos|kilo|kilos\"],[\"Hectograma\", \"hg|hectograma|hectogramas\"],[\"Decagrama\", \"dag|decagrama|decagramas\"],[\"Grama\", \"g|gr|grama|gramas\"],[\"Decigrama\", \"dg|decigrama|decigramas\"],[\"Centigrama\", \"cg|centigrama|centigramas\"],[\"Miligrama\", \"mg|miligrama|miligramas\"],[\"Micrograma\", \"µg|ug|micrograma|microgramas\"],[\"Nanograma\", \"ng|nanograma|nanogramas\"],[\"Picograma\", \"pg|picograma|picogramas\"],[\"Libra\", \"lb|libra|libras\"],[\"Onça\", \"oz|onça|onca|onças|oncas\"],[\"Grão\", \"grão|grao|grãos|graos|gr\"],[\"Quilate\", \"ct|kt|quilate|quilates\"]]);\n}\n","import { IExtractor, IParser } from \"recognizers-text\";\nimport { Culture, CultureInfo, NumberMode, AgnosticNumberParserFactory, AgnosticNumberParserType, PortugueseNumberExtractor, PortugueseNumberParserConfiguration } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { INumberWithUnitExtractorConfiguration } from \"../extractors\";\nimport { BaseNumberWithUnitParserConfiguration } from \"../parsers\";\nimport { PortugueseNumericWithUnit } from \"../../resources/portugueseNumericWithUnit\";\n\nexport abstract class PortugueseNumberWithUnitExtractorConfiguration implements INumberWithUnitExtractorConfiguration {\n    abstract readonly suffixList: ReadonlyMap<string, string>;\n    abstract readonly prefixList: ReadonlyMap<string, string>;\n    abstract readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly abstract extractType: string;\n\n    readonly cultureInfo: CultureInfo;\n    readonly unitNumExtractor: IExtractor;\n    readonly buildPrefix: string;\n    readonly buildSuffix: string;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        this.cultureInfo = ci;\n        this.unitNumExtractor = new PortugueseNumberExtractor();\n\n        this.buildPrefix = PortugueseNumericWithUnit.BuildPrefix;\n        this.buildSuffix = PortugueseNumericWithUnit.BuildSuffix;\n        this.connectorToken = PortugueseNumericWithUnit.ConnectorToken;\n    }\n}\n\nexport class PortugueseNumberWithUnitParserConfiguration extends BaseNumberWithUnitParserConfiguration {\n    readonly internalNumberParser: IParser;\n    readonly internalNumberExtractor: IExtractor;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        super(ci);\n\n        this.internalNumberExtractor = new PortugueseNumberExtractor(NumberMode.Default);\n        this.internalNumberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new PortugueseNumberParserConfiguration());\n        this.connectorToken = PortugueseNumericWithUnit.ConnectorToken;\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { PortugueseNumberWithUnitExtractorConfiguration, PortugueseNumberWithUnitParserConfiguration } from \"./base\";\nimport { PortugueseNumericWithUnit } from \"../../resources/portugueseNumericWithUnit\";\n\nexport class PortugueseCurrencyExtractorConfiguration extends PortugueseNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_CURRENCY;\n\n        // Reference Source: https:// en.wikipedia.org/wiki/List_of_circulating_currencies\n        this.suffixList = PortugueseNumericWithUnit.CurrencySuffixList;\n        this.prefixList = PortugueseNumericWithUnit.CurrencyPrefixList;\n        this.ambiguousUnitList = PortugueseNumericWithUnit.AmbiguousCurrencyUnitList;\n    }\n}\n\nexport class PortugueseCurrencyParserConfiguration extends PortugueseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(PortugueseNumericWithUnit.CurrencySuffixList);\n        this.BindDictionary(PortugueseNumericWithUnit.CurrencyPrefixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { PortugueseNumberWithUnitExtractorConfiguration, PortugueseNumberWithUnitParserConfiguration } from \"./base\";\nimport { PortugueseNumericWithUnit } from \"../../resources/portugueseNumericWithUnit\";\n\nexport class PortugueseTemperatureExtractorConfiguration extends PortugueseNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_TEMPERATURE;\n\n        this.suffixList = PortugueseNumericWithUnit.TemperatureSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = new Array<string>();\n    }\n}\n\nexport class PortugueseTemperatureParserConfiguration extends PortugueseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(PortugueseNumericWithUnit.TemperatureSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { PortugueseNumberWithUnitExtractorConfiguration, PortugueseNumberWithUnitParserConfiguration } from \"./base\";\nimport { PortugueseNumericWithUnit } from \"../../resources/portugueseNumericWithUnit\";\n\nconst dimensionSuffixList = new Map<string, string>([\n    ...PortugueseNumericWithUnit.InformationSuffixList,\n    ...PortugueseNumericWithUnit.AreaSuffixList,\n    ...PortugueseNumericWithUnit.LenghtSuffixList,\n    ...PortugueseNumericWithUnit.SpeedSuffixList,\n    ...PortugueseNumericWithUnit.VolumeSuffixList,\n    ...PortugueseNumericWithUnit.WeightSuffixList\n]);\n\nexport class PortugueseDimensionExtractorConfiguration extends PortugueseNumberWithUnitExtractorConfiguration {\n\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_DIMENSION;\n\n        this.suffixList = dimensionSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = PortugueseNumericWithUnit.AmbiguousDimensionUnitList\n    }\n}\n\nexport class PortugueseDimensionParserConfiguration extends PortugueseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(dimensionSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { PortugueseNumberWithUnitExtractorConfiguration, PortugueseNumberWithUnitParserConfiguration } from \"./base\";\nimport { PortugueseNumericWithUnit } from \"../../resources/portugueseNumericWithUnit\";\n\nexport class PortugueseAgeExtractorConfiguration extends PortugueseNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_AGE;\n\n        this.suffixList = PortugueseNumericWithUnit.AgeSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = new Array<string>();\n    }\n}\n\nexport class PortugueseAgeParserConfiguration extends PortugueseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Portuguese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(PortugueseNumericWithUnit.AgeSuffixList);\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace ChineseNumericWithUnit {\n\texport const AgeAmbiguousValues = [ '岁' ];\n\texport const AgeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Year\", \"岁|周岁\"],[\"Month\", \"个月大|月大\"],[\"Week\", \"周大\"],[\"Day\", \"天大\"]]);\n\texport const BuildPrefix = '';\n\texport const BuildSuffix = '';\n\texport const ConnectorToken = '';\n\texport const CurrencySuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Afghan afghani\", \"阿富汗尼\"],[\"Pul\", \"普尔\"],[\"Euro\", \"欧元\"],[\"Cent\", \"美分\"],[\"Albanian lek\", \"阿尔巴尼亚列克|列克\"],[\"Angolan kwanza\", \"安哥拉宽扎|宽扎\"],[\"Armenian dram\", \"亚美尼亚德拉姆\"],[\"Aruban florin\", \"阿鲁巴弗罗林|阿鲁巴币\"],[\"Bangladeshi taka\", \"塔卡|孟加拉塔卡\"],[\"Paisa\", \"派萨|帕萨\"],[\"Bhutanese ngultrum\", \"不丹努尔特鲁姆|不丹努扎姆|努扎姆\"],[\"Chetrum\", \"切特鲁姆\"],[\"Bolivian boliviano\", \"玻利维亚诺|玻利维亚币\"],[\"Bosnia and Herzegovina convertible mark\", \"波斯尼亚和黑塞哥维那可兑换马克|波赫可兑换马克\"],[\"Botswana pula\", \"博茨瓦纳普拉|普拉\"],[\"Thebe\", \"thebe\"],[\"Brazilian real\", \"巴西雷亚尔\"],[\"Bulgarian lev\", \"保加利亚列弗|保加利亚列瓦\"],[\"Stotinka\", \"斯托丁卡\"],[\"Cambodian riel\", \"瑞尔\"],[\"Cape Verdean escudo\", \"佛得角埃斯库多|维德角埃斯库多\"],[\"Croatian kuna\", \"克罗地亚库纳|克罗地亚库那|克罗埃西亚库纳\"],[\"Lipa\", \"利巴\"],[\"Eritrean nakfa\", \"厄立特里亚纳克法\"],[\"Ethiopian birr\", \"埃塞俄比亚比尔|埃塞俄比亚元\"],[\"Gambian dalasi\", \"冈比亚达拉西|甘比亚达拉西\"],[\"Butut\", \"布达|布图\"],[\"Georgian lari\", \"格鲁吉亚拉里\"],[\"Tetri\", \"特特里|泰特里\"],[\"Ghanaian cedi\", \"塞地|加纳塞地\"],[\"Pesewa\", \"比塞瓦\"],[\"Guatemalan quetzal\", \"瓜地马拉格查尔\"],[\"Haitian gourde\", \"海地古德\"],[\"Honduran lempira\", \"洪都拉斯伦皮拉\"],[\"Hungarian forint\", \"匈牙利福林|匈牙利货币|匈牙利福林币\"],[\"Iranian rial\", \"伊朗里亚尔|伊朗莱尔\"],[\"Yemeni rial\", \"叶门莱尔|叶门里亚尔\"],[\"Israeli new shekel\", \"₪|ils|以色列币|以色列新克尔|谢克尔\"],[\"Japanese yen\", \"日元|日本元|日币|日圆\"],[\"Kazakhstani tenge\", \"哈萨克斯坦坚戈\"],[\"Kenyan shilling\", \"肯尼亚先令\"],[\"North Korean won\", \"朝鲜圆|朝鲜元\"],[\"South Korean won\", \"韩元|韩圆\"],[\"Korean won\", \"₩\"],[\"Kyrgyzstani som\", \"吉尔吉斯斯坦索姆\"],[\"Lao kip\", \"基普|老挝基普|老挝币\"],[\"Att\", \"att\"],[\"Lesotho loti\", \"莱索托洛提|莱索托马洛蒂\"],[\"South African rand\", \"南非兰特\"],[\"Macedonian denar\", \"马其顿代纳尔|马其顿币|第纳尔|代纳尔\"],[\"Deni\", \"第尼\"],[\"Malagasy ariary\", \"马达加斯加阿里亚里\"],[\"Iraimbilanja\", \"伊莱姆比拉贾\"],[\"Malawian kwacha\", \"马拉威克瓦查\"],[\"Tambala\", \"坦巴拉\"],[\"Malaysian ringgit\", \"马来西亚币|马币|马来西亚林吉特\"],[\"Mauritanian ouguiya\", \"毛里塔尼亚乌吉亚\"],[\"Khoums\", \"库姆斯\"],[\"Mozambican metical\", \"莫桑比克梅蒂卡尔|梅蒂卡尔\"],[\"Burmese kyat\", \"缅甸元|缅元\"],[\"Pya\", \"缅分\"],[\"Nigerian naira\", \"尼日利亚奈拉|尼日利亚币|奈拉\"],[\"Kobo\", \"考包\"],[\"Turkish lira\", \"土耳其里拉\"],[\"Kuruş\", \"库鲁\"],[\"Omani rial\", \"阿曼里亚尔|阿曼莱尔\"],[\"Panamanian balboa\", \"巴拿马巴波亚\"],[\"Centesimo\", \"意大利分|乌拉圭分|巴拿马分\"],[\"Papua New Guinean kina\", \"基那\"],[\"Toea\", \"托亚|托伊\"],[\"Peruvian sol\", \"秘鲁索尔\"],[\"Polish złoty\", \"波兰币|波兰兹罗提|兹罗提\"],[\"Grosz\", \"格罗希\"],[\"Qatari riyal\", \"卡达里亚尔\"],[\"Saudi riyal\", \"沙特里亚尔\"],[\"Riyal\", \"里亚尔|\"],[\"Dirham\", \"迪拉姆\"],[\"Halala\", \"哈拉\"],[\"Samoan tālā\", \"萨摩亚塔拉\"],[\"Sierra Leonean leone\", \"塞拉利昂利昂|利昂\"],[\"Peseta\", \"比塞塔|西班牙比塞塔|西班牙币\"],[\"Swazi lilangeni\", \"斯威士兰里兰吉尼|兰吉尼\"],[\"Tajikistani somoni\", \"塔吉克斯坦索莫尼\"],[\"Thai baht\", \"泰铢|泰元\"],[\"Satang\", \"萨当\"],[\"Tongan paʻanga\", \"汤加潘加|潘加\"],[\"Ukrainian hryvnia\", \"乌克兰格里夫纳|格里夫纳\"],[\"Vanuatu vatu\", \"瓦努阿图瓦图\"],[\"Vietnamese dong\", \"越南盾\"],[\"Indonesian rupiah\", \"印度尼西亚盾\"],[\"Netherlands guilder\", \"荷兰盾|荷属安的列斯盾|列斯盾\"],[\"Surinam florin\", \"苏里南盾\"],[\"Guilder\", \"盾\"],[\"Zambian kwacha\", \"赞比亚克瓦查\"],[\"Moroccan dirham\", \"摩洛哥迪拉姆\"],[\"United Arab Emirates dirham\", \"阿联酋迪拉姆\"],[\"Azerbaijani manat\", \"阿塞拜疆马纳特\"],[\"Turkmenistan manat\", \"土库曼马纳特\"],[\"Manat\", \"马纳特\"],[\"Somali shilling\", \"索马里先令|索马利先令\"],[\"Somaliland shilling\", \"索马里兰先令\"],[\"Tanzanian shilling\", \"坦桑尼亚先令\"],[\"Ugandan shilling\", \"乌干达先令\"],[\"Romanian leu\", \"罗马尼亚列伊\"],[\"Moldovan leu\", \"摩尔多瓦列伊\"],[\"Leu\", \"列伊\"],[\"Ban\", \"巴尼\"],[\"Nepalese rupee\", \"尼泊尔卢比\"],[\"Pakistani rupee\", \"巴基斯坦卢比\"],[\"Indian rupee\", \"印度卢比\"],[\"Seychellois rupee\", \"塞舌尔卢比\"],[\"Mauritian rupee\", \"毛里求斯卢比\"],[\"Maldivian rufiyaa\", \"马尔代夫卢比\"],[\"Sri Lankan rupee\", \"斯里兰卡卢比\"],[\"Rupee\", \"卢比\"],[\"Czech koruna\", \"捷克克朗\"],[\"Danish krone\", \"丹麦克朗|丹麦克郎\"],[\"Norwegian krone\", \"挪威克朗\"],[\"Faroese króna\", \"法罗克朗\"],[\"Icelandic króna\", \"冰岛克朗\"],[\"Swedish krona\", \"瑞典克朗\"],[\"Krone\", \"克朗\"],[\"Øre\", \"奥依拉|奥拉|埃利\"],[\"West African CFA franc\", \"非共体法郎\"],[\"Central African CFA franc\", \"中非法郎|中非金融合作法郎\"],[\"Comorian franc\", \"科摩罗法郎\"],[\"Congolese franc\", \"刚果法郎\"],[\"Burundian franc\", \"布隆迪法郎\"],[\"Djiboutian franc\", \"吉布提法郎\"],[\"CFP franc\", \"太平洋法郎\"],[\"Guinean franc\", \"几内亚法郎\"],[\"Swiss franc\", \"瑞士法郎\"],[\"Rwandan franc\", \"卢旺达法郎\"],[\"Belgian franc\", \"比利时法郎\"],[\"Rappen\", \"瑞士分|瑞士生丁\"],[\"Franc\", \"法郎\"],[\"Centime\", \"生丁|仙士\"],[\"Russian ruble\", \"俄国卢布|俄罗斯卢布\"],[\"Transnistrian ruble\", \"德涅斯特卢布\"],[\"Belarusian ruble\", \"白俄罗斯卢布\"],[\"Kopek\", \"戈比\"],[\"Ruble\", \"卢布\"],[\"Algerian dinar\", \"阿尔及利亚第纳尔\"],[\"Bahraini dinar\", \"巴林第纳尔\"],[\"Iraqi dinar\", \"伊拉克第纳尔|\"],[\"Jordanian dinar\", \"约旦第纳尔\"],[\"Kuwaiti dinar\", \"科威特第纳尔|科威特币\"],[\"Libyan dinar\", \"利比亚第纳尔\"],[\"Serbian dinar\", \"塞尔维亚第纳尔|塞尔维亚币\"],[\"Tunisian dinar\", \"突尼斯第纳尔\"],[\"Dinar\", \"第纳尔\"],[\"Fils\", \"费尔\"],[\"Para\", \"帕拉\"],[\"Millime\", \"米利姆\"],[\"Argentine peso\", \"阿根廷比索\"],[\"Chilean peso\", \"智利比索\"],[\"Colombian peso\", \"哥伦比亚比索\"],[\"Cuban peso\", \"古巴比索\"],[\"Dominican peso\", \"多米尼加比索\"],[\"Mexican peso\", \"墨西哥比索\"],[\"Philippine peso\", \"菲律宾比索\"],[\"Uruguayan peso\", \"乌拉圭比索\"],[\"Peso\", \"比索\"],[\"Centavo\", \"仙|菲辅币\"],[\"Alderney pound\", \"奥尔德尼镑\"],[\"British pound\", \"英镑\"],[\"Guernsey pound\", \"根西镑\"],[\"Saint Helena pound\", \"圣赫勒拿镑\"],[\"Egyptian pound\", \"埃及镑\"],[\"Falkland Islands pound\", \"福克兰镑\"],[\"Gibraltar pound\", \"直布罗陀镑\"],[\"Manx pound\", \"马恩岛镑\"],[\"Jersey pound\", \"泽西岛镑\"],[\"Lebanese pound\", \"黎巴嫩镑\"],[\"South Sudanese pound\", \"南苏丹镑\"],[\"Sudanese pound\", \"苏丹镑\"],[\"Syrian pound\", \"叙利亚镑\"],[\"Pound\", \"英镑\"],[\"Pence\", \"便士\"],[\"Shilling\", \"先令\"],[\"United States dollar\", \"美元|美金|美圆\"],[\"East Caribbean dollar\", \"东加勒比元\"],[\"Australian dollar\", \"澳大利亚元|澳元\"],[\"Bahamian dollar\", \"巴哈马元\"],[\"Barbadian dollar\", \"巴巴多斯元\"],[\"Belize dollar\", \"伯利兹元\"],[\"Bermudian dollar\", \"百慕大元\"],[\"Brunei dollar\", \"文莱元\"],[\"Singapore dollar\", \"新加坡元|新元\"],[\"Canadian dollar\", \"加元|加拿大元\"],[\"Cayman Islands dollar\", \"开曼岛元|\"],[\"New Zealand dollar\", \"新西兰元|纽元\"],[\"Cook Islands dollar\", \"库克群岛元\"],[\"Fijian dollar\", \"斐济元|斐币\"],[\"Guyanese dollar\", \"圭亚那元\"],[\"Hong Kong dollar\", \"蚊|港元|港圆|港币\"],[\"Macau Pataca\", \"澳元|澳门币|澳门元\"],[\"New Taiwan dollar\", \"箍|新台币|台币\"],[\"Jamaican dollar\", \"牙买加元\"],[\"Kiribati dollar\", \"吉里巴斯元\"],[\"Liberian dollar\", \"利比里亚元\"],[\"Namibian dollar\", \"纳米比亚元\"],[\"Surinamese dollar\", \"苏里南元\"],[\"Trinidad and Tobago dollar\", \"特立尼达多巴哥元\"],[\"Tuvaluan dollar\", \"吐瓦鲁元\"],[\"Chinese yuan\", \"人民币|人民币元|块钱|块|元|圆\"],[\"Fen\", \"分钱|分\"],[\"Jiao\", \"毛钱|毛|角钱|角\"],[\"Finnish markka\", \"芬兰马克\"],[\"Penni\", \"盆尼\"]]);\n\texport const CurrencyPrefixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Dollar\", \"$\"],[\"United States dollar\", \"us$\"],[\"British Virgin Islands dollar\", \"bvi$\"],[\"Brunei dollar\", \"b$\"],[\"Sen\", \"sen\"],[\"Singapore dollar\", \"s$\"],[\"Canadian dollar\", \"can$|c$|c $\"],[\"Cayman Islands dollar\", \"ci$\"],[\"New Zealand dollar\", \"nz$|nz $\"],[\"Guyanese dollar\", \"gy$|gy $|g$|g $\"],[\"Hong Kong dollar\", \"hk$|hkd|hk $\"],[\"Jamaican dollar\", \"j$\"],[\"Namibian dollar\", \"nad|n$|n $\"],[\"Solomon Islands dollar\", \"si$|si $\"],[\"New Taiwan dollar\", \"nt$|nt $\"],[\"Samoan tālā\", \"ws$\"],[\"Chinese yuan\", \"￥\"],[\"Japanese yen\", \"¥\"],[\"Turkish lira\", \"₺\"],[\"Euro\", \"€\"],[\"Pound\", \"£\"],[\"Costa Rican colón\", \"₡\"]]);\n\texport const CurrencyAmbiguousValues = [ '元','仙','分','圆','块','毛','盾','箍','蚊','角' ];\n\texport const DimensionSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Meter\", \"米|公尺\"],[\"Kilometer\", \"千米|公里\"],[\"Decimeter\", \"分米|公寸\"],[\"Centimeter\", \"釐米|厘米|公分\"],[\"Micrometer\", \"毫米|公釐\"],[\"Microns\", \"微米\"],[\"Picometer\", \"皮米\"],[\"Nanometer\", \"纳米\"],[\"Li\", \"里|市里\"],[\"Zhang\", \"丈\"],[\"Chi\", \"市尺|尺\"],[\"Cun\", \"市寸|寸\"],[\"Fen\", \"市分|分\"],[\"Hao\", \"毫\"],[\"Mile\", \"英里\"],[\"Inch\", \"英寸\"],[\"Foot\", \"呎|英尺\"],[\"Yard\", \"码\"],[\"Knot\", \"海里\"],[\"Light year\", \"光年\"],[\"Meter per second\", \"米每秒|米/秒\"],[\"Kilometer per hour\", \"公里每小时|千米每小时|公里/小时|千米/小时\"],[\"Kilometer per minute\", \"公里每分钟|千米每分钟|公里/分钟|千米/分钟\"],[\"Kilometer per second\", \"公里每秒|千米每秒|公里/秒|千米/秒\"],[\"Mile per hour\", \"英里每小时|英里/小时\"],[\"Foot per second\", \"英尺每小时|英尺/小时\"],[\"Foot per minute\", \"英尺每分钟|英尺/分钟\"],[\"Yard per minute\", \"码每分|码/分\"],[\"Yard per second\", \"码每秒|码/秒\"],[\"Square centimetre\", \"平方厘米\"],[\"Square decimeter\", \"平方分米\"],[\"Square meter\", \"平方米\"],[\"Square kilometer\", \"平方公里\"],[\"Acre\", \"英亩|公亩\"],[\"Hectare\", \"公顷\"],[\"Mu\", \"亩|市亩\"],[\"Liter\", \"公升|升\"],[\"Milliliter\", \"毫升\"],[\"Cubic meter\", \"立方米\"],[\"Cubic decimeter\", \"立方分米\"],[\"Cubic millimeter\", \"立方毫米\"],[\"Cubic feet\", \"立方英尺\"],[\"Gallon\", \"加仑\"],[\"Pint\", \"品脱\"],[\"Dou\", \"市斗|斗\"],[\"Dan\", \"市石|石\"],[\"Kilogram\", \"千克|公斤\"],[\"Jin\", \"市斤|斤\"],[\"Milligram\", \"毫克\"],[\"Barrel\", \"桶\"],[\"Pot\", \"罐\"],[\"Gram\", \"克\"],[\"Ton\", \"公吨|吨\"],[\"Pound\", \"磅\"],[\"Ounce\", \"盎司\"],[\"Bit\", \"比特|位\"],[\"Byte\", \"字节\"],[\"Kilobyte\", \"千字节\"],[\"Megabyte\", \"兆字节\"],[\"Gigabyte\", \"十亿字节|千兆字节\"],[\"Terabyte\", \"万亿字节|兆兆字节\"],[\"Petabyte\", \"千兆兆|千万亿字节\"]]);\n\texport const DimensionAmbiguousValues = [ '丈','位','克','分','升','寸','尺','斗','斤','桶','毫','石','码','磅','米','罐','里' ];\n\texport const TemperatureSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"F\", \"华氏温度|华氏度\"],[\"K\", \"k|开尔文温度|开氏度|凯氏度\"],[\"R\", \"兰氏温度\"],[\"C\", \"摄氏温度|摄氏度\"],[\"Degree\", \"度\"]]);\n\texport const TemperaturePrefixList: ReadonlyMap<string, string> = new Map<string, string>([[\"F\", \"华氏温度|华氏\"],[\"K\", \"开氏温度|开氏\"],[\"R\", \"兰氏温度|兰氏\"],[\"C\", \"摄氏温度|摄氏\"]]);\n\texport const TemperatureAmbiguousValues = [ '度' ];\n}\n","import { IExtractor, IParser } from \"recognizers-text\";\nimport { Culture, CultureInfo, NumberMode, AgnosticNumberParserFactory, AgnosticNumberParserType, ChineseNumberExtractor, ChineseNumberParserConfiguration, ChineseNumberMode } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { INumberWithUnitExtractorConfiguration } from \"../extractors\";\nimport { BaseNumberWithUnitParserConfiguration } from \"../parsers\";\nimport { ChineseNumericWithUnit } from \"../../resources/chineseNumericWithUnit\";\n\nexport abstract class ChineseNumberWithUnitExtractorConfiguration implements INumberWithUnitExtractorConfiguration {\n    abstract readonly suffixList: ReadonlyMap<string, string>;\n    abstract readonly prefixList: ReadonlyMap<string, string>;\n    abstract readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly abstract extractType: string;\n\n    readonly cultureInfo: CultureInfo;\n    readonly unitNumExtractor: IExtractor;\n    readonly buildPrefix: string;\n    readonly buildSuffix: string;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        this.cultureInfo = ci;\n        this.unitNumExtractor = new ChineseNumberExtractor(ChineseNumberMode.ExtractAll);\n\n        this.buildPrefix = ChineseNumericWithUnit.BuildPrefix;\n        this.buildSuffix = ChineseNumericWithUnit.BuildSuffix;\n        this.connectorToken = ChineseNumericWithUnit.ConnectorToken;\n    }\n}\n\nexport class ChineseNumberWithUnitParserConfiguration extends BaseNumberWithUnitParserConfiguration {\n    readonly internalNumberParser: IParser;\n    readonly internalNumberExtractor: IExtractor;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        super(ci);\n\n        this.internalNumberExtractor = new ChineseNumberExtractor(ChineseNumberMode.Default);\n        this.internalNumberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new ChineseNumberParserConfiguration());\n        this.connectorToken = '';\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { ChineseNumberWithUnitExtractorConfiguration, ChineseNumberWithUnitParserConfiguration } from \"./base\";\nimport { ChineseNumericWithUnit } from \"../../resources/chineseNumericWithUnit\";\n\nexport class ChineseCurrencyExtractorConfiguration extends ChineseNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_CURRENCY;\n\n        // Reference Source: https:// en.wikipedia.org/wiki/List_of_circulating_currencies\n        this.suffixList = ChineseNumericWithUnit.CurrencySuffixList;\n        this.prefixList = ChineseNumericWithUnit.CurrencyPrefixList;\n        this.ambiguousUnitList = ChineseNumericWithUnit.CurrencyAmbiguousValues;;\n    }\n}\n\nexport class ChineseCurrencyParserConfiguration extends ChineseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(ChineseNumericWithUnit.CurrencySuffixList);\n        this.BindDictionary(ChineseNumericWithUnit.CurrencyPrefixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { ChineseNumberWithUnitExtractorConfiguration, ChineseNumberWithUnitParserConfiguration } from \"./base\";\nimport { ChineseNumericWithUnit } from \"../../resources/chineseNumericWithUnit\";\n\nexport class ChineseTemperatureExtractorConfiguration extends ChineseNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_TEMPERATURE;\n\n        this.suffixList = ChineseNumericWithUnit.TemperatureSuffixList;\n        this.prefixList = ChineseNumericWithUnit.TemperaturePrefixList;\n        this.ambiguousUnitList = ChineseNumericWithUnit.TemperatureAmbiguousValues;\n    }\n}\n\nexport class ChineseTemperatureParserConfiguration extends ChineseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(ChineseNumericWithUnit.TemperaturePrefixList);\n        this.BindDictionary(ChineseNumericWithUnit.TemperatureSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { ChineseNumberWithUnitExtractorConfiguration, ChineseNumberWithUnitParserConfiguration } from \"./base\";\nimport { ChineseNumericWithUnit } from \"../../resources/chineseNumericWithUnit\";\n\nexport class ChineseDimensionExtractorConfiguration extends ChineseNumberWithUnitExtractorConfiguration {\n\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_DIMENSION;\n\n        this.suffixList = ChineseNumericWithUnit.DimensionSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = ChineseNumericWithUnit.DimensionAmbiguousValues;\n    }\n}\n\nexport class ChineseDimensionParserConfiguration extends ChineseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(ChineseNumericWithUnit.DimensionSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { ChineseNumberWithUnitExtractorConfiguration, ChineseNumberWithUnitParserConfiguration } from \"./base\";\nimport { ChineseNumericWithUnit } from \"../../resources/chineseNumericWithUnit\";\n\nexport class ChineseAgeExtractorConfiguration extends ChineseNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_AGE;\n\n        this.suffixList = ChineseNumericWithUnit.AgeSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = ChineseNumericWithUnit.AgeAmbiguousValues;\n    }\n}\n\nexport class ChineseAgeParserConfiguration extends ChineseNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.Chinese);\n        }\n\n        super(ci);\n\n        this.BindDictionary(ChineseNumericWithUnit.AgeSuffixList);\n    }\n}","// ------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n// ------------------------------------------------------------------------------\n\nimport { BaseNumbers } from \"./baseNumbers\";\nexport namespace FrenchNumericWithUnit {\n\texport const AgeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Ans\", \"ans\"],[\"Mois\", \"mois d'âge|mois d'age|mois\"],[\"Semaines\", \"semaine|semaines|semaines d'âge|semaines d'age\"],[\"Jour\", \"jours|jour\"]]);\n\texport const AreaSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilomètre carré\", \"km2|km^2|km²|kilomètres carrés|kilomètre carré\"],[\"Hectomètre carré\", \"hm2|hm^2|hm²|hectomètre carré|hectomètres carrés\"],[\"Décamètre carré\", \"dam2|dam^2|dam²|décamètre carré|décamètres carrés\"],[\"Mètre carré\", \"m2|m^2|m²|mètre carré|mètres carrés\"],[\"Décimètre carré\", \"dm2|dm^2|dm²|décimètre carré|décimètres carrés\"],[\"Centimètre carré\", \"cm2|cm^2|cm²|centimètre carré|centimètres carrés\"],[\"Millimètre carré\", \"mm2|mm^2|mm²|millimètre carré|millimètres carrés\"],[\"Pouce carré\", \"pouces2|po2|pouce carré|pouces carrés|in^2|in²|in2\"],[\"Pied carré\", \"pied carré|pieds carrés|pi2|pi^2|pi²\"],[\"Mile carré\", \"mile carré|miles carrés|mi2|mi^2|mi²\"],[\"Acre\", \"acre|acres\"]]);\n\texport const CurrencySuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Abkhazie apsar\", \"abkhazie apsar|apsars\"],[\"Afghan afghani\", \"afghan afghani|؋|afn|afghanis|afghani\"],[\"Pul\", \"pul\"],[\"Euro\", \"euros|euro|€|eur|d'euros\"],[\"Cent\", \"cents|cent|-cents|-cent|sen\"],[\"lek Albanais\", \"lek albanais|leks|lek\"],[\"Qindarkë\", \"qindarkë|qindarkës|qindarke|qindarkes\"],[\"Kwanza angolais\", \"kwanza angolais|kz|aoa|kwanza|kwanzas\"],[\"Dram arménien\", \"dram arménien|drams arméniens\"],[\"Florins d'Aruba\", \"florins aruba|ƒ|awg\"],[\"Bangladeshi taka\", \"bangladeshi taka|৳|bdt|taka|takas|bangladeshi takas\"],[\"Paisa\", \"poisha|paisa\"],[\"Ngultrum bhoutanais\", \"ngultrum bhoutanais|nu.|btn\"],[\"Chetrum\", \"chetrums|chetrum\"],[\"Boliviano bolivien\", \"boliviano bolivien|bolivianos bolivien|bolivianos bolivie|boliviano bolivie|bob|bs.\"],[\"Bosnie-Herzégovine mark convertible\", \"bosnie-herzégovine mark convertible|bosnie-et-herzégovine mark convertible|bam\"],[\"Fening\", \"fening|fenings\"],[\"Pula\", \"pula|bwp\"],[\"Thebe\", \"thebe\"],[\"Réal brésilien\", \"réal brésilien|réals brésilien|r$|brl|real bresil|reals bresilien\"],[\"Lev bulgare\", \"lev bulgare|levs bulgare|lv|bgn\"],[\"Stotinki búlgaro\", \"stotinki bulgare\"],[\"Riel cambodgien\", \"riel cambodgien|khr|៛\"],[\"Escudo du cap-vert\", \"escudo cap-verdien|cve\"],[\"Colon du costa rica\", \"colon du costa rica|colons du costa rica|crc|₡\"],[\"Colon du salvador\", \"colon du salvador|colons du salvador|svc\"],[\"Kuna croate\", \"kuna croate|kunas croate|kn|hrk\"],[\"Lipa\", \"lipa\"],[\"Couronne tchèque\", \"couronne tchèque|couronnes tchèque|czk|Kč\"],[\"Haléř\", \"haléř\"],[\"Nakfas érythréens\", \"nakfas érythréens|nfk|ern|nakfa érythréens\"],[\"Birr éthiopien\", \"birr éthiopien|birrs éthiopien|etb\"],[\"Dalasi gambienne\", \"gmd\"],[\"Butut\", \"bututs|butut\"],[\"Lari géorgien\", \"lari géorgie|lari géorgiens|gel|₾\"],[\"Tetri géorgien\", \"tetri géorgie|tetris géorgiens\"],[\"Cedi\", \"cedi|ghs|cedi ghanéen|gh₵\"],[\"Pesewa\", \"pesewa|pesewas\"],[\"Quetzal guatémaltèque\", \"quetzal guatémaltèque|gtq|quetzal|quetzales\"],[\"Gourdes haïtiennes\", \"gourdes haïtiennes|gourdes|htg|gourde haïtienne\"],[\"Lempira hondurien\", \"lempira hondurien|hnl\"],[\"Forint hongrois\", \"forint hongrois|huf|fg|forints hongrois\"],[\"Fillér\", \"fillér\"],[\"Rial iranien\", \"rial iranien|irr|rials iranien|rials iraniens\"],[\"Litas lituanien\", \"litas lituanien|ltl|lit lithuanien|litas lithuanie\"],[\"Yen Japonais\", \"yen japonais|yen japon|yens|jpy|yen|¥|-yen\"],[\"Tenge kazakh\", \"tenge kazakh|kzt\"],[\"Shilling kényan\", \"shilling kényan|sh|kes|shillings kényans\"],[\"Won coréen\", \"won coréen|won coréens|₩\"],[\"Won sud-coréen\", \"won sud-coréen|won sud coréen|won sud-coréens|krw\"],[\"Corée du nord won\", \"corée du nord won|corée nord won|kpw\"],[\"Som Kirghizie\", \"som kirghizie|kgs\"],[\"Sum Ouzbékistan\", \"sum ouzbékistan|sum ouzbeks|sum ouzbéks|uzs\"],[\"Kip laotien\", \"kip laotien|lak|₭n|₭\"],[\"Att\", \"att\"],[\"Loti\", \"loti|maloti|lsl\"],[\"Sente\", \"sente|lisente\"],[\"Rand sud-africain\", \"rand sud-africain|zar\"],[\"Pataca macanais\", \"pataca macanais|mop$|mop\"],[\"Avo\", \"avos|avo\"],[\"Dinar macédonien\", \"dinar macédonien|mkd|ден\"],[\"Deni\", \"deni\"],[\"Ariary malagache\", \"ariary malagache|mga\"],[\"Iraimbilanja\", \"Iraimbilanja\"],[\"Kwacha malawien\", \"kwacha malawien|mk|mwk\"],[\"Tambala\", \"Tambala\"],[\"Ringitt malaisien\", \"ringitt malaisien|rm|myr|ringitts malaisien\"],[\"Ouguiya mauritanienne\", \"ouguiya|um|mro|ouguiya mauritanien|ouguiya mauritanienne\"],[\"Khoums\", \"khoums\"],[\"Togrogs mongoles\", \"togrogs mongoles|togrogs|tugriks|tögrög|mnt|₮|tögrög mongoles|tögrög mongolie|togrogs mongolie\"],[\"Metical mozambique\", \"metical du mozambique|metical mozambique|mt|mzn|meticals mozambique\"],[\"Kyat birmanie\", \"kyat birmanie|ks|mmk\"],[\"Pya\", \"pya\"],[\"Cordoba nicaraguayen\", \"cordoba nicaraguayen|córdoba nicaraguayen|nio|córdoba oro|cordoba oro nicaraguayen\"],[\"Naira nigérians\", \"naira nigérians|naira|ngm|₦|nairas nigérians\"],[\"Livre turque\", \"livre turque|try|tl|livre turques\"],[\"Kuruş\", \"kuruş\"],[\"Rials omanais\", \"rials omanais|omr|ر.ع.|rial omanais\"],[\"Balboa panaméennes\", \"balboa panaméennes|balboa|pab\"],[\"Kina\", \"kina|pkg|pgk\"],[\"Toea\", \"toea\"],[\"Guaraní paraguayen\", \"guaraní paraguayen|₲|pyg\"],[\"Sol péruvien\", \"nuevo sol péruvien|soles|sol|sol péruvien\"],[\"Złoty polonais\", \"złoty polonais|złoty|zł|pln|zloty|zloty polonais\"],[\"Groxz\", \"groszy|grosz|grosze\"],[\"Riyal qatari\", \"riyal qatari|qar|riyals qatari\"],[\"Riayl saudi\", \"riyal saudi|sar|riyals saudi\"],[\"Riyal\", \"riyal|riyals|rial|﷼\"],[\"Dirham\", \"dirham|dirhem|dirhm\"],[\"Halala\", \"halalas|halala\"],[\"Tala\", \"tala|tālā|ws$|sat|wst\"],[\"Sene\", \"sene\"],[\"Dobra\", \"dobra|db|std\"],[\"Leone\", \"leone|sll\"],[\"Florins Néerlandais\", \"florins hollandais|florins néerlandais|florins|ang|ƒ|florin|fl |\"],[\"Lilangeni\", \"lilangeni|szl\"],[\"Somoni tadjikistan\", \"somoni tadjikistan|tjs|somoni\"],[\"Diram\", \"dirams|diram\"],[\"Baht thaïlandais\", \"baht thaïlandais|baht thailandais|baht thaï|baht thai|baht|฿|thb\"],[\"Satang\", \"satang|satangs\"],[\"Paʻanga\", \"paʻanga|pa'anga|top\"],[\"Hryvnia ukrainien\", \"hryvnia ukrainien|hyrvnia|uah|₴|hryvnias ukrainien|hryvnia ukrainienne\"],[\"Vanuatu vatu\", \"vanuatu vatu|vatu|vuv\"],[\"Bolívar vénézuélien\", \"bolívar vénézuélien|bolivar venezuelien|bs.f.|vef|bolívars vénézuélien|bolivars venezuelien\"],[\"Dong vietnamien\", \"dong vietnamien|dongs vietnamiens|dong|đồng|vnd|dông|dông vietnamiens\"],[\"Kwacha de Zambie\", \"kwacha de zambie|zk|zmw|kwachas\"],[\"Dirham marocain\", \"dirham marocain|mad|د.م.\"],[\"Dirham des Émirats arabes unis\", \"dirham des Émirats arabes unis|د.إ|aed\"],[\"Manat azerbaïdjanais\", \"manat azerbaïdjanais|manat azerbaidjanais|azn\"],[\"Manat turkmène\", \"manat turkmène|tmt|manat turkmene\"],[\"Manat\", \"manats|manat\"],[\"Qəpik\", \"qəpik\"],[\"Shilling somalien\", \"shilling somalien|shillings somalien|sos\"],[\"Shilling tanzanien\", \"shilling tanzanien|shillings tanzanien|tzs|tsh|shilling tanzanienne|shillings tanzanienne\"],[\"Shilling ougandais\", \"shilling ougandais|shillings ougandais|sh|ugx\"],[\"Leu roumain\", \"leu roumain|lei|leu roumaine|ron\"],[\"Leu moldave\", \"leu meoldave|mdl\"],[\"Leu\", \"leu\"],[\"Ban\", \"bani|-ban|ban\"],[\"Roupie népalaise\", \"roupie népalaise|roupie nepalaise|npr\"],[\"Roupie pakistanaise\", \"roupie pakistanaise|pkr\"],[\"Roupie indienne\", \"roupie indienne|inr|roupie indien|inr|₹\"],[\"Roupie seychelloise\", \"roupie seychelloise|scr|sr|sre\"],[\"Roupie mauricienne\", \"roupie mauricienne|mur\"],[\"Rufiyaa maldives\", \"rufiyaa maldives|mvr|.ރ|rf\"],[\"Roupie srilankaise\", \"roupie srilankaise|lrk|රු|ரூ\"],[\"Rupiah Indonésie\", \"rupia indonésie|rupia indonesie|rupiah|rp|idr\"],[\"Roupie\", \"roupie\"],[\"Couronne danoise\", \"couronne danoise|dkk|couronnes danoise|couronne danemark|couronnes danemark\"],[\"Couronne norvégienne\", \"couronne norvégienne|couronne norvegienne|couronnes norvégienne|couronnes norvegienne|nok\"],[\"Couronne féroïenne\", \"couronne féroïenne|couronne feroienne\"],[\"Couronne suédoise\", \"couronne suédoise|couronne suéde|sek|couronnes suédoise|couronne suedoise\"],[\"Couronne\", \"couronne|couronnes\"],[\"Øre\", \"Øre|oyra|eyrir\"],[\"Franc CFA de l'Afrique de l'Ouest\", \"franc cfa de l''afrique de l''ouest|franc cfa ouest africain|franc cfa|francs cfa|fcfa|frs cfa|cfa francs|xof\"],[\"Franc CFA d'Afrique centrale\", \"franc cfa d''afrique centrale|franc cfa centrale|frs cfa centrale|xaf\"],[\"Franc comorien\", \"franc comorien|kmf\"],[\"Franc congolais\", \"franc congolais|cdf\"],[\"Franc burundais\", \"franc burundais|bif\"],[\"Franc djiboutienne\", \"franc djiboutienne|djf\"],[\"Franc CFP\", \"franc cfp|xpf\"],[\"Franc guinéen\", \"franc guinéen|gnf\"],[\"Franc Suisse\", \"franc suisse|chf|sfr.|francs suisses\"],[\"Franc rwandais\", \"franc rwandais|rwf|rw|r₣|frw\"],[\"Franc belge\", \"franc belge|bi.|b.fr.|bef\"],[\"Rappen\", \"rappen|-rappen\"],[\"Franc\", \"francs|franc|fr.|fs\"],[\"Centimes\", \"centimes|centime|santim\"],[\"Rouble russe\", \"rouble russe|rub|₽|₽ russe|roubles russe|roubles russes|₽ russes\"],[\"Nouveau rouble biélorusse\", \"nouveau rouble biélorusse|byn|nouveau roubles biélorusse|nouveau rouble bielorusse|nouveau roubles biélorusse\"],[\"Rouble transnistriens\", \"rouble transnistriens|prb\"],[\"Rouble biélorusses\", \"rouble biélorusses|roubles biélorusses|rouble bielorusses|roubles bielorusses\"],[\"Kopek\", \"kopek|kopeks\"],[\"Kapyeyka\", \"kapyeyka\"],[\"Rouble\", \"roubles|rouble|br\"],[\"Dinar algérien\", \"dinar algérien|د.ج|dzd|dinars algérien|dinar algerien|dinars algerien\"],[\"Dinar de bahreïn\", \"dinar de bahreïn|bhd|.د.ب|dinar de bahrein\"],[\"Santeem\", \"santeem|santeems\"],[\"Dinar iraquien\", \"dinar iraquien|dinars iraquien|iqd|ع.د|dinar iraquienne|dinars iraquienne\"],[\"Dinar jordanien\", \"dinar jordanien|dinars jordanien|د.ا|jod\"],[\"Dinar koweïtien\", \"dinar koweïtien|dinar koweitien|dinars koweïtien|kwd|د.ك\"],[\"Dinar libyen\", \"dinar libyen|dinars libyen|lyd\"],[\"Dinar serbe\", \"dinar serbe|dinars serbe|rsd|дин.\"],[\"Dinar tunisien\", \"dinar tunisien|dinars tunisien|tnd\"],[\"Dinar yougoslave\", \"dinar yougoslave|dinars yougoslave|yun\"],[\"Dinar\", \"dinars|dinar|denar|-dinars|-dinar\"],[\"Fils\", \"fils|fulūs|-fils|-fil\"],[\"Para\", \"para|napa\"],[\"Millime\", \"millimes|millime\"],[\"Peso argentin\", \"peso argentin|ars|pesos argentin|peso argentine|pesos argentine\"],[\"Peso chilien\", \"peso chilien|pesos chilien|clp\"],[\"Peso colombien\", \"peso colombien|pesos colombien|cop|peso colombie|pesos colombien\"],[\"Peso cubains convertibles\", \"peso cubains convertibles|pesos cubains convertibles|cuc\"],[\"Peso cubains\", \"peso cubaines|pesos cubaines|peso cubaine|pesos cubaines|cup\"],[\"Peso dominicain\", \"peso dominicain|pesos dominicain|dop|peso dominicaine|pesos dominicaine\"],[\"Peso philippin\", \"peso philippin|pesos philippin|piso|₱|php\"],[\"Peso uruguayen\", \"peso uruguayen|pesos uruguayen|uyu\"],[\"Peso\", \"pesos|Peso\"],[\"Centavo\", \"centavos|Centavo\"],[\"Livre britannique\", \"livre britannique|livres britannique|gbp|£ britannique\"],[\"Livre guernesey\", \"livre guernesey|£ guernesey|ggp\"],[\"Livre ascension\", \"livre ascension|livres ascension|£ ascension\"],[\"Livre sainte-hélène\", \"livre de sainte-hélène|livre sainte-hélène|livre sainte-helene|livre de sainte hélène|shp\"],[\"Livre égyptienne\", \"livre égyptienne|livre egyptienne|egp|ج.م\"],[\"Livre des îles falkland\", \"livre des îles falkland|livre des iles falkland|fkp|£ iles falkland\"],[\"Livre gibraltar\", \"livre gibraltar|livre de gibraltar|£ gibraltar|gip\"],[\"Livre manx\", \"imp|livre manx|£ manx\"],[\"Livre jersey\", \"livre de jersey|livre jersey|jep|£ jersey\"],[\"Livre libanaise\", \"livre libanaise|£ libanaise|livres libanaise|lbp|ل.ل\"],[\"Livre des îles malouines\", \"livre des îles malouines|livre des iles malouines|£ iles malouines\"],[\"Livre sud-soudanaise\", \"livre sud-soudanaise|livre sud soudanaise|livre du soudan du sud|livres sud-soudanaises|livre sud soudan|livre soudan sud\"],[\"Livre soudanaise\", \"livre soudanaise|livres soudanaise|sdg|£ soudan|ج.س.|livre soudan|livres soudan\"],[\"Livre syrienne\", \"livre syrienne|ل.س|syp|livre syrie|livres syrie|£ syrie\"],[\"Livre\", \"livre|livres|-livre|-livres|£\"],[\"Pence\", \"pence\"],[\"Shilling\", \"shilling|shillings\"],[\"Penny\", \"penny|sou|centime\"],[\"Dollar Américain\", \"dollar américain|$ américain|$ americain|usd|$usd|$ usd|dollar americain|dollar États-Unis|dollar des États-Unis|dollar États Unis|dollar etats unis|dollar etats-unis|$ etats-unis|$ États-Unis\"],[\"Dollar des Caraïbes orientales\", \"dollar des caraïbes orientales|dollar des caraibes orientales|xcd|$ caraibes orientales|$ caraïbes orientales\"],[\"Dollar Australien\", \"dollar australien|dollars australiens|$ australien|aud|$australien|australien $|$ australie|dollar australie\"],[\"Dollar des bahamas\", \"dollar des bahamas|dollar bahamas|$ bahamas|bsd|bahama $|dollar bahama|$ bahamas\"],[\"Dollar bermudes\", \"dollar des bermudes|dollar bermude|dollar bermudes|$ bermudes|bmd\"],[\"Dollar belize\", \"dollar de Belize|dollar belizien|bzd|$ belize\"],[\"Dollar îles Vierges britanniques\", \"dollar îles vierges britanniques|dollar iles vierges britanniques|$ iles vierges britanniques\"],[\"Dollar brunei\", \"dollar de brunei|$ brunei|bnd|dollar brunei\"],[\"Sen\", \"sen\"],[\"Dollar singapour\", \"dollar de singapour|dollar singapour|$ sinapour|sgd|$s\"],[\"Dollar Canadien\", \"dollar canadien|dollars canadien|$ canadien|cad|$can|$c|$ c|dollar canada|dollar canadienne|$ canada|$cad|cad$\"],[\"Dollar iles caimanes\", \"dollars des îles caïmanes|dollar des îles caïmanes|dollars des iles caimanes|dollar iles caimanes|kyd|$ci\"],[\"Dollar néo-zélandais\", \"dollar néo-zélandais|dollar néo zélandais|dollar neo-zelandais|dollar neo zelandais|$nz|$ néo-zélandais|$ neo zelandais\"],[\"Dollar îles cook\", \"dollar îles cook|dollar iles cook|$ iles cook\"],[\"Dollar des fidji\", \"dollar des fidji|$ fidji|dollar fidji|dollar de fidji|dollars des fidji|dollars de fidji\"],[\"Dollar guyanien\", \"dollar guyanien|dollar du guyana|dollar dre guyana|$ guayana|gyd|$gy\"],[\"Dollar de Hong Kong\", \"dollar hong kong|dollar hongkong|dollar de hong kong|dollar de hongkong|$hk|$ hk|hkd|hk $|hk$|dollar hk|$hongkong|dollars hongkong|dollars hong kong\"],[\"Dollar jamaïcain\", \"dollar jamaïcain|dollars jamaïcain|dollar jamaicain|dollars jamaicain|$j|$ jamaïque|dollar jamaïque|jmd\"],[\"Dollar libérien\", \"dollar libérien|dollars libérien|dollar liberien|dollars liberien|lrd|$ libérien|$ liberia|$ liberien\"],[\"Dollar namibien\", \"dollar namibien|dollars namibien|$ namibien|nad|$n|dollar namibie|dollars namibie|$ namibie\"],[\"Dollar des îles salomon\", \"dollar des îles Salomon|dollar des iles salomon|$si|sbd|$ iles salomon|$ îles salomon\"],[\"Dollar du suriname\", \"dollar du suriname|srd|$ du suriname|$ suriname|dollar suriname|dollars suriname|dollars du suriname\"],[\"Nouveau dollar de Taïwan\", \"nouveau dollar de taïwan|nouveau dollar de taiwan|twd|ntd|$nt\"],[\"Dollar trinidadien\", \"dollar trinidadien|dollars trinidadien|ttd|$ trinidadien\"],[\"Dollar\", \"dollar|$|dollars\"],[\"Yuan Chinois\", \"yuan|yuans|yuan chinois|renminbi|cny|rmb|￥\"],[\"Fen\", \"fen\"],[\"Jiao\", \"jiao\"],[\"Mark Finlandais\", \"marks finlandais|mark finlandais|fim|mark\"]]);\n\texport const CurrencyPrefixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Dollar\", \"$\"],[\"Dollar États-Unis\", \"$us|usd|us$\"],[\"Dollar Caraïbes orientales\", \"xcd|$ec\"],[\"Dollar australien\", \"a$|$a|aud\"],[\"Dollar bahamas\", \"bsd|b$\"],[\"Dollar barbadien\", \"bbd|bds$\"],[\"Dollar de belize\", \"bz$|bzd\"],[\"Dollar des bermudes\", \"bd$|bmd\"],[\"Dollar de brunei\", \"brunei $|bnd\"],[\"Dollar de Singapour\", \"s$|sgd\"],[\"Dollar Canadien\", \"cad|$ ca|$ca|$ c\"],[\"Dollar des îles Caïmans\", \"ci$|kyd\"],[\"Dollar néo-zélandais\", \"nz$|nzd\"],[\"Dollar de Fidji\", \"$fj|fjd\"],[\"Dolar guyanien\", \"g$|gyd\"],[\"Dollar de Hong Kong\", \"hkd|hk$\"],[\"Dollar jamaïcain\", \"j$|jmd\"],[\"Dollar libérien\", \"lrd|l$\"],[\"Dollar namibien\", \"nad|n$\"],[\"Dollar des îles Salomon\", \"$ si|$si|sbd\"],[\"Nouveau dollar de Taïwan\", \"nt$|twd\"],[\"Réal brésilien\", \"r$|brl|reais\"],[\"Guaraní paraguayen\", \"₲|gs.|pyg\"],[\"Dollar trinidadien\", \"ttd|titis\"],[\"Yuan renminbi\", \"cny|rmb|¥|元\"],[\"Yen\", \"¥|jpy\"],[\"Euro\", \"€|eur\"],[\"Pound\", \"£\"],[\"Florín\", \"ƒ\"],[\"Livre\", \"£|gbp\"]]);\n\texport const AmbiguousCurrencyUnitList = [ 'din.','kina','lari','taka','tala','vatu','yuan','bob','btn','cop','cup','dop','gip','jod','kgs','lak','mga','mop','nad','omr','sar','sbd','scr','sdg','sek','sos','std','try','yer' ];\n\texport const InformationSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Bit\", \"-bit|bit|bits\"],[\"Kilobit\", \"kilobit|kilobits|kb|kbit|kbits\"],[\"Megabit\", \"megabit|megabits|Mb|Mbit|mégabit|mégabits\"],[\"Gigabit\", \"gigabit|gigabits|Gb|Gbit\"],[\"Terabit\", \"terabit|terabits|Tb|Tbit|térabit|térabits\"],[\"Petabit\", \"petabit|petabits|Pb|Pbit|pétabit|pétabits\"],[\"octet\", \"octet|octets|-octet\"],[\"Kilooctet\", \"kilo-octet|kilo-octets|kilooctet|kilooctets|ko|kio|kB|KiB|kilobyte|kilobytes\"],[\"Mégaoctet\", \"mégaoctet|mégaoctets|méga-octet|méga-octets|Mo|Mio|MB|mégabyte|mégabytes\"],[\"Gigaoctet\", \"gigaoctet|gigaoctets|Go|Gio|GB|GiB|gigabyte|gigabytes\"],[\"Téraoctet\", \"téraoctet|téraoctets|To|Tio|TB|TiB|térabyte|térabytes\"],[\"Pétaoctet\", \"pétaoctet|pétaoctets|Po|Pio|PB|PiB|pétabyte|pétabytes\"]]);\n\texport const AmbiguousDimensionUnitList = [ 'mi','barils','grain','l','pierre','fps','pts' ];\n\texport const BuildPrefix = `(?<=(\\\\s|^|\\\\P{L}))`;\n\texport const BuildSuffix = `(?=(\\\\s|\\\\P{L}|$))`;\n\texport const ConnectorToken = 'de';\n\texport const LengthSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilomètres\", \"km|kilomètres|kilomètre|kilometres|kilometre|-km\"],[\"Hectomètre\", \"hm|hectomètre|hectomètres|hectometre|hectometres|-hm\"],[\"Décamètre\", \"dam|décamètre|décamètres|decametre|decametres|-dm\"],[\"Mètres\", \"m|mètres|mètre|metres|metre|m.|-m\"],[\"Décimètres\", \"dm|décimètres|décimètre|decimetres|decimetre\"],[\"Centimètres\", \"cm|centimètres|centimètre|centimetres|centimetre\"],[\"Millimètres\", \"mm|millimètres|millimètre|millimetre|millimetres\"],[\"Micromètres\", \"µm|um|micromètres|micromètre|micrometres|micrometre\"],[\"Nanomètres\", \"nm|nanometre|nanometres|nanomètres|nanomètre\"],[\"Picomètres\", \"pm|picomètre|picomètres|picometres|picometre\"],[\"Mile\", \"mi|mile|miles\"],[\"Pied\", \"pied|pieds\"],[\"Yard\", \"yards|yard|yd\"],[\"Pouce\", \"pouce|pouces\"]]);\n\texport const AmbiguousLengthUnitList = [ 'm','yard','yards','pm','pt','pts' ];\n\texport const AmbuguousLengthUnitList = [ 'm','pouce','pm' ];\n\texport const SpeedSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Mètre par seconde\", \"m/s|metres/seconde|metres par seconde|metre par seconde|metres par secondes|mètre par seconde|mètres par seconde|mètres par secondes\"],[\"Kilomètre par heure\", \"km/h|kilomètre par heure|kilomètres par heure|kilomètres par heures|kilometres par heure|kilometre par heure\"],[\"Kilomètre par minute\", \"km/m|kilomètre par minute|kilomètres par minute|kilomètres par minutes|kilometre par minute|kilometre par minutes\"],[\"Kilomètre par seconde\", \"km/s|km à la seconde|km a la seconde|kilomètre par seconde|kilomètres par seconde|kilometre par seconde|kilometres par seconde\"],[\"Miles par heure\", \"mph|miles par heure|miles à l'heure|miles a l'heure|miles un heure\"],[\"Noeuds\", \"noeud|noeuds|nuds\"],[\"Pied par seconde\", \"ft/s|pied par seconde|pieds par seconde|pied/s|pieds/s\"],[\"Pied par minute\", \"pieds/minute|pied/minute|ft/minute|ft/min|pied/min\"]]);\n\texport const TemperatureSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kelvin\", \"k|K|kelvin\"],[\"F\", \"°f|degres f|degrés f|deg f|° f|degrés fahrenheit|degres fahrenheit|fahrenheit\"],[\"R\", \"rankine|°r|° r\"],[\"C\", \"°c|deg c|degrés celsius|degrés c|degres celsius|celsius|deg celsius|degs celsius|centigrade|deg centigrade|degs centigrade|degrés centigrade|degres centigrade|degré centigrade|degre centigrade\"],[\"Degré\", \"degrés|degres|deg.|°| °|degré|degre|deg\"]]);\n\texport const VolumeSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Mètre cube\", \"m3|m^3|m³|mètre cube|mètres cube|metre cube|metres cube\"],[\"Centimètre cube\", \"cm3|cm^3|cm³|centimètre cube|centimètres cube|centimetre cube|centimetres cube\"],[\"Millimètre cube\", \"mm3|mm^3|mm³|millimètre cube|millimètres cube|millimetre cube|millimetres cube\"],[\"Kilomètre cube\", \"km3|km^3|km³|kilomètre cube|kilomètres cube|kilometre cube|kilometres cube\"],[\"Pieds cube\", \"pieds cubes|pieds cube|pied cube|pied cubes\"],[\"Litre\", \"litre|litres|lts|l\"],[\"Millilitre\", \"ml|millilitre|millilitres\"],[\"Gallon\", \"gallon|gallons\"],[\"Pintes\", \"pintes\"],[\"Onces\", \"onces|once|oz\"],[\"Décilitre\", \"dl|décilitre|decilitre|décilitres|decilitres\"],[\"Centilitre\", \"cl|centilitres|centilitre\"],[\"Onces liquides\", \"onces liquides|once liquide|once liquides\"],[\"Baril\", \"baril|barils|bbl\"]]);\n\texport const AmbiguousVolumeUnitList = [ 'ounce','oz','l','cup','peck','cord','gill' ];\n\texport const WeightSuffixList: ReadonlyMap<string, string> = new Map<string, string>([[\"Kilogramme\", \"kg|kilogramme|kilogrammes|kilo|kilos\"],[\"Gram\", \"g|gramme|grammes\"],[\"Milligramme\", \"mg|milligramme|milligrammes\"],[\"Tonne métrique\", \"tonne métrique|tonnes métrique|tonnes métriques|tonne metrique|tonnes metrique\"],[\"Tonne\", \"tonne|tonnes|-tonnes|-tonne\"],[\"Livre\", \"livre|livres\"]]);\n\texport const AmbiguousWeightUnitList = [ 'g','oz','stone','dram' ];\n}\n","import { IExtractor, IParser } from \"recognizers-text\";\nimport { Culture, CultureInfo, NumberMode, AgnosticNumberParserFactory, AgnosticNumberParserType, FrenchNumberExtractor, FrenchNumberParserConfiguration } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { INumberWithUnitExtractorConfiguration } from \"../extractors\";\nimport { BaseNumberWithUnitParserConfiguration } from \"../parsers\";\nimport { FrenchNumericWithUnit } from \"../../resources/frenchNumericWithUnit\";\n\nexport abstract class FrenchNumberWithUnitExtractorConfiguration implements INumberWithUnitExtractorConfiguration {\n    abstract readonly suffixList: ReadonlyMap<string, string>;\n    abstract readonly prefixList: ReadonlyMap<string, string>;\n    abstract readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly abstract extractType: string;\n\n    readonly cultureInfo: CultureInfo;\n    readonly unitNumExtractor: IExtractor;\n    readonly buildPrefix: string;\n    readonly buildSuffix: string;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        this.cultureInfo = ci;\n        this.unitNumExtractor = new FrenchNumberExtractor();\n\n        this.buildPrefix = FrenchNumericWithUnit.BuildPrefix;\n        this.buildSuffix = FrenchNumericWithUnit.BuildSuffix;\n        this.connectorToken = FrenchNumericWithUnit.ConnectorToken;\n    }\n}\n\nexport class FrenchNumberWithUnitParserConfiguration extends BaseNumberWithUnitParserConfiguration {\n    readonly internalNumberParser: IParser;\n    readonly internalNumberExtractor: IExtractor;\n    readonly connectorToken: string;\n\n    constructor(ci: CultureInfo) {\n        super(ci);\n\n        this.internalNumberExtractor = new FrenchNumberExtractor(NumberMode.Default);\n        this.internalNumberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new FrenchNumberParserConfiguration());\n        this.connectorToken = FrenchNumericWithUnit.ConnectorToken;\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { FrenchNumberWithUnitExtractorConfiguration, FrenchNumberWithUnitParserConfiguration } from \"./base\";\nimport { FrenchNumericWithUnit } from \"../../resources/frenchNumericWithUnit\";\n\nexport class FrenchCurrencyExtractorConfiguration extends FrenchNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_CURRENCY;\n\n        // Reference Source: https:// en.wikipedia.org/wiki/List_of_circulating_currencies\n        this.suffixList = FrenchNumericWithUnit.CurrencySuffixList;\n        this.prefixList = FrenchNumericWithUnit.CurrencyPrefixList;\n        this.ambiguousUnitList = FrenchNumericWithUnit.AmbiguousCurrencyUnitList;\n    }\n}\n\nexport class FrenchCurrencyParserConfiguration extends FrenchNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.BindDictionary(FrenchNumericWithUnit.CurrencySuffixList);\n        this.BindDictionary(FrenchNumericWithUnit.CurrencyPrefixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { FrenchNumberWithUnitExtractorConfiguration, FrenchNumberWithUnitParserConfiguration } from \"./base\";\nimport { FrenchNumericWithUnit } from \"../../resources/frenchNumericWithUnit\";\n\nexport class FrenchTemperatureExtractorConfiguration extends FrenchNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_TEMPERATURE;\n\n        this.suffixList = FrenchNumericWithUnit.TemperatureSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = new Array<string>();\n    }\n}\n\nexport class FrenchTemperatureParserConfiguration extends FrenchNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.connectorToken = null;\n        this.BindDictionary(FrenchNumericWithUnit.TemperatureSuffixList);\n    }\n\n    readonly connectorToken: string;\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { FrenchNumberWithUnitExtractorConfiguration, FrenchNumberWithUnitParserConfiguration } from \"./base\";\nimport { FrenchNumericWithUnit } from \"../../resources/frenchNumericWithUnit\";\n\nconst dimensionSuffixList = new Map<string, string>([\n    ...FrenchNumericWithUnit.InformationSuffixList,\n    ...FrenchNumericWithUnit.AreaSuffixList,\n    ...FrenchNumericWithUnit.LengthSuffixList,\n    ...FrenchNumericWithUnit.SpeedSuffixList,\n    ...FrenchNumericWithUnit.VolumeSuffixList,\n    ...FrenchNumericWithUnit.WeightSuffixList\n]);\n\nexport class FrenchDimensionExtractorConfiguration extends FrenchNumberWithUnitExtractorConfiguration {\n\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_DIMENSION;\n\n        this.suffixList = dimensionSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = FrenchNumericWithUnit.AmbiguousDimensionUnitList\n    }\n}\n\nexport class FrenchDimensionParserConfiguration extends FrenchNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.BindDictionary(dimensionSuffixList);\n    }\n}","import { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { Constants } from \"../constants\";\nimport { FrenchNumberWithUnitExtractorConfiguration, FrenchNumberWithUnitParserConfiguration } from \"./base\";\nimport { FrenchNumericWithUnit } from \"../../resources/frenchNumericWithUnit\";\n\nexport class FrenchAgeExtractorConfiguration extends FrenchNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor(ci?: CultureInfo) {\n        if (!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.extractType = Constants.SYS_UNIT_AGE;\n\n        this.suffixList = FrenchNumericWithUnit.AgeSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = new Array<string>();\n    }\n}\n\nexport class FrenchAgeParserConfiguration extends FrenchNumberWithUnitParserConfiguration {\n    constructor(ci?: CultureInfo) {\n        if(!ci) {\n            ci = new CultureInfo(Culture.French);\n        }\n\n        super(ci);\n\n        this.BindDictionary(FrenchNumericWithUnit.AgeSuffixList);\n    }\n}","import { IModel, ModelResult, Recognizer, IExtractor, IParser } from \"recognizers-text\";\nimport { Culture } from \"recognizers-text-number\";\nimport { CurrencyModel, TemperatureModel, DimensionModel, AgeModel } from \"./models\";\nimport { NumberWithUnitExtractor } from \"./extractors\";\nimport { NumberWithUnitParser } from \"./parsers\";\nimport { EnglishCurrencyExtractorConfiguration, EnglishCurrencyParserConfiguration } from \"./english/currency\";\nimport { EnglishTemperatureExtractorConfiguration, EnglishTemperatureParserConfiguration } from \"./english/temperature\";\nimport { EnglishDimensionExtractorConfiguration, EnglishDimensionParserConfiguration } from \"./english/dimension\";\nimport { EnglishAgeExtractorConfiguration, EnglishAgeParserConfiguration } from \"./english/age\";\nimport { SpanishCurrencyExtractorConfiguration, SpanishCurrencyParserConfiguration } from \"./spanish/currency\";\nimport { SpanishTemperatureExtractorConfiguration, SpanishTemperatureParserConfiguration } from \"./spanish/temperature\";\nimport { SpanishDimensionExtractorConfiguration, SpanishDimensionParserConfiguration } from \"./spanish/dimension\";\nimport { SpanishAgeExtractorConfiguration, SpanishAgeParserConfiguration } from \"./spanish/age\";\nimport { PortugueseCurrencyExtractorConfiguration, PortugueseCurrencyParserConfiguration } from \"./portuguese/currency\";\nimport { PortugueseTemperatureExtractorConfiguration, PortugueseTemperatureParserConfiguration } from \"./portuguese/temperature\";\nimport { PortugueseDimensionExtractorConfiguration, PortugueseDimensionParserConfiguration } from \"./portuguese/dimension\";\nimport { PortugueseAgeExtractorConfiguration, PortugueseAgeParserConfiguration } from \"./portuguese/age\";\nimport { ChineseCurrencyExtractorConfiguration, ChineseCurrencyParserConfiguration } from \"./chinese/currency\";\nimport { ChineseTemperatureExtractorConfiguration, ChineseTemperatureParserConfiguration } from \"./chinese/temperature\";\nimport { ChineseDimensionExtractorConfiguration, ChineseDimensionParserConfiguration } from \"./chinese/dimension\";\nimport { ChineseAgeExtractorConfiguration, ChineseAgeParserConfiguration } from \"./chinese/age\";\nimport { FrenchCurrencyExtractorConfiguration, FrenchCurrencyParserConfiguration } from \"./french/currency\";\nimport { FrenchTemperatureExtractorConfiguration, FrenchTemperatureParserConfiguration } from \"./french/temperature\";\nimport { FrenchDimensionExtractorConfiguration, FrenchDimensionParserConfiguration } from \"./french/dimension\";\nimport { FrenchAgeExtractorConfiguration, FrenchAgeParserConfiguration } from \"./french/age\";\n\nexport default class NumberWithUnitRecognizer extends Recognizer {\n    static readonly instance: NumberWithUnitRecognizer = new NumberWithUnitRecognizer();\n\n    private constructor() {\n        super();\n\n        // English models\n        this.registerModel(\"CurrencyModel\", Culture.English, new CurrencyModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new EnglishCurrencyExtractorConfiguration()), new NumberWithUnitParser(new EnglishCurrencyParserConfiguration())]\n        ])));\n        this.registerModel(\"TemperatureModel\", Culture.English, new TemperatureModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new EnglishTemperatureExtractorConfiguration()), new NumberWithUnitParser(new EnglishTemperatureParserConfiguration())]\n        ])));\n        this.registerModel(\"DimensionModel\", Culture.English, new DimensionModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new EnglishDimensionExtractorConfiguration()), new NumberWithUnitParser(new EnglishDimensionParserConfiguration())]\n        ])));\n        this.registerModel(\"AgeModel\", Culture.English, new AgeModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new EnglishAgeExtractorConfiguration()), new NumberWithUnitParser(new EnglishAgeParserConfiguration())]\n        ])));\n\n        // Spanish models\n        this.registerModel(\"CurrencyModel\", Culture.Spanish, new CurrencyModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new SpanishCurrencyExtractorConfiguration()), new NumberWithUnitParser(new SpanishCurrencyParserConfiguration())]\n        ])));\n        this.registerModel(\"TemperatureModel\", Culture.Spanish, new TemperatureModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new SpanishTemperatureExtractorConfiguration()), new NumberWithUnitParser(new SpanishTemperatureParserConfiguration())]\n        ])));\n        this.registerModel(\"DimensionModel\", Culture.Spanish, new DimensionModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new SpanishDimensionExtractorConfiguration()), new NumberWithUnitParser(new SpanishDimensionParserConfiguration())]\n        ])));\n        this.registerModel(\"AgeModel\", Culture.Spanish, new AgeModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new SpanishAgeExtractorConfiguration()), new NumberWithUnitParser(new SpanishAgeParserConfiguration())]\n        ])));\n\n        // Portuguese models\n        this.registerModel(\"CurrencyModel\", Culture.Portuguese, new CurrencyModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new PortugueseCurrencyExtractorConfiguration()), new NumberWithUnitParser(new PortugueseCurrencyParserConfiguration())]\n        ])));\n        this.registerModel(\"TemperatureModel\", Culture.Portuguese, new TemperatureModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new PortugueseTemperatureExtractorConfiguration()), new NumberWithUnitParser(new PortugueseTemperatureParserConfiguration())]\n        ])));\n        this.registerModel(\"DimensionModel\", Culture.Portuguese, new DimensionModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new PortugueseDimensionExtractorConfiguration()), new NumberWithUnitParser(new PortugueseDimensionParserConfiguration())]\n        ])));\n        this.registerModel(\"AgeModel\", Culture.Portuguese, new AgeModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new PortugueseAgeExtractorConfiguration()), new NumberWithUnitParser(new PortugueseAgeParserConfiguration())]\n        ])));\n\n        // Chinese models\n        this.registerModel(\"CurrencyModel\", Culture.Chinese, new CurrencyModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new ChineseCurrencyExtractorConfiguration()), new NumberWithUnitParser(new ChineseCurrencyParserConfiguration())],\n            [new NumberWithUnitExtractor(new EnglishCurrencyExtractorConfiguration()), new NumberWithUnitParser(new EnglishCurrencyParserConfiguration())]\n        ])));\n        this.registerModel(\"TemperatureModel\", Culture.Chinese, new TemperatureModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new ChineseTemperatureExtractorConfiguration()), new NumberWithUnitParser(new ChineseTemperatureParserConfiguration())],\n            [new NumberWithUnitExtractor(new EnglishTemperatureExtractorConfiguration()), new NumberWithUnitParser(new EnglishTemperatureParserConfiguration())]\n        ])));\n        this.registerModel(\"DimensionModel\", Culture.Chinese, new DimensionModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new ChineseDimensionExtractorConfiguration()), new NumberWithUnitParser(new ChineseDimensionParserConfiguration())],\n            [new NumberWithUnitExtractor(new EnglishDimensionExtractorConfiguration()), new NumberWithUnitParser(new EnglishDimensionParserConfiguration())]\n        ])));\n        this.registerModel(\"AgeModel\", Culture.Chinese, new AgeModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new ChineseAgeExtractorConfiguration()), new NumberWithUnitParser(new ChineseAgeParserConfiguration())],\n            [new NumberWithUnitExtractor(new EnglishAgeExtractorConfiguration()), new NumberWithUnitParser(new EnglishAgeParserConfiguration())]\n        ])));\n\n        // French models\n        this.registerModel(\"CurrencyModel\", Culture.French, new CurrencyModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new FrenchCurrencyExtractorConfiguration()), new NumberWithUnitParser(new FrenchCurrencyParserConfiguration())]\n        ])));\n        this.registerModel(\"TemperatureModel\", Culture.French, new TemperatureModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new FrenchTemperatureExtractorConfiguration()), new NumberWithUnitParser(new FrenchTemperatureParserConfiguration())]\n        ])));\n        this.registerModel(\"DimensionModel\", Culture.French, new DimensionModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new FrenchDimensionExtractorConfiguration()), new NumberWithUnitParser(new FrenchDimensionParserConfiguration())]\n        ])));\n        this.registerModel(\"AgeModel\", Culture.French, new AgeModel(new Map<IExtractor, IParser>([\n            [new NumberWithUnitExtractor(new FrenchAgeExtractorConfiguration()), new NumberWithUnitParser(new FrenchAgeParserConfiguration())]\n        ])));\n    }\n\n    getCurrencyModel(culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        return this.getModel(\"CurrencyModel\", culture, fallbackToDefaultCulture);\n    }\n\n    getTemperatureModel(culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        return this.getModel(\"TemperatureModel\", culture, fallbackToDefaultCulture);\n    }\n\n    getDimensionModel(culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        return this.getModel(\"DimensionModel\", culture, fallbackToDefaultCulture);\n    }\n\n    getAgeModel(culture: string, fallbackToDefaultCulture: boolean = true): IModel {\n        return this.getModel(\"AgeModel\", culture, fallbackToDefaultCulture);\n    }\n}","export { default as NumberWithUnitRecognizer } from \"./numberWithUnit/numberWithUnitRecognizer\";\nexport { Culture, CultureInfo } from \"recognizers-text-number\";\nexport { Constants } from \"./numberWithUnit/constants\";\nexport { INumberWithUnitExtractorConfiguration, NumberWithUnitExtractor, PrefixUnitResult } from \"./numberWithUnit/extractors\";\nexport { CompositeEntityType, AbstractNumberWithUnitModel, AgeModel, CurrencyModel, DimensionModel, TemperatureModel } from \"./numberWithUnit/models\";\nexport { UnitValue, NumberWithUnitParser, INumberWithUnitParserConfiguration, BaseNumberWithUnitParserConfiguration } from \"./numberWithUnit/parsers\";\nexport { EnglishAgeExtractorConfiguration, EnglishAgeParserConfiguration } from \"./numberWithUnit/english/age\";\nexport { EnglishNumberWithUnitExtractorConfiguration, EnglishNumberWithUnitParserConfiguration } from \"./numberWithUnit/english/base\";\nexport { EnglishCurrencyExtractorConfiguration, EnglishCurrencyParserConfiguration } from \"./numberWithUnit/english/currency\";\nexport { EnglishDimensionExtractorConfiguration, EnglishDimensionParserConfiguration } from \"./numberWithUnit/english/dimension\";\nexport { EnglishTemperatureExtractorConfiguration, EnglishTemperatureParserConfiguration } from \"./numberWithUnit/english/temperature\";\nexport { SpanishAgeExtractorConfiguration, SpanishAgeParserConfiguration } from \"./numberWithUnit/spanish/age\";\nexport { SpanishNumberWithUnitExtractorConfiguration, SpanishNumberWithUnitParserConfiguration } from \"./numberWithUnit/spanish/base\";\nexport { SpanishCurrencyExtractorConfiguration, SpanishCurrencyParserConfiguration } from \"./numberWithUnit/spanish/currency\";\nexport { SpanishDimensionExtractorConfiguration, SpanishDimensionParserConfiguration } from \"./numberWithUnit/spanish/dimension\";\nexport { SpanishTemperatureExtractorConfiguration, SpanishTemperatureParserConfiguration } from \"./numberWithUnit/spanish/temperature\";\nexport { PortugueseAgeExtractorConfiguration, PortugueseAgeParserConfiguration } from \"./numberWithUnit/portuguese/age\";\nexport { PortugueseNumberWithUnitExtractorConfiguration, PortugueseNumberWithUnitParserConfiguration } from \"./numberWithUnit/portuguese/base\";\nexport { PortugueseCurrencyExtractorConfiguration, PortugueseCurrencyParserConfiguration } from \"./numberWithUnit/portuguese/currency\";\nexport { PortugueseDimensionExtractorConfiguration, PortugueseDimensionParserConfiguration } from \"./numberWithUnit/portuguese/dimension\";\nexport { PortugueseTemperatureExtractorConfiguration, PortugueseTemperatureParserConfiguration } from \"./numberWithUnit/portuguese/temperature\";\nexport { ChineseAgeExtractorConfiguration, ChineseAgeParserConfiguration } from \"./numberWithUnit/chinese/age\";\nexport { ChineseNumberWithUnitExtractorConfiguration, ChineseNumberWithUnitParserConfiguration } from \"./numberWithUnit/chinese/base\";\nexport { ChineseCurrencyExtractorConfiguration, ChineseCurrencyParserConfiguration } from \"./numberWithUnit/chinese/currency\";\nexport { ChineseDimensionExtractorConfiguration, ChineseDimensionParserConfiguration } from \"./numberWithUnit/chinese/dimension\";\nexport { ChineseTemperatureExtractorConfiguration, ChineseTemperatureParserConfiguration } from \"./numberWithUnit/chinese/temperature\";\nexport { EnglishNumericWithUnit } from \"./resources/englishNumericWithUnit\";\nexport { SpanishNumericWithUnit } from \"./resources/spanishNumericWithUnit\";\nexport { PortugueseNumericWithUnit } from \"./resources/portugueseNumericWithUnit\";\nexport { ChineseNumericWithUnit } from \"./resources/chineseNumericWithUnit\";","import { IExtractor, ExtractResult } from \"recognizers-text\";\nimport { StringUtility, Match, RegExpUtility } from \"recognizers-text-number\";\nimport { IDateTimeExtractor } from \"../baseDateTime\"\nimport { Constants, TimeTypeConstants } from \"../constants\"\nimport { Token } from \"../utilities\";\n\nexport interface DateTimeExtra<T> {\n    dataType: T;\n    namedEntity(key: string): { value: string, index: number, length: number, captures: string[] }\n}\n\nexport class TimeResult {\n    hour: number;\n    minute: number;\n    second: number;\n    lowBound: number;\n\n    constructor(hour: number, minute: number, second: number, lowBound?: number) {\n        this.hour = hour;\n        this.minute = minute;\n        this.second = second;\n        this.lowBound = lowBound ? lowBound : -1;\n    }\n}\n\nexport abstract class BaseDateTimeExtractor<T> implements IDateTimeExtractor {\n    protected abstract readonly extractorName: string;\n    private readonly regexesDictionary: Map<RegExp, T>;\n\n    constructor(regexesDictionary: Map<RegExp, T>) {\n        this.regexesDictionary = regexesDictionary;\n    }\n    \n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let results = new Array<ExtractResult>();\n        if (StringUtility.isNullOrEmpty(source)) {\n            return results;\n        }\n\n        let matchSource = new Map<Match, T>();\n        let matched = new Array<boolean>(source.length);\n        for (let i = 0; i < source.length; i++) {\n            matched[i] = false;\n        }\n\n        let collections: Array<{ matches: Match[], value: T}> = [];\n        this.regexesDictionary.forEach((value, regex) => {\n            let matches = RegExpUtility.getMatches(regex, source);\n            if (matches.length > 0) {\n                collections.push({ matches: matches, value: value});\n            }\n        });\n\n        collections.forEach(collection => {\n            collection.matches.forEach(m => {\n                for (let j = 0; j < m.length; j++) {\n                    matched[m.index + j] = true;\n                }\n\n                // Keep Source Data for extra information\n                matchSource.set(m, collection.value);\n            });\n        });\n\n        let last = -1;\n        for (let i = 0; i < source.length; i++) {\n            if (matched[i]) {\n                if (i + 1 === source.length || !matched[i + 1]) {\n                    let start = last + 1;\n                    let length = i - last;\n                    let substr = source.substring(start, start + length).trim();\n                    let srcMatch = Array.from(matchSource.keys()).find(m => m.index === start && m.length === length);\n                    if (srcMatch) {\n                        results.push({\n                            start: start,\n                            length: length,\n                            text: substr,\n                            type: this.extractorName,\n                            data: matchSource.has(srcMatch)\n                                ? { dataType: matchSource.get(srcMatch), namedEntity: (key: string) => srcMatch.groups(key) } as DateTimeExtra<T>\n                                : null\n                        });\n                    }\n                }\n            }\n            else {\n                last = i;\n            }\n        }\n\n        return results;\n    }\n}\n\nexport class TimeResolutionUtils {\n    static addDescription(lowBoundMap: ReadonlyMap<string, number>, timeResult: TimeResult, description: string) {\n        if (lowBoundMap.has(description) && timeResult.hour < lowBoundMap.get(description)) {\n            timeResult.hour += 12;\n            timeResult.lowBound = lowBoundMap.get(description);\n        } else {\n            timeResult.lowBound = 0;\n        }\n    }\n\n    static matchToValue(onlyDigitMatch: RegExp, numbersMap: ReadonlyMap<string, number>, source: string): number {\n        if (StringUtility.isNullOrEmpty(source)) {\n            return -1;\n        }\n\n        if (RegExpUtility.isMatch(onlyDigitMatch, source)) {\n            return Number.parseInt(source);\n        }\n\n        if (source.length === 1) {\n            return numbersMap.get(source);\n        }\n\n        let value = 1;\n        for (let index = 0; index < source.length; index++) {\n            let char = source.charAt(index);\n            if (char === '十') {\n                value *= 10;\n            } else if (index === 0) {\n                value *= numbersMap.get(char);\n            } else {\n                value += numbersMap.get(char);\n            }\n        }\n\n        return value;\n    }\n}","import { RegExpUtility, ExtractResult } from \"recognizers-text\";\nimport { CultureInfo, Culture, BaseNumberExtractor, BaseNumberParser } from \"recognizers-text-number\";\nimport { NumberWithUnitExtractor, ChineseNumberWithUnitExtractorConfiguration, NumberWithUnitParser, ChineseNumberWithUnitParserConfiguration, UnitValue } from \"recognizers-text-number-with-unit\";\nimport { BaseDateTimeExtractor } from \"./baseDateTime\";\nimport { IDurationParserConfiguration, BaseDurationParser } from \"../baseDuration\";\nimport { Constants, TimeTypeConstants } from \"../constants\"\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\";\nimport { DateTimeResolutionResult, StringMap } from \"../utilities\";\n\nexport enum DurationType {\n    WithNumber\n}\n\nclass DurationExtractorConfiguration extends ChineseNumberWithUnitExtractorConfiguration {\n    readonly suffixList: ReadonlyMap<string, string>;\n    readonly prefixList: ReadonlyMap<string, string>;\n    readonly ambiguousUnitList: ReadonlyArray<string>;\n    readonly extractType: string;\n\n    constructor() {\n        super(new CultureInfo(Culture.Chinese));\n\n        this.extractType = Constants.SYS_DATETIME_DURATION;\n        this.suffixList = ChineseDateTime.DurationSuffixList;\n        this.prefixList = new Map<string, string>();\n        this.ambiguousUnitList = ChineseDateTime.DurationAmbiguousUnits;\n    }\n}\n\nexport class ChineseDurationExtractor extends BaseDateTimeExtractor<DurationType> {\n    protected extractorName = Constants.SYS_DATETIME_DURATION; // \"Duration\";\n    private readonly extractor: NumberWithUnitExtractor;\n    private readonly yearRegex: RegExp;\n    private readonly halfSuffixRegex: RegExp;\n\n    constructor() {\n        super(null);\n        this.extractor = new NumberWithUnitExtractor(new DurationExtractorConfiguration());\n        this.yearRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DurationYearRegex);\n        this.halfSuffixRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DurationHalfSuffixRegex);\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let results = new Array<ExtractResult>();\n        this.extractor.extract(source).forEach(result => {\n            // filter\n            if (RegExpUtility.isMatch(this.yearRegex, result.text)) {\n                return;\n            }\n\n            // match suffix\n            let suffix = source.substr(result.start + result.length);\n            let suffixMatch = RegExpUtility.getMatches(this.halfSuffixRegex, suffix).pop();\n            if (suffixMatch && suffixMatch.index === 0) {\n                result.text = result.text + suffixMatch.value;\n                result.length += suffixMatch.length;\n            }\n\n            results.push(result);\n        });\n\n        return results;\n    }\n}\n\nclass ChineseDurationParserConfiguration implements IDurationParserConfiguration {\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly followedUnit: RegExp;\n    readonly suffixAndRegex: RegExp;\n    readonly numberCombinedWithUnit: RegExp;\n    readonly anUnitRegex: RegExp;\n    readonly allDateUnitRegex: RegExp;\n    readonly halfDateUnitRegex: RegExp;\n    readonly inExactNumberUnitRegex: RegExp;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly unitValueMap: ReadonlyMap<string, number>;\n    readonly doubleNumbers: ReadonlyMap<string, number>;\n\n    constructor() {\n        this.unitValueMap = ChineseDateTime.DurationUnitValueMap;\n    }\n}\n\nclass DurationParserConfiguration extends ChineseNumberWithUnitParserConfiguration {\n    constructor() {\n        super(new CultureInfo(Culture.Chinese));\n        this.BindDictionary(ChineseDateTime.DurationSuffixList);\n    }\n}\n\nexport class ChineseDurationParser extends BaseDurationParser {\n    private readonly internalParser: NumberWithUnitParser\n\n    constructor() {\n        let config = new ChineseDurationParserConfiguration();\n        super(config);\n        this.internalParser = new NumberWithUnitParser(new DurationParserConfiguration());\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let innerResult = new DateTimeResolutionResult();\n            let hasHalfSuffix = extractorResult.text.endsWith('半');\n\n            if (hasHalfSuffix) {\n                extractorResult.length--;\n                extractorResult.text = extractorResult.text.substr(0, extractorResult.length);\n            }\n\n            let parserResult = this.internalParser.parse(extractorResult);\n            let unitResult: UnitValue = parserResult.value;\n            if (!unitResult) {\n                return new DateTimeParseResult();\n            }\n\n            let unitStr = unitResult.unit;\n            let numberStr = unitResult.number;\n\n            if (hasHalfSuffix) {\n                numberStr = (Number.parseFloat(numberStr) + 0.5).toString();\n            }\n\n            innerResult.timex = `P${this.isLessThanDay(unitStr) ? 'T' : ''}${numberStr}${unitStr.charAt(0)}`;\n            innerResult.futureValue = Number.parseFloat(numberStr) * this.config.unitValueMap.get(unitStr);\n            innerResult.pastValue = Number.parseFloat(numberStr) * this.config.unitValueMap.get(unitStr);\n            innerResult.futureResolution = {};\n            innerResult.futureResolution[TimeTypeConstants.DURATION] = innerResult.futureValue.toString();\n            innerResult.pastResolution = {};\n            innerResult.pastResolution[TimeTypeConstants.DURATION] = innerResult.pastValue.toString();\n            innerResult.success = true;\n\n            resultValue = innerResult;\n        }\n\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n}","import { RegExpUtility, StringUtility, ExtractResult } from \"recognizers-text\";\nimport { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { NumberWithUnitExtractor, ChineseNumberWithUnitExtractorConfiguration } from \"recognizers-text-number-with-unit\";\nimport { BaseDateTimeExtractor, DateTimeExtra, TimeResult, TimeResolutionUtils } from \"./baseDateTime\";\nimport { BaseTimeParser } from \"../baseTime\";\nimport { Constants, TimeTypeConstants } from \"../constants\"\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\"\nimport { DateTimeResolutionResult, FormatUtil, DateUtils, StringMap } from \"../utilities\";\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\n\nexport enum TimeType {\n    ChineseTime,\n    LessTime,\n    DigitTime\n}\n\nexport class ChineseTimeExtractor extends BaseDateTimeExtractor<TimeType> {\n    protected extractorName = Constants.SYS_DATETIME_TIME; // \"Time\";\n\n    constructor() {\n        super(new Map<RegExp, TimeType>([\n            [ RegExpUtility.getSafeRegExp(ChineseDateTime.TimeRegexes1), TimeType.ChineseTime ],\n            [ RegExpUtility.getSafeRegExp(ChineseDateTime.TimeRegexes2), TimeType.DigitTime ],\n            [ RegExpUtility.getSafeRegExp(ChineseDateTime.TimeRegexes3), TimeType.LessTime ]\n        ]));\n    }\n}\n\nexport class ChineseTimeParser extends BaseTimeParser {\n    private readonly onlyDigitMatch: RegExp;\n    private readonly numbersMap: ReadonlyMap<string, number>;\n    private readonly lowBoundMap: ReadonlyMap<string, number>;\n    private readonly functionMap: ReadonlyMap<TimeType, (extra: DateTimeExtra<TimeType>) => TimeResult>;\n    private readonly innerExtractor: ChineseTimeExtractor;\n\n    constructor() {\n        super(null);\n        this.functionMap = new Map<TimeType, (extra: DateTimeExtra<TimeType>) => TimeResult>([\n            [TimeType.DigitTime, x => this.handleDigit(x)],\n            [TimeType.ChineseTime, x => this.handleChinese(x)],\n            [TimeType.LessTime, x => this.handleLess(x)]\n        ]);\n        this.onlyDigitMatch = RegExpUtility.getSafeRegExp('\\\\d+');\n        this.numbersMap = ChineseDateTime.TimeNumberDictionary;\n        this.lowBoundMap = ChineseDateTime.TimeLowBoundDesc;\n        this.innerExtractor = new ChineseTimeExtractor();\n    }\n\n    public parse(er: ExtractResult, referenceTime?: Date): DateTimeParseResult | null {\n        if (!referenceTime) referenceTime = new Date();\n\n        let extra: DateTimeExtra<TimeType> = er.data;\n        if (!extra) {\n            let innerResult = this.innerExtractor.extract(er.text, referenceTime).pop();\n            extra = innerResult.data;\n        }\n\n        let timeResult = this.functionMap.get(extra.dataType)(extra);\n        let parseResult = this.packTimeResult(extra, timeResult, referenceTime);\n\n        if (parseResult.success) {\n            parseResult.futureResolution = {};\n            parseResult.futureResolution[TimeTypeConstants.TIME] = FormatUtil.formatTime(parseResult.futureValue);\n            parseResult.pastResolution = {};\n            parseResult.pastResolution[TimeTypeConstants.TIME] = FormatUtil.formatTime(parseResult.pastValue);\n        }\n\n        let result = new DateTimeParseResult(er);\n        result.value = parseResult;\n        result.data = timeResult;\n        result.resolutionStr = '';\n        result.timexStr = parseResult.timex;\n\n        return result;\n    }\n\n    private handleLess(extra: DateTimeExtra<TimeType>): TimeResult {\n        let hour = this.matchToValue(extra.namedEntity('hour').value);\n        let quarter = this.matchToValue(extra.namedEntity('quarter').value);\n        let minute = !StringUtility.isNullOrEmpty(extra.namedEntity('half').value)\n            ? 30\n            : quarter !== -1 ? quarter * 15 : 0;\n        let second = this.matchToValue(extra.namedEntity('sec').value);\n        let less = this.matchToValue(extra.namedEntity('min').value);\n\n        let all = hour * 60 + minute - less;\n        if (all < 0) {\n            all += 1440;\n        }\n\n        return new TimeResult(all / 60, all % 60, second);\n    }\n\n    private handleChinese(extra: DateTimeExtra<TimeType>): TimeResult {\n        let hour = this.matchToValue(extra.namedEntity('hour').value);\n        let quarter = this.matchToValue(extra.namedEntity('quarter').value);\n        let minute = !StringUtility.isNullOrEmpty(extra.namedEntity('half').value)\n            ? 30\n            : quarter !== -1 ? quarter * 15\n            : this.matchToValue(extra.namedEntity('min').value);\n        let second = this.matchToValue(extra.namedEntity('sec').value);\n\n        return new TimeResult(hour, minute, second);\n    }\n\n    private handleDigit(extra: DateTimeExtra<TimeType>): TimeResult {\n        return new TimeResult(\n            this.matchToValue(extra.namedEntity('hour').value),\n            this.matchToValue(extra.namedEntity('min').value),\n            this.matchToValue(extra.namedEntity('sec').value)\n        );\n    }\n\n    private packTimeResult(extra: DateTimeExtra<TimeType>, timeResult: TimeResult, referenceTime: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let dayDescription = extra.namedEntity('daydesc').value;\n        let noDescription = StringUtility.isNullOrEmpty(dayDescription);\n        if (noDescription) {\n            result.comment = 'ampm';\n        } else {\n            this.addDescription(timeResult, dayDescription);\n        }\n\n        let hour = timeResult.hour > 0 ? timeResult.hour : 0;\n        let min = timeResult.minute > 0 ? timeResult.minute : 0;\n        let sec = timeResult.second > 0 ? timeResult.second : 0;\n        let day = referenceTime.getDate();\n        let month = referenceTime.getMonth();\n        let year = referenceTime.getFullYear();\n\n        let timex = 'T';\n        if (timeResult.hour >= 0) {\n            timex = timex + FormatUtil.toString(timeResult.hour, 2);\n            if (timeResult.minute >= 0) {\n                timex = timex + ':' + FormatUtil.toString(timeResult.minute, 2);\n                if (timeResult.second >= 0) {\n                    timex = timex + ':' + FormatUtil.toString(timeResult.second, 2);\n                }\n            }\n        }\n        if (hour === 24) {\n            hour = 0;\n        }\n\n        result.futureValue = DateUtils.safeCreateFromMinValue(year, month, day, hour, min, sec);\n        result.pastValue = DateUtils.safeCreateFromMinValue(year, month, day, hour, min, sec);\n        result.timex = timex;\n        result.success = true;\n\n        return result;\n    }\n\n    private matchToValue(source: string): number {\n        return TimeResolutionUtils.matchToValue(this.onlyDigitMatch, this.numbersMap, source);\n    }\n\n    private addDescription(timeResult: TimeResult, description: string) {\n        TimeResolutionUtils.addDescription(this.lowBoundMap, timeResult, description);\n    }\n}","import { IExtractor, ExtractResult, StringUtility, Match, RegExpUtility } from \"recognizers-text\";\nimport { ChineseIntegerExtractor, AgnosticNumberParserFactory, ChineseNumberParserConfiguration, AgnosticNumberParserType, BaseNumberParser, BaseNumberExtractor } from \"recognizers-text-number\"\nimport { Constants as NumberConstants } from \"recognizers-text-number\"\nimport { IDateExtractorConfiguration, IDateParserConfiguration, BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { Constants, TimeTypeConstants } from \"../constants\"\nimport { ChineseDurationExtractor } from \"./durationConfiguration\";\nimport { Token, FormatUtil, DateUtils, DateTimeResolutionResult, IDateTimeUtilityConfiguration, StringMap } from \"../utilities\";\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\"\n\nclass ChineseDateExtractorConfiguration implements IDateExtractorConfiguration {\n    readonly dateRegexList: RegExp[];\n    readonly implicitDateList: RegExp[];\n    readonly monthEnd: RegExp;\n    readonly ofMonth: RegExp;\n    readonly dateUnitRegex: RegExp;\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly weekDayRegex: RegExp;\n    readonly dayOfWeek: ReadonlyMap<string, number>;\n    readonly ordinalExtractor: BaseNumberExtractor;\n    readonly integerExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly durationExtractor: BaseDurationExtractor;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor() {\n        this.dateRegexList = [\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList1),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList2),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList3),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList4),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList5),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList6),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList7),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList8)\n        ];\n        this.implicitDateList = [\n            RegExpUtility.getSafeRegExp(ChineseDateTime.LunarRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.SpecialDayRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateThisRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateLastRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateNextRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.WeekDayRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.WeekDayOfMonthRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.SpecialDate)\n        ];\n    }\n}\n\nexport class ChineseDateExtractor extends BaseDateExtractor {\n    private readonly durationExtractor: ChineseDurationExtractor;\n\n    constructor() {\n        super(new ChineseDateExtractorConfiguration());\n        this.durationExtractor = new ChineseDurationExtractor();\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n            .concat(super.basicRegexMatch(source))\n            .concat(super.implicitDate(source))\n            .concat(this.durationWithBeforeAndAfter(source, referenceDate));\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    protected durationWithBeforeAndAfter(source: string, refDate: Date): Array<Token> {\n        let ret = [];\n        let durEx = this.durationExtractor.extract(source, refDate);\n        durEx.forEach(er => {\n            let pos = er.start + er.length;\n            if (pos < source.length) {\n                let nextChar = source.substr(pos, 1);\n                if (nextChar === '前' || nextChar === '后') {\n                    ret.push(new Token(er.start, pos + 1));\n                }\n            }\n        });\n        return ret;\n    }\n}\n\nclass ChineseDateParserConfiguration implements IDateParserConfiguration {\n    readonly ordinalExtractor: BaseNumberExtractor\n    readonly integerExtractor: BaseNumberExtractor\n    readonly cardinalExtractor: BaseNumberExtractor\n    readonly durationExtractor: BaseDurationExtractor\n    readonly numberParser: BaseNumberParser\n    readonly durationParser: IDateTimeParser\n    readonly monthOfYear: ReadonlyMap<string, number>\n    readonly dayOfMonth: ReadonlyMap<string, number>\n    readonly dayOfWeek: ReadonlyMap<string, number>\n    readonly unitMap: ReadonlyMap<string, string>\n    readonly cardinalMap: ReadonlyMap<string, number>\n    readonly dateRegex: RegExp[]\n    readonly onRegex: RegExp\n    readonly specialDayRegex: RegExp\n    readonly nextRegex: RegExp\n    readonly unitRegex: RegExp\n    readonly monthRegex: RegExp\n    readonly weekDayRegex: RegExp\n    readonly lastRegex: RegExp\n    readonly thisRegex: RegExp\n    readonly weekDayOfMonthRegex: RegExp\n    readonly forTheRegex: RegExp;\n    readonly weekDayAndDayOfMothRegex: RegExp;\n    readonly relativeMonthRegex: RegExp;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration\n    readonly dateTokenPrefix: string\n\n    getSwiftDay(source: string): number {\n        let trimmedSource = source.trim().toLowerCase();\n        let swift = 0;\n        if (trimmedSource === '今天' || trimmedSource === '今日' || trimmedSource === '最近') {\n            swift = 0;\n        } else if (trimmedSource === '明天' || trimmedSource ===  '明日') {\n            swift = 1;\n        } else if (trimmedSource === '昨天') {\n            swift = -1;\n        } else if (trimmedSource.endsWith('后天')) {\n            swift = 2;\n        } else if (trimmedSource.endsWith('前天')) {\n            swift = -2;\n        }\n        return swift;\n    }\n\n    getSwiftMonth(source: string): number {\n        let trimmedSource = source.trim().toLowerCase();\n        let swift = 0;\n        if (trimmedSource.startsWith(ChineseDateTime.ParserConfigurationNextMonthToken)) {\n            swift = 1;\n        } else if (trimmedSource.startsWith(ChineseDateTime.ParserConfigurationLastMonthToken)) {\n            swift = -1;\n        }\n        return swift;\n    }\n\n    getSwift(source: string): number {\n        return null;\n    }\n\n    isCardinalLast(source: string): boolean {\n        return source === ChineseDateTime.ParserConfigurationLastWeekDayToken;\n    }\n\n    constructor() {\n        this.dateRegex = [\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList1),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList2),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList3),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList4),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList5),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList6),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList7),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DateRegexList8)\n        ];\n        this.monthOfYear = ChineseDateTime.ParserConfigurationMonthOfYear;\n        this.dayOfMonth = ChineseDateTime.ParserConfigurationDayOfMonth;\n        this.dayOfWeek = ChineseDateTime.ParserConfigurationDayOfWeek;\n        this.specialDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SpecialDayRegex);\n        this.thisRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateThisRegex);\n        this.nextRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateNextRegex);\n        this.lastRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateLastRegex);\n        this.weekDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.WeekDayRegex);\n        this.integerExtractor = new ChineseIntegerExtractor();\n        this.numberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Number, new ChineseNumberParserConfiguration());\n\n    }\n}\n\nexport class ChineseDateParser extends BaseDateParser {\n    private readonly lunarRegex: RegExp\n    private readonly specialDateRegex: RegExp\n    private readonly tokenNextRegex: RegExp\n    private readonly tokenLastRegex: RegExp\n    private readonly monthMaxDays: Array<number>;\n\n    constructor() {\n        let config = new ChineseDateParserConfiguration();\n        super(config);\n        this.lunarRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.LunarRegex);\n        this.specialDateRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SpecialDate);\n        this.tokenNextRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateNextRe);\n        this.tokenLastRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateLastRe);\n        this.monthMaxDays = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let source = extractorResult.text.toLowerCase();\n            let innerResult = this.parseBasicRegexMatch(source, referenceDate);\n            if (!innerResult.success) {\n                innerResult = this.parseImplicitDate(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseWeekdayOfMonth(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                // TODO create test\n                innerResult = this.parserDurationWithAgoAndLater(source, referenceDate);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.futureValue);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.pastValue);\n                innerResult.isLunar = this.parseLunarCalendar(source);\n                resultValue = innerResult;\n            }\n        }\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n\n    private parseLunarCalendar(source: string): boolean {\n        return RegExpUtility.isMatch(this.lunarRegex, source.trim());\n    }\n\n    protected parseBasicRegexMatch(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        this.config.dateRegex.some(regex => {\n            let match = RegExpUtility.getMatches(regex, trimmedSource).pop();\n            if (match && match.index === 0 && match.length === trimmedSource.length) {\n                result = this.matchToDate(match, referenceDate);\n                return true;\n            }\n        });\n        return result;\n    }\n\n    protected parseImplicitDate(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        // handle \"on 12\"\n        let match = RegExpUtility.getMatches(this.specialDateRegex, trimmedSource).pop();\n        if (match && match.length === trimmedSource.length) {\n            let day = 0;\n            let month = referenceDate.getMonth();\n            let year = referenceDate.getFullYear();\n            let yearStr = match.groups('thisyear').value;\n            let monthStr = match.groups('thismonth').value;\n            let dayStr = match.groups('day').value;\n            day = this.config.dayOfMonth.get(dayStr);\n\n            let hasYear = !StringUtility.isNullOrEmpty(yearStr);\n            let hasMonth = !StringUtility.isNullOrEmpty(monthStr);\n\n            if (hasMonth) {\n                if (RegExpUtility.isMatch(this.tokenNextRegex, monthStr)) {\n                    month++;\n                    if (month === 12) {\n                        month = 0;\n                        year++;\n                    }\n                } else if (RegExpUtility.isMatch(this.tokenLastRegex, monthStr)) {\n                    month--;\n                    if (month === -1) {\n                        month = 12;\n                        year--;\n                    }\n                }\n                if (hasYear) {\n                    if (RegExpUtility.isMatch(this.tokenNextRegex, yearStr)) {\n                        year++;\n                    } else if (RegExpUtility.isMatch(this.tokenLastRegex, yearStr)) {\n                        year--;\n                    }\n                }\n            }\n\n            result.timex = FormatUtil.luisDate(hasYear ? year : -1, hasMonth ? month : -1, day);\n            let futureDate: Date;\n            let pastDate: Date;\n\n            if (day > this.monthMaxDays[month]) {\n                futureDate = DateUtils.safeCreateFromMinValue(year, month + 1, day);\n                pastDate = DateUtils.safeCreateFromMinValue(year, month - 1, day);\n            } else {\n                futureDate = DateUtils.safeCreateFromMinValue(year, month, day);\n                pastDate = DateUtils.safeCreateFromMinValue(year, month, day);\n                if (!hasMonth) {\n                    if (futureDate < referenceDate) futureDate = DateUtils.addMonths(futureDate, 1);\n                    if (pastDate >= referenceDate) pastDate = DateUtils.addMonths(pastDate, -1);\n                } else if (hasMonth && !hasYear) {\n                    if (futureDate < referenceDate) futureDate = DateUtils.addYears(futureDate, 1);\n                    if (pastDate >= referenceDate) pastDate = DateUtils.addYears(pastDate, -1);\n                }\n            }\n\n            result.futureValue = futureDate;\n            result.pastValue = pastDate;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"today\", \"the day before yesterday\"\n        match = RegExpUtility.getMatches(this.config.specialDayRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let swift = this.config.getSwiftDay(match.value);\n            let value = DateUtils.addDays(referenceDate, swift);\n\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"this Friday\"\n        match = RegExpUtility.getMatches(this.config.thisRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let value = DateUtils.this(referenceDate, this.config.dayOfWeek.get(weekdayStr));\n\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"next Sunday\"\n        match = RegExpUtility.getMatches(this.config.nextRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let value = DateUtils.next(referenceDate, this.config.dayOfWeek.get(weekdayStr));\n\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"last Friday\", \"last mon\"\n        match = RegExpUtility.getMatches(this.config.lastRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let value = DateUtils.last(referenceDate, this.config.dayOfWeek.get(weekdayStr));\n\n            result.timex = FormatUtil.luisDateFromDate(value);\n            result.futureValue = value;\n            result.pastValue = value;\n            result.success = true;\n            return result;\n        }\n\n        // handle \"Friday\"\n        match = RegExpUtility.getMatches(this.config.weekDayRegex, trimmedSource).pop();\n        if (match && match.index === 0 && match.length === trimmedSource.length) {\n            let weekdayStr = match.groups('weekday').value;\n            let weekday = this.config.dayOfWeek.get(weekdayStr);\n            let value = DateUtils.this(referenceDate, weekday);\n\n            if (weekday === 0) weekday = 7;\n            if (weekday < referenceDate.getDay()) value = DateUtils.next(referenceDate, weekday);\n            result.timex = 'XXXX-WXX-' + weekday;\n            let futureDate = new Date(value);\n            let pastDate = new Date(value);\n            if (futureDate < referenceDate) futureDate = DateUtils.addDays(futureDate, 7);\n            if (pastDate >= referenceDate) pastDate = DateUtils.addDays(pastDate, -7);\n\n            result.futureValue = futureDate;\n            result.pastValue = pastDate;\n            result.success = true;\n            return result;\n        }\n\n        return result;\n    }\n\n    protected matchToDate(match: Match, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let yearStr = match.groups('year').value;\n        let yearChs = match.groups('yearchs').value;\n        let monthStr = match.groups('month').value;\n        let dayStr = match.groups('day').value;\n        let month = 0;\n        let day = 0;\n        let year = 0;\n        let yearTemp = this.convertChineseYearToNumber(yearChs);\n        year = yearTemp === -1 ? 0 : yearTemp;\n\n        if (this.config.monthOfYear.has(monthStr) && this.config.dayOfMonth.has(dayStr)) {\n            month = this.getMonthOfYear(monthStr);\n            day = this.getDayOfMonth(dayStr);\n            if (!StringUtility.isNullOrEmpty(yearStr)) {\n                year = Number.parseInt(yearStr, 10);\n                if (year < 100 && year >= 90) year += 1900;\n                else if (year < 100 && year < 20) year += 2000;\n            }\n        }\n        let noYear = false;\n        if (year === 0) {\n            year = referenceDate.getFullYear();\n            result.timex = FormatUtil.luisDate(-1, month, day);\n            noYear = true;\n        } else {\n            result.timex = FormatUtil.luisDate(year, month, day);\n        }\n        let futureDate = DateUtils.safeCreateFromMinValue(year, month, day);\n        let pastDate = DateUtils.safeCreateFromMinValue(year, month, day);\n        if (noYear && futureDate < referenceDate) {\n            futureDate = DateUtils.safeCreateFromMinValue(year + 1, month, day);\n        }\n        if (noYear && pastDate >= referenceDate) {\n            pastDate = DateUtils.safeCreateFromMinValue(year - 1, month, day);\n        }\n        result.futureValue = futureDate;\n        result.pastValue = pastDate;\n        result.success = true;\n        return result;\n    }\n\n    private convertChineseYearToNumber(source: string): number {\n        let year = 0;\n        let er = this.config.integerExtractor.extract(source).pop();\n        if (er && er.type === NumberConstants.SYS_NUM_INTEGER) {\n            year = Number.parseInt(this.config.numberParser.parse(er).value);\n        }\n        if (year < 10) {\n            year = 0;\n            for (let i = 0; i < source.length; i++) {\n                let char = source.charAt(i);\n                year *= 10;\n                let er = this.config.integerExtractor.extract(char).pop();\n                if (er && er.type === NumberConstants.SYS_NUM_INTEGER) {\n                    year += Number.parseInt(this.config.numberParser.parse(er).value);\n                }\n            }\n        }\n        return year < 10 ? -1 : year;\n    }\n\n    private getMonthOfYear(source: string): number {\n        let month = this.config.monthOfYear.get(source) > 12\n            ? this.config.monthOfYear.get(source) % 12\n            : this.config.monthOfYear.get(source);\n        return month - 1;\n    }\n\n    private getDayOfMonth(source: string): number {\n        return this.config.dayOfMonth.get(source) > 31\n            ? this.config.dayOfMonth.get(source) % 31\n            : this.config.dayOfMonth.get(source);\n    }\n}","import { IExtractor, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { BaseNumberParser, BaseNumberExtractor } from \"recognizers-text-number\"\nimport { Constants, TimeTypeConstants } from \"../constants\";\nimport { IDateTimeExtractor, IDateTimeExtractorConfiguration, BaseDateTimeExtractor, IDateTimeParserConfiguration, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { ChineseDurationExtractor } from \"./durationConfiguration\";\nimport { ChineseTimeExtractor, ChineseTimeParser } from \"./timeConfiguration\";\nimport { ChineseDateExtractor, ChineseDateParser } from \"./dateConfiguration\";\nimport { Token, IDateTimeUtilityConfiguration, DateUtils, FormatUtil, DateTimeResolutionResult, StringMap } from \"../utilities\";\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\"\n\nclass ChineseDateTimeExtractorConfiguration implements IDateTimeExtractorConfiguration {\n    readonly datePointExtractor: ChineseDateExtractor\n    readonly timePointExtractor: ChineseTimeExtractor\n    readonly durationExtractor: BaseDurationExtractor\n    readonly suffixRegex: RegExp\n    readonly nowRegex: RegExp\n    readonly timeOfTodayAfterRegex: RegExp\n    readonly simpleTimeOfTodayAfterRegex: RegExp\n    readonly nightRegex: RegExp\n    readonly timeOfTodayBeforeRegex: RegExp\n    readonly simpleTimeOfTodayBeforeRegex: RegExp\n    readonly theEndOfRegex: RegExp\n    readonly unitRegex: RegExp\n    readonly prepositionRegex: RegExp\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration\n\n    constructor() {\n        this.datePointExtractor = new ChineseDateExtractor();\n        this.timePointExtractor = new ChineseTimeExtractor();\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.PrepositionRegex);\n        this.nowRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.NowRegex);\n        this.nightRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.NightRegex);\n        this.timeOfTodayBeforeRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.TimeOfTodayRegex);\n    }\n\n    isConnectorToken(source: string): boolean {\n        return StringUtility.isNullOrEmpty(source)\n            || source === ','\n            || RegExpUtility.isMatch(this.prepositionRegex, source)\n    }\n}\n\nexport class ChineseDateTimeExtractor extends BaseDateTimeExtractor {\n    constructor() {\n        super(new ChineseDateTimeExtractorConfiguration());\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n        .concat(this.mergeDateAndTime(source, referenceDate))\n        .concat(this.basicRegexMatch(source))\n        .concat(this.timeOfToday(source, referenceDate));\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    protected mergeDateAndTime(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ers = this.config.datePointExtractor.extract(source, refDate);\n        if (ers.length < 1) return tokens;\n        ers = ers.concat(this.config.timePointExtractor.extract(source, refDate));\n        if (ers.length < 2) return tokens;\n        ers = ers.sort((erA, erB) => erA.start < erB.start ? -1 : erA.start === erB.start ? 0 : 1);\n        let i = 0;\n        while (i < ers.length - 1) {\n            let j = i + 1;\n            while (j < ers.length && ExtractResult.isOverlap(ers[i], ers[j])) {\n                j++;\n            }\n            if (j >= ers.length) break;\n            if (ers[i].type === Constants.SYS_DATETIME_DATE && ers[j].type === Constants.SYS_DATETIME_TIME) {\n                let middleBegin = ers[i].start + ers[i].length;\n                let middleEnd = ers[j].start;\n                if (middleBegin > middleEnd) {\n                    continue;\n                }\n                let middleStr = source.substr(middleBegin, middleEnd - middleBegin).trim().toLowerCase();\n                if (this.config.isConnectorToken(middleStr)) {\n                    let begin = ers[i].start;\n                    let end = ers[j].start + ers[j].length;\n                    tokens.push(new Token(begin, end));\n                }\n                i = j + 1;\n                continue;\n            }\n            i = j;\n        }\n\n        return tokens;\n    }\n\n    private timeOfToday(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        this.config.timePointExtractor.extract(source, refDate).forEach(er => {\n            let beforeStr = source.substr(0, er.start);\n            let innerMatch = RegExpUtility.getMatches(this.config.nightRegex, er.text).pop();\n            if (innerMatch && innerMatch.index === 0) {\n                beforeStr = source.substr(0, er.start + innerMatch.length);\n            }\n\n            if (StringUtility.isNullOrWhitespace(beforeStr)) return;\n\n            let match = RegExpUtility.getMatches(this.config.timeOfTodayBeforeRegex, beforeStr).pop();\n            if (match && StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                let begin = match.index;\n                let end = er.start + er.length;\n                tokens.push(new Token(begin, end));\n            }\n        });\n        return tokens;\n    }\n}\n\nclass ChineseDateTimeParserConfiguration implements IDateTimeParserConfiguration {\n    readonly tokenBeforeDate: string;\n    readonly tokenBeforeTime: string;\n    readonly dateExtractor: IDateTimeExtractor;\n    readonly timeExtractor: ChineseTimeExtractor;\n    readonly dateParser: ChineseDateParser;\n    readonly timeParser: ChineseTimeParser;\n    readonly cardinalExtractor: BaseNumberExtractor;\n    readonly numberParser: BaseNumberParser;\n    readonly durationExtractor: BaseDurationExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly nowRegex: RegExp;\n    readonly amTimeRegex: RegExp;\n    readonly pmTimeRegex: RegExp;\n    readonly simpleTimeOfTodayAfterRegex: RegExp;\n    readonly simpleTimeOfTodayBeforeRegex: RegExp;\n    readonly specificTimeOfDayRegex: RegExp;\n    readonly theEndOfRegex: RegExp;\n    readonly unitRegex: RegExp;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly numbers: ReadonlyMap<string, number>;\n    readonly utilityConfiguration: IDateTimeUtilityConfiguration;\n\n    constructor() {\n        this.dateExtractor = new ChineseDateExtractor();\n        this.timeExtractor = new ChineseTimeExtractor();\n        this.dateParser = new ChineseDateParser();\n        this.timeParser = new ChineseTimeParser();\n        this.pmTimeRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimeSimplePmRegex);\n        this.amTimeRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimeSimpleAmRegex);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.TimeOfTodayRegex);\n        this.nowRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.NowRegex);\n    }\n\n    haveAmbiguousToken(text: string, matchedText: string): boolean {\n        return null;\n    }\n\n    getMatchedNowTimex(text: string): { matched: boolean; timex: string; } {\n        let trimmedText = text.trim().toLowerCase();\n        if (trimmedText.endsWith('现在')) {\n            return { matched: true, timex: 'PRESENT_REF' };\n        } else if (trimmedText === '刚刚才' || trimmedText === '刚刚' || trimmedText === '刚才') {\n            return { matched: true, timex: 'PAST_REF' };\n        } else if (trimmedText === '立刻' || trimmedText === '马上') {\n            return { matched: true, timex: 'FUTURE_REF' };\n        }\n        return { matched: false, timex: null };\n    }\n\n    getSwiftDay(text: string): number {\n        let swift = 0;\n        if (text === '明晚' || text === '明早' || text === '明晨') {\n            swift = 1;\n        } else if (text === '昨晚') {\n            swift = -1;\n        }\n        return swift;\n    }\n\n    getHour(text: string, hour: number): number {\n        let result = hour;\n        if (hour < 12 && ['今晚', '明晚', '昨晚'].some(o => o === text)) {\n            result += 12;\n        } else if (hour >= 12 && ['今早', '今晨', '明早', '明晨'].some(o => o === text)) {\n            result -= 12;\n        }\n        return result;\n    }\n}\n\nexport class ChineseDateTimeParser extends BaseDateTimeParser {\n    constructor() {\n        let config = new ChineseDateTimeParserConfiguration();\n        super(config);\n    }\n\n    parse(er: ExtractResult, refTime?: Date): DateTimeParseResult {\n        if (!refTime) refTime = new Date();\n        let referenceTime = refTime;\n\n        let value = null;\n        if (er.type === BaseDateTimeParser.ParserName) {\n            let innerResult = this.mergeDateAndTime(er.text, referenceTime);\n            if (!innerResult.success) {\n                innerResult = this.parseBasicRegex(er.text, referenceTime);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseTimeOfToday(er.text, referenceTime);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.DATETIME] = FormatUtil.formatDateTime(innerResult.futureValue);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.DATETIME] = FormatUtil.formatDateTime(innerResult.pastValue);\n                value = innerResult;\n            }\n        }\n\n        let ret = new DateTimeParseResult(er); {\n            ret.value = value,\n            ret.timexStr = value === null ? \"\" : value.timex,\n            ret.resolutionStr = \"\"\n        };\n\n        return ret;\n    }\n\n    // merge a Date entity and a Time entity\n    protected mergeDateAndTime(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n\n        let er1 = this.config.dateExtractor.extract(text, referenceTime);\n        if (er1.length === 0) {\n            return ret;\n        }\n\n        let er2 = this.config.timeExtractor.extract(text, referenceTime);\n        if (er2.length === 0) {\n            return ret;\n        }\n\n        let pr1 = this.config.dateParser.parse(er1[0], new Date(referenceTime.toDateString()))\n        let pr2 = this.config.timeParser.parse(er2[0], referenceTime);\n        if (pr1.value === null || pr2.value === null) {\n            return ret;\n        }\n\n        let futureDate = pr1.value.futureValue;\n        let pastDate = pr1.value.pastValue;\n        let time = pr2.value.futureValue;\n\n        let hour = time.getHours();\n        let min = time.getMinutes();\n        let sec = time.getSeconds();\n\n        // handle morning, afternoon\n        if (RegExpUtility.getMatches(this.config.pmTimeRegex, text).length && hour < 12) {\n            hour += 12;\n        }\n        else if (RegExpUtility.getMatches(this.config.amTimeRegex, text).length && hour >= 12) {\n            hour -= 12;\n        }\n\n        let timeStr = pr2.timexStr;\n        if (timeStr.endsWith(\"ampm\")) {\n            timeStr = timeStr.substring(0, timeStr.length - 4);\n        }\n\n        timeStr = \"T\" + FormatUtil.toString(hour, 2) + timeStr.substring(3);\n        ret.timex = pr1.timexStr + timeStr;\n\n        let val = pr2.value;\n        if (hour <= 12 && !RegExpUtility.getMatches(this.config.pmTimeRegex, text).length\n            && !RegExpUtility.getMatches(this.config.amTimeRegex, text).length && val.comment) {\n            ret.comment = \"ampm\";\n        }\n\n        ret.futureValue = new Date(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), hour, min, sec);\n        ret.pastValue = new Date(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), hour, min, sec);\n        ret.success = true;\n\n        return ret;\n    }\n\n    protected parseTimeOfToday(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n\n        let ers = this.config.timeExtractor.extract(text, referenceTime);\n        if (ers.length !== 1) {\n            return ret;\n        }\n\n        let pr = this.config.timeParser.parse(ers[0], referenceTime);\n        if (pr.value === null) {\n            return ret;\n        }\n\n        let time = pr.value.futureValue;\n\n        let hour = time.getHours();\n        let min = time.getMinutes();\n        let sec = time.getSeconds();\n        let timeStr = pr.timexStr;\n\n        let match = RegExpUtility.getMatches(this.config.specificTimeOfDayRegex, text).pop();\n\n        if (match) {\n            let matchStr = match.value.toLowerCase();\n\n            // handle \"last\", \"next\"\n            let swift = this.config.getSwiftDay(matchStr);\n            let date = DateUtils.addDays(referenceTime, swift);\n\n            hour = this.config.getHour(matchStr, hour);\n\n            // in this situation, luisStr cannot end up with \"ampm\", because we always have a \"morning\" or \"night\"\n            if (timeStr.endsWith(\"ampm\")) {\n                timeStr = timeStr.substring(0, timeStr.length - 4);\n            }\n            timeStr = \"T\" + FormatUtil.toString(hour, 2) + timeStr.substring(3);\n\n            ret.timex = FormatUtil.formatDate(date) + timeStr;\n            ret.futureValue = ret.pastValue = new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour, min, sec);\n            ret.success = true;\n            return ret;\n        }\n\n        return ret;\n    }\n}","import { RegExpUtility, ExtractResult } from \"recognizers-text\";\nimport { CultureInfo, Culture } from \"recognizers-text-number\";\nimport { NumberWithUnitExtractor, ChineseNumberWithUnitExtractorConfiguration } from \"recognizers-text-number-with-unit\";\nimport { BaseDateTimeExtractor, DateTimeExtra, TimeResult, TimeResolutionUtils } from \"./baseDateTime\";\nimport { Constants, TimeTypeConstants } from \"../constants\"\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { DateTimeResolutionResult, FormatUtil, DateUtils, StringMap } from \"../utilities\";\nimport { BaseTimePeriodParser, ITimePeriodParserConfiguration } from \"../baseTimePeriod\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\"\nimport { ChineseTimeParser } from \"./timeConfiguration\"\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nexport enum TimePeriodType {\n    ShortTime,\n    FullTime\n}\n\nexport class ChineseTimePeriodExtractor extends BaseDateTimeExtractor<TimePeriodType> {\n    protected extractorName = Constants.SYS_DATETIME_TIMEPERIOD; // \"time range\";\n\n    constructor() {\n        super(new Map<RegExp, TimePeriodType>([\n            [ RegExpUtility.getSafeRegExp(ChineseDateTime.TimePeriodRegexes1), TimePeriodType.FullTime ],\n            [ RegExpUtility.getSafeRegExp(ChineseDateTime.TimePeriodRegexes2), TimePeriodType.ShortTime ]\n        ]));\n    }\n}\n\nclass ChineseTimePeriodParserConfiguration implements ITimePeriodParserConfiguration {\n    timeExtractor: IDateTimeExtractor;\n    timeParser: ChineseTimeParser;\n    pureNumberFromToRegex: RegExp;\n    pureNumberBetweenAndRegex: RegExp;\n    timeOfDayRegex: RegExp;\n    numbers: ReadonlyMap<string, number>;\n    utilityConfiguration: any;\n\n    constructor() {\n        this.timeParser = new ChineseTimeParser();\n    }\n\n    getMatchedTimexRange(text: string): any { return null; }\n}\n\nexport class ChineseTimePeriodParser extends BaseTimePeriodParser {\n    private readonly dayDescriptionRegex: RegExp;\n    private readonly onlyDigitMatch: RegExp;\n    private readonly lowBoundMap: ReadonlyMap<string, number>;\n    private readonly numbersMap: ReadonlyMap<string, number>;\n\n    constructor() {\n        let config = new ChineseTimePeriodParserConfiguration();\n        super(config);\n        this.dayDescriptionRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.TimeDayDescRegex);\n        this.onlyDigitMatch = RegExpUtility.getSafeRegExp('\\\\d+');\n        this.numbersMap = ChineseDateTime.TimeNumberDictionary;\n        this.lowBoundMap = ChineseDateTime.TimeLowBoundDesc;\n    }\n\n    public parse(er: ExtractResult, referenceTime?: Date): DateTimeParseResult | null {\n        if (!referenceTime) referenceTime = new Date();\n\n        let extra: DateTimeExtra<TimePeriodType> = er.data;\n        if (!extra) {\n            return null;\n        }\n\n        let parseResult = this.parseTimePeriod(extra, referenceTime);\n\n        if (parseResult.success) {\n            parseResult.futureResolution = {};\n            parseResult.futureResolution[TimeTypeConstants.START_TIME] = FormatUtil.formatTime(parseResult.futureValue.item1);\n            parseResult.futureResolution[TimeTypeConstants.END_TIME] = FormatUtil.formatTime(parseResult.futureValue.item2);\n            parseResult.pastResolution = {};\n            parseResult.pastResolution[TimeTypeConstants.START_TIME] = FormatUtil.formatTime(parseResult.pastValue.item1);\n            parseResult.pastResolution[TimeTypeConstants.END_TIME] = FormatUtil.formatTime(parseResult.pastValue.item2);\n        }\n\n        let result = new DateTimeParseResult(er);\n        result.value = parseResult;\n        result.resolutionStr = '';\n        result.timexStr = parseResult.timex;\n\n        return result;\n    }\n\n    private parseTimePeriod(extra: DateTimeExtra<TimePeriodType>, referenceTime: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n\n        let leftEntity = extra.namedEntity('left');\n        let leftResult = extra.dataType === TimePeriodType.FullTime\n            ? this.getParseTimeResult(leftEntity, referenceTime)\n            : this.getShortLeft(leftEntity.value);\n\n        let rightEntity = extra.namedEntity('right');\n        let rightResult = this.getParseTimeResult(rightEntity, referenceTime);\n\n        // the right side doesn't contain desc while the left side does\n        if (rightResult.lowBound === -1 && leftResult.lowBound !== -1 && rightResult.hour <= leftResult.lowBound) {\n            rightResult.hour += 12;\n        }\n\n        let leftDate = this.buildDate(leftResult, referenceTime);\n        let rightDate = this.buildDate(rightResult, referenceTime);\n\n        if (rightDate.getHours() < leftDate.getHours()) {\n            rightDate = DateUtils.addDays(rightDate, 1);\n        }\n\n        result.futureValue = result.pastValue = {\n            item1: leftDate,\n            item2: rightDate\n        }\n        let leftTimex = this.buildTimex(leftResult);\n        let rightTimex = this.buildTimex(rightResult);\n        let spanTimex = this.buildSpan(leftResult, rightResult);\n        result.timex = `(${leftTimex},${rightTimex},${spanTimex})`;\n        result.success = true;\n\n        return result\n    }\n\n    private getParseTimeResult(entity: any, referenceTime: Date): TimeResult {\n        let extractResult: ExtractResult = {\n            start: entity.index,\n            length: entity.length,\n            text: entity.value,\n            type: Constants.SYS_DATETIME_TIME\n        };\n        let result = this.config.timeParser.parse(extractResult, referenceTime);\n        return result.data;\n    }\n\n    private getShortLeft(source: string): TimeResult {\n        let description = '';\n        if (RegExpUtility.isMatch(this.dayDescriptionRegex, source)) {\n            description = source.substr(0, source.length - 1);\n        }\n\n        let hour = TimeResolutionUtils.matchToValue(this.onlyDigitMatch, this.numbersMap, source.substr(source.length - 1));\n        let timeResult = new TimeResult(hour, -1, -1);\n        TimeResolutionUtils.addDescription(this.lowBoundMap, timeResult, description);\n        return timeResult;\n    }\n\n    private buildDate(time: TimeResult, referenceTime: Date): Date {\n        let day = referenceTime.getDate();\n        let month = referenceTime.getMonth();\n        let year = referenceTime.getFullYear();\n\n        let hour = time.hour > 0 ? time.hour : 0;\n        let min = time.minute > 0 ? time.minute : 0;\n        let sec = time.second > 0 ? time.second : 0;\n\n        return DateUtils.safeCreateFromMinValue(year, month, day, hour, min, sec);\n    }\n\n    private buildTimex(timeResult: TimeResult): string {\n        let timex = 'T';\n        if (timeResult.hour >= 0) {\n            timex = timex + FormatUtil.toString(timeResult.hour, 2);\n            if (timeResult.minute >= 0) {\n                timex = timex + ':' + FormatUtil.toString(timeResult.minute, 2);\n                if (timeResult.second >= 0) {\n                    timex = timex + ':' + FormatUtil.toString(timeResult.second, 2);\n                }\n            }\n        }\n        return timex;\n    }\n\n    private buildSpan(left: TimeResult, right: TimeResult): string {\n        left = this.sanitizeTimeResult(left);\n        right = this.sanitizeTimeResult(right);\n\n        let spanHour = right.hour - left.hour;\n        let spanMin = right.minute - left.minute;\n        let spanSec = right.second - left.second;\n\n        if (spanSec < 0) {\n            spanSec += 60;\n            spanMin -= 1;\n        }\n\n        if (spanMin < 0) {\n            spanMin += 60;\n            spanHour -= 1;\n        }\n\n        if (spanHour < 0) {\n            spanHour += 24;\n        }\n        let spanTimex = `PT${spanHour}H`;\n        if (spanMin !== 0 && spanSec === 0) {\n            spanTimex = spanTimex + `${spanMin}M`;\n        } else if (spanSec !== 0) {\n            spanTimex = spanTimex + `${spanMin}M${spanSec}S`;\n        }\n        return spanTimex;\n    }\n\n    private sanitizeTimeResult(timeResult: TimeResult): TimeResult {\n        return new TimeResult(\n            timeResult.hour,\n            timeResult.minute === -1 ? 0 : timeResult.minute,\n            timeResult.second === -1 ? 0 : timeResult.second\n        )\n    }\n}","import { IExtractor, IParser, ExtractResult, RegExpUtility, StringUtility, Match } from \"recognizers-text\";\nimport { AgnosticNumberParserFactory, AgnosticNumberParserType, ChineseNumberParserConfiguration, BaseNumberExtractor, ChineseIntegerExtractor } from \"recognizers-text-number\"\nimport { Constants as NumberConstants } from \"recognizers-text-number\"\nimport { IDatePeriodExtractorConfiguration, BaseDatePeriodExtractor, IDatePeriodParserConfiguration, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { ChineseDateExtractor, ChineseDateParser } from \"./dateConfiguration\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { ChineseDurationExtractor } from \"./durationConfiguration\";\nimport { Token, IDateTimeUtilityConfiguration, DateTimeResolutionResult, DateUtils, FormatUtil, StringMap } from \"../utilities\";\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\";\nimport { Constants, TimeTypeConstants } from \"../constants\";\n\nclass ChineseDatePeriodExtractorConfiguration implements IDatePeriodExtractorConfiguration {\n    readonly simpleCasesRegexes: RegExp[]\n    readonly tillRegex: RegExp\n    readonly followedUnit: RegExp\n    readonly numberCombinedWithUnit: RegExp\n    readonly pastRegex: RegExp\n    readonly futureRegex: RegExp\n    readonly weekOfRegex: RegExp\n    readonly monthOfRegex: RegExp\n    readonly dateUnitRegex: RegExp\n    readonly inConnectorRegex: RegExp\n    readonly rangeUnitRegex: RegExp\n    readonly datePointExtractor: ChineseDateExtractor\n    readonly integerExtractor: BaseNumberExtractor\n    readonly durationExtractor: BaseDurationExtractor\n    readonly rangeConnectorRegex: RegExp\n\n    constructor() {\n        this.simpleCasesRegexes = [\n            RegExpUtility.getSafeRegExp(ChineseDateTime.SimpleCasesRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.OneWordPeriodRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.StrictYearRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.YearToYear),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.YearAndMonth),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.PureNumYearAndMonth),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.DatePeriodYearInChineseRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.WeekOfMonthRegex),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.SeasonWithYear),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.QuarterRegex),\n        ];\n        this.datePointExtractor = new ChineseDateExtractor();\n        this.integerExtractor = new ChineseIntegerExtractor();\n        this.tillRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DatePeriodTillRegex)\n        this.followedUnit = RegExpUtility.getSafeRegExp(ChineseDateTime.FollowedUnit);\n        this.numberCombinedWithUnit = RegExpUtility.getSafeRegExp(ChineseDateTime.NumberCombinedWithUnit);\n        this.pastRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.PastRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.FutureRegex);\n    }\n\n    getFromTokenIndex(source: string) {\n        let result = { matched: false, index: -1 };\n        if (source.endsWith(\"从\")) {\n            result.index = source.lastIndexOf(\"从\");\n            result.matched = true;\n        }\n        return result;\n    };\n\n    getBetweenTokenIndex(source: string) {\n        return { matched: false, index: -1 };\n    };\n\n    hasConnectorToken(source: string) {\n        return false;\n    }\n}\n\nexport class ChineseDatePeriodExtractor extends BaseDatePeriodExtractor {\n    constructor() {\n        super(new ChineseDatePeriodExtractorConfiguration());\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n        \n        let tokens: Array<Token> = new Array<Token>()\n            .concat(super.matchSimpleCases(source))\n            .concat(super.mergeTwoTimePoints(source, refDate))\n            .concat(this.matchNumberWithUnit(source));\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    private matchNumberWithUnit(source: string): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let durations = new Array<Token>();\n        this.config.integerExtractor.extract(source).forEach(er => {\n            let afterStr = source.substr(er.start + er.length);\n            let followedUnitMatch = RegExpUtility.getMatches(this.config.followedUnit, afterStr).pop();\n            if (followedUnitMatch && followedUnitMatch.index === 0) {\n                durations.push(new Token(er.start, er.start + er.length + followedUnitMatch.length));\n            }\n        });\n\n        RegExpUtility.getMatches(this.config.numberCombinedWithUnit, source).forEach(match => {\n            durations.push(new Token(match.index, match.index + match.length));\n        });\n\n        durations.forEach(duration => {\n            let beforeStr = source.substr(0, duration.start).toLowerCase();\n            if (StringUtility.isNullOrWhitespace(beforeStr)) {\n                return;\n            }\n\n            let match = RegExpUtility.getMatches(this.config.pastRegex, beforeStr).pop();\n            if (match && StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                tokens.push(new Token(match.index, duration.end));\n                return;\n            }\n\n            match = RegExpUtility.getMatches(this.config.futureRegex, beforeStr).pop();\n            if (match && StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                tokens.push(new Token(match.index, duration.end));\n                return;\n            }\n        });\n\n        return tokens;\n    }\n}\n\nclass ChineseDatePeriodParserConfiguration implements IDatePeriodParserConfiguration {\n    readonly dateExtractor: BaseDateExtractor\n    readonly dateParser: BaseDateParser\n    readonly durationExtractor: ChineseDurationExtractor\n    readonly durationParser: BaseDurationParser\n    readonly monthFrontBetweenRegex: RegExp\n    readonly betweenRegex: RegExp\n    readonly monthFrontSimpleCasesRegex: RegExp\n    readonly simpleCasesRegex: RegExp\n    readonly oneWordPeriodRegex: RegExp\n    readonly monthWithYear: RegExp\n    readonly monthNumWithYear: RegExp\n    readonly yearRegex: RegExp\n    readonly pastRegex: RegExp\n    readonly futureRegex: RegExp\n    readonly inConnectorRegex: RegExp\n    readonly weekOfMonthRegex: RegExp\n    readonly weekOfYearRegex: RegExp\n    readonly quarterRegex: RegExp\n    readonly quarterRegexYearFront: RegExp\n    readonly seasonRegex: RegExp\n    readonly weekOfRegex: RegExp\n    readonly monthOfRegex: RegExp\n    readonly whichWeekRegex: RegExp\n    readonly nextPrefixRegex: RegExp\n    readonly pastPrefixRegex: RegExp\n    readonly thisPrefixRegex: RegExp\n    readonly restOfDateRegex: RegExp\n    readonly laterEarlyPeriodRegex: RegExp\n    readonly weekWithWeekDayRangeRegex: RegExp\n    readonly tokenBeforeDate: string\n    readonly dayOfMonth: ReadonlyMap<string, number>\n    readonly monthOfYear: ReadonlyMap<string, number>\n    readonly cardinalMap: ReadonlyMap<string, number>\n    readonly seasonMap: ReadonlyMap<string, string>\n    readonly unitMap: ReadonlyMap<string, string>\n\n    constructor() {\n        this.simpleCasesRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SimpleCasesRegex);\n        this.yearRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.YearRegex);\n        this.seasonRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SeasonRegex);\n        this.seasonMap = ChineseDateTime.ParserConfigurationSeasonMap;\n        this.quarterRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.QuarterRegex);\n        this.cardinalMap = ChineseDateTime.ParserConfigurationCardinalMap;\n        this.unitMap = ChineseDateTime.ParserConfigurationUnitMap;\n        this.durationExtractor = new ChineseDurationExtractor();\n        this.pastRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.PastRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.FutureRegex);\n        this.monthOfYear = ChineseDateTime.ParserConfigurationMonthOfYear;\n        this.dayOfMonth = ChineseDateTime.ParserConfigurationDayOfMonth;\n        this.monthOfYear = ChineseDateTime.ParserConfigurationMonthOfYear;\n        this.oneWordPeriodRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.OneWordPeriodRegex);\n        this.dateExtractor = new ChineseDateExtractor();\n        this.dateParser = new ChineseDateParser();\n        this.tokenBeforeDate = 'on ';\n        this.weekOfMonthRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.WeekOfMonthRegex);\n        this.thisPrefixRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DatePeriodThisRegex);\n        this.nextPrefixRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DatePeriodNextRegex);\n        this.pastPrefixRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DatePeriodLastRegex);\n\n    }\n\n    getSwiftDayOrMonth(source: string): number {\n        let trimmedSource = source.trim().toLowerCase();\n        if (trimmedSource.endsWith('去年')) {\n            return -1;\n        }\n        if (trimmedSource.endsWith('明年')) {\n            return 1;\n        }\n        if (trimmedSource.endsWith('前年')) {\n            return -2;\n        }\n        if (trimmedSource. endsWith('后年')) {\n            return 2;\n        }\n        if (trimmedSource.startsWith('下个')) {\n            return 1;\n        }\n        if (trimmedSource.startsWith('上个')) {\n            return -1;\n        }\n        if (RegExpUtility.isMatch(this.thisPrefixRegex, trimmedSource)) {\n            return 0;\n        }\n        if (RegExpUtility.isMatch(this.nextPrefixRegex, trimmedSource)) {\n            return 1;\n        }\n        if (RegExpUtility.isMatch(this.pastPrefixRegex, trimmedSource)) {\n            return -1;\n        }\n        return 0;\n    }\n\n    getSwiftYear(source: string): number {\n        let trimmedSource = source.trim().toLowerCase();\n        let swift = -10;\n        if (trimmedSource.startsWith('明年')) {\n            swift = 1;\n        } else if (trimmedSource.startsWith('去年')) {\n            swift = -1;\n        } else if (trimmedSource.startsWith('今年')) {\n            swift = 0;\n        }\n        return swift;\n    }\n\n    isFuture(source: string): boolean {\n        return (RegExpUtility.isMatch(this.thisPrefixRegex, source)\n            || RegExpUtility.isMatch(this.nextPrefixRegex, source));\n    }\n\n    isYearToDate(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource === '今年';\n    }\n\n    isMonthToDate(source: string): boolean {\n        return false;\n    }\n\n    isWeekOnly(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('周') || trimmedSource.endsWith('星期');\n    }\n\n    isWeekend(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('周末');\n    }\n\n    isMonthOnly(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('月');\n    }\n\n    isYearOnly(source: string): boolean {\n        let trimmedSource = source.trim().toLowerCase();\n        return trimmedSource.endsWith('年');\n    }\n\n    isLastCardinal(source: string): boolean {\n        return source === '最后一';\n    }\n}\n\nexport class ChineseDatePeriodParser extends BaseDatePeriodParser {\n    private readonly integerExtractor: IExtractor;\n    private readonly numberParser: IParser;\n    private readonly yearInChineseRegex: RegExp;\n    private readonly numberCombinedWithUnitRegex: RegExp;\n    private readonly unitRegex: RegExp;\n    private readonly yearAndMonthRegex: RegExp;\n    private readonly pureNumberYearAndMonthRegex: RegExp;\n    private readonly yearToYearRegex: RegExp;\n    private readonly chineseYearRegex: RegExp;\n\n    constructor() {\n        let config = new ChineseDatePeriodParserConfiguration();\n        super(config, false);\n        this.integerExtractor = new ChineseIntegerExtractor();\n        this.numberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Integer, new ChineseNumberParserConfiguration());\n        this.yearInChineseRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DatePeriodYearInChineseRegex);\n        this.numberCombinedWithUnitRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.NumberCombinedWithUnit);\n        this.unitRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.UnitRegex);\n        this.yearAndMonthRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.YearAndMonth);\n        this.pureNumberYearAndMonthRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.PureNumYearAndMonth);\n        this.yearToYearRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.YearToYear);\n        this.chineseYearRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DatePeriodYearInChineseRegex);\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let source = extractorResult.text.trim().toLowerCase();\n            let innerResult = this.parseSimpleCases(source, referenceDate);\n            if (!innerResult.success) {\n                innerResult = this.parseOneWordPeriod(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.mergeTwoTimePoints(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseNumberWithUnit(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseDuration(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseYearAndMonth(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseYearToYear(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseYear(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseWeekOfMonth(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseSeason(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseQuarter(source, referenceDate);\n            }\n\n            if (innerResult.success) {\n                if (innerResult.futureValue && innerResult.pastValue) {\n                    innerResult.futureResolution = {};\n                    innerResult.futureResolution[TimeTypeConstants.START_DATE] = FormatUtil.formatDate(innerResult.futureValue[0]);\n                    innerResult.futureResolution[TimeTypeConstants.END_DATE] = FormatUtil.formatDate(innerResult.futureValue[1]);\n                    innerResult.pastResolution = {};\n                    innerResult.pastResolution[TimeTypeConstants.START_DATE] = FormatUtil.formatDate(innerResult.pastValue[0]);\n                    innerResult.pastResolution[TimeTypeConstants.END_DATE] = FormatUtil.formatDate(innerResult.pastValue[1]);\n                } else {\n                    innerResult.futureResolution = {};\n                    innerResult.pastResolution = {};\n                }\n                resultValue = innerResult;\n            }\n        }\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n\n    protected getMatchSimpleCase(source: string): Match {\n        return RegExpUtility.getMatches(this.config.simpleCasesRegex, source).pop();\n    }\n\n    protected parseSimpleCases(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let year = referenceDate.getFullYear();\n        let month = referenceDate.getMonth();\n        let noYear = false;\n        let inputYear = false;\n\n        let match = this.getMatchSimpleCase(source);\n\n        if (!match || match.index !== 0 || match.length !== source.length) return result;\n        let days = match.groups('day');\n        let beginDay = this.config.dayOfMonth.get(days.captures[0]);\n        let endDay = this.config.dayOfMonth.get(days.captures[1]);\n        let monthStr = match.groups('month').value;\n        if (!StringUtility.isNullOrEmpty(monthStr)) {\n            month = this.config.monthOfYear.get(monthStr) - 1;\n        } else {\n            monthStr = match.groups('relmonth').value;\n            month += this.config.getSwiftDayOrMonth(monthStr);\n            if (month < 0) {\n                month = 0;\n                year--;\n            } else if (month > 11) {\n                month = 11;\n                year++;\n            }\n        }\n\n        let yearStr = match.groups('year').value;\n        if (!StringUtility.isNullOrEmpty(yearStr)) {\n            year = Number.parseInt(yearStr, 10);\n            inputYear = true;\n        } else {\n            noYear = true;\n        }\n\n        let beginDateLuis = FormatUtil.luisDate(inputYear || this.config.isFuture(monthStr) ? year : -1, month, beginDay);\n        let endDateLuis = FormatUtil.luisDate(inputYear || this.config.isFuture(monthStr) ? year : -1, month, endDay);\n\n        let futureYear = year;\n        let pastYear = year;\n        let startDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, month, beginDay);\n        if (noYear && startDate < referenceDate) futureYear++;\n        if (noYear && startDate >= referenceDate) pastYear--;\n\n        result.timex = `(${beginDateLuis},${endDateLuis},P${endDay - beginDay}D)`;\n        result.futureValue = [\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), futureYear, month, beginDay),\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), futureYear, month, endDay),\n        ];\n        result.pastValue = [\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), pastYear, month, beginDay),\n            DateUtils.safeCreateFromValue(DateUtils.minValue(), pastYear, month, endDay),\n        ];\n        result.success = true;\n        return result;\n    }\n\n    protected parseYear(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let trimmedSource = source.trim();\n        let result = new DateTimeResolutionResult();\n        let isChinese = false;\n        let match = RegExpUtility.getMatches(this.config.yearRegex, trimmedSource).pop();\n        if (!match || match.length !== trimmedSource.length) {\n            match = RegExpUtility.getMatches(this.yearInChineseRegex, trimmedSource).pop();\n            isChinese =  (match && match.length === trimmedSource.length);\n        }\n\n        if (!match || match.length !== trimmedSource.length) {\n            return result;\n        }\n\n        let yearStr = match.value;\n        if (this.config.isYearOnly(yearStr)) {\n            yearStr = yearStr.substr(0, yearStr.length - 1);\n        }\n\n        let year = this.convertYear(yearStr, isChinese);\n        if (yearStr.length === 2) {\n            if (year < 100 && year >= 20) {\n                year += 1900;\n            } else if (year < 20) {\n                year += 2000;\n            }\n        }\n        let beginDay = DateUtils.safeCreateFromMinValue(year, 1, 1);\n        let endDay = DateUtils.safeCreateFromMinValue(year + 1, 1, 1);\n\n        result.timex = FormatUtil.toString(year, 4);\n        result.futureValue = [beginDay, endDay];\n        result.pastValue = [beginDay, endDay];\n        result.success = true;\n        return result;\n    }\n\n    private convertYear(yearStr: string, isChinese: boolean): number {\n        let year = -1;\n        let er: ExtractResult;\n        if (isChinese) {\n            let yearNum = 0;\n            er = this.integerExtractor.extract(yearStr).pop();\n            if (er && er.type === NumberConstants.SYS_NUM_INTEGER) {\n                yearNum = Number.parseInt(this.numberParser.parse(er).value);\n            }\n\n            if (yearNum < 10) {\n                yearNum = 0;\n                for (let index = 0; index < yearStr.length; index++) {\n                    let char = yearStr.charAt[index];\n                    yearNum *= 10;\n                    er = this.integerExtractor.extract(char).pop();\n                    if (er && er.type === NumberConstants.SYS_NUM_INTEGER) {\n                        yearNum += Number.parseInt(this.numberParser.parse(er).value);\n                    }\n                }\n            } else {\n                year = yearNum;\n            }\n        } else {\n            year = Number.parseInt(yearStr, 10);\n        }\n\n        return year === 0 ? -1 : year;\n    }\n\n    protected getWeekOfMonth(cardinal: number, month: number, year: number, referenceDate: Date, noYear: boolean): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let seedDate = this.computeDate(cardinal, 1, month, year);\n\n        let futureDate = new Date(seedDate);\n        let pastDate = new Date(seedDate);\n        if (noYear && futureDate < referenceDate) {\n            futureDate = this.computeDate(cardinal, 1, month, year + 1);\n            if (futureDate.getMonth() !== month) {\n                futureDate.setDate(futureDate.getDate() - 7);\n            }\n        }\n        if (noYear && pastDate >= referenceDate) {\n            pastDate = this.computeDate(cardinal, 1, month, year - 1);\n            if (pastDate.getMonth() !== month) {\n                pastDate.setDate(pastDate.getDate() - 7);\n            }\n        }\n        result.timex = noYear ?\n        `XXXX-${FormatUtil.toString(month + 1, 2)}-W${FormatUtil.toString(cardinal, 2)}` :\n        `${FormatUtil.toString(year, 4)}-${FormatUtil.toString(month + 1, 2)}-W${FormatUtil.toString(cardinal, 2)}`;\n        result.futureValue = [futureDate, DateUtils.addDays(futureDate, this.inclusiveEndPeriod ? 6 : 7)];\n        result.pastValue = [pastDate, DateUtils.addDays(pastDate, this.inclusiveEndPeriod ? 6 : 7)];\n        result.success = true;\n        return result;\n    }\n\n    protected computeDate(cardinal: number, weekday: number, month: number, year: number) {\n        let firstDay = new Date(year, month, 1);\n        let firstWeekday = DateUtils.this(firstDay, weekday);\n        if (weekday === 0) weekday = 7;\n        if (weekday < firstDay.getDay()) firstWeekday = DateUtils.next(firstDay, weekday);\n        firstWeekday.setDate(firstWeekday.getDate() + (7 * (cardinal - 1)));\n        return firstWeekday;\n    }\n\n    protected parseSeason(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.seasonRegex, source).pop();\n        if (!match || match.length !== source.length) return result;\n\n        let year = referenceDate.getFullYear();\n        let yearNum = match.groups('year').value;\n        let yearChinese = match.groups('yearchs').value;\n        let yearRelative = match.groups('yearrel').value;\n        let hasYear = false;\n\n        if (!StringUtility.isNullOrEmpty(yearNum)) {\n            hasYear = true;\n            if (this.config.isYearOnly(yearNum)) {\n                yearNum = yearNum.substr(0, yearNum.length - 1);\n            }\n            year = this.convertYear(yearNum, false);\n        } else if (!StringUtility.isNullOrEmpty(yearChinese)) {\n            hasYear = true;\n            if (this.config.isYearOnly(yearChinese)) {\n                yearChinese = yearChinese.substr(0, yearChinese.length - 1);\n            }\n            year = this.convertYear(yearChinese, true);\n        } else if (!StringUtility.isNullOrEmpty(yearRelative)) {\n            hasYear = true;\n            year += this.config.getSwiftDayOrMonth(yearRelative);\n        }\n\n        if (year < 100 && year >= 90) {\n            year += 1900;\n        } else if (year < 100 && year < 20) {\n            year += 2000;\n        }\n\n        let seasonStr = match.groups('seas').value;\n        let season = this.config.seasonMap.get(seasonStr);\n\n        if (hasYear) {\n            result.timex = `${FormatUtil.toString(year, 4)}-${season}`;\n        }\n\n        result.success = true;\n        return result;\n    }\n\n    protected parseQuarter(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.quarterRegex, source).pop();\n        if (!match || match.length !== source.length) return result;\n\n        let year = referenceDate.getFullYear();\n        let yearNum = match.groups('year').value;\n        let yearChinese = match.groups('yearchs').value;\n        let yearRelative = match.groups('yearrel').value;\n\n        if (!StringUtility.isNullOrEmpty(yearNum)) {\n            if (this.config.isYearOnly(yearNum)) {\n                yearNum = yearNum.substr(0, yearNum.length - 1);\n            }\n            year = this.convertYear(yearNum, false);\n        } else if (!StringUtility.isNullOrEmpty(yearChinese)) {\n            if (this.config.isYearOnly(yearChinese)) {\n                yearChinese = yearChinese.substr(0, yearChinese.length - 1);\n            }\n            year = this.convertYear(yearChinese, true);\n        } else if (!StringUtility.isNullOrEmpty(yearRelative)) {\n            year += this.config.getSwiftDayOrMonth(yearRelative);\n        }\n\n        if (year < 100 && year >= 90) {\n            year += 1900;\n        } else if (year < 100 && year < 20) {\n            year += 2000;\n        }\n\n        let cardinalStr = match.groups('cardinal').value;\n        let quarterNum = this.config.cardinalMap.get(cardinalStr);\n        let beginDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, quarterNum * 3 - 3, 1);\n        let endDate = DateUtils.safeCreateFromValue(DateUtils.minValue(), year, quarterNum * 3, 1);\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.timex = `(${FormatUtil.luisDateFromDate(beginDate)},${FormatUtil.luisDateFromDate(endDate)},P3M)`;\n        result.success = true;\n        return result;\n    }\n\n    protected parseNumberWithUnit(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n\n        // if there are NO spaces between number and unit\n        let match = RegExpUtility.getMatches(this.numberCombinedWithUnitRegex, source).pop();\n        if (!match) return result;\n\n        let sourceUnit = match.groups('unit').value.trim().toLowerCase();\n        if (!this.config.unitMap.has(sourceUnit)) return result;\n\n        let numStr = match.groups('num').value;\n        let beforeStr = source.substr(0, match.index).trim().toLowerCase();\n\n        return this.parseCommonDurationWithUnit(beforeStr, sourceUnit, numStr, referenceDate);\n    }\n\n    protected parseDuration(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        // for case \"前两年\" \"后三年\"\n        let durationResult = this.config.durationExtractor.extract(source, referenceDate).pop();\n        if (!durationResult) return result;\n\n        let match = RegExpUtility.getMatches(this.unitRegex, durationResult.text).pop();\n        if (!match) return result;\n\n        let sourceUnit = match.groups('unit').value.trim().toLowerCase();\n        if (!this.config.unitMap.has(sourceUnit)) return result;\n\n        let beforeStr = source.substr(0, durationResult.start).trim().toLowerCase();\n        let numberStr = durationResult.text.substr(0, match.index).trim().toLowerCase();\n        let numberValue = this.convertChineseToNumber(numberStr);\n        let numStr = numberValue.toString();\n\n        return this.parseCommonDurationWithUnit(beforeStr, sourceUnit, numStr, referenceDate);\n    }\n\n    private parseCommonDurationWithUnit(beforeStr: string, sourceUnit: string, numStr: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n\n        let unitStr = this.config.unitMap.get(sourceUnit);\n        let pastMatch = RegExpUtility.getMatches(this.config.pastRegex, beforeStr).pop();\n        let hasPast = pastMatch && pastMatch.length === beforeStr.length;\n\n        let futureMatch = RegExpUtility.getMatches(this.config.futureRegex, beforeStr).pop();\n        let hasFuture = futureMatch && futureMatch.length === beforeStr.length;\n\n        if (!hasFuture && !hasPast) {\n            return result;\n        }\n\n        let beginDate = new Date(referenceDate);\n        let endDate = new Date(referenceDate);\n        let difference = Number.parseFloat(numStr);\n        switch(unitStr) {\n            case 'D':\n                beginDate = hasPast ? DateUtils.addDays(referenceDate, -difference) : beginDate;\n                endDate = hasFuture ? DateUtils.addDays(referenceDate, difference) : endDate;\n            break;\n            case 'W':\n                beginDate = hasPast ? DateUtils.addDays(referenceDate, -7 * difference) : beginDate;\n                endDate = hasFuture ? DateUtils.addDays(referenceDate, 7 * difference) : endDate;\n            break;\n            case 'MON':\n                beginDate = hasPast ? DateUtils.addMonths(referenceDate, -Math.round(difference)) : beginDate;\n                endDate = hasFuture ? DateUtils.addMonths(referenceDate, Math.round(difference)) : endDate;\n            break;\n            case 'Y':\n                beginDate = hasPast ? DateUtils.addYears(referenceDate, -Math.round(difference)) : beginDate;\n                endDate = hasFuture ? DateUtils.addYears(referenceDate, Math.round(difference)) : endDate;\n            break;\n            default: return result;\n        }\n        if (hasFuture) {\n            beginDate = DateUtils.addDays(beginDate, 1);\n            endDate = DateUtils.addDays(endDate, 1);\n        }\n\n        let beginTimex = FormatUtil.luisDateFromDate(beginDate);\n        let endTimex = FormatUtil.luisDateFromDate(endDate);\n        result.timex = `(${beginTimex},${endTimex},P${numStr}${unitStr.charAt(0)})`;\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.success = true;\n        return result;\n    }\n\n    private convertChineseToNumber(source: string): number {\n        let num = -1;\n        let er = this.integerExtractor.extract(source).pop();\n        if (er && er.type === NumberConstants.SYS_NUM_INTEGER) {\n            num = Number.parseInt(this.numberParser.parse(er).value);\n        }\n        return num;\n    }\n\n    private parseYearAndMonth(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.yearAndMonthRegex, source).pop();\n        if (!match || match.length !== source.length) {\n            match = RegExpUtility.getMatches(this.pureNumberYearAndMonthRegex, source).pop();\n        }\n        if (!match || match.length !== source.length) {\n            return result;\n        }\n\n        // parse year\n        let year = referenceDate.getFullYear();\n        let yearNum = match.groups('year').value;\n        let yearChinese = match.groups('yearchs').value;\n        let yearRelative = match.groups('yearrel').value;\n\n        if (!StringUtility.isNullOrEmpty(yearNum)) {\n            if (this.config.isYearOnly(yearNum)) {\n                yearNum = yearNum.substr(0, yearNum.length - 1);\n            }\n            year = this.convertYear(yearNum, false);\n        } else if (!StringUtility.isNullOrEmpty(yearChinese)) {\n            if (this.config.isYearOnly(yearChinese)) {\n                yearChinese = yearChinese.substr(0, yearChinese.length - 1);\n            }\n            year = this.convertYear(yearChinese, true);\n        } else if (!StringUtility.isNullOrEmpty(yearRelative)) {\n            year += this.config.getSwiftDayOrMonth(yearRelative);\n        }\n\n        if (year < 100 && year >= 90) {\n            year += 1900;\n        } else if (year < 100 && year < 20) {\n            year += 2000;\n        }\n\n        let monthStr = match.groups('month').value.toLowerCase();\n        let month = (this.config.monthOfYear.get(monthStr) % 12) - 1;\n\n        let beginDate = DateUtils.safeCreateFromMinValue(year, month, 1);\n        let endDate = month === 11\n            ? DateUtils.safeCreateFromMinValue(year + 1, 1, 1)\n            : DateUtils.safeCreateFromMinValue(year, month + 1, 1);\n\n        result.timex = FormatUtil.toString(year, 4) + '-' + FormatUtil.toString(month, 2);\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.success = true;\n        return result;\n    }\n\n    private parseYearToYear(source: string, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n\n        let match = RegExpUtility.getMatches(this.yearToYearRegex, source).pop();\n        if (!match) {\n            return result;\n        }\n\n        let yearMatches = RegExpUtility.getMatches(this.config.yearRegex, source);\n        let chineseYearMatches = RegExpUtility.getMatches(this.chineseYearRegex, source);\n\n        let beginYear = 0;\n        let endYear = 0;\n\n        if (yearMatches.length === 2) {\n            beginYear = this.convertChineseToNumber(yearMatches[0].groups('year').value);\n            endYear = this.convertChineseToNumber(yearMatches[1].groups('year').value);\n        } else if (chineseYearMatches.length === 2) {\n            beginYear = this.convertChineseToNumber(chineseYearMatches[0].groups('year').value);\n            endYear = this.convertChineseToNumber(chineseYearMatches[1].groups('year').value);\n        } else if (yearMatches.length === 1 && chineseYearMatches.length === 1) {\n            if (yearMatches[0].index < chineseYearMatches[0].index) {\n                beginYear = this.convertChineseToNumber(yearMatches[0].groups('year').value);\n                endYear = this.convertChineseToNumber(chineseYearMatches[0].groups('year').value);\n            } else {\n                beginYear = this.convertChineseToNumber(chineseYearMatches[0].groups('year').value);\n                endYear = this.convertChineseToNumber(yearMatches[0].groups('year').value);\n            }\n        }\n\n        beginYear = this.sanitizeYear(beginYear);\n        endYear = this.sanitizeYear(endYear);\n\n        let beginDate = DateUtils.safeCreateFromMinValue(beginYear, 1, 1);\n        let endDate = DateUtils.safeCreateFromMinValue(endYear, 11, 31);\n        let beginTimex = FormatUtil.toString(beginYear, 4);\n        let endTimex = FormatUtil.toString(endYear, 4);\n\n        result.timex = `(${beginYear},${endYear},P${endYear - beginYear}Y)`;\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.success = true;\n\n        return result;\n    }\n\n    private sanitizeYear(year: number): number {\n        let result = year;\n        if (year < 100 && year >= 90) {\n            result += 1900;\n        } else if (year < 100 && year < 20) {\n            result += 2000;\n        }\n        return result;\n    }\n}","import { IExtractor, IParser, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { ChineseNumberParserConfiguration, AgnosticNumberParserFactory, AgnosticNumberParserType, BaseNumberParser, BaseNumberExtractor, ChineseCardinalExtractor } from \"recognizers-text-number\"\nimport { Constants, TimeTypeConstants } from \"../constants\";\nimport { IDateTimePeriodExtractorConfiguration, BaseDateTimePeriodExtractor, IDateTimePeriodParserConfiguration, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { ChineseDurationExtractor } from \"./durationConfiguration\";\nimport { ChineseTimeExtractor, ChineseTimeParser } from \"./timeConfiguration\";\nimport { ChineseTimePeriodExtractor, ChineseTimePeriodParser } from \"./timePeriodConfiguration\";\nimport { ChineseDateExtractor, ChineseDateParser } from \"./dateConfiguration\";\nimport { ChineseDateTimeExtractor, ChineseDateTimeParser } from \"./dateTimeConfiguration\";\nimport { DateUtils, Token, IDateTimeUtilityConfiguration, DateTimeResolutionResult, FormatUtil, StringMap } from \"../utilities\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\"\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { IDateTimeExtractor } from \"../baseDateTime\";\n\nclass ChineseDateTimePeriodExtractorConfiguration implements IDateTimePeriodExtractorConfiguration {\n    readonly cardinalExtractor: ChineseCardinalExtractor\n    readonly singleDateExtractor: BaseDateExtractor\n    readonly singleTimeExtractor: ChineseTimeExtractor\n    readonly singleDateTimeExtractor: ChineseDateTimeExtractor\n    readonly durationExtractor: BaseDurationExtractor\n    readonly timePeriodExtractor: IDateTimeExtractor\n    readonly simpleCasesRegexes: RegExp[]\n    readonly prepositionRegex: RegExp\n    readonly tillRegex: RegExp\n    readonly specificTimeOfDayRegex: RegExp\n    readonly timeOfDayRegex: RegExp\n    readonly periodTimeOfDayWithDateRegex: RegExp\n    readonly followedUnit: RegExp\n    readonly numberCombinedWithUnit: RegExp\n    readonly timeUnitRegex: RegExp\n    readonly pastPrefixRegex: RegExp\n    readonly nextPrefixRegex: RegExp\n    readonly rangeConnectorRegex: RegExp\n    readonly relativeTimeUnitRegex: RegExp\n    readonly restOfDateTimeRegex: RegExp\n    readonly generalEndingRegex: RegExp\n    readonly middlePauseRegex: RegExp\n\n    getFromTokenIndex(source: string) {\n        let result = { matched: false, index: -1 };\n        if (source.endsWith(\"从\")) {\n            result.index = source.lastIndexOf(\"从\");\n            result.matched = true;\n        }\n        return result;\n    };\n\n    getBetweenTokenIndex(source: string) {\n        return { matched: false, index: -1 };\n    };\n\n    hasConnectorToken(source: string): boolean {\n        return (source === '和' || source === ' 与' || source === '到');\n    };\n\n    constructor() {\n        this.singleDateExtractor = new ChineseDateExtractor();\n        this.singleTimeExtractor = new ChineseTimeExtractor();\n        this.singleDateTimeExtractor = new ChineseDateTimeExtractor();\n        this.prepositionRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodPrepositionRegex);\n        this.tillRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodTillRegex);\n        this.cardinalExtractor = new ChineseCardinalExtractor();\n        this.followedUnit = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodFollowedUnit);\n        this.timeUnitRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodUnitRegex);\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SpecificTimeOfDayRegex);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.TimeOfDayRegex)\n    }\n}\n\nexport class ChineseDateTimePeriodExtractor extends BaseDateTimePeriodExtractor {\n    private readonly zhijianRegex: RegExp;\n    private readonly pastRegex: RegExp;\n    private readonly futureRegex: RegExp;\n\n    constructor() {\n        super(new ChineseDateTimePeriodExtractorConfiguration());\n        this.zhijianRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.ZhijianRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.PastRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.FutureRegex);\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n        .concat(this.mergeDateAndTimePeriod(source, referenceDate))\n        .concat(this.mergeTwoTimePoints(source, referenceDate))\n        .concat(this.matchNubmerWithUnit(source))\n        .concat(this.matchNight(source, referenceDate))\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    private mergeDateAndTimePeriod(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ersDate = this.config.singleDateExtractor.extract(source, refDate);\n        let ersTime = this.config.singleTimeExtractor.extract(source, refDate);\n        let timeResults = new Array<ExtractResult>();\n        let j = 0;\n        for (let i = 0; i < ersDate.length; i++) {\n            timeResults.push(ersDate[i]);\n            while (j < ersTime.length && ersTime[j].start + ersTime[j].length <= ersDate[i].start) {\n                timeResults.push(ersTime[j]);\n                j++;\n            }\n\n            while (j < ersTime.length && ExtractResult.isOverlap(ersTime[j], ersDate[i])) {\n                j++;\n            }\n        }\n\n        for (j; j < ersTime.length; j++) {\n            timeResults.push(ersTime[j]);\n        }\n        timeResults = timeResults.sort((a, b) => a.start > b.start ? 1 : a.start < b.start ? -1 : 0);\n\n        let idx = 0;\n        while (idx < timeResults.length - 1) {\n            let current = timeResults[idx];\n            let next = timeResults[idx + 1];\n            if (current.type === Constants.SYS_DATETIME_DATE && next.type === Constants.SYS_DATETIME_TIMEPERIOD) {\n                let middleBegin = current.start + current.length;\n                let middleEnd = next.start;\n                let middleStr = source.substring(middleBegin, middleEnd).trim();\n                if (StringUtility.isNullOrWhitespace(middleStr) || RegExpUtility.isMatch(this.config.prepositionRegex, middleStr)) {\n                    let periodBegin = current.start;\n                    let periodEnd = next.start + next.length;\n                    tokens.push(new Token(periodBegin, periodEnd));\n                }\n                idx++;\n            }\n            idx++;\n        }\n\n        return tokens;\n    }\n\n    protected mergeTwoTimePoints(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let ersDateTime = this.config.singleDateTimeExtractor.extract(source, refDate);\n        let ersTime = this.config.singleTimeExtractor.extract(source, refDate);\n        let innerMarks: ExtractResult[] = [];\n        let j = 0;\n        ersDateTime.forEach((erDateTime, index) => {\n            innerMarks.push(erDateTime);\n            while (j < ersTime.length && ersTime[j].start + ersTime[j].length < erDateTime.start) {\n                innerMarks.push(ersTime[j++]);\n            }\n            while (j < ersTime.length && ExtractResult.isOverlap(ersTime[j], erDateTime)) {\n                j++;\n            }\n        });\n\n        while (j < ersTime.length) {\n            innerMarks.push(ersTime[j++]);\n        }\n        innerMarks = innerMarks.sort((erA, erB) => erA.start < erB.start ? -1 : erA.start === erB.start ? 0 : 1);\n\n        let idx = 0;\n        while (idx < innerMarks.length - 1) {\n            let currentMark = innerMarks[idx];\n            let nextMark = innerMarks[idx + 1];\n            if (currentMark.type === Constants.SYS_DATETIME_TIME && nextMark.type === Constants.SYS_DATETIME_TIME) {\n                idx++;\n                continue;\n            }\n\n            let middleBegin = currentMark.start + currentMark.length;\n            let middleEnd = nextMark.start;\n\n            let middleStr = source.substr(middleBegin, middleEnd - middleBegin).trim().toLowerCase();\n            let matches = RegExpUtility.getMatches(this.config.tillRegex, middleStr);\n            if (matches && matches.length > 0 && matches[0].index === 0 && matches[0].length === middleStr.length) {\n                let periodBegin = currentMark.start;\n                let periodEnd = nextMark.start + nextMark.length;\n                let beforeStr = source.substr(0, periodBegin).trim().toLowerCase();\n                let fromTokenIndex = this.config.getFromTokenIndex(beforeStr);\n                if (fromTokenIndex.matched) {\n                    periodBegin = fromTokenIndex.index;\n                }\n\n                tokens.push(new Token(periodBegin, periodEnd))\n                idx += 2;\n                continue;\n            }\n            if (this.config.hasConnectorToken(middleStr)) {\n                let periodBegin = currentMark.start;\n                let periodEnd = nextMark.start + nextMark.length;\n                let afterStr = source.substr(periodEnd).trim().toLowerCase();\n                let match = RegExpUtility.getMatches(this.zhijianRegex, afterStr).pop();\n                if (match) {\n                    tokens.push(new Token(periodBegin, periodEnd + match.length))\n                    idx += 2;\n                    continue;\n                }\n            }\n            idx++;\n        };\n        return tokens;\n    }\n\n    private matchNubmerWithUnit(source: string): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        let durations = new Array<Token>();\n        this.config.cardinalExtractor.extract(source).forEach(er => {\n            let afterStr = source.substr(er.start + er.length);\n            let followedUnitMatch = RegExpUtility.getMatches(this.config.followedUnit, afterStr).pop();\n            if (followedUnitMatch && followedUnitMatch.index === 0) {\n                durations.push(new Token(er.start, er.start + er.length + followedUnitMatch.length));\n            }\n        });\n\n        RegExpUtility.getMatches(this.config.timeUnitRegex, source).forEach(match => {\n            durations.push(new Token(match.index, match.index + match.length));\n        });\n\n        durations.forEach(duration => {\n            let beforeStr = source.substr(0, duration.start).toLowerCase();\n            if (StringUtility.isNullOrWhitespace(beforeStr)) {\n                return;\n            }\n\n            let match = RegExpUtility.getMatches(this.pastRegex, beforeStr).pop();\n            if (match && StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                tokens.push(new Token(match.index, duration.end));\n                return;\n            }\n\n            match = RegExpUtility.getMatches(this.futureRegex, beforeStr).pop();\n            if (match && StringUtility.isNullOrWhitespace(beforeStr.substr(match.index + match.length))) {\n                tokens.push(new Token(match.index, duration.end));\n                return;\n            }\n        });\n\n        return tokens;\n    }\n\n    protected matchNight(source: string, refDate: Date): Array<Token> {\n        let tokens: Array<Token> = new Array<Token>();\n        RegExpUtility.getMatches(this.config.specificTimeOfDayRegex, source).forEach(match => {\n            tokens.push(new Token(match.index, match.index + match.length))\n        });\n\n        this.config.singleDateExtractor.extract(source, refDate).forEach(er => {\n            let afterStr = source.substr(er.start + er.length);\n            let match = RegExpUtility.getMatches(this.config.timeOfDayRegex, afterStr).pop();\n            if (match) {\n                let middleStr = source.substr(0, match.index);\n                if (StringUtility.isNullOrWhitespace(middleStr) || RegExpUtility.isMatch(this.config.prepositionRegex, middleStr)) {\n                    tokens.push(new Token(er.start, er.start + er.length + match.index + match.length))\n                }\n            }\n        });\n\n        return tokens;\n    }\n}\n\nclass ChineseDateTimePeriodParserConfiguration implements IDateTimePeriodParserConfiguration {\n    readonly pureNumberFromToRegex: RegExp\n    readonly pureNumberBetweenAndRegex: RegExp\n    readonly periodTimeOfDayWithDateRegex: RegExp\n    readonly specificTimeOfDayRegex: RegExp\n    readonly pastRegex: RegExp\n    readonly futureRegex: RegExp\n    readonly relativeTimeUnitRegex: RegExp\n    readonly restOfDateTimeRegex: RegExp\n    readonly numbers: ReadonlyMap<string, number>\n    readonly unitMap: ReadonlyMap<string, string>\n    readonly dateExtractor: BaseDateExtractor\n    readonly timeExtractor: IDateTimeExtractor\n    readonly dateTimeExtractor: ChineseDateTimeExtractor\n    readonly timePeriodExtractor: IDateTimeExtractor\n    readonly durationExtractor: BaseDurationExtractor\n    readonly dateParser: BaseDateParser\n    readonly timeParser: BaseTimeParser\n    readonly dateTimeParser: ChineseDateTimeParser\n    readonly timePeriodParser: BaseTimePeriodParser\n    readonly durationParser: BaseDurationParser\n\n    constructor() {\n        this.dateExtractor = new ChineseDateExtractor();\n        this.timeExtractor = new ChineseTimeExtractor();\n        this.dateTimeExtractor = new ChineseDateTimeExtractor();\n        this.timePeriodExtractor = new ChineseTimePeriodExtractor();\n        this.dateParser = new ChineseDateParser();\n        this.timeParser = new ChineseTimeParser();\n        this.dateTimeParser = new ChineseDateTimeParser();\n        this.timePeriodParser = new ChineseTimePeriodParser();\n        this.specificTimeOfDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SpecificTimeOfDayRegex);\n        this.relativeTimeUnitRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.TimeOfDayRegex);\n        this.pastRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.PastRegex);\n        this.futureRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.FutureRegex);\n        this.unitMap = ChineseDateTime.ParserConfigurationUnitMap;\n    }\n\n    getMatchedTimeRange(source: string): { timeStr: string; beginHour: number; endHour: number; endMin: number; success: boolean; swift?: number } {\n        let swift = 0;\n        let beginHour = 0;\n        let endHour = 0;\n        let endMin = 0;\n        let timeStr = '';\n        switch (source) {\n            case '今晚':\n                swift = 0;\n                timeStr = 'TEV';\n                beginHour = 16;\n                endHour = 20;\n            break;\n            case '今早':\n            case '今晨':\n                swift = 0;\n                timeStr = 'TMO';\n                beginHour = 8;\n                endHour = 12;\n            break;\n            case '明晚':\n                swift = 1;\n                timeStr = 'TEV';\n                beginHour = 16;\n                endHour = 20;\n            break;\n            case '明早':\n            case '明晨':\n                swift = 1;\n                timeStr = 'TMO';\n                beginHour = 8;\n                endHour = 12;\n            break;\n            case '昨晚':\n                swift = -1;\n                timeStr = 'TEV';\n                beginHour = 16;\n                endHour = 20;\n            break;\n            default:\n                return {\n                    timeStr: '',\n                    beginHour: 0,\n                    endHour: 0,\n                    endMin: 0,\n                    swift: 0,\n                    success: false\n                }\n        }\n        return {\n            timeStr: timeStr,\n            beginHour: beginHour,\n            endHour: endHour,\n            endMin: endMin,\n            swift: swift,\n            success: true\n        };\n    }\n\n    getSwiftPrefix(source: string): number {\n        return null;\n    }\n}\n\nexport class ChineseDateTimePeriodParser extends BaseDateTimePeriodParser {\n    private readonly TMORegex: RegExp;\n    private readonly TAFRegex: RegExp;\n    private readonly TEVRegex: RegExp;\n    private readonly TNIRegex; RegExp;\n    private readonly timeOfDayRegex: RegExp;\n    private readonly cardinalExtractor: IExtractor;\n    private readonly cardinalParser: IParser;\n\n    constructor() {\n        let config = new ChineseDateTimePeriodParserConfiguration();\n        super(config);\n        this.TMORegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodMORegex);\n        this.TAFRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodAFRegex);\n        this.TEVRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodEVRegex);\n        this.TNIRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.DateTimePeriodNIRegex);\n        this.timeOfDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.TimeOfDayRegex);\n        this.cardinalExtractor = new ChineseCardinalExtractor();\n        this.cardinalParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Cardinal, new ChineseNumberParserConfiguration());\n    }\n\n    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let resultValue;\n        if (extractorResult.type === this.parserName) {\n            let source = extractorResult.text.trim().toLowerCase();\n            let innerResult = this.mergeDateAndTimePeriods(source, referenceDate);\n            if (!innerResult.success) {\n                innerResult = this.mergeTwoTimePoints(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseSpecificTimeOfDay(source, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseNumberWithUnit(source, referenceDate);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.START_DATETIME] = FormatUtil.formatDateTime(innerResult.futureValue[0]);\n                innerResult.futureResolution[TimeTypeConstants.END_DATETIME] = FormatUtil.formatDateTime(innerResult.futureValue[1]);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.START_DATETIME] = FormatUtil.formatDateTime(innerResult.pastValue[0]);\n                innerResult.pastResolution[TimeTypeConstants.END_DATETIME] = FormatUtil.formatDateTime(innerResult.pastValue[1]);\n                resultValue = innerResult;\n            }\n        }\n        let result = new DateTimeParseResult(extractorResult);\n        result.value = resultValue;\n        result.timexStr = resultValue ? resultValue.timex : '';\n        result.resolutionStr = '';\n\n        return result;\n    }\n\n    protected mergeDateAndTimePeriods(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n\n        let erDate = this.config.dateExtractor.extract(text, referenceTime).pop();\n        let erTimePeriod = this.config.timePeriodExtractor.extract(text, referenceTime).pop();\n        if (!erDate || !erTimePeriod) return result;\n\n        let prDate = this.config.dateParser.parse(erDate, referenceTime);\n        let prTimePeriod = this.config.timePeriodParser.parse(erTimePeriod, referenceTime);\n\n        let split = prTimePeriod.timexStr.split('T');\n        if (split.length !== 4) {\n            return result;\n        }\n\n        let beginTime: Date = prTimePeriod.value.futureValue.item1;\n        let endTime: Date = prTimePeriod.value.futureValue.item2;\n\n        let futureDate: Date = prDate.value.futureValue;\n        let pastDate: Date = prDate.value.pastValue;\n\n        result.futureValue = [\n            DateUtils.safeCreateFromMinValueWithDateAndTime(futureDate, beginTime),\n            DateUtils.safeCreateFromMinValueWithDateAndTime(futureDate, endTime)\n        ]\n        result.pastValue = [\n            DateUtils.safeCreateFromMinValueWithDateAndTime(pastDate, beginTime),\n            DateUtils.safeCreateFromMinValueWithDateAndTime(pastDate, endTime)\n        ]\n        let dateTimex = prDate.timexStr;\n        result.timex = `${split[0]}${dateTimex}T${split[1]}${dateTimex}T${split[2]}T${split[3]}`;\n        result.success = true;\n\n        return result;\n    }\n\n    protected mergeTwoTimePoints(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let prs: { begin: DateTimeParseResult, end: DateTimeParseResult };\n        let timeErs = this.config.timeExtractor.extract(text, referenceTime);\n        let datetimeErs = this.config.dateTimeExtractor.extract(text, referenceTime);\n        let bothHasDate = false;\n        let beginHasDate = false;\n        let endHasDate = false;\n\n        if (datetimeErs.length === 2) {\n            prs = this.getTwoPoints(datetimeErs[0], datetimeErs[1], this.config.dateTimeParser, this.config.dateTimeParser, referenceTime);\n            bothHasDate = true;\n        } else if (datetimeErs.length === 1 && timeErs.length === 2) {\n            if (ExtractResult.isOverlap(datetimeErs[0], timeErs[0])) {\n                prs = this.getTwoPoints(datetimeErs[0], timeErs[1], this.config.dateTimeParser, this.config.timeParser, referenceTime);\n                beginHasDate = true;\n            } else {\n                prs = this.getTwoPoints(timeErs[0], datetimeErs[0], this.config.timeParser, this.config.dateTimeParser, referenceTime);\n                endHasDate = true;\n            }\n        } else if (datetimeErs.length === 1 && timeErs.length === 1) {\n            if (timeErs[0].start < datetimeErs[0].start) {\n                prs = this.getTwoPoints(timeErs[0], datetimeErs[0], this.config.timeParser, this.config.dateTimeParser, referenceTime);\n                endHasDate = true;\n            } else {\n                prs = this.getTwoPoints(datetimeErs[0], timeErs[0], this.config.dateTimeParser, this.config.timeParser, referenceTime);\n                beginHasDate = true;\n            }\n        }\n        if (!prs || !prs.begin.value || !prs.end.value) return result;\n\n        let futureBegin: Date = prs.begin.value.futureValue;\n        let futureEnd: Date = prs.end.value.futureValue;\n        let pastBegin: Date = prs.begin.value.pastValue;\n        let pastEnd: Date = prs.end.value.pastValue;\n\n        if (futureBegin.getTime() > futureEnd.getTime()) futureBegin = pastBegin;\n        if (pastEnd.getTime() < pastBegin.getTime()) pastEnd = futureEnd;\n\n        let rightTime = DateUtils.safeCreateFromMinValueWithDateAndTime(referenceTime);\n        let leftTime = DateUtils.safeCreateFromMinValueWithDateAndTime(referenceTime);\n\n        if (bothHasDate) {\n            rightTime = DateUtils.safeCreateFromMinValueWithDateAndTime(futureEnd);\n            leftTime = DateUtils.safeCreateFromMinValueWithDateAndTime(futureBegin);\n        } else if (beginHasDate){\n            // TODO: Handle \"明天下午两点到五点\"\n            futureEnd = DateUtils.safeCreateFromMinValueWithDateAndTime(futureBegin, futureEnd);\n            pastEnd = DateUtils.safeCreateFromMinValueWithDateAndTime(pastBegin, pastEnd);\n            leftTime = DateUtils.safeCreateFromMinValueWithDateAndTime(futureBegin);\n        } else if (endHasDate) {\n            // TODO: Handle \"明天下午两点到五点\"\n            futureBegin = DateUtils.safeCreateFromMinValueWithDateAndTime(futureEnd, futureBegin);\n            pastBegin = DateUtils.safeCreateFromMinValueWithDateAndTime(pastEnd, pastBegin);\n            rightTime = DateUtils.safeCreateFromMinValueWithDateAndTime(futureEnd);\n        }\n\n        let leftResult: DateTimeResolutionResult = prs.begin.value;\n        let rightResult: DateTimeResolutionResult = prs.end.value;\n        let leftResultTime: Date = leftResult.futureValue;\n        let rightResultTime: Date = rightResult.futureValue;\n\n        leftTime = DateUtils.addTime(leftTime, leftResultTime);\n        rightTime = DateUtils.addTime(rightTime, rightResultTime);\n\n        // the right side time contains \"ampm\", while the left side doesn't\n        if (rightResult.comment === 'ampm' && !leftResult.comment && rightTime.getTime() < leftTime.getTime()) {\n            rightTime = DateUtils.addHours(rightTime, 12);\n        }\n\n        if (rightTime.getTime() < leftTime.getTime()) {\n            rightTime = DateUtils.addDays(rightTime, 1);\n        }\n\n        result.futureValue = [leftTime, rightTime];\n        result.pastValue = [leftTime, rightTime]\n\n        let hasFuzzyTimex = prs.begin.timexStr.includes('X') || prs.end.timexStr.includes('X');\n        let leftTimex = hasFuzzyTimex ? prs.begin.timexStr : FormatUtil.luisDateTime(leftTime);\n        let rightTimex = hasFuzzyTimex ? prs.end.timexStr : FormatUtil.luisDateTime(rightTime);\n        let hoursBetween = DateUtils.totalHours(rightTime, leftTime);\n\n        result.timex = `(${leftTimex},${rightTimex},PT${hoursBetween}H)`;\n        result.success = true;\n\n        return result;\n    }\n\n    protected parseSpecificTimeOfDay(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let source = text.trim().toLowerCase();\n\n        let match = RegExpUtility.getMatches(this.config.specificTimeOfDayRegex, source).pop();\n        if (match && match.index === 0 && match.length === source.length) {\n            let values = this.config.getMatchedTimeRange(source);\n            if (!values.success) {\n                return result;\n            }\n            let swift = (values as any).swift;\n\n            let date = DateUtils.addDays(referenceTime, swift);\n            date.setHours(0);\n            date.setMinutes(0);\n            date.setSeconds(0);\n\n            result.timex = FormatUtil.formatDate(date) + values.timeStr;\n            result.futureValue = [\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), values.beginHour, 0, 0),\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), values.endHour, values.endMin, values.endMin)\n            ];\n            result.pastValue = [\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), values.beginHour, 0, 0),\n                DateUtils.safeCreateFromMinValue(date.getFullYear(), date.getMonth(), date.getDate(), values.endHour, values.endMin, values.endMin)\n            ];\n            result.success = true;\n            return result;\n        }\n\n        let beginHour = 0;\n        let endHour = 0;\n        let endMin = 0;\n        let timeStr = '';\n\n        // handle morning, afternoon..\n        if (RegExpUtility.isMatch(this.TMORegex, source)) {\n            timeStr = 'TMO';\n            beginHour = 8;\n            endHour = 12;\n        } else if (RegExpUtility.isMatch(this.TAFRegex, source)) {\n            timeStr = 'TAF';\n            beginHour = 12;\n            endHour = 16;\n        } else if (RegExpUtility.isMatch(this.TEVRegex, source)) {\n            timeStr = 'TEV';\n            beginHour = 16;\n            endHour = 20;\n        } else if (RegExpUtility.isMatch(this.TNIRegex, source)) {\n            timeStr = 'TNI';\n            beginHour = 20;\n            endHour = 23;\n            endMin = 59;\n        } else {\n            return result;\n        }\n\n        // handle Date followed by morning, afternoon\n        let timeMatch = RegExpUtility.getMatches(this.timeOfDayRegex, source).pop();\n        if (!timeMatch) return result;\n\n        let beforeStr = source.substr(0, timeMatch.index).trim();\n        let erDate = this.config.dateExtractor.extract(beforeStr, referenceTime).pop();\n        if (!erDate || erDate.length !== beforeStr.length) return result;\n\n        let prDate = this.config.dateParser.parse(erDate, referenceTime);\n        let futureDate: Date = prDate.value.futureValue;\n        let pastDate: Date = prDate.value.pastValue;\n\n        result.timex = prDate.timexStr + timeStr;\n        result.futureValue = [\n            DateUtils.safeCreateFromMinValue(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), beginHour, 0, 0),\n            DateUtils.safeCreateFromMinValue(futureDate.getFullYear(), futureDate.getMonth(), futureDate.getDate(), endHour, endMin, endMin)\n        ];\n        result.pastValue = [\n            DateUtils.safeCreateFromMinValue(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), beginHour, 0, 0),\n            DateUtils.safeCreateFromMinValue(pastDate.getFullYear(), pastDate.getMonth(), pastDate.getDate(), endHour, endMin, endMin)\n        ];\n        result.success = true;\n\n        return result;\n    }\n\n    protected parseNumberWithUnit(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let ers = this.cardinalExtractor.extract(text);\n        if (ers.length !== 1) return result;\n\n        let er = ers[0];\n\n        let pr = this.cardinalParser.parse(er);\n        let sourceUnit = text.substr(er.start + er.length).trim().toLowerCase();\n        if (sourceUnit.startsWith('个')) {\n            sourceUnit = sourceUnit.substr(1);\n        }\n\n        let beforeStr = text.substr(0, er.start).trim().toLowerCase();\n\n        return this.parseCommonDurationWithUnit(beforeStr, sourceUnit, pr.resolutionStr, pr.value, referenceTime);\n    }\n\n    protected parseDuration(text: string, referenceTime: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let match = RegExpUtility.getMatches(this.config.relativeTimeUnitRegex, text).pop();\n        if (!match) return result;\n\n        let sourceUnit = match.groups('unit').value.toLowerCase();\n        let beforeStr = text.substr(0, match.index).trim().toLowerCase();\n\n        return this.parseCommonDurationWithUnit(beforeStr, sourceUnit, '1', 1, referenceTime);\n    }\n\n    private parseCommonDurationWithUnit(beforeStr: string, sourceUnit: string, numStr: string, swift: number, referenceDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n\n        if (!this.config.unitMap.has(sourceUnit)) return result;\n\n        let unitStr = this.config.unitMap.get(sourceUnit);\n\n        let pastMatch = RegExpUtility.getMatches(this.config.pastRegex, beforeStr).pop();\n        let hasPast = pastMatch && pastMatch.length === beforeStr.length;\n\n        let futureMatch = RegExpUtility.getMatches(this.config.futureRegex, beforeStr).pop();\n        let hasFuture = futureMatch && futureMatch.length === beforeStr.length;\n\n        if (!hasPast ||!hasFuture) return result;\n\n        let beginDate = new Date(referenceDate);\n        let endDate = new Date(referenceDate);\n\n        switch(unitStr) {\n            case 'H':\n                beginDate = hasPast ? DateUtils.addHours(beginDate, -swift) : beginDate;\n                endDate = hasFuture ? DateUtils.addHours(endDate, swift) : endDate;\n            break;\n            case 'M':\n                beginDate = hasPast ? DateUtils.addMinutes(beginDate, -swift) : beginDate;\n                endDate = hasFuture ? DateUtils.addMinutes(endDate, swift) : endDate;\n            break;\n            case 'S':\n                beginDate = hasPast ? DateUtils.addSeconds(beginDate, -swift) : beginDate;\n                endDate = hasFuture ? DateUtils.addSeconds(endDate, swift) : endDate;\n            break;\n            default: return result;\n        }\n\n        let beginTimex = `${FormatUtil.luisDateFromDate(beginDate)}T${FormatUtil.luisTimeFromDate(beginDate)}`;\n        let endTimex = `${FormatUtil.luisDateFromDate(endDate)}T${FormatUtil.luisTimeFromDate(endDate)}`;\n        result.timex = `(${beginTimex},${endTimex},PT${numStr}${unitStr.charAt(0)})`;\n        result.futureValue = [beginDate, endDate];\n        result.pastValue = [beginDate, endDate];\n        result.success = true;\n\n        return result;\n    }\n}","import { IExtractor, ExtractResult, RegExpUtility, StringUtility } from \"recognizers-text\";\nimport { BaseNumberParser, BaseNumberExtractor } from \"recognizers-text-number\"\nimport { ISetExtractorConfiguration, BaseSetExtractor, ISetParserConfiguration, BaseSetParser } from \"../baseSet\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\"\nimport { Constants, TimeTypeConstants } from \"../constants\";\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser, IDateTimeExtractor } from \"../baseDateTime\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { ChineseDurationExtractor, ChineseDurationParser } from \"./durationConfiguration\";\nimport { ChineseTimeExtractor, ChineseTimeParser } from \"./timeConfiguration\";\nimport { ChineseDateExtractor, ChineseDateParser } from \"./dateConfiguration\";\nimport { ChineseDateTimeExtractor, ChineseDateTimeParser } from \"./dateTimeConfiguration\";\nimport { Token, IDateTimeUtilityConfiguration, DateTimeResolutionResult, StringMap } from \"../utilities\";\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\n\nclass ChineseSetExtractorConfiguration implements ISetExtractorConfiguration {\n    readonly lastRegex: RegExp;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly beforeEachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n    readonly durationExtractor: ChineseDurationExtractor;\n    readonly timeExtractor: ChineseTimeExtractor;\n    readonly dateExtractor: ChineseDateExtractor;\n    readonly dateTimeExtractor: BaseDateTimeExtractor;\n    readonly datePeriodExtractor: BaseDatePeriodExtractor;\n    readonly timePeriodExtractor: BaseTimePeriodExtractor;\n    readonly dateTimePeriodExtractor: BaseDateTimePeriodExtractor;\n\n    constructor() {\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetEachUnitRegex);\n        this.durationExtractor = new ChineseDurationExtractor();\n        this.lastRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetLastRegex);\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetEachPrefixRegex);\n        this.timeExtractor = new ChineseTimeExtractor();\n        this.beforeEachDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetEachDayRegex);\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetEachDayRegex);\n        this.dateExtractor = new ChineseDateExtractor();\n        this.dateTimeExtractor = new ChineseDateTimeExtractor();\n    }\n}\n\nexport class ChineseSetExtractor extends BaseSetExtractor {\n\n    constructor() {\n        super(new ChineseSetExtractorConfiguration());\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let tokens: Array<Token> = new Array<Token>()\n            .concat(super.matchEachUnit(source))\n            .concat(super.matchEachDuration(source, referenceDate))\n            .concat(this.matchEachSpecific(this.config.timeExtractor, this.config.eachDayRegex, source, referenceDate))\n            .concat(this.matchEachSpecific(this.config.dateExtractor, this.config.eachPrefixRegex, source, referenceDate))\n            .concat(this.matchEachSpecific(this.config.dateTimeExtractor, this.config.eachPrefixRegex, source, referenceDate))\n        let result = Token.mergeAllTokens(tokens, source, this.extractorName);\n        return result;\n    }\n\n    private matchEachSpecific(extractor: IDateTimeExtractor, eachRegex: RegExp, source: string, refDate: Date) {\n        let ret = [];\n        extractor.extract(source, refDate).forEach(er => {\n            let beforeStr = source.substr(0, er.start);\n            let beforeMatch = RegExpUtility.getMatches(eachRegex, beforeStr).pop();\n            if (beforeMatch) {\n                ret.push(new Token(beforeMatch.index, er.start + er.length))\n            }\n        });\n        return ret;\n    }\n}\n\nclass ChineseSetParserConfiguration implements ISetParserConfiguration {\n    readonly durationExtractor: IDateTimeExtractor;\n    readonly durationParser: BaseDurationParser;\n    readonly timeExtractor: IDateTimeExtractor;\n    readonly timeParser: BaseTimeParser;\n    readonly dateExtractor: BaseDateExtractor;\n    readonly dateParser: BaseDateParser;\n    readonly dateTimeExtractor: BaseDateTimeExtractor;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly datePeriodExtractor: BaseDatePeriodExtractor;\n    readonly datePeriodParser: BaseDatePeriodParser;\n    readonly timePeriodExtractor: BaseTimePeriodExtractor;\n    readonly timePeriodParser: BaseTimePeriodParser;\n    readonly dateTimePeriodExtractor: BaseDateTimePeriodExtractor;\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser;\n    readonly unitMap: ReadonlyMap<string, string>;\n    readonly eachPrefixRegex: RegExp;\n    readonly periodicRegex: RegExp;\n    readonly eachUnitRegex: RegExp;\n    readonly eachDayRegex: RegExp;\n    readonly setWeekDayRegex: RegExp;\n    readonly setEachRegex: RegExp;\n\n    constructor() {\n        this.dateExtractor = new ChineseDateExtractor();\n        this.timeExtractor = new ChineseTimeExtractor();\n        this.durationExtractor = new ChineseDurationExtractor();\n        this.dateTimeExtractor = new ChineseDateTimeExtractor();\n        this.dateParser = new ChineseDateParser();\n        this.timeParser = new ChineseTimeParser();\n        this.durationParser = new ChineseDurationParser();\n        this.dateTimeParser = new ChineseDateTimeParser();\n        this.unitMap = ChineseDateTime.ParserConfigurationUnitMap;\n        this.eachUnitRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetEachUnitRegex);\n        this.eachDayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetEachDayRegex);\n        this.eachPrefixRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.SetEachPrefixRegex);\n    }\n\n    public getMatchedDailyTimex(text: string): { matched: boolean, timex: string } {\n        return null;\n    }\n\n    public getMatchedUnitTimex(source: string): { matched: boolean, timex: string } {\n        let timex = '';\n        if (source === '天' || source === '日') timex = 'P1D'\n        else if (source === '周' || source === '星期') timex = 'P1W'\n        else if (source === '月') timex = 'P1M'\n        else if (source === '年') timex = 'P1Y'\n        return { matched: timex !== '', timex: timex };\n    }\n}\n\nexport class ChineseSetParser extends BaseSetParser {\n\n    constructor() {\n        let config = new ChineseSetParserConfiguration();\n        super(config);\n    }\n\n    parse(er: ExtractResult, referenceDate?: Date): DateTimeParseResult | null {\n        if (!referenceDate) referenceDate = new Date();\n        let value = null;\n        if (er.type === BaseSetParser.ParserName) {\n            let innerResult = this.parseEachUnit(er.text);\n            if (!innerResult.success) {\n                innerResult = this.parseEachDuration(er.text, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parserTimeEveryday(er.text, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.dateTimeExtractor, this.config.dateTimeParser, er.text, referenceDate);\n            }\n            if (!innerResult.success) {\n                innerResult = this.parseEach(this.config.dateExtractor, this.config.dateParser, er.text, referenceDate);\n            }\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.SET] = innerResult.futureValue;\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.SET] = innerResult.pastValue;\n                value = innerResult;\n            }\n        }\n\n        let ret = new DateTimeParseResult(er);\n        ret.value = value,\n        ret.timexStr = value === null ? \"\" : value.timex,\n        ret.resolutionStr = \"\"\n\n        return ret;\n    }\n\n    protected parseEachUnit(text: string): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n\n        // handle \"each month\"\n        let match = RegExpUtility.getMatches(this.config.eachUnitRegex, text).pop();\n        if (!match || match.length !== text.length) return ret;\n\n        let sourceUnit = match.groups(\"unit\").value;\n        if (StringUtility.isNullOrEmpty(sourceUnit) || !this.config.unitMap.has(sourceUnit)) return ret;\n\n        let getMatchedUnitTimex = this.config.getMatchedUnitTimex(sourceUnit);\n        if (!getMatchedUnitTimex.matched) return ret;\n\n        ret.timex = getMatchedUnitTimex.timex;\n        ret.futureValue = \"Set: \" + ret.timex;\n        ret.pastValue = \"Set: \" + ret.timex;\n        ret.success = true;\n        return ret;\n    }\n\n    protected parserTimeEveryday(text: string, refDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let ers = this.config.timeExtractor.extract(text, refDate);\n        if (ers.length !== 1) return result;\n\n        let er = ers[0];\n        let beforeStr = text.substr(0, er.start);\n        let match = RegExpUtility.getMatches(this.config.eachDayRegex, beforeStr).pop();\n        if (!match) return result;\n\n        let pr = this.config.timeParser.parse(er);\n        result.timex = pr.timexStr;\n        result.futureValue = \"Set: \" + result.timex;\n        result.pastValue = \"Set: \" + result.timex;\n        result.success = true;\n\n        return result;\n    }\n\n    protected parseEach(extractor: IDateTimeExtractor, parser: IDateTimeParser, text: string, refDate: Date): DateTimeResolutionResult {\n        let result = new DateTimeResolutionResult();\n        let ers = extractor.extract(text, refDate);\n        if (ers.length !== 1) return result;\n\n        let er = ers[0];\n        let beforeStr = text.substr(0, er.start);\n        let match = RegExpUtility.getMatches(this.config.eachPrefixRegex, beforeStr).pop();\n        if (!match) return result;\n\n        let timex = parser.parse(er).timexStr;\n        result.timex = timex;\n        result.futureValue = `Set: ${timex}`;\n        result.pastValue = `Set: ${timex}`;\n        result.success = true;\n\n        return result;\n    }\n}","import { RegExpUtility, Match, StringUtility, IExtractor, IParser, ExtractResult } from \"recognizers-text\";\nimport { IHolidayExtractorConfiguration, BaseHolidayParserConfiguration, BaseHolidayParser } from \"../baseHoliday\"\nimport { ChineseIntegerExtractor, AgnosticNumberParserFactory, AgnosticNumberParserType, ChineseNumberParserConfiguration } from \"recognizers-text-number\";\nimport { Constants as NumberConstants } from \"recognizers-text-number\"\nimport { DateUtils, FormatUtil, DateTimeResolutionResult, StringMap } from \"../utilities\";\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\";\nimport { Constants, TimeTypeConstants } from \"../constants\";\n\nexport class ChineseHolidayExtractorConfiguration implements IHolidayExtractorConfiguration {\n    readonly holidayRegexes: RegExp[]\n\n    constructor() {\n        this.holidayRegexes = [\n            RegExpUtility.getSafeRegExp(ChineseDateTime.HolidayRegexList1),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.HolidayRegexList2),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.LunarHolidayRegex)\n        ];\n    }\n}\n\nclass ChineseHolidayParserConfiguration extends BaseHolidayParserConfiguration {\n    constructor() {\n        super();\n        this.holidayRegexList = [\n            RegExpUtility.getSafeRegExp(ChineseDateTime.HolidayRegexList1),\n            RegExpUtility.getSafeRegExp(ChineseDateTime.HolidayRegexList1)\n        ];\n        this.holidayFuncDictionary = this.initHolidayFuncs();\n        this.variableHolidaysTimexDictionary = ChineseDateTime.HolidayNoFixedTimex;\n    }\n\n    getSwiftYear(source: string): number {\n        if (source.endsWith('年')) return 0;\n        if (source.endsWith('去年')) return -1;\n        if (source.endsWith('明年')) return 1;\n        return null;\n    }\n\n    sanitizeHolidayToken(holiday: string): string {\n        return holiday;\n    }\n\n    protected initHolidayFuncs(): ReadonlyMap<string, (year: number) => Date> {\n        return new Map<string, (year: number) => Date>([\n            ...super.initHolidayFuncs(),\n            ['父亲节', BaseHolidayParserConfiguration.FathersDay],\n            ['母亲节', BaseHolidayParserConfiguration.MothersDay],\n            ['感恩节', BaseHolidayParserConfiguration.ThanksgivingDay]\n        ]);\n    }\n}\n\nconst yearNow = (new Date()).getFullYear();\nconst yuandan = new Date(yearNow, 1 - 1, 1);\nconst chsnationalday = new Date(yearNow, 10 - 1, 1);\nconst laborday = new Date(yearNow, 5 - 1, 1);\nconst christmasday = new Date(yearNow, 12 - 1, 25);\nconst loverday = new Date(yearNow, 2 - 1, 14);\nconst chsmilbuildday = new Date(yearNow, 8 - 1, 1);\nconst foolday = new Date(yearNow, 4 - 1, 1);\nconst girlsday = new Date(yearNow, 3 - 1, 7);\nconst treeplantday = new Date(yearNow, 3 - 1, 12);\nconst femaleday = new Date(yearNow, 3 - 1, 8);\nconst childrenday = new Date(yearNow, 6 - 1, 1);\nconst youthday = new Date(yearNow, 5 - 1, 4);\nconst teacherday = new Date(yearNow, 9 - 1, 10);\nconst singlesday = new Date(yearNow, 11 - 1, 11);\nconst halloweenday = new Date(yearNow, 10 - 1, 31);\nconst midautumnday = new Date(yearNow, 8 - 1, 15);\nconst springday = new Date(yearNow, 1 - 1, 1);\nconst chuxiday = DateUtils.addDays(new Date(yearNow, 1 - 1, 1), -1);\nconst lanternday = new Date(yearNow, 1 - 1, 15);\nconst qingmingday = new Date(yearNow, 4 - 1, 4);\nconst dragonboatday = new Date(yearNow, 5 - 1, 5);\nconst chongyangday = new Date(yearNow, 9 - 1, 9);\n\nexport class ChineseHolidayParser extends BaseHolidayParser {\n    private readonly lunarHolidayRegex; RegExp;\n    private readonly integerExtractor: IExtractor;\n    private readonly numberParser: IParser;\n    private readonly fixedHolidayDictionary: Map<string, Date>;\n\n    constructor() {\n        let config = new ChineseHolidayParserConfiguration();\n        super(config);\n        this.lunarHolidayRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.LunarHolidayRegex);\n        this.integerExtractor = new ChineseIntegerExtractor();\n        this.numberParser = AgnosticNumberParserFactory.getParser(AgnosticNumberParserType.Integer, new ChineseNumberParserConfiguration());\n        this.fixedHolidayDictionary = new Map<string, Date>([\n            ['元旦', yuandan],\n            ['元旦节', yuandan],\n            ['教师节', teacherday],\n            ['青年节', youthday],\n            ['儿童节', childrenday],\n            ['妇女节', femaleday],\n            ['植树节', treeplantday],\n            ['情人节', loverday],\n            ['圣诞节', christmasday],\n            ['新年', yuandan],\n            ['愚人节', foolday],\n            ['五一', laborday],\n            ['劳动节', laborday],\n            ['万圣节', halloweenday],\n            ['中秋节', midautumnday],\n            ['中秋', midautumnday],\n            ['春节', springday],\n            ['除夕', chuxiday],\n            ['元宵节', lanternday],\n            ['清明节', qingmingday],\n            ['清明', qingmingday],\n            ['端午节', dragonboatday],\n            ['端午', dragonboatday],\n            ['国庆节', chsnationalday],\n            ['建军节', chsmilbuildday],\n            ['女生节', girlsday],\n            ['光棍节', singlesday],\n            ['双十一', singlesday],\n            ['重阳节', chongyangday]\n        ]);\n    }\n\n    parse(er: ExtractResult, referenceDate?: Date): DateTimeParseResult {\n        if (!referenceDate) referenceDate = new Date();\n        let value = null;\n\n        if (er.type === BaseHolidayParser.ParserName) {\n            let innerResult = this.parseHolidayRegexMatch(er.text, referenceDate);\n\n            if (innerResult.success) {\n                innerResult.futureResolution = {};\n                innerResult.futureResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.futureValue);\n                innerResult.pastResolution = {};\n                innerResult.pastResolution[TimeTypeConstants.DATE] = FormatUtil.formatDate(innerResult.pastValue);\n                innerResult.isLunar = this.isLunar(er.text);\n                value = innerResult;\n            }\n        }\n\n        let ret = new DateTimeParseResult(er);\n        ret.value = value;\n        ret.timexStr = value === null ? \"\" : value.timex;\n        ret.resolutionStr = \"\";\n\n        return ret;\n    }\n\n    private isLunar(source: string): boolean {\n        return RegExpUtility.isMatch(this.lunarHolidayRegex, source);\n    }\n\n    protected match2Date(match: Match, referenceDate: Date): DateTimeResolutionResult {\n        let ret = new DateTimeResolutionResult();\n\n        let holidayStr = this.config.sanitizeHolidayToken(match.groups(\"holiday\").value.toLowerCase());\n        if (StringUtility.isNullOrEmpty(holidayStr)) return ret;\n\n        // get year (if exist)\n        let year = referenceDate.getFullYear();\n        let yearNum = match.groups('year').value;\n        let yearChinese = match.groups('yearchs').value;\n        let yearRelative = match.groups('yearrel').value;\n        let hasYear = false;\n\n        if (!StringUtility.isNullOrEmpty(yearNum)) {\n            hasYear = true;\n            if (this.config.getSwiftYear(yearNum) === 0) {\n                yearNum = yearNum.substr(0, yearNum.length - 1);\n            }\n            year = this.convertYear(yearNum, false);\n        } else if (!StringUtility.isNullOrEmpty(yearChinese)) {\n            hasYear = true;\n            if (this.config.getSwiftYear(yearChinese) === 0) {\n                yearChinese = yearChinese.substr(0, yearChinese.length - 1);\n            }\n            year = this.convertYear(yearChinese, true);\n        } else if (!StringUtility.isNullOrEmpty(yearRelative)) {\n            hasYear = true;\n            year += this.config.getSwiftYear(yearRelative);\n        }\n\n        if (year < 100 && year >= 90) {\n            year += 1900;\n        } else if (year < 100 && year < 20) {\n            year += 2000;\n        }\n\n        let timex = '';\n        let date = new Date(referenceDate);\n        if (this.fixedHolidayDictionary.has(holidayStr)) {\n            date = this.fixedHolidayDictionary.get(holidayStr);\n            timex = `-${FormatUtil.toString(date.getMonth() + 1, 2)}-${FormatUtil.toString(date.getDate(), 2)}`;\n        } else if (this.config.holidayFuncDictionary.has(holidayStr)) {\n            date = this.config.holidayFuncDictionary.get(holidayStr)(year);\n            timex = this.config.variableHolidaysTimexDictionary.get(holidayStr);\n        } else {\n            return ret;\n        }\n\n        if (hasYear) {\n            ret.timex = FormatUtil.toString(year, 4) + timex;\n            ret.futureValue = new Date(year, date.getMonth(), date.getDate());\n            ret.pastValue = new Date(year, date.getMonth(), date.getDate());\n        } else {\n            ret.timex = \"XXXX\" + timex;\n            ret.futureValue = this.getDateValue(date, referenceDate, holidayStr, 1, (d, r) => d.getTime() < r.getTime());\n            ret.pastValue = this.getDateValue(date, referenceDate, holidayStr, -1, (d, r) => d.getTime() >= r.getTime());\n        }\n\n        ret.success = true;\n\n        return ret;\n    }\n\n    private convertYear(yearStr: string, isChinese: boolean): number {\n        let year = -1;\n        let er: ExtractResult;\n        if (isChinese) {\n            let yearNum = 0;\n            er = this.integerExtractor.extract(yearStr).pop();\n            if (er && er.type === NumberConstants.SYS_NUM_INTEGER) {\n                yearNum = Number.parseInt(this.numberParser.parse(er).value);\n            }\n\n            if (yearNum < 10) {\n                yearNum = 0;\n                for (let index = 0; index < yearStr.length; index++) {\n                    let char = yearStr.charAt[index];\n                    yearNum *= 10;\n                    er = this.integerExtractor.extract(char).pop();\n                    if (er && er.type === NumberConstants.SYS_NUM_INTEGER) {\n                        yearNum += Number.parseInt(this.numberParser.parse(er).value);\n                    }\n                }\n            } else {\n                year = yearNum;\n            }\n        } else {\n            year = Number.parseInt(yearStr, 10);\n        }\n\n        return year === 0 ? -1 : year;\n    }\n\n    private getDateValue(date: Date, referenceDate: Date, holiday: string, swift: number, comparer: (date: Date, referenceDate: Date) => boolean): Date {\n        let result = new Date(date);\n        if (comparer(date, referenceDate)) {\n            if (this.fixedHolidayDictionary.has(holiday)) {\n                return DateUtils.addYears(date, swift);\n            }\n            if (this.config.holidayFuncDictionary.has(holiday)) {\n                result = this.config.holidayFuncDictionary.get(holiday)(referenceDate.getFullYear() + swift);\n            }\n        }\n\n        return result;\n    }\n}","import { IMergedExtractorConfiguration, BaseMergedExtractor, IMergedParserConfiguration, BaseMergedParser } from \"../baseMerged\"\nimport { BaseDateExtractor, BaseDateParser } from \"../baseDate\";\nimport { BaseTimeExtractor, BaseTimeParser } from \"../baseTime\";\nimport { BaseSetExtractor, BaseSetParser } from \"../baseSet\";\nimport { BaseHolidayExtractor, BaseHolidayParser } from \"../baseHoliday\";\nimport { BaseDatePeriodExtractor, BaseDatePeriodParser } from \"../baseDatePeriod\";\nimport { BaseTimePeriodExtractor, BaseTimePeriodParser } from \"../baseTimePeriod\";\nimport { BaseDateTimeExtractor, BaseDateTimeParser } from \"../baseDateTime\";\nimport { BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"../baseDateTimePeriod\";\nimport { BaseDurationExtractor, BaseDurationParser } from \"../baseDuration\"\nimport { ExtractResult, RegExpUtility } from \"recognizers-text\";\nimport { BaseNumberExtractor } from \"recognizers-text-number\";\nimport { ChineseDateTime } from \"../../resources/chineseDateTime\";\nimport { ChineseDurationExtractor, ChineseDurationParser } from \"./durationConfiguration\"\nimport { ChineseTimeExtractor, ChineseTimeParser } from \"./timeConfiguration\"\nimport { ChineseDateExtractor, ChineseDateParser } from \"./dateConfiguration\"\nimport { ChineseDateTimeExtractor, ChineseDateTimeParser } from \"./dateTimeConfiguration\"\nimport { ChineseTimePeriodExtractor, ChineseTimePeriodParser } from \"./timePeriodConfiguration\"\nimport { ChineseDatePeriodExtractor, ChineseDatePeriodParser } from \"./datePeriodConfiguration\"\nimport { ChineseDateTimePeriodExtractor, ChineseDateTimePeriodParser } from \"./dateTimePeriodConfiguration\"\nimport { ChineseSetExtractor, ChineseSetParser } from \"./setConfiguration\"\nimport { ChineseHolidayExtractorConfiguration, ChineseHolidayParser } from \"./holidayConfiguration\"\nimport { DateTimeOptions } from \"../dateTimeRecognizer\";\nimport { IDateTimeParser, DateTimeParseResult } from \"../parsers\";\nimport { Constants, TimeTypeConstants } from \"../constants\";\nimport { FormatUtil, DateUtils, DateTimeResolutionResult, StringMap } from \"../utilities\";\nimport isEqual = require('lodash.isequal');\n\nclass ChineseMergedExtractorConfiguration implements IMergedExtractorConfiguration {\n    readonly dateExtractor: BaseDateExtractor\n    readonly timeExtractor: ChineseTimeExtractor\n    readonly dateTimeExtractor: BaseDateTimeExtractor\n    readonly datePeriodExtractor: BaseDatePeriodExtractor\n    readonly timePeriodExtractor: ChineseTimePeriodExtractor\n    readonly dateTimePeriodExtractor: BaseDateTimePeriodExtractor\n    readonly holidayExtractor: BaseHolidayExtractor\n    readonly durationExtractor: ChineseDurationExtractor\n    readonly setExtractor: BaseSetExtractor\n    readonly integerExtractor: BaseNumberExtractor\n    readonly afterRegex: RegExp\n    readonly sinceRegex: RegExp\n    readonly beforeRegex: RegExp\n    readonly fromToRegex: RegExp\n    readonly singleAmbiguousMonthRegex: RegExp\n    readonly prepositionSuffixRegex: RegExp\n    readonly numberEndingPattern: RegExp\n    readonly filterWordRegexList: RegExp[]\n\n    constructor() {\n        this.dateExtractor = new ChineseDateExtractor();\n        this.timeExtractor = new ChineseTimeExtractor();\n        this.dateTimeExtractor = new ChineseDateTimeExtractor();\n        this.datePeriodExtractor = new ChineseDatePeriodExtractor();\n        this.timePeriodExtractor = new ChineseTimePeriodExtractor();\n        this.dateTimePeriodExtractor = new ChineseDateTimePeriodExtractor();\n        this.setExtractor = new ChineseSetExtractor();\n        this.holidayExtractor = new BaseHolidayExtractor(new ChineseHolidayExtractorConfiguration());\n        this.durationExtractor = new ChineseDurationExtractor();\n    }\n}\n\nexport class ChineseMergedExtractor extends BaseMergedExtractor {\n    private readonly dayOfMonthRegex: RegExp;\n\n    constructor(options: DateTimeOptions) {\n        let config = new ChineseMergedExtractorConfiguration();\n        super(config, options);\n        this.dayOfMonthRegex = RegExpUtility.getSafeRegExp(`^\\\\d{1,2}号`, 'gi');\n    }\n\n    extract(source: string, refDate: Date): Array<ExtractResult> {\n        if (!refDate) refDate = new Date();\n        let referenceDate = refDate;\n\n        let result: Array<ExtractResult> = new Array<ExtractResult>();\n        this.addTo(result, this.config.dateExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.timeExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.durationExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.datePeriodExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.dateTimeExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.timePeriodExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.dateTimePeriodExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.setExtractor.extract(source, referenceDate), source);\n        this.addTo(result, this.config.holidayExtractor.extract(source, referenceDate), source);\n        this.addMod(result, source);\n\n        result = result.sort((a, b) => a.start - b.start);\n        return result;\n    }\n\n    protected addTo(destination: ExtractResult[], source: ExtractResult[], sourceStr: string) {\n        source.forEach(er => {\n            let isFound = false;\n            let rmIndex = -1;\n            let rmLength = 1;\n            for (let index = 0; index < destination.length; index++) {\n                if (ExtractResult.isOverlap(destination[index], er)) {\n                    isFound = true;\n                    if (er.length > destination[index].length) {\n                        rmIndex = index;\n                        let j = index + 1;\n                        while (j < destination.length && ExtractResult.isOverlap(destination[j], er)) {\n                            rmLength++;\n                            j++;\n                        }\n                    }\n                    break;\n                }\n            }\n            if (!isFound) {\n                destination.push(er);\n            } else if (rmIndex >= 0) {\n                destination.splice(rmIndex, rmLength);\n                this.moveOverlap(destination, er);\n                destination.splice(rmIndex, 0, er);\n            }\n        });\n    }\n\n    protected moveOverlap(destination: ExtractResult[], result: ExtractResult) {\n        let duplicated = new Array<number>();\n        for (let i = 0; i < destination.length; i++) {\n            if (result.text.includes(destination[i].text)\n            && (result.start === destination[i].start || result.start + result.length === destination[i].start + destination[i].length)) {\n                duplicated.push(i);\n            }\n        }\n        duplicated.forEach(index => destination.splice(index, 1));\n    }\n\n    // ported from CheckBlackList\n    protected addMod(destination: ExtractResult[], source: string) {\n        let result = new Array<ExtractResult>();\n        destination = destination.filter(value => {\n            let valueEnd = value.start + value.length;\n            if (valueEnd !== source.length) {\n                let lastChar = source.substr(valueEnd, 1);\n                if (value.text.endsWith('周') && valueEnd < source.length && lastChar === '岁') {\n                    return false;\n                }\n            }\n\n            if (RegExpUtility.isMatch(this.dayOfMonthRegex, value.text)) {\n                return false;\n            }\n\n            return true;\n        });\n    }\n}\n\nclass ChineseMergedParserConfiguration implements IMergedParserConfiguration {\n    readonly beforeRegex: RegExp;\n    readonly afterRegex: RegExp;\n    readonly sinceRegex: RegExp;\n    readonly dateParser: BaseDateParser;\n    readonly holidayParser: BaseHolidayParser;\n    readonly timeParser: BaseTimeParser;\n    readonly dateTimeParser: BaseDateTimeParser;\n    readonly datePeriodParser: BaseDatePeriodParser;\n    readonly timePeriodParser: BaseTimePeriodParser;\n    readonly dateTimePeriodParser: BaseDateTimePeriodParser;\n    readonly durationParser: BaseDurationParser;\n    readonly setParser: BaseSetParser;\n\n    constructor() {\n        this.beforeRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.MergedBeforeRegex);\n        this.afterRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.MergedAfterRegex);\n        this.sinceRegex = RegExpUtility.getSafeRegExp(ChineseDateTime.MergedAfterRegex);\n\n        this.dateParser = new ChineseDateParser();\n        this.holidayParser = new ChineseHolidayParser();\n        this.timeParser = new ChineseTimeParser();\n        this.dateTimeParser = new ChineseDateTimeParser();\n        this.datePeriodParser = new ChineseDatePeriodParser();\n        this.timePeriodParser = new ChineseTimePeriodParser();\n        this.dateTimePeriodParser = new ChineseDateTimePeriodParser();\n        this.durationParser = new ChineseDurationParser();\n        this.setParser = new ChineseSetParser();\n    }\n}\n\nexport class ChineseMergedParser extends BaseMergedParser {\n    constructor() {\n        let config = new ChineseMergedParserConfiguration();\n        super(config, 0);\n    }\n\n    parse(er: ExtractResult, refTime?: Date): DateTimeParseResult | null {\n        let referenceTime = refTime || new Date();\n        let pr: DateTimeParseResult = null;\n\n        // push, save teh MOD string\n        let hasBefore = RegExpUtility.isMatch(this.config.beforeRegex, er.text);\n        let hasAfter = RegExpUtility.isMatch(this.config.afterRegex, er.text);\n        let hasSince = RegExpUtility.isMatch(this.config.sinceRegex, er.text);\n        let modStr = '';\n\n        if (er.type === Constants.SYS_DATETIME_DATE) {\n            pr = this.config.dateParser.parse(er, referenceTime);\n            if (pr.value === null || pr.value === undefined) {\n                pr = this.config.holidayParser.parse(er, referenceTime);\n            }\n        }\n        else if (er.type === Constants.SYS_DATETIME_TIME) {\n            pr = this.config.timeParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATETIME) {\n            pr = this.config.dateTimeParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATEPERIOD) {\n            pr = this.config.datePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_TIMEPERIOD) {\n            pr = this.config.timePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATETIMEPERIOD) {\n            pr = this.config.dateTimePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DURATION) {\n            pr = this.config.durationParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_SET) {\n            pr = this.config.setParser.parse(er, referenceTime);\n        }\n        else {\n            return null;\n        }\n\n        // pop, restore the MOD string\n        if (hasBefore && pr.value !== null) {\n            let val = pr.value;\n            val.mod = TimeTypeConstants.beforeMod;\n            pr.value = val;\n        }\n\n        if (hasAfter && pr.value !== null) {\n            let val = pr.value;\n            val.mod = TimeTypeConstants.afterMod;\n            pr.value = val;\n        }\n\n        if (hasSince && pr.value !== null) {\n            let val = pr.value;\n            val.mod = TimeTypeConstants.sinceMod;\n            pr.value = val;\n        }\n\n        pr.value = this.dateTimeResolution(pr, hasBefore, hasAfter, hasSince);\n        pr.type = `${this.parserTypeName}.${this.determineDateTimeType(er.type, hasBefore, hasAfter, hasSince)}`;\n\n        return pr;\n    }\n}\n\nexport class ChineseFullMergedParser extends BaseMergedParser {\n    constructor() {\n        let config = new ChineseMergedParserConfiguration();\n        super(config, 0);\n    }\n\n    parse(er: ExtractResult, refTime?: Date): DateTimeParseResult | null {\n        let referenceTime = refTime || new Date();\n        let pr: DateTimeParseResult = null;\n\n        // push, save teh MOD string\n        let hasBefore = false;\n        let hasAfter = false;\n        let modStr = \"\";\n        let beforeMatch = RegExpUtility.getMatches(this.config.beforeRegex, er.text).pop();\n        let afterMatch = RegExpUtility.getMatches(this.config.afterRegex, er.text).pop();\n        if (beforeMatch) {\n            hasBefore = true;\n            er.start += beforeMatch.length;\n            er.length -= beforeMatch.length;\n            er.text = er.text.substring(beforeMatch.length);\n            modStr = beforeMatch.value;\n        }\n        else if (afterMatch) {\n            hasAfter = true;\n            er.start += afterMatch.length;\n            er.length -= afterMatch.length;\n            er.text = er.text.substring(afterMatch.length);\n            modStr = afterMatch.value;\n        }\n\n        if (er.type === Constants.SYS_DATETIME_DATE) {\n            pr = this.config.dateParser.parse(er, referenceTime);\n            if (pr.value === null || pr.value === undefined) {\n                pr = this.config.holidayParser.parse(er, referenceTime);\n            }\n        }\n        else if (er.type === Constants.SYS_DATETIME_TIME) {\n            pr = this.config.timeParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATETIME) {\n            pr = this.config.dateTimeParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATEPERIOD) {\n            pr = this.config.datePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_TIMEPERIOD) {\n            pr = this.config.timePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DATETIMEPERIOD) {\n            pr = this.config.dateTimePeriodParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_DURATION) {\n            pr = this.config.durationParser.parse(er, referenceTime);\n        }\n        else if (er.type === Constants.SYS_DATETIME_SET) {\n            pr = this.config.setParser.parse(er, referenceTime);\n        }\n        else {\n            return null;\n        }\n\n        // pop, restore the MOD string\n        if (hasBefore && pr.value !== null) {\n            pr.length += modStr.length;\n            pr.start -= modStr.length;\n            pr.text = modStr + pr.text;\n            let val = pr.value;\n            val.mod = TimeTypeConstants.beforeMod;\n            pr.value = val;\n        }\n\n        if (hasAfter && pr.value !== null) {\n            pr.length += modStr.length;\n            pr.start -= modStr.length;\n            pr.text = modStr + pr.text;\n            let val = pr.value;\n            val.mod = TimeTypeConstants.afterMod;\n            pr.value = val;\n        }\n\n        pr.value = this.dateTimeResolution(pr, hasBefore, hasAfter);\n        pr.type = `${this.parserTypeName}.${this.determineDateTimeType(er.type, hasBefore, hasAfter)}`;\n\n        return pr;\n    }\n\n    protected dateTimeResolution(slot: DateTimeParseResult, hasBefore: boolean, hasAfter: boolean, hasSince: boolean = false): { [s: string]: Array<StringMap>; } {\n        if (!slot) return null;\n\n        let result = new Map<string, any>();\n        let resolutions = new Array<StringMap>();\n\n        let type = slot.type;\n        let outputType = this.determineDateTimeType(type, hasBefore, hasAfter);\n        let timex = slot.timexStr;\n\n        let value: DateTimeResolutionResult = slot.value;\n        if (!value) return null;\n\n        let isLunar = value.isLunar;\n        let mod = value.mod;\n        let comment = value.comment;\n\n        // the following should added to res first since the ResolveAmPm is using these fields\n        this.addResolutionFieldsAny(result, Constants.TimexKey, timex);\n        this.addResolutionFieldsAny(result, Constants.CommentKey, comment);\n        this.addResolutionFieldsAny(result, Constants.ModKey, mod);\n        this.addResolutionFieldsAny(result, Constants.TypeKey, outputType);\n\n        let futureResolution = value.futureResolution;\n        let pastResolution = value.pastResolution;\n\n        let future = this.generateFromResolution(type, futureResolution, mod);\n        let past = this.generateFromResolution(type, pastResolution, mod);\n\n        let futureValues = Array.from(this.getValues(future)).sort();\n        let pastValues = Array.from(this.getValues(past)).sort();\n        if (isEqual(futureValues, pastValues)) {\n            if (pastValues.length > 0) this.addResolutionFieldsAny(result, Constants.ResolveKey, past);\n        } else {\n            if (pastValues.length > 0) this.addResolutionFieldsAny(result, Constants.ResolveToPastKey, past);\n            if (futureValues.length > 0) this.addResolutionFieldsAny(result, Constants.ResolveToFutureKey, future);\n        }\n\n        if (comment && comment === 'ampm') {\n            if (result.has('resolve')) {\n                this.resolveAMPM(result, 'resolve');\n            } else {\n                this.resolveAMPM(result, 'resolveToPast');\n                this.resolveAMPM(result, 'resolveToFuture');\n            }\n        }\n\n        if (isLunar) {\n            this.addResolutionFieldsAny(result, Constants.IsLunarKey, isLunar);\n        }\n\n        result.forEach((value, key) => {\n            if (this.isObject(value)) {\n                // is \"StringMap\"\n                let newValues = {};\n\n                this.addResolutionFields(newValues, Constants.TimexKey, timex);\n                this.addResolutionFields(newValues, Constants.ModKey, mod);\n                this.addResolutionFields(newValues, Constants.TypeKey, outputType);\n\n                Object.keys(value).forEach((innerKey) => {\n                    newValues[innerKey] = value[innerKey];\n                });\n\n                resolutions.push(newValues);\n            }\n        });\n\n        if (Object.keys(past).length === 0 && Object.keys(future).length === 0) {\n            let o = {};\n            o['timex'] = timex;\n            o['type'] = outputType;\n            o['value'] = 'not resolved';\n            resolutions.push(o);\n        }\n        return {\n            values: resolutions\n        };\n    }\n\n    protected determineDateTimeType(type: string, hasBefore: boolean, hasAfter: boolean, hasSince: boolean = false): string {\n        if (hasBefore || hasAfter || hasSince) {\n            if (type === Constants.SYS_DATETIME_DATE) return Constants.SYS_DATETIME_DATEPERIOD;\n            if (type === Constants.SYS_DATETIME_TIME) return Constants.SYS_DATETIME_TIMEPERIOD;\n            if (type === Constants.SYS_DATETIME_DATETIME) return Constants.SYS_DATETIME_DATETIMEPERIOD;\n        }\n        return type;\n    }\n}","import { IModel, ModelResult, Recognizer } from \"recognizers-text\";\nimport { Culture } from \"recognizers-text-number\";\nimport { IDateTimeModel, DateTimeModel } from \"./models\";\nimport { BaseMergedParser, BaseMergedExtractor } from \"./baseMerged\";\nimport { EnglishCommonDateTimeParserConfiguration } from \"./english/baseConfiguration\";\nimport { EnglishMergedExtractorConfiguration, EnglishMergedParserConfiguration } from \"./english/mergedConfiguration\";\nimport { SpanishMergedParserConfiguration, SpanishMergedExtractorConfiguration } from \"./spanish/mergedConfiguration\";\nimport { FrenchMergedParserConfiguration, FrenchMergedExtractorConfiguration } from \"./french/mergedConfiguration\";\nimport { ChineseMergedExtractor, ChineseMergedParser, ChineseFullMergedParser } from \"./chinese/mergedConfiguration\";\n\nexport enum DateTimeOptions {\n    None = 0, SkipFromToMerge = 1, SplitDateAndTime = 2, Calendar = 4 \n}\n\nexport default class DateTimeRecognizer extends Recognizer {\n    static readonly instance: DateTimeRecognizer = new DateTimeRecognizer(DateTimeOptions.None);\n\n    private constructor(options: DateTimeOptions) {\n        super();\n\n        // English models\n        this.registerModel(\"DateTimeModel\", Culture.English, new DateTimeModel(\n            new BaseMergedParser(new EnglishMergedParserConfiguration(new EnglishCommonDateTimeParserConfiguration()), options),\n            new BaseMergedExtractor(new EnglishMergedExtractorConfiguration(), options)\n        ));\n\n        // Spanish models\n        this.registerModel(\"DateTimeModel\", Culture.Spanish, new DateTimeModel(\n            new BaseMergedParser(new SpanishMergedParserConfiguration(), options),\n            new BaseMergedExtractor(new SpanishMergedExtractorConfiguration(), options)\n        ));\n\n        // Chinese models\n        this.registerModel(\"DateTimeModel\", Culture.Chinese, new DateTimeModel(\n            new ChineseFullMergedParser(),\n            new ChineseMergedExtractor(options)\n        ));\n\n        // French models\n        this.registerModel(\"DateTimeModel\", Culture.French, new DateTimeModel(\n            new BaseMergedParser(new FrenchMergedParserConfiguration(), options),\n            new BaseMergedExtractor(new FrenchMergedExtractorConfiguration(), options)\n        ));\n    }\n\n    getDateTimeModel(culture: string = \"\", fallbackToDefaultCulture: boolean = true): IDateTimeModel {\n        return this.getModel(\"DateTimeModel\", culture, fallbackToDefaultCulture);\n    }\n\n    public static getSingleCultureInstance(cultureCode: string, options: DateTimeOptions = DateTimeOptions.None): DateTimeRecognizer {\n        return new DateTimeRecognizer(options);\n    }\n}","export { default as DateTimeRecognizer, DateTimeOptions } from \"./dateTime/dateTimeRecognizer\";\nexport { Culture, CultureInfo } from \"recognizers-text-number\";\nexport { IDateExtractorConfiguration, IDateParserConfiguration, BaseDateExtractor, BaseDateParser } from \"./dateTime/baseDate\";\nexport { ITimeExtractorConfiguration, ITimeParserConfiguration, BaseTimeExtractor, BaseTimeParser } from \"./dateTime/baseTime\";\nexport { IDatePeriodExtractorConfiguration, IDatePeriodParserConfiguration, BaseDatePeriodExtractor, BaseDatePeriodParser } from \"./dateTime/baseDatePeriod\";\nexport { ITimePeriodExtractorConfiguration, ITimePeriodParserConfiguration, BaseTimePeriodExtractor, BaseTimePeriodParser } from \"./dateTime/baseTimePeriod\";\nexport { IDateTimeExtractor, IDateTimeExtractorConfiguration, IDateTimeParserConfiguration, BaseDateTimeExtractor, BaseDateTimeParser } from \"./dateTime/baseDateTime\";\nexport { IDateTimePeriodExtractorConfiguration, IDateTimePeriodParserConfiguration, BaseDateTimePeriodExtractor, BaseDateTimePeriodParser } from \"./dateTime/baseDateTimePeriod\";\nexport { IDurationExtractorConfiguration, IDurationParserConfiguration, BaseDurationExtractor, BaseDurationParser } from \"./dateTime/baseDuration\";\nexport { ISetExtractorConfiguration, ISetParserConfiguration, BaseSetExtractor, BaseSetParser } from \"./dateTime/baseSet\";\nexport { IHolidayExtractorConfiguration, IHolidayParserConfiguration, BaseHolidayExtractor, BaseHolidayParser, BaseHolidayParserConfiguration } from \"./dateTime/baseHoliday\";\nexport { IMergedExtractorConfiguration, IMergedParserConfiguration, BaseMergedExtractor, BaseMergedParser } from \"./dateTime/baseMerged\";\nexport { Constants, TimeTypeConstants } from \"./dateTime/constants\";\nexport { IDateTimeModel, DateTimeModelResult, DateTimeModel } from \"./dateTime/models\";\nexport { DateTimeParseResult, ICommonDateTimeParserConfiguration, IDateTimeParser, BaseDateParserConfiguration } from \"./dateTime/parsers\";\nexport { Token, IDateTimeUtilityConfiguration, AgoLaterMode, AgoLaterUtil, MatchedIndex, MatchingUtil, FormatUtil, DateTimeResolutionResult, DateUtils, DayOfWeek } from \"./dateTime/utilities\";\nexport { EnglishCommonDateTimeParserConfiguration, EnglishDateTimeUtilityConfiguration } from \"./dateTime/english/baseConfiguration\";\nexport { EnglishDateExtractorConfiguration, EnglishDateParserConfiguration } from \"./dateTime/english/dateConfiguration\";\nexport { EnglishTimeExtractorConfiguration, EnglishTimeParserConfiguration } from \"./dateTime/english/timeConfiguration\";\nexport { EnglishDatePeriodExtractorConfiguration, EnglishDatePeriodParserConfiguration } from \"./dateTime/english/datePeriodConfiguration\";\nexport { EnglishTimePeriodExtractorConfiguration, EnglishTimePeriodParserConfiguration } from \"./dateTime/english/timePeriodConfiguration\";\nexport { EnglishDateTimeExtractorConfiguration, EnglishDateTimeParserConfiguration } from \"./dateTime/english/dateTimeConfiguration\";\nexport { EnglishDateTimePeriodExtractorConfiguration, EnglishDateTimePeriodParserConfiguration } from \"./dateTime/english/dateTimePeriodConfiguration\";\nexport { EnglishSetExtractorConfiguration, EnglishSetParserConfiguration } from \"./dateTime/english/setConfiguration\";\nexport { EnglishDurationExtractorConfiguration, EnglishDurationParserConfiguration } from \"./dateTime/english/durationConfiguration\";\nexport { EnglishHolidayExtractorConfiguration, EnglishHolidayParserConfiguration } from \"./dateTime/english/holidayConfiguration\";\nexport { EnglishMergedExtractorConfiguration, EnglishMergedParserConfiguration } from \"./dateTime/english/mergedConfiguration\";\nexport { EnglishTimeParser } from \"./dateTime/english/parsers\";\nexport { SpanishCommonDateTimeParserConfiguration, SpanishDateTimeUtilityConfiguration } from \"./dateTime/spanish/baseConfiguration\";\nexport { SpanishDateExtractorConfiguration, SpanishDateParserConfiguration } from \"./dateTime/spanish/dateConfiguration\";\nexport { SpanishTimeExtractorConfiguration, SpanishTimeParserConfiguration } from \"./dateTime/spanish/timeConfiguration\";\nexport { SpanishDatePeriodExtractorConfiguration, SpanishDatePeriodParserConfiguration } from \"./dateTime/spanish/datePeriodConfiguration\";\nexport { SpanishTimePeriodExtractorConfiguration, SpanishTimePeriodParserConfiguration } from \"./dateTime/spanish/timePeriodConfiguration\";\nexport { SpanishDateTimeExtractorConfiguration, SpanishDateTimeParserConfiguration } from \"./dateTime/spanish/dateTimeConfiguration\";\nexport { SpanishDateTimePeriodExtractorConfiguration, SpanishDateTimePeriodParserConfiguration } from \"./dateTime/spanish/dateTimePeriodConfiguration\";\nexport { SpanishSetExtractorConfiguration, SpanishSetParserConfiguration } from \"./dateTime/spanish/setConfiguration\";\nexport { SpanishDurationExtractorConfiguration, SpanishDurationParserConfiguration } from \"./dateTime/spanish/durationConfiguration\";\nexport { SpanishHolidayExtractorConfiguration, SpanishHolidayParserConfiguration } from \"./dateTime/spanish/holidayConfiguration\";\nexport { SpanishMergedExtractorConfiguration, SpanishMergedParserConfiguration } from \"./dateTime/spanish/mergedConfiguration\";\nexport { SpanishDateTimePeriodParser } from \"./dateTime/spanish/dateTimePeriodParser\";\nexport { FrenchCommonDateTimeParserConfiguration, FrenchDateTimeUtilityConfiguration } from \"./dateTime/french/baseConfiguration\";\nexport { FrenchDateExtractorConfiguration, FrenchDateParserConfiguration } from \"./dateTime/french/dateConfiguration\";\nexport { FrenchTimeExtractorConfiguration, FrenchTimeParserConfiguration } from \"./dateTime/french/timeConfiguration\";\nexport { FrenchDatePeriodExtractorConfiguration, FrenchDatePeriodParserConfiguration } from \"./dateTime/french/datePeriodConfiguration\";\nexport { FrenchTimePeriodExtractorConfiguration, FrenchTimePeriodParserConfiguration } from \"./dateTime/french/timePeriodConfiguration\";\nexport { FrenchDateTimeExtractorConfiguration, FrenchDateTimeParserConfiguration } from \"./dateTime/french/dateTimeConfiguration\";\nexport { FrenchDateTimePeriodExtractorConfiguration, FrenchDateTimePeriodParserConfiguration } from \"./dateTime/french/dateTimePeriodConfiguration\";\nexport { FrenchSetExtractorConfiguration, FrenchSetParserConfiguration } from \"./dateTime/french/setConfiguration\";\nexport { FrenchDurationExtractorConfiguration, FrenchDurationParserConfiguration } from \"./dateTime/french/durationConfiguration\";\nexport { FrenchHolidayExtractorConfiguration, FrenchHolidayParserConfiguration } from \"./dateTime/french/holidayConfiguration\";\nexport { FrenchMergedExtractorConfiguration, FrenchMergedParserConfiguration } from \"./dateTime/french/mergedConfiguration\";\nexport { ChineseDurationExtractor, ChineseDurationParser } from \"./dateTime/chinese/durationConfiguration\";\nexport { ChineseTimeExtractor, ChineseTimeParser } from \"./dateTime/chinese/timeConfiguration\";\nexport { ChineseTimePeriodExtractor, ChineseTimePeriodParser } from \"./dateTime/chinese/timePeriodConfiguration\";\nexport { ChineseDateExtractor, ChineseDateParser } from \"./dateTime/chinese/dateConfiguration\";\nexport { ChineseDatePeriodExtractor, ChineseDatePeriodParser } from \"./dateTime/chinese/datePeriodConfiguration\";\nexport { ChineseDateTimeExtractor, ChineseDateTimeParser } from \"./dateTime/chinese/dateTimeConfiguration\";\nexport { ChineseDateTimePeriodExtractor, ChineseDateTimePeriodParser } from \"./dateTime/chinese/dateTimePeriodConfiguration\";\nexport { ChineseSetExtractor, ChineseSetParser } from \"./dateTime/chinese/setConfiguration\";\nexport { ChineseHolidayExtractorConfiguration, ChineseHolidayParser } from \"./dateTime/chinese/holidayConfiguration\";\nexport { ChineseMergedExtractor, ChineseMergedParser, ChineseFullMergedParser } from \"./dateTime/chinese/mergedConfiguration\";\n\nexport { BaseDateTime } from \"./resources/baseDateTime\";\nexport { EnglishDateTime } from \"./resources/englishDateTime\";\nexport { SpanishDateTime } from \"./resources/spanishDateTime\";\nexport { FrenchDateTime } from \"./resources/frenchDateTime\";\nexport { ChineseDateTime } from \"./resources/chineseDateTime\";"],"names":["culture","culture_1","models_1","models","extractors_1","require","XRegExp","global","define","this","recognizers_text_1","bignumber_js_1","trimEnd","sortBy","parsers_1","parsers_2","constants_1","baseNumbers_1","englishNumeric_1","spanishNumeric_1","portugueseNumeric_1","frenchNumeric_1","chineseNumeric_1","INFINITY","symbolTag","freeGlobal","freeSelf","root","objectProto","objectToString","Symbol","symbolProto","symbolToString","baseToString","isSymbol","isObjectLike","toString","escapeRegExp","agnosticNumberParser_1","parserConfiguration_1","parserConfiguration_2","extractors_2","parserConfiguration_3","extractors_3","parserConfiguration_5","extractors_5","parserConfiguration_4","extractors_4","dateTimeRecognizer_1","recognizers_text_number_1","utilities_1","isEqual","baseDateTime_1","toNumber","englishDateTime_1","baseDuration_1","durationConfiguration_1","baseConfiguration_1","baseDate_1","dateConfiguration_1","baseTime_1","timeConfiguration_1","dateTimeConfiguration_1","baseTimePeriod_1","timePeriodConfiguration_1","baseDateTime_2","baseDatePeriod_1","datePeriodConfiguration_1","baseDateTimePeriod_1","dateTimePeriodConfiguration_1","baseHoliday_1","holidayConfiguration_1","baseSet_1","setConfiguration_1","spanishDateTime_1","dateTimePeriodParser_1","frenchDateTime_1","reRegExpChar","reHasRegExpChar","max","last","englishNumericWithUnit_1","base_1","spanishNumericWithUnit_1","portugueseNumericWithUnit_1","chineseNumericWithUnit_1","frenchNumericWithUnit_1","currency_1","temperature_1","dimension_1","age_1","currency_2","temperature_2","dimension_2","age_2","currency_3","temperature_3","dimension_3","age_3","currency_4","temperature_4","dimension_4","age_4","currency_5","temperature_5","dimension_5","age_5","recognizers_text_number_with_unit_1","chineseDateTime_1","baseMerged_1","mergedConfiguration_1","mergedConfiguration_2","mergedConfiguration_4","mergedConfiguration_3"],"mappings":"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R,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IACR,GAAG,EAAE,GAAG;IAC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,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,sBAAsB,EAAE,EAAE,CAAC,EAAC,CAAC,sBAAsB,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,IAAI,CAAC,EAAC,CAAC,UAAU,EAAE,IAAI,CAAC,EAAC,CAAC,aAAa,EAAE,OAAO,CAAC,EAAC,CAAC,aAAa,EAAE,OAAO,CAAC,EAAC,CAAC,cAAc,EAAE,UAAU,CAAC,EAAC,CAAC,cAAc,EAAE,UAAU,CAAC,EAAC,CAAC,aAAa,EAAE,aAAa,CAAC,EAAC,CAAC,aAAa,EAAE,aAAa,CAAC,EAAC,CAAC,cAAc,EAAE,mBAAmB,CAAC,EAAC,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC,CAAC,CAAC;IAC5oD,sCAAwB,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC,CAAC,aAAa,EAAE,GAAG,CAAC,EAAC,CAAC,cAAc,EAAE,GAAG,CAAC,EAAC,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7mC,oCAAsB,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,EAAC,CAAC,SAAS,EAAE,OAAO,CAAC,EAAC,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;IACzJ,4BAAc,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAC,CAAC,SAAS,EAAE,OAAO,CAAC,EAAC,CAAC,UAAU,EAAE,OAAO,CAAC,EAAC,CAAC,UAAU,EAAE,UAAU,CAAC,EAAC,CAAC,WAAW,EAAE,UAAU,CAAC,EAAC,CAAC,SAAS,EAAE,aAAa,CAAC,EAAC,CAAC,UAAU,EAAE,aAAa,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,IAAI,CAAC,EAAC,CAAC,UAAU,EAAE,IAAI,CAAC,EAAC,CAAC,aAAa,EAAE,OAAO,CAAC,EAAC,CAAC,aAAa,EAAE,OAAO,CAAC,EAAC,CAAC,cAAc,EAAE,UAAU,CAAC,EAAC,CAAC,cAAc,EAAE,UAAU,CAAC,EAAC,CAAC,aAAa,EAAE,aAAa,CAAC,EAAC,CAAC,aAAa,EAAE,aAAa,CAAC,EAAC,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC,CAAC,WAAW,EAAE,IAAI,CAAC,EAAC,CAAC,WAAW,EAAE,IAAI,CAAC,EAAC,CAAC,cAAc,EAAE,OAAO,CAAC,EAAC,CAAC,cAAc,EAAE,OAAO,CAAC,EAAC,CAAC,eAAe,EAAE,UAAU,CAAC,EAAC,CAAC,eAAe,EAAE,UAAU,CAAC,EAAC,CAAC,cAAc,EAAE,aAAa,CAAC,EAAC,CAAC,cAAc,EAAE,aAAa,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAC,CAAC,GAAG,EAAE,UAAU,CAAC,EAAC,CAAC,GAAG,EAAE,UAAU,CAAC,EAAC,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;CACl3B,EArEgB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAqE7B;;;;;;;;;;;;ACxED;IAoBI,YAAY,EAAgB;QACxB,IAAI,CAAC,EAAE,EAAE;YACL,EAAE,GAAG,IAAIhB,qBAAW,CAACA,iBAAO,CAAC,MAAM,CAAC,CAAC;SACxC;QAED,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAGoB,2BAAa,CAAC,UAAU,CAAC;QAC3C,IAAI,CAAC,oBAAoB,GAAGA,2BAAa,CAAC,oBAAoB,CAAC;QAC/D,IAAI,CAAC,mBAAmB,GAAGA,2BAAa,CAAC,mBAAmB,CAAC;QAC7D,IAAI,CAAC,uBAAuB,GAAGA,2BAAa,CAAC,uBAAuB,CAAC;QACrE,IAAI,CAAC,cAAc,GAAGA,2BAAa,CAAC,cAAc,CAAC;QACnD,IAAI,CAAC,kBAAkB,GAAGA,2BAAa,CAAC,kBAAkB,CAAC;QAE3D,IAAI,CAAC,4BAA4B,GAAGA,2BAAa,CAAC,4BAA4B,CAAC;QAC/E,IAAI,CAAC,0BAA0B,GAAGA,2BAAa,CAAC,0BAA0B,CAAC;QAC3E,IAAI,CAAC,4BAA4B,GAAGA,2BAAa,CAAC,4BAA4B,CAAC;QAC/E,IAAI,CAAC,6BAA6B,GAAGA,2BAAa,CAAC,6BAA6B,CAAC;QAEjF,IAAI,CAAC,iBAAiB,GAAGA,2BAAa,CAAC,iBAAiB,CAAC;QACzD,IAAI,CAAC,gBAAgB,GAAGA,2BAAa,CAAC,gBAAgB,CAAC;QACvD,IAAI,CAAC,cAAc,GAAGA,2BAAa,CAAC,cAAc,CAAC;QACnD,IAAI,CAAC,eAAe,GAAGX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,eAAe,CAAC,CAAC;QAClF,IAAI,CAAC,kBAAkB,GAAGX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,kBAAkB,CAAC,CAAC;KAC3F;IAED,iBAAiB,CAAC,MAA6B,EAAE,OAAoB;QACjE,OAAO,MAAM,CAAC;KACjB;IAED,sBAAsB,CAAC,SAAiB;QACpC,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SAC/C;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;SAChD;QAED,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,KAAK,EAAE;gBAC1F,YAAY,GAAG,CAAC,CAAC;gBACjB,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;aAClD;YAED,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,SAAS,CAAC,MAAM,EAAE;gBAC9B,UAAU,IAAI,KAAK,CAAC;gBACpB,UAAU,GAAG,EAAE,CAAC;gBAChB,CAAC,GAAG,YAAY,EAAE,CAAC;gBACnB,KAAK,GAAG,CAAC,CAAC;aACb;SACJ;QAED,OAAO,UAAU,CAAC;KACrB;CACJ;AAhFD,0EAgFC;;;;;;;;;;;;;;;;AC7ED,IAAiB,cAAc,CA6E9B;AA7ED,WAAiB,cAAc;IACjB,yBAAU,GAAG,KAAK,CAAC;IACnB,mCAAoB,GAAG,GAAG,CAAC;IAC3B,kCAAmB,GAAG,EAAE,CAAC;IACzB,sCAAuB,GAAG,GAAG,CAAC;IAC9B,6BAAc,GAAG,EAAE,CAAC;IACpB,iCAAkB,GAAG,EAAE,CAAC;IACxB,6BAAc,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAC,CAAC,GAAG,EAAE,UAAU,CAAC,EAAC,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;IAC3I,gCAAiB,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAC,CAAC,GAAG,EAAE,SAAS,CAAC,EAAC,CAAC,GAAG,EAAE,aAAa,CAAC,EAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAC,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/N,+BAAgB,GAAgC,IAAI,GAAG,CAAif,+BAAgB,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9R,6BAAc,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3I,yBAAU,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACrL,iCAAkB,GAAG,CAAE,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAE,CAAC;IAC7C,iCAAkB,GAAG,kCAAkC,CAAC;IACxD,4CAA6B,GAAG,iBAAiB,CAAC;IAClD,4BAAa,GAAG,GAAG,eAAA,6BAA6B,GAAG,CAAC;IACpD,yBAAU,GAAG,MAAM,CAAC;IACpB,8BAAe,GAAG,sDAAsD,CAAC;IACzE,qCAAsB,GAAG,GAAG,eAAA,6BAA6B,QAAQ,eAAA,6BAA6B,0BAA0B,CAAC;IACzH,6BAAc,GAAG,UAAU,CAAC;IAC5B,wCAAyB,GAAG,+BAA+B,CAAC;IAC5D,iCAAkB,GAAG,MAAM,CAAC;IAC5B,iCAAkB,GAAG,eAAe,CAAC;IACrC,0BAAW,GAAG,IAAI,eAAA,kBAAkB,OAAO,eAAA,kBAAkB,IAAI,CAAC;IAClE,gCAAiB,GAAG,GAAG,eAAA,6BAA6B,IAAI,eAAA,yBAAyB,UAAU,CAAC;IAC5F,wBAAS,GAAG,WAAW,CAAC;IACxB,yCAA0B,GAAG,eAAe,CAAC;IAC7C,6BAAc,GAAG,gxCAAgxC,CAAC;IAClyC,gCAAiB,GAAG,KAAK,eAAA,yBAAyB,IAAI,eAAA,6BAA6B,6BAA6B,eAAA,0BAA0B,eAAe,eAAA,0BAA0B,QAAQ,eAAA,yBAAyB,IAAI,eAAA,6BAA6B,cAAc,eAAA,yBAAyB,IAAI,eAAA,6BAA6B,wBAAwB,eAAA,0BAA0B,kBAAkB,eAAA,yBAAyB,GAAG,CAAC;IAC9Z,6BAAc,GAAG,OAAO,eAAA,yBAAyB,IAAI,eAAA,yBAAyB,MAAM,eAAA,cAAc,GAAG,CAAC;IACtG,6BAAc,GAAG,MAAM,eAAA,yBAAyB,IAAI,eAAA,6BAA6B,6BAA6B,eAAA,0BAA0B,eAAe,eAAA,0BAA0B,QAAQ,eAAA,yBAAyB,IAAI,eAAA,6BAA6B,cAAc,eAAA,yBAAyB,IAAI,eAAA,6BAA6B,wBAAwB,eAAA,0BAA0B,kBAAkB,eAAA,yBAAyB,KAAK,eAAA,yBAAyB,GAAG,CAAC;IAC1b,mCAAoB,GAAG,IAAI,eAAA,kBAAkB,SAAS,eAAA,6BAA6B,GAAG,CAAC;IACvF,6CAA8B,GAAG,GAAG,eAAA,kBAAkB,IAAI,eAAA,6BAA6B,4BAA4B,CAAC;IACpH,wCAAyB,GAAG,GAAG,eAAA,kBAAkB,IAAI,eAAA,6BAA6B,aAAa,eAAA,6BAA6B,OAAO,CAAC;IACpI,mCAAoB,GAAG,KAAK,eAAA,0BAA0B,KAAK,CAAC;IAC5D,+BAAgB,GAAG,GAAG,eAAA,cAAc,aAAa,eAAA,cAAc,GAAG,CAAC;IACnE,+BAAgB,GAAG,UAAU,CAAC;IAC9B,+BAAgB,GAAG,GAAG,eAAA,kBAAkB,IAAI,eAAA,cAAc,OAAO,eAAA,gBAAgB,oCAAoC,eAAA,yBAAyB,IAAI,CAAC;IACnJ,oCAAqB,GAAG,0BAA0B,eAAA,cAAc,SAAS,eAAA,gBAAgB,MAAM,eAAA,kBAAkB,KAAK,eAAA,iBAAiB,IAAI,eAAA,cAAc,QAAQ,eAAA,cAAc,SAAS,eAAA,yBAAyB,OAAO,eAAA,gBAAgB,kCAAkC,CAAC;IAC3Q,iCAAkB,GAAG,0BAA0B,eAAA,cAAc,SAAS,eAAA,gBAAgB,MAAM,eAAA,kBAAkB,IAAI,eAAA,cAAc,OAAO,eAAA,cAAc,SAAS,eAAA,yBAAyB,OAAO,eAAA,gBAAgB,kCAAkC,CAAC;IACjP,4BAAa,GAAG,GAAG,eAAA,gBAAgB,EAAE,CAAC;IACtC,kCAAmB,GAAG,QAAQ,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,OAAO,eAAA,kBAAkB,SAAS,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,OAAO,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,IAAI,CAAC;IACxR,+CAAgC,GAAG,QAAQ,eAAA,6BAA6B,iBAAiB,eAAA,kBAAkB,eAAe,eAAA,6BAA6B,OAAO,eAAA,6BAA6B,WAAW,eAAA,6BAA6B,KAAK,CAAC;IACzO,wCAAyB,GAAG,IAAI,eAAA,kBAAkB,SAAS,eAAA,6BAA6B,aAAa,eAAA,6BAA6B,cAAc,eAAA,6BAA6B,GAAG,CAAC;IACjL,wCAAyB,GAAG,IAAI,eAAA,kBAAkB,SAAS,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,4BAA4B,CAAC;IAC5J,uCAAwB,GAAG,GAAG,eAAA,kBAAkB,IAAI,eAAA,6BAA6B,WAAW,eAAA,6BAA6B,2BAA2B,CAAC;IACrJ,kCAAmB,GAAG,2BAA2B,eAAA,cAAc,UAAU,eAAA,gBAAgB,MAAM,eAAA,gBAAgB,MAAM,eAAA,yBAAyB,iCAAiC,CAAC;IAChL,6CAA8B,GAAG,OAAO,eAAA,6BAA6B,YAAY,eAAA,kBAAkB,SAAS,eAAA,6BAA6B,WAAW,eAAA,6BAA6B,8BAA8B,eAAA,6BAA6B,aAAa,eAAA,6BAA6B,KAAK,CAAC;IAC5R,4CAA6B,GAAG,OAAO,eAAA,6BAA6B,YAAY,eAAA,kBAAkB,UAAU,eAAA,6BAA6B,WAAW,eAAA,6BAA6B,gCAAgC,eAAA,6BAA6B,IAAI,CAAC;IACnP,8BAAe,GAAG,IAAI,eAAA,cAAc,EAAE,CAAC;IACvC,kCAAmB,GAAG,IAAI,eAAA,6BAA6B,GAAG,CAAC;IAC3D,gCAAiB,GAAG,GAAG,eAAA,kBAAkB,MAAM,eAAA,6BAA6B,KAAK,eAAA,cAAc,eAAe,eAAA,kBAAkB,KAAK,eAAA,6BAA6B,KAAK,eAAA,cAAc,kBAAkB,eAAA,kBAAkB,KAAK,eAAA,6BAA6B,KAAK,eAAA,cAAc,GAAG,CAAC;IAClR,iDAAkC,GAAG,IAAI,eAAA,kBAAkB,SAAS,eAAA,6BAA6B,QAAQ,eAAA,6BAA6B,QAAQ,eAAA,6BAA6B,GAAG,CAAC;IAC/K,oCAAqB,GAAG,IAAI,eAAA,kBAAkB,SAAS,eAAA,6BAA6B,QAAQ,eAAA,6BAA6B,GAAG,CAAC;IAC7H,mCAAoB,GAAG,OAAO,eAAA,cAAc,KAAK,eAAA,gBAAgB,IAAI,eAAA,cAAc,gCAAgC,CAAC;IACpH,oCAAqB,GAAG,OAAO,eAAA,yBAAyB,uBAAuB,eAAA,gBAAgB,IAAI,eAAA,cAAc,YAAY,eAAA,cAAc,GAAG,CAAC;IAC/I,0CAA2B,GAAG,OAAO,eAAA,yBAAyB,sBAAsB,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,cAAc,eAAA,6BAA6B,KAAK,CAAC;IACzM,kDAAmC,GAAG,OAAO,eAAA,yBAAyB,sBAAsB,eAAA,6BAA6B,aAAa,eAAA,6BAA6B,cAAc,eAAA,6BAA6B,GAAG,CAAC;IAClN,mDAAoC,GAAG,OAAO,eAAA,yBAAyB,sBAAsB,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,4BAA4B,CAAC;IAC9L,2CAA4B,GAAG,QAAQ,eAAA,6BAA6B,YAAY,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,cAAc,eAAA,6BAA6B,kCAAkC,CAAC;IAClO,mDAAoC,GAAG,GAAG,eAAA,6BAA6B,aAAa,eAAA,6BAA6B,cAAc,eAAA,6BAA6B,gCAAgC,CAAC;IAC7L,oDAAqC,GAAG,GAAG,eAAA,6BAA6B,UAAU,eAAA,6BAA6B,yDAAyD,CAAC;IACzK,2CAA4B,GAAG,OAAO,eAAA,yBAAyB,sBAAsB,eAAA,6BAA6B,cAAc,eAAA,6BAA6B,KAAK,CAAC;IACnK,yDAA0C,GAAG,OAAO,eAAA,yBAAyB,sBAAsB,eAAA,6BAA6B,4BAA4B,CAAC;IAC7J,gDAAiC,GAAG,MAAM,eAAA,yBAAyB,sBAAsB,eAAA,6BAA6B,aAAa,eAAA,6BAA6B,OAAO,CAAC;IACxK,qCAAsB,GAAG,GAAG,eAAA,6BAA6B,gCAAgC,CAAC;IAC1F,mDAAoC,GAAG,GAAG,eAAA,6BAA6B,yDAAyD,CAAC;IACjI,6CAA8B,GAAG,GAAG,eAAA,6BAA6B,aAAa,eAAA,6BAA6B,oCAAoC,CAAC;IAChJ,2CAA4B,GAAG,GAAG,eAAA,kBAAkB,IAAI,eAAA,6BAA6B,WAAW,eAAA,6BAA6B,eAAe,CAAC;IAC7I,0CAA2B,GAAG,GAAG,eAAA,6BAA6B,kBAAkB,eAAA,6BAA6B,SAAS,CAAC;IACvH,mCAAoB,GAAG,GAAG,eAAA,yBAAyB,iBAAiB,eAAA,yBAAyB,SAAS,CAAC;IACvG,yCAA0B,GAAG,GAAG,eAAA,6BAA6B,gBAAgB,eAAA,6BAA6B,KAAK,CAAC;IAChH,sCAAuB,GAAG,IAAI,eAAA,yBAAyB,sBAAsB,eAAA,yBAAyB,KAAK,CAAC;IAC5G,6CAA8B,GAAG,IAAI,eAAA,6BAA6B,SAAS,eAAA,6BAA6B,iBAAiB,CAAC;IAC1H,4CAA6B,GAAG,GAAG,eAAA,yBAAyB,eAAe,eAAA,yBAAyB,OAAO,CAAC;IAC5G,2CAA4B,GAAG,+BAA+B,CAAC;CAC5E,EA7EgB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QA6E9B;;;;;;;;;;;;AChFD;IAoCI,YAAY,EAAgB;QACxB,IAAI,CAAC,EAAE,EAAE;YACL,EAAE,GAAG,IAAIpB,qBAAW,CAACA,iBAAO,CAAC,OAAO,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAGqB,6BAAc,CAAC,UAAU,CAAC;QAC5C,IAAI,CAAC,oBAAoB,GAAGA,6BAAc,CAAC,oBAAoB,CAAC;QAChE,IAAI,CAAC,mBAAmB,GAAGA,6BAAc,CAAC,mBAAmB,CAAC;QAC9D,IAAI,CAAC,uBAAuB,GAAGA,6BAAc,CAAC,uBAAuB,CAAC;QACtE,IAAI,CAAC,cAAc,GAAGA,6BAAc,CAAC,cAAc,CAAC;QACpD,IAAI,CAAC,kBAAkB,GAAGA,6BAAc,CAAC,kBAAkB,CAAC;QAE5D,IAAI,CAAC,4BAA4B,GAAG,EAAE,CAAC;QACvC,IAAI,CAAC,0BAA0B,GAAG,EAAE,CAAC;QACrC,IAAI,CAAC,4BAA4B,GAAG,EAAE,CAAC;QACvC,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;QAExC,IAAI,CAAC,iBAAiB,GAAG,IAAI,GAAG,EAAkB,CAAC;QACnD,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAkB,CAAC;QAClD,IAAI,CAAC,cAAc,GAAGA,6BAAc,CAAC,cAAc,CAAC;QACpD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,kBAAkB,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAEhG,IAAI,CAAC,gBAAgB,GAAGA,6BAAc,CAAC,gBAAgB,CAAC;QACxD,IAAI,CAAC,iBAAiB,GAAGA,6BAAc,CAAC,iBAAiB,CAAC;QAC1D,IAAI,CAAC,gBAAgB,GAAGA,6BAAc,CAAC,gBAAgB,CAAC;QACxD,IAAI,CAAC,cAAc,GAAGA,6BAAc,CAAC,cAAc,CAAC;QACpD,IAAI,CAAC,UAAU,GAAGA,6BAAc,CAAC,UAAU,CAAC;QAC5C,IAAI,CAAC,kBAAkB,GAAGA,6BAAc,CAAC,kBAAkB,CAAC;QAC5D,IAAI,CAAC,aAAa,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,UAAU,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAChF,IAAI,CAAC,eAAe,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1F,IAAI,CAAC,sBAAsB,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACxG,IAAI,CAAC,cAAc,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACxF,IAAI,CAAC,WAAW,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,aAAa,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,iBAAiB,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QAC9F,IAAI,CAAC,SAAS,GAAGZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;KACjF;IAED,iBAAiB,CAAC,MAA6B,EAAE,OAAoB;QACjE,OAAO,MAAM,CAAC;KACjB;IAED,sBAAsB,CAAC,SAAiB;QACpC,OAAO,CAAC,CAAC;KACZ;CACJ;AArFD,4EAqFC;;;;;;AC3FD;;;;;;;;;;AAUA,IAAIC,UAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;;;AAGrB,IAAIC,WAAS,GAAG,iBAAiB,CAAC;;;;;;AAMlC,IAAI,YAAY,GAAG,qBAAqB;IACpC,eAAe,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;;;AAGlD,IAAIC,YAAU,GAAG,OAAOlB,cAAM,IAAI,QAAQ,IAAIA,cAAM,IAAIA,cAAM,CAAC,MAAM,KAAK,MAAM,IAAIA,cAAM,CAAC;;;AAG3F,IAAImB,UAAQ,GAAG,OAAO,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC;;;AAGjF,IAAIC,MAAI,GAAGF,YAAU,IAAIC,UAAQ,IAAI,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;;;AAG/D,IAAIE,aAAW,GAAG,MAAM,CAAC,SAAS,CAAC;;;;;;;AAOnC,IAAIC,gBAAc,GAAGD,aAAW,CAAC,QAAQ,CAAC;;;AAG1C,IAAIE,QAAM,GAAGH,MAAI,CAAC,MAAM,CAAC;;;AAGzB,IAAII,aAAW,GAAGD,QAAM,GAAGA,QAAM,CAAC,SAAS,GAAG,SAAS;IACnDE,gBAAc,GAAGD,aAAW,GAAGA,aAAW,CAAC,QAAQ,GAAG,SAAS,CAAC;;;;;;;;;;AAUpE,SAASE,cAAY,CAAC,KAAK,EAAE;;EAE3B,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE;IAC5B,OAAO,KAAK,CAAC;GACd;EACD,IAAIC,UAAQ,CAAC,KAAK,CAAC,EAAE;IACnB,OAAOF,gBAAc,GAAGA,gBAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;GACzD;EACD,IAAI,MAAM,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC;EAC1B,OAAO,CAAC,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,KAAK,CAACT,UAAQ,IAAI,IAAI,GAAG,MAAM,CAAC;CACpE;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BD,SAASY,cAAY,CAAC,KAAK,EAAE;EAC3B,OAAO,CAAC,CAAC,KAAK,IAAI,OAAO,KAAK,IAAI,QAAQ,CAAC;CAC5C;;;;;;;;;;;;;;;;;;;AAmBD,SAASD,UAAQ,CAAC,KAAK,EAAE;EACvB,OAAO,OAAO,KAAK,IAAI,QAAQ;KAC5BC,cAAY,CAAC,KAAK,CAAC,IAAIN,gBAAc,CAAC,IAAI,CAAC,KAAK,CAAC,IAAIL,WAAS,CAAC,CAAC;CACpE;;;;;;;;;;;;;;;;;;;;;;;AAuBD,SAASY,UAAQ,CAAC,KAAK,EAAE;EACvB,OAAO,KAAK,IAAI,IAAI,GAAG,EAAE,GAAGH,cAAY,CAAC,KAAK,CAAC,CAAC;CACjD;;;;;;;;;;;;;;;;;AAiBD,SAAS,YAAY,CAAC,MAAM,EAAE;EAC5B,MAAM,GAAGG,UAAQ,CAAC,MAAM,CAAC,CAAC;EAC1B,OAAO,CAAC,MAAM,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC;MAC1C,MAAM,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;MACpC,MAAM,CAAC;CACZ;;AAED,uBAAc,GAAG,YAAY;;;;;;;;;ACxJ7B;IAAA;QAIc,gBAAW,GAAW,EAAE,CAAC;KAmEtC;IAjEG,OAAO,CAAC,MAAc;QAClB,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC;SACb;QAED,IAAI,MAAM,GAAG,IAAI,KAAK,EAAiB,CAAC;QACxC,IAAI,WAAW,GAAG,IAAI,GAAG,EAAiB,CAAC;QAC3C,IAAI,OAAO,GAAG,IAAI,KAAK,CAAU,MAAM,CAAC,MAAM,CAAC,CAAC;QAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SACtB;QAED,IAAI,WAAW,GAAG,IAAI,CAAC,OAAO;aACzB,GAAG,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE1B,6BAAa,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;aACnF,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEhD,WAAW,CAAC,OAAO,CAAC,UAAU;YAC1B,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC/B,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;iBAC/B;;gBAGD,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;aACxC,CAAC,CAAC;SACN,CAAC,CAAC;QAEH,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;gBACZ,IAAI,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC5C,IAAI,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC;oBACrB,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC;oBACtB,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;oBAC5D,IAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;oBAClG,IAAI,QAAQ,EAAE;wBACV,MAAM,CAAC,IAAI,CAAC;4BACR,KAAK,EAAE,KAAK;4BACZ,MAAM,EAAE,MAAM;4BACd,IAAI,EAAE,MAAM;4BACZ,IAAI,EAAE,IAAI,CAAC,WAAW;4BACtB,IAAI,EAAE,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI;yBACrE,CAAC,CAAC;qBACN;iBACJ;aACJ;iBACI;gBACD,IAAI,GAAG,CAAC,CAAC;aACZ;SACJ;QAED,OAAO,MAAM,CAAC;KACjB;IAES,+BAA+B,CAAC,IAAoB,EAAE,cAAsBO,uBAAW,CAAC,kBAAkB;QAEhH,IAAI,aAAa,GAAGoB,mBAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,YAAY,GAAGA,mBAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEnD,IAAK,eAAe,GAAG,IAAI,CAAC,YAAY,KAAK,IAAI;cAC3CpB,uBAAW,CAAC,sBAAsB,CAAC,WAAW,EAAE,aAAa,CAAC;cAC9DA,uBAAW,CAAC,qBAAqB,CAAC,WAAW,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;QAElF,OAAOP,6BAAa,CAAC,aAAa,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;KAC9D;CACJ;AAvED,kDAuEC;AAED;IASI,YAAY,eAAoC;QAJtC,gBAAW,GAAWM,mBAAS,CAAC,kBAAkB,CAAC;QAKzD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;KACrC;IAID,OAAO,CAAC,MAAc;QAClB,IAAI,YAAY,GAAG,MAAM,CAAC;QAC1B,IAAI,WAAgC,CAAC;QACrC,IAAI,aAAmC,CAAC;;QAGxC,IAAI,UAAU,GAAG,IAAI,CAAC,gCAAgC,CAAC,YAAY,CAAC,CAAC;QACrE,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAC3B,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;QACrC,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;QAEzC,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,IAAIN,6BAAa,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;QAE9E,IAAI,OAAO,GAAG,IAAI,KAAK,CAAU,MAAM,CAAC,MAAM,CAAC,CAAC;QAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SACtB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK;gBACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACnC,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;iBACnC;aACJ,CAAC,CAAC;SACN;QAED,IAAI,MAAM,GAAG,IAAI,KAAK,EAAiB,CAAC;QACxC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;;QAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;gBACZ,IAAI,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,EAAE;oBACrD,IAAI,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC;oBACrB,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC;oBACtB,IAAI,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,GAAG,MAAM,CAAC,CAAC;oBACrD,IAAI,EAAE,GAAkB;wBACpB,KAAK,EAAE,KAAK;wBACZ,MAAM,EAAE,MAAM;wBACd,IAAI,EAAE,MAAM;wBACZ,IAAI,EAAE,IAAI,CAAC,WAAW;qBACR,CAAC;oBACnB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACnB;aACJ;iBACI;gBACD,IAAI,GAAG,CAAC,CAAC;aACZ;SACJ;;QAGD,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QAEtE,OAAO,MAAM,CAAC;KACjB;;IAGO,gCAAgC,CAAC,GAAW;QAKhD,IAAI,WAAW,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE5C,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtD,IAAI,WAAW,GAAGO,uBAAW,CAAC,kBAAkB,CAAC;QAEjD,IAAI,KAAK,GAAG,IAAI,KAAK,CAAS,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,QAAQ,GAAG,IAAI,KAAK,EAAiB,CAAC;QAC1C,IAAI,KAAa,CAAC;QAClB,IAAI,GAAW,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACjB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAClC,AACA,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;YACzB,GAAG,GAAG,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC;YAChC,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC9B,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oBACjB,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;iBAChB;aACJ;SACJ;QAED,KAAK,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC3B,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9B,KAAK,GAAG,CAAC,CAAC;aACb;SACJ;QACD,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAEvC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,QAAQ,CAAC,OAAO,CAAC,OAAO;YACpB,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACnB,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YACxB,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE;gBACb,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;gBACrC,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE;oBAC/B,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;iBAC/B;aACJ;iBACI;gBACD,IAAI,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;gBACjD,GAAG,IAAI,WAAW,CAAC;gBACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACzC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,CAAC;iBACnC;aACJ;SACJ,CAAC,CAAC;QAGH,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;QAErC,OAAO;YACH,aAAa,EAAE,aAAa;YAC5B,MAAM,EAAE,GAAG;YACX,WAAW,EAAE,WAAW;SAC3B,CAAC;KACL;;IAGO,cAAc,CAAC,OAA6B,EAAE,YAAoB,EAAE,WAAgC,EAAE,aAAmC;QAC7I,IAAI,WAAW,GAAGA,uBAAW,CAAC,kBAAkB,CAAC;QACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAC7B,IAAI,GAAG,GAAG,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACpC,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC1B,IAAI,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAChD,IAAI,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAI,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;gBACrD,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,WAAW,CAAC;gBAC/B,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,WAAW,CAAC;gBAChC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,YAAY,CAAC,SAAS,CAAC,WAAW,EAAE,WAAW,GAAG,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC;gBACxF,IAAI,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBACxC,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;oBACjB,IAAI,cAAc,GAAG,KAAK,GAAG,QAAQ,CAAC;oBACtC,IAAI,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;wBAC3B,IAAI,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;wBAE5H,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BAC3C,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gCAChG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;gCAC9C,MAAM;6BACT;yBACJ;qBACJ;iBACJ;aACJ;SACJ;KACJ;;IAGS,YAAY,CAAC,SAAwB,EAAE,aAAsB,IAAI;QACvE,OAAO,SAAS,CAAC,GAAG,CAAC,QAAQ;YACzB,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAI,UAAU,EAAE;gBACZ,OAAO,IAAI,GAAG,CAAC;aAClB;YAED,OAAOP,6BAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;SACzD,CAAC,CAAC;KACN;;AApLyB,kCAAU,GAAWM,mBAAS,CAAC,OAAO,CAAC;AAHrE,0DAwLC;;;;;;;;;;;;;;ACxQD,4BAAoC,SAAQZ,gCAAmB;IAG3D,YAAY,OAAmBF,mBAAU,CAAC,OAAO;QAC7C,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWc,mBAAS,CAAC,OAAO,CAAC;QAI9C,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,WAAW,GAAoC,IAAI,CAAC;QACxD,QAAQ,IAAI;YACR,KAAKd,mBAAU,CAAC,UAAU;gBACtB,WAAW,GAAG,IAAI,wBAAwB,CAACgB,6BAAc,CAAC,qBAAqB,CAAC,CAAC;gBACjF,MAAM;YACV,KAAKhB,mBAAU,CAAC,QAAQ;gBACpB,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;gBAC/G,MAAM;YACV,KAAKhB,mBAAU,CAAC,OAAO;gBACnB,MAAM;SACb;QAED,IAAI,WAAW,KAAK,IAAI,EAAE;YACtB,WAAW,GAAG,IAAI,wBAAwB,EAAE,CAAC;SAChD;QAED,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGlD,IAAI,WAAW,GAAG,IAAI,wBAAwB,EAAE,CAAC;QACjD,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA/BD,wDA+BC;AAED,8BAAsC,SAAQE,gCAAmB;IAG7D,YAAY,cAAsBc,6BAAc,CAAC,kBAAkB;QAC/D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWF,mBAAS,CAAC,gBAAgB,CAAC;QAIvD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,UAAU,GAAG,IAAI,uBAAuB,CAAC,WAAW,CAAC,CAAC;QAC1D,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGjD,IAAI,aAAa,GAAG,IAAI,sBAAsB,CAAC,WAAW,CAAC,CAAC;QAC5D,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAjBD,4DAiBC;AAED,6BAAqC,SAAQZ,gCAAmB;IAG5D,YAAY,cAAsBc,6BAAc,CAAC,kBAAkB;QAC/D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWF,mBAAS,CAAC,eAAe,CAAC;QAKtD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC;YAC7F,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,iBAAiB,EAAE,IAAI,CAAC;YAC3E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAAChB,uBAAc,CAAC,eAAe,EAAE,WAAW,CAAC;YACzF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,gCAAgC,EAAE,KAAK,CAAC;YAC3F,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC;YACjF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,oBAAoB,EAAE,KAAK,CAAC;YAC/E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,+BAA+B,EAAE,KAAK,CAAC;YAC1F,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,kBAAkB,EAAE,KAAK,CAAC;YAC7E,KAAK,EAAE,YAAY;SACtB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA3CD,0DA2CC;AAED,4BAAoC,SAAQd,gCAAmB;IAG3D,YAAY,cAAsBc,6BAAc,CAAC,kBAAkB;QAC/D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWF,mBAAS,CAAC,cAAc,CAAC;QAKrD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,uBAAuB,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC;YAC/F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,0BAA0B,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC;YAClG,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAAChB,uBAAc,CAAC,iBAAiB,EAAE,WAAW,CAAC;YAC3F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,yBAAyB,EAAE,IAAI,CAAC;YACnF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,qBAAqB,EAAE,KAAK,CAAC;YAChF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,mBAAmB,EAAE,KAAK,CAAC;YAC9E,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,8BAA8B,EAAE,KAAK,CAAC;YACzF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,mCAAmC,EAAE,KAAK,CAAC;YAC9F,KAAK,EAAE,WAAW;SACrB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA3CD,wDA2CC;AAED,8BAAsC,SAAQd,gCAAmB;IAI7D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,gBAAgB,CAAC;QAKvD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,+BAA+B,EAAE,KAAK,CAAC;YAC1F,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,qBAAqB,EAAE,KAAK,CAAC;YAChF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,iBAAiB,EAAE,KAAK,CAAC;YAC5E,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,4BAA4B,EAAE,KAAK,CAAC;YACvF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,wBAAwB,EAAE,KAAK,CAAC;YACnF,KAAK,EAAE,SAAS;SACnB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAhCD,4DAgCC;AAED,6BAAqC,SAAQd,gCAAmB;IAG5D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,eAAe,CAAC;QAItD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,kBAAkB,EAAE,KAAK,CAAC;YAC7E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,mBAAmB,EAAE,KAAK,CAAC;YAC9E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,mBAAmB,EAAE,KAAK,CAAC;YAC9E,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAER,6BAAa,CAAC,aAAa,CAACQ,6BAAc,CAAC,uBAAuB,EAAE,KAAK,CAAC;YAClF,KAAK,EAAE,QAAQ;SAClB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA1BD,0DA0BC;AAED,gCAAwC,SAAQd,oCAAuB;IACnE;QACI,KAAK,CAAC,IAAI,sBAAsB,EAAE,CAAC,CAAA;KACtC;IAES,WAAW;QACjB,IAAI,SAAS,GAAG;YACZc,6BAAc,CAAC,0BAA0B;YACzCA,6BAAc,CAAC,0BAA0B;SAC5C,CAAC;QAEF,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KACvC;CACJ;AAbD,gEAaC;;;;;;;;;;;;;;ACzND,4BAAoC,SAAQd,gCAAmB;IAG3D,YAAY,OAAmBF,mBAAU,CAAC,OAAO;QAC7C,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWc,mBAAS,CAAC,OAAO,CAAC;QAI9C,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,WAAW,GAAoC,IAAI,CAAC;QACxD,QAAQ,IAAI;YACR,KAAKd,mBAAU,CAAC,UAAU;gBACtB,WAAW,GAAG,IAAI,wBAAwB,CAACiB,6BAAc,CAAC,qBAAqB,CAAC,CAAC;gBACjF,MAAM;YACV,KAAKjB,mBAAU,CAAC,QAAQ;gBACpB,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;gBAC/G,MAAM;YACV,KAAKjB,mBAAU,CAAC,OAAO;gBACnB,MAAM;SACb;QAED,IAAI,WAAW,KAAK,IAAI,EAAE;YACtB,WAAW,GAAG,IAAI,wBAAwB,EAAE,CAAC;SAChD;QAED,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGlD,IAAI,WAAW,GAAG,IAAI,wBAAwB,EAAE,CAAC;QACjD,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAhCD,wDAgCC;AAED,8BAAsC,SAAQE,gCAAmB;IAG7D,YAAY,cAAsBe,6BAAc,CAAC,kBAAkB;QAC/D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWH,mBAAS,CAAC,gBAAgB,CAAC;QAIvD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,UAAU,GAAG,IAAI,uBAAuB,CAAC,WAAW,CAAC,CAAC;QAC1D,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGjD,IAAI,aAAa,GAAG,IAAI,sBAAsB,CAAC,WAAW,CAAC,CAAC;QAC5D,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAjBD,4DAiBC;AAED,6BAAqC,SAAQZ,gCAAmB;IAG5D,YAAY,cAAsBe,6BAAc,CAAC,kBAAkB;QAC/D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWH,mBAAS,CAAC,eAAe,CAAC;QAKtD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC;YAC7F,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,iBAAiB,EAAE,IAAI,CAAC;YAC3E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAACjB,uBAAc,CAAC,aAAa,EAAE,WAAW,CAAC;YACvF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,gCAAgC,CAAC;YACpF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,sBAAsB,CAAC;YAC1E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,oBAAoB,CAAC;YACxE,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,+BAA+B,CAAC;YACnF,KAAK,EAAE,YAAY;SACtB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAvCD,0DAuCC;AAED,4BAAoC,SAAQf,gCAAmB;IAG3D,YAAY,cAAsBe,6BAAc,CAAC,kBAAkB;QAC/D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWH,mBAAS,CAAC,cAAc,CAAC;QAKrD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YACxF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;YAC3F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,yBAAyB,EAAE,IAAI,CAAC;YACnF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,qBAAqB,CAAC;YACzE,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,mBAAmB,CAAC;YACvE,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,8BAA8B,CAAC;YAClF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,mCAAmC,CAAC;YACvF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAACjB,uBAAc,CAAC,iBAAiB,EAAE,WAAW,CAAC;YAC3F,KAAK,EAAE,WAAW;SACrB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA3CD,wDA2CC;AAED,8BAAsC,SAAQE,gCAAmB;IAI7D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,gBAAgB,CAAC;QAKvD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,qBAAqB,CAAC;YACzE,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,+BAA+B,CAAC;YACnF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,iBAAiB,CAAC;YACrE,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,4BAA4B,CAAC;YAChF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,wBAAwB,CAAC;YAC5E,KAAK,EAAE,SAAS;SACnB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAhCD,4DAgCC;AAED,6BAAqC,SAAQf,gCAAmB;IAG5D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,eAAe,CAAC;QAItD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,kBAAkB,CAAC;YACtE,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAET,6BAAa,CAAC,aAAa,CAACS,6BAAc,CAAC,gBAAgB,CAAC;YACpE,KAAK,EAAE,QAAQ;SAClB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAlBD,0DAkBC;AAED,gCAAwC,SAAQf,oCAAuB;IACnE;QACI,KAAK,CAAC,IAAI,sBAAsB,EAAE,CAAC,CAAA;KACtC;IAES,WAAW;QACjB,IAAI,SAAS,GAAG;YACZe,6BAAc,CAAC,0BAA0B;SAC5C,CAAC;QAEF,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KACvC;CACJ;AAZD,gEAYC;;;;;;;;;;;;;;AC7MD,+BAAuC,SAAQf,gCAAmB;IAG9D,YAAY,OAAmBF,mBAAU,CAAC,OAAO;QAC7C,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWc,mBAAS,CAAC,OAAO,CAAC;QAI9C,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,WAAW,GAAuC,IAAI,CAAC;QAC3D,QAAQ,IAAI;YACR,KAAKd,mBAAU,CAAC,UAAU;gBACtB,WAAW,GAAG,IAAI,2BAA2B,CAACkB,mCAAiB,CAAC,qBAAqB,CAAC,CAAC;gBACvF,MAAM;YACV,KAAKlB,mBAAU,CAAC,QAAQ;gBACpB,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;gBAClH,MAAM;YACV,KAAKlB,mBAAU,CAAC,OAAO;gBACnB,MAAM;SACb;QAED,IAAI,WAAW,KAAK,IAAI,EAAE;YACtB,WAAW,GAAG,IAAI,2BAA2B,EAAE,CAAC;SACnD;QAED,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGlD,IAAI,WAAW,GAAG,IAAI,2BAA2B,EAAE,CAAC;QACpD,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAhCD,8DAgCC;AAED,iCAAyC,SAAQE,gCAAmB;IAGhE,YAAY,cAAsBgB,mCAAiB,CAAC,kBAAkB;QAClE,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWJ,mBAAS,CAAC,gBAAgB,CAAC;QAIvD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,UAAU,GAAG,IAAI,0BAA0B,CAAC,WAAW,CAAC,CAAC;QAC7D,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGjD,IAAI,aAAa,GAAG,IAAI,yBAAyB,CAAC,WAAW,CAAC,CAAC;QAC/D,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAjBD,kEAiBC;AAED,gCAAwC,SAAQZ,gCAAmB;IAG/D,YAAY,cAAsBgB,mCAAiB,CAAC,kBAAkB;QAClE,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWJ,mBAAS,CAAC,eAAe,CAAC;QAKtD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC;YAChG,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,iBAAiB,EAAE,IAAI,CAAC;YAC9E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAAClB,uBAAc,CAAC,aAAa,EAAE,WAAW,CAAC;YACvF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,gCAAgC,CAAC;YACvF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,uBAAuB,CAAC;YAC9E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,sBAAsB,CAAC;YAC7E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,oBAAoB,CAAC;YAC3E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,+BAA+B,CAAC;YACtF,KAAK,EAAE,YAAY;SACtB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA3CD,gEA2CC;AAED,+BAAuC,SAAQhB,gCAAmB;IAG9D,YAAY,cAAsBgB,mCAAiB,CAAC,kBAAkB;QAClE,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWJ,mBAAS,CAAC,cAAc,CAAC;QAKrD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YAC3F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;YAC9F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,yBAAyB,EAAE,IAAI,CAAC;YACtF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,qBAAqB,CAAC;YAC5E,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,mBAAmB,CAAC;YAC1E,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,8BAA8B,CAAC;YACrF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,mCAAmC,CAAC;YAC1F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAAClB,uBAAc,CAAC,iBAAiB,EAAE,WAAW,CAAC;YAC3F,KAAK,EAAE,WAAW;SACrB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA3CD,8DA2CC;AAED,iCAAyC,SAAQE,gCAAmB;IAIhE;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,gBAAgB,CAAC;QAKvD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,qBAAqB,CAAC;YAC5E,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,+BAA+B,CAAC;YACtF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,iBAAiB,CAAC;YACxE,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,4BAA4B,CAAC;YACnF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,wBAAwB,CAAC;YAC/E,KAAK,EAAE,SAAS;SACnB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAhCD,kEAgCC;AAED,gCAAwC,SAAQhB,gCAAmB;IAG/D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,eAAe,CAAC;QAItD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,kBAAkB,CAAC;YACzE,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEV,6BAAa,CAAC,aAAa,CAACU,mCAAiB,CAAC,mBAAmB,CAAC;YAC1E,KAAK,EAAE,YAAY;SACtB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAlBD,gEAkBC;AAED,mCAA2C,SAAQhB,oCAAuB;IACtE;QACI,KAAK,CAAC,IAAI,yBAAyB,EAAE,CAAC,CAAA;KACzC;IAES,WAAW;QACjB,IAAI,SAAS,GAAG;YACZgB,mCAAiB,CAAC,0BAA0B;SAC/C,CAAC;QAEF,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KACvC;CACJ;AAZD,sEAYC;;;;;;;;;;;;;;ACjND,2BAAmC,SAAQhB,gCAAmB;IAG1D,YAAY,OAAmBF,mBAAU,CAAC,OAAO;QAC7C,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWc,mBAAS,CAAC,OAAO,CAAC;QAI9C,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,WAAW,GAAmC,IAAI,CAAC;QACvD,QAAQ,IAAI;YACR,KAAKd,mBAAU,CAAC,UAAU;gBACtB,WAAW,GAAG,IAAI,uBAAuB,CAACmB,2BAAa,CAAC,qBAAqB,CAAC,CAAC;gBAC/E,MAAM;YACV,KAAKnB,mBAAU,CAAC,QAAQ;gBACpB,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;gBAC9G,MAAM;YACV,KAAKnB,mBAAU,CAAC,OAAO;gBACnB,MAAM;SACb;QAED,IAAI,WAAW,KAAK,IAAI,EAAE;YACtB,WAAW,GAAG,IAAI,uBAAuB,EAAE,CAAC;SAC/C;QAED,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGlD,IAAI,WAAW,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAChD,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAhCD,sDAgCC;AAED,6BAAqC,SAAQE,gCAAmB;IAG5D,YAAY,cAAsBiB,2BAAa,CAAC,kBAAkB;QAC9D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWL,mBAAS,CAAC,gBAAgB,CAAC;QAIvD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,UAAU,GAAG,IAAI,sBAAsB,CAAC,WAAW,CAAC,CAAC;QACzD,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGjD,IAAI,aAAa,GAAG,IAAI,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAC3D,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAjBD,0DAiBC;AAED,4BAAoC,SAAQZ,gCAAmB;IAG3D,YAAY,cAAsBiB,2BAAa,CAAC,kBAAkB;QAC9D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWL,mBAAS,CAAC,eAAe,CAAC;QAKtD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC;YAC5F,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,iBAAiB,EAAE,IAAI,CAAC;YAC1E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAACnB,uBAAc,CAAC,aAAa,EAAE,WAAW,CAAC;YACvF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEQ,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,gCAAgC,CAAC;YACnF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,sBAAsB,CAAC;YACzE,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,oBAAoB,CAAC;YACvE,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,+BAA+B,CAAC;YAClF,KAAK,EAAE,WAAW;SACrB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAvCD,wDAuCC;AAED,2BAAmC,SAAQjB,gCAAmB;IAG1D,YAAY,cAAsBiB,2BAAa,CAAC,kBAAkB;QAC9D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWL,mBAAS,CAAC,cAAc,CAAC;QAKrD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YACvF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;YAC1F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,yBAAyB,EAAE,IAAI,CAAC;YAClF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,qBAAqB,CAAC;YACxE,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,mBAAmB,CAAC;YACtE,KAAK,EAAE,UAAU;SACpB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,8BAA8B,CAAC;YACjF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,mCAAmC,CAAC;YACtF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAE,IAAI,CAAC,+BAA+B,CAACnB,uBAAc,CAAC,iBAAiB,EAAE,WAAW,CAAC;YAC3F,KAAK,EAAE,WAAW;SACrB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA3CD,sDA2CC;AAED,6BAAqC,SAAQE,gCAAmB;IAI5D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,gBAAgB,CAAC;QAKvD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,qBAAqB,CAAC;YACxE,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,+BAA+B,CAAC;YAClF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,iBAAiB,CAAC;YACpE,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,4BAA4B,CAAC;YAC/E,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,wBAAwB,CAAC;YAC3E,KAAK,EAAE,QAAQ;SAClB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAhCD,0DAgCC;AAED,4BAAoC,SAAQjB,gCAAmB;IAG3D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,eAAe,CAAC;QAItD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,kBAAkB,CAAC;YACrE,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEX,6BAAa,CAAC,aAAa,CAACW,2BAAa,CAAC,kBAAkB,CAAC;YACrE,KAAK,EAAE,OAAO;SACjB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAlBD,wDAkBC;AAED,+BAAuC,SAAQjB,oCAAuB;IAClE;QACI,KAAK,CAAC,IAAI,qBAAqB,EAAE,CAAC,CAAA;KACrC;IAES,WAAW;QACjB,IAAI,SAAS,GAAG;YACZiB,2BAAa,CAAC,0BAA0B;YACxCA,2BAAa,CAAC,0BAA0B;SAC3C,CAAC;QAEF,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KACvC;CACJ;AAbD,8DAaC;;;;;;;;;;;;;AC9MD,IAAY,iBAKX;AALD,WAAY,iBAAiB;;IAEzB,+DAAO,CAAA;;IAEP,qEAAU,CAAA;CACb,EALW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAK5B;AAED,4BAAoC,SAAQjB,gCAAmB;IAG3D,YAAY,OAA0B,iBAAiB,CAAC,OAAO;QAC3D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,OAAO,CAAC;QAI9C,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,WAAW,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,CAAC;QACrD,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGlD,IAAI,WAAW,GAAG,IAAI,wBAAwB,EAAE,CAAC;QACjD,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAjBD,wDAiBC;AAED,8BAAsC,SAAQZ,gCAAmB;IAG7D,YAAY,OAA0B,iBAAiB,CAAC,OAAO;QAC3D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,gBAAgB,CAAC;QAIvD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAe,CAAC;;QAGvC,IAAI,UAAU,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,CAAC;QACnD,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;QAGjD,IAAI,aAAa,GAAG,IAAI,sBAAsB,EAAE,CAAC;QACjD,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAjBD,4DAiBC;AAED,6BAAqC,SAAQZ,gCAAmB;IAG5D,YAAY,OAA0B,iBAAiB,CAAC,OAAO;QAC3D,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,eAAe,CAAC;QAKtD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,oBAAoB,EAAE,IAAI,CAAC;YAC9E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,8BAA8B,EAAE,IAAI,CAAC;YACxF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,yBAAyB,EAAE,KAAK,CAAC;YACpF,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,oBAAoB,EAAE,KAAK,CAAC;YAC/E,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,gBAAgB,EAAE,KAAK,CAAC;YAC3E,KAAK,EAAE,YAAY;SACtB,CACJ,CAAC;QAEF,QAAQ,IAAI;YACR,KAAK,iBAAiB,CAAC,OAAO;gBAC1B,OAAO,CAAC,IAAI,CAAC;oBACT,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,qBAAqB,EAAE,IAAI,CAAC;oBAC/E,KAAK,EAAE,YAAY;iBACtB,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,iBAAiB,CAAC,UAAU;gBAC7B,OAAO,CAAC,IAAI,CAAC;oBACT,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,kBAAkB,EAAE,IAAI,CAAC;oBAC5E,KAAK,EAAE,YAAY;iBACtB,CAAC,CAAC;gBACH,MAAM;SACb;QAED,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA9CD,0DA8CC;AAED,4BAAoC,SAAQlB,gCAAmB;IAG3D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,cAAc,CAAC;QAKrD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,mBAAmB,EAAE,KAAK,CAAC;YAC9E,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,gCAAgC,EAAE,KAAK,CAAC;YAC3F,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,yBAAyB,EAAE,KAAK,CAAC;YACpF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,yBAAyB,EAAE,IAAI,CAAC;YACnF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,wBAAwB,EAAE,IAAI,CAAC;YAClF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC;YAC7E,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,8BAA8B,EAAE,KAAK,CAAC;YACzF,KAAK,EAAE,WAAW;SACrB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,6BAA6B,EAAE,KAAK,CAAC;YACxF,KAAK,EAAE,WAAW;SACrB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AA3CD,wDA2CC;AAED,8BAAsC,SAAQlB,gCAAmB;IAI7D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,gBAAgB,CAAC;QAKvD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,kCAAkC,EAAE,KAAK,CAAC;YAC7F,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,qBAAqB,EAAE,KAAK,CAAC;YAChF,KAAK,EAAE,SAAS;SACnB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,iBAAiB,EAAE,IAAI,CAAC;YAC3E,KAAK,EAAE,SAAS;SACnB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAxBD,4DAwBC;AAED,6BAAqC,SAAQlB,gCAAmB;IAG5D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,eAAe,CAAC;QAItD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,eAAe,EAAE,IAAI,CAAC;YACzE,KAAK,EAAE,YAAY;SACtB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC;YAC7E,KAAK,EAAE,YAAY;SACtB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAlBD,0DAkBC;AAED,gCAAwC,SAAQlB,gCAAmB;IAG/D;QACI,KAAK,EAAE,CAAC;QAHF,gBAAW,GAAWY,mBAAS,CAAC,kBAAkB,CAAC;QAIzD,IAAI,OAAO,GAAG,IAAI,KAAK,CACnB;YACI,MAAM,EAAEN,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,oBAAoB,EAAE,IAAI,CAAC;YAC9E,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,qBAAqB,EAAE,IAAI,CAAC;YAC/E,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,2BAA2B,EAAE,KAAK,CAAC;YACtF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,mCAAmC,EAAE,KAAK,CAAC;YAC9F,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,oCAAoC,EAAE,IAAI,CAAC;YAC9F,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,4BAA4B,EAAE,KAAK,CAAC;YACvF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,oCAAoC,EAAE,KAAK,CAAC;YAC/F,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,qCAAqC,EAAE,IAAI,CAAC;YAC/F,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,4BAA4B,EAAE,KAAK,CAAC;YACvF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,0CAA0C,EAAE,IAAI,CAAC;YACpG,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,iCAAiC,EAAE,KAAK,CAAC;YAC5F,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC;YACjF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,oCAAoC,EAAE,IAAI,CAAC;YAC9F,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,8BAA8B,EAAE,KAAK,CAAC;YACzF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,4BAA4B,EAAE,KAAK,CAAC;YACvF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,2BAA2B,EAAE,KAAK,CAAC;YACtF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,oBAAoB,EAAE,KAAK,CAAC;YAC/E,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,0BAA0B,EAAE,KAAK,CAAC;YACrF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,uBAAuB,EAAE,KAAK,CAAC;YAClF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,8BAA8B,EAAE,KAAK,CAAC;YACzF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,6BAA6B,EAAE,KAAK,CAAC;YACxF,KAAK,EAAE,QAAQ;SAClB,EACD;YACI,MAAM,EAAEZ,6BAAa,CAAC,aAAa,CAACY,6BAAc,CAAC,4BAA4B,EAAE,KAAK,CAAC;YACvF,KAAK,EAAE,QAAQ;SAClB,CACJ,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;CACJ;AAlGD,gEAkGC;;;;;;;;;;;;;;;;;;;;;;;AChRD,sBAAsC,SAAQZ,0BAAU;IAGpD;QACI,KAAK,EAAE,CAAC;;QAGR,IAAI,CAAC,aAAa,CAAC,aAAa,EAAET,iBAAO,CAAC,OAAO,EAAE,IAAIC,oBAAW,CAC9DoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,MAAM,EAAE,IAAIC,oDAAgC,EAAE,CAAC,EAC9G,IAAInC,mCAAsB,CAACF,mBAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAED,iBAAO,CAAC,OAAO,EAAE,IAAIC,qBAAY,CAChEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,OAAO,EAAE,IAAIC,oDAAgC,EAAE,CAAC,EAC/G,IAAInC,oCAAuB,EAAE,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAEH,iBAAO,CAAC,OAAO,EAAE,IAAIC,qBAAY,CAChEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,UAAU,EAAE,IAAIC,oDAAgC,EAAE,CAAC,EAClH,IAAInC,uCAA0B,EAAE,CAAC,CAAC,CAAC;;QAGvC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAEH,iBAAO,CAAC,OAAO,EAAE,IAAIC,oBAAW,CAC9DoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,MAAM,EAAE,IAAIE,sDAAgC,EAAE,CAAC,EAC9G,IAAIC,mCAAsB,CAACvC,mBAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAED,iBAAO,CAAC,OAAO,EAAE,IAAIC,qBAAY,CAChEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,OAAO,EAAE,IAAIE,sDAAgC,EAAE,CAAC,EAC/G,IAAIC,oCAAuB,EAAE,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAExC,iBAAO,CAAC,OAAO,EAAE,IAAIC,qBAAY,CAChEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,UAAU,EAAE,IAAIE,sDAAgC,EAAE,CAAC,EAClH,IAAIC,uCAA0B,EAAE,CAAC,CAAC,CAAC;;QAGvC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAExC,iBAAO,CAAC,UAAU,EAAE,IAAIC,oBAAW,CACjEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,MAAM,EAAE,IAAII,yDAAmC,EAAE,CAAC,EACjH,IAAIC,sCAAyB,CAACzC,mBAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,CAAC,cAAc,EAAED,iBAAO,CAAC,UAAU,EAAE,IAAIC,qBAAY,CACnEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,OAAO,EAAE,IAAII,yDAAmC,EAAE,CAAC,EAClH,IAAIC,uCAA0B,EAAE,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE1C,iBAAO,CAAC,UAAU,EAAE,IAAIC,qBAAY,CACnEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,UAAU,EAAE,IAAII,yDAAmC,EAAE,CAAC,EACrH,IAAIC,0CAA6B,EAAE,CAAC,CAAC,CAAC;;QAG1C,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE1C,iBAAO,CAAC,OAAO,EAAE,IAAIC,oBAAW,CAC9DoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,MAAM,EAAE,IAAIM,sDAAgC,EAAE,CAAC,EAC9G,IAAIC,oCAAsB,EAAE,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE5C,iBAAO,CAAC,OAAO,EAAE,IAAIC,qBAAY,CAChEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,OAAO,EAAE,IAAIM,sDAAgC,EAAE,CAAC,EAC/G,IAAIC,qCAAuB,EAAE,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE5C,iBAAO,CAAC,OAAO,EAAE,IAAIC,qBAAY,CAChEoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,UAAU,EAAE,IAAIM,sDAAgC,EAAE,CAAC,EAClH,IAAIC,wCAA0B,EAAE,CAAC,CAAC,CAAC;;QAGvC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE5C,iBAAO,CAAC,MAAM,EAAE,IAAIC,oBAAW,CAC7DoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,MAAM,EAAE,IAAIQ,qDAA+B,EAAE,CAAC,EAC7G,IAAIC,mCAAqB,CAAC7C,mBAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACvD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAED,iBAAO,CAAC,MAAM,EAAE,IAAIC,qBAAY,CAC/DoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,OAAO,EAAE,IAAIQ,qDAA+B,EAAE,CAAC,EAC9G,IAAIC,oCAAsB,EAAE,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE9C,iBAAO,CAAC,MAAM,EAAE,IAAIC,qBAAY,CAC/DoC,gDAA2B,CAAC,SAAS,CAACA,6CAAwB,CAAC,UAAU,EAAE,IAAIQ,qDAA+B,EAAE,CAAC,EACjH,IAAIC,uCAAyB,EAAE,CAAC,CAAC,CAAC;KACzC;IAED,cAAc,CAAC,OAAe,EAAE,2BAAoC,IAAI;QACpE,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,wBAAwB,CAAC,CAAC;KAC1E;IAED,eAAe,CAAC,OAAe,EAAE,2BAAoC,IAAI;QACrE,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,EAAE,wBAAwB,CAAC,CAAC;KAC3E;IAED,kBAAkB,CAAC,OAAe,EAAE,2BAAoC,IAAI;QACxE,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,EAAE,wBAAwB,CAAC,CAAC;KAC3E;;AAvEe,yBAAQ,GAAqB,IAAI,gBAAgB,EAAE,CAAC;AADxE,mCAyEC;;;;;;;;;;ACzFQ,4CAAA,OAAO,CAAoB;;AAC3B,4BAAA,OAAO,CAAA;AAAE,gCAAA,WAAW,CAAA;;AACpB,wCAAA,aAAa,CAAA;AAAE,wCAAA,aAAa,CAAA;AAAE,gCAAA,KAAK,CAAA;AAAE,wCAAA,aAAa,CAAA;;AAClD,kCAAA,WAAW,CAAA;;AACX,wCAAA,cAAc,CAAA;;AACd,wCAAA,cAAc,CAAA;;AACd,sCAAA,aAAa,CAAA;;AACb,wCAAA,cAAc,CAAA;;AACd,8BAAA,SAAS,CAAA;;AACI,2CAAA,mBAAmB,CAAA;AAAE,+CAAA,uBAAuB,CAAA;;AACzD,8BAAA,UAAU,CAAA;AAAE,kCAAA,cAAc,CAAA;AAAE,uCAAA,mBAAmB,CAAA;AAAE,+BAAA,WAAW,CAAA;AAAE,gCAAA,YAAY,CAAA;AAAE,gCAAA,YAAY,CAAA;;AACxF,wDAAA,wBAAwB,CAAA;AAAE,2DAAA,2BAA2B,CAAA;;AACzB,qCAAA,gBAAgB,CAAA;AAAE,yCAAA,oBAAoB,CAAA;;AAClE,gDAAA,wBAAwB,CAAA;AAAE,8CAAA,sBAAsB,CAAA;AAAE,gDAAA,wBAAwB,CAAA;AAAE,+CAAA,uBAAuB,CAAA;AAAE,8CAAA,sBAAsB,CAAA;AAAE,+CAAA,uBAAuB,CAAA;AAAE,kDAAA,0BAA0B,CAAA;;AAChL,+DAAA,gCAAgC,CAAA;;AAChC,gDAAA,wBAAwB,CAAA;AAAE,8CAAA,sBAAsB,CAAA;AAAE,gDAAA,wBAAwB,CAAA;AAAE,+CAAA,uBAAuB,CAAA;AAAE,8CAAA,sBAAsB,CAAA;AAAE,+CAAA,uBAAuB,CAAA;AAAE,kDAAA,0BAA0B,CAAA;;AAChL,iEAAA,gCAAgC,CAAA;;AAChC,mDAAA,2BAA2B,CAAA;AAAE,iDAAA,yBAAyB,CAAA;AAAE,mDAAA,2BAA2B,CAAA;AAAE,kDAAA,0BAA0B,CAAA;AAAE,iDAAA,yBAAyB,CAAA;AAAE,kDAAA,0BAA0B,CAAA;AAAE,qDAAA,6BAA6B,CAAA;;AACrM,oEAAA,mCAAmC,CAAA;;AACnC,gDAAA,uBAAuB,CAAA;AAAE,8CAAA,qBAAqB,CAAA;AAAE,gDAAA,uBAAuB,CAAA;AAAE,+CAAA,sBAAsB,CAAA;AAAE,8CAAA,qBAAqB,CAAA;AAAE,+CAAA,sBAAsB,CAAA;AAAE,kDAAA,yBAAyB,CAAA;;AACzK,gEAAA,+BAA+B,CAAA;;AAC/B,iDAAA,wBAAwB,CAAA;AAAE,+CAAA,sBAAsB,CAAA;AAAE,iDAAA,wBAAwB,CAAA;AAAE,gDAAA,uBAAuB,CAAA;AAAE,+CAAA,sBAAsB,CAAA;AAAE,gDAAA,uBAAuB,CAAA;AAAE,mDAAA,0BAA0B,CAAA;AAAE,0CAAA,iBAAiB,CAAA;;AACnM,iEAAA,gCAAgC,CAAA;;AAChC,wCAAA,mBAAmB,CAAA;;;;;;;;;;ACnB5B,yBAAiC,SAAQrC,2BAAW;CAEnD;AAFD,kDAEC;AAMD;IAMI,YAAY,MAAuB,EAAE,SAA6B;QALlE,kBAAa,GAAW,UAAU,CAAC;QAM/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,KAAK,CAAC,KAAa,EAAE,gBAAsB,IAAI,IAAI,EAAE;QACjD,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAExC,IAAI,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QAClE,IAAI,UAAU,GAAG,IAAI,KAAK,EAAuB,CAAC;QAClD,KAAK,IAAI,MAAM,IAAI,cAAc,EAAE;YAC/B,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAC3D,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;gBAClC,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;aACzC;iBAAM;gBAAE,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAAE;SAC3C;QAED,OAAO,UAAU;aACZ,GAAG,CAAC,CAAC,KAAK;YACP,KAAK,EAAE,CAAC,CAAC,KAAK;YACd,GAAG,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC;YAC3B,UAAU,EAAE,CAAC,CAAC,KAAK;YACnB,IAAI,EAAE,CAAC,CAAC,IAAI;YACZ,QAAQ,EAAE,CAAC,CAAC,IAAI;SACnB,CAAC,CAAC,CAAC;KACX;CACJ;AAhCD,sCAgCC;;;;;;;;;AC5CD;;AACoB,2BAAiB,GAAW,MAAM,CAAC;AACnC,2BAAiB,GAAW,MAAM,CAAC;AACnC,iCAAuB,GAAW,WAAW,CAAC;AAC9C,+BAAqB,GAAW,UAAU,CAAC;AAC3C,iCAAuB,GAAW,WAAW,CAAC;AAC9C,qCAA2B,GAAW,eAAe,CAAC;AACtD,+BAAqB,GAAW,UAAU,CAAC;AAC3C,0BAAgB,GAAW,KAAK,CAAC;;AAGjC,kBAAQ,GAAW,OAAO,CAAC;AAC3B,oBAAU,GAAW,SAAS,CAAC;AAC/B,gBAAM,GAAW,KAAK,CAAC;AACvB,iBAAO,GAAW,MAAM,CAAC;AACzB,oBAAU,GAAW,SAAS,CAAC;AAC/B,oBAAU,GAAW,SAAS,CAAC;AAC/B,0BAAgB,GAAW,eAAe,CAAC;AAC3C,4BAAkB,GAAW,iBAAiB,CAAC;AAlBnE,8BAmBC;AAED;;AACoB,sBAAI,GAAW,MAAM,CAAC;AACtB,4BAAU,GAAW,WAAW,CAAC;AACjC,0BAAQ,GAAW,SAAS,CAAC;AAC7B,0BAAQ,GAAW,UAAU,CAAC;AAC9B,gCAAc,GAAW,eAAe,CAAC;AACzC,8BAAY,GAAW,aAAa,CAAC;AACrC,0BAAQ,GAAW,UAAU,CAAC;AAC9B,qBAAG,GAAW,KAAK,CAAC;AACpB,sBAAI,GAAW,MAAM,CAAC;AACtB,uBAAK,GAAW,OAAO,CAAC;AACxB,4BAAU,GAAW,WAAW,CAAC;AACjC,0BAAQ,GAAW,SAAS,CAAC;AAE7B,uBAAK,GAAW,OAAO,CAAC;AACxB,qBAAG,GAAW,KAAK,CAAC;AAEpB,2BAAS,GAAW,QAAQ,CAAC;AAC7B,0BAAQ,GAAW,OAAO,CAAC;AAC3B,0BAAQ,GAAW,OAAO,CAAC;AAnB/C,8CAoBC;;;;;;;;;;;ACnCD;IACI,YAAY,KAAa,EAAE,GAAW;QAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;KAClB;IAKD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;KAChC;IAED,OAAO,cAAc,CAAC,MAAe,EAAE,MAAc,EAAE,aAAqB;QACxE,IAAI,GAAG,GAAyB,EAAE,CAAC;QACnC,IAAI,YAAY,GAAiB,EAAE,CAAC;QACpC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA,EAAE,CAAC,CAAC;QACtE,MAAM,CAAC,OAAO,CAAC,KAAK;YAChB,IAAI,KAAK,EAAE;gBACP,IAAI,IAAI,GAAG,IAAI,CAAC;gBAChB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,YAAY,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,EAAE,EAAE;oBAC9D,IAAI,WAAW,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;oBACtC,IAAI,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE;wBAClE,IAAI,GAAG,KAAK,CAAC;qBAChB;oBACD,IAAI,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE;wBAClE,IAAI,GAAG,KAAK,CAAC;qBAChB;oBACD,IAAI,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE;wBAClE,IAAI,GAAG,KAAK,CAAC;wBACb,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;qBAC/B;iBACJ;gBACD,IAAI,IAAI,EAAE;oBACN,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC5B;aACJ;SACJ,CAAC,CAAC;QACH,YAAY,CAAC,OAAO,CAAC,KAAK;YACtB,GAAG,CAAC,IAAI,CAAC;gBACL,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC;gBAC9C,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;CACJ;AAhDD,sBAgDC;AAYD,IAAY,YAEX;AAFD,WAAY,YAAY;IACpB,+CAAI,CAAA;IAAE,uDAAQ,CAAA;CACjB,EAFW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAEvB;AAED;IACI,OAAO,mCAAmC,CAAC,MAAc,EAAE,EAAiB,EAAE,GAAY,EAAE,MAAqC;QAC7H,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC;QAC/B,IAAI,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE;YACtB,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACxC,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YACjD,AACA,IAAI,KAAK,GAAG,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YACxE,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;aACrE;iBACI;gBACD,KAAK,GAAG,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;gBACtE,IAAI,KAAK,CAAC,OAAO,EAAE;oBACf,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;iBACrE;qBACI;oBACD,KAAK,GAAG,YAAY,CAAC,UAAU,CAAC,YAAY,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;;oBAEvE,IAAIA,6BAAa,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC;wBAAE,OAAO,GAAG,CAAC;oBACpF,IAAI,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE;wBACnE,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;qBACrE;iBACJ;aACJ;SACJ;QACD,OAAO,GAAG,CAAC;KACd;IAED,OAAO,4BAA4B,CAAC,MAAc,EAAE,aAAmB,EAAE,iBAAqC,EAAE,cAA+B,EAAE,OAAoC,EAAE,SAAiB,EAAE,oBAAmD,EAAE,IAAkB;QAC7Q,IAAI,MAAM,GAAG,IAAI,wBAAwB,EAAE,CAAC;QAC5C,IAAI,QAAQ,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QACtE,IAAI,CAAC,QAAQ;YAAE,OAAO,MAAM,CAAC;QAC7B,IAAI,EAAE,GAAG,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACvD,IAAI,CAAC,EAAE;YAAE,OAAO,MAAM,CAAC;QACvB,IAAI,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC9D,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAC1B,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/D,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,cAAc,GAA6B,EAAE,CAAC,KAAK,CAAC;QACxD,IAAI,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;aACvE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;aAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG;YAAE,OAAO,MAAM,CAAC;QACxB,OAAO,YAAY,CAAC,iBAAiB,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,EAAE,oBAAoB,EAAE,IAAI,CAAC,CAAC;KACpI;IAED,OAAO,iBAAiB,CAAC,mBAAwC,EAAE,GAAW,EAAE,OAAoC,EAAE,OAAe,EAAE,QAAgB,EAAE,SAAiB,EAAE,aAAmB,EAAE,oBAAmD,EAAE,IAAkB;QACpQ,IAAI,MAAM,GAAG,IAAI,wBAAwB,EAAE,CAAC;QAC5C,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO;YAAE,OAAO,MAAM,CAAC;QAC5B,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC5B,IAAI,WAAW,GAAG,YAAY,CAAC,qBAAqB,CAAC,QAAQ,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC9F,IAAI,iBAAiB,GAAG,YAAY,CAAC,qBAAqB,CAAC,QAAQ,EAAE,oBAAoB,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,eAAe,CAAC,SAAS,EAAE,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;QACxL,IAAI,WAAW,EAAE;YACb,MAAM,GAAG,YAAY,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC9E,mBAAmB,CAAC,KAAK,CAAC,GAAG,GAAGM,6BAAiB,CAAC,SAAS,CAAC;YAC5D,MAAM,CAAC,mBAAmB,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACnD,OAAO,MAAM,CAAC;SACjB;QACD,IAAI,iBAAiB,EAAE;YACnB,MAAM,GAAG,YAAY,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,EAAE,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC7E,mBAAmB,CAAC,KAAK,CAAC,GAAG,GAAGA,6BAAiB,CAAC,QAAQ,CAAC;YAC3D,MAAM,CAAC,mBAAmB,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACnD,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,MAAM,CAAC;KACjB;IAED,OAAO,aAAa,CAAC,OAAe,EAAE,GAAW,EAAE,aAAmB,EAAE,QAAiB,EAAE,IAAkB;QACzG,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;QACpC,IAAI,MAAM,GAAG,IAAI,wBAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAG,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,QAAQ,OAAO;YACX,KAAK,GAAG;gBAAE,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;gBAAC,MAAM;YACxE,KAAK,GAAG;gBAAE,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC5E,KAAK,KAAK;gBAAE,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC5E,KAAK,GAAG;gBAAE,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;gBAAC,MAAM;YAChF,KAAK,GAAG;gBAAE,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC1E,KAAK,GAAG;gBAAE,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC9E,KAAK,GAAG;gBAAE,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC9E,SAAS,OAAO,MAAM,CAAC;SAC1B;QACD,MAAM,CAAC,KAAK,GAAG,IAAI,KAAK,YAAY,CAAC,IAAI,GAAG,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAChH,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;CACJ;AA3FD,oCA2FC;AAOD;IACW,OAAO,gBAAgB,CAAC,MAAc,EAAE,KAAa;QACxD,IAAI,MAAM,GAAiB,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QACzD,IAAI,iBAAiB,GAAGN,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;QACrF,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YACnD,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC1G,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;KACjB;IAEM,OAAO,UAAU,CAAC,MAAc,EAAE,KAAa;QAClD,IAAI,MAAM,GAAiB,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QACzD,IAAI,eAAe,GAAGA,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACpG,IAAI,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/C,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAC1F,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;KACjB;IAEM,OAAO,qBAAqB,CAAC,MAAc,EAAE,KAAa;QAC7D,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC;KACvD;IAEM,OAAO,eAAe,CAAC,MAAc,EAAE,KAAa;QACvD,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC;KACjD;CACJ;AA5BD,oCA4BC;AAED;;IAIW,OAAO,QAAQ,CAAC,GAAW,EAAE,IAAY;QAC5C,IAAI,CAAC,GAAG,QAAQ,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC;QAC/B,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;KACpC;IAEM,OAAO,QAAQ,CAAC,IAAY,EAAE,KAAa,EAAE,GAAW;QAC3D,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE;YACb,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBACd,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACzE;YAED,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACtG;QAED,OAAO,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC5H;IAEM,OAAO,gBAAgB,CAAC,IAAU;QACrC,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;KACnF;IAEM,OAAO,QAAQ,CAAC,IAAY,EAAE,GAAW,EAAE,MAAc;QAC5D,OAAO,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACzH;IAEM,OAAO,gBAAgB,CAAC,IAAU;QACrC,OAAO,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;KACrF;IAEM,OAAO,YAAY,CAAC,IAAU;QACjC,OAAO,GAAG,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;KACtF;IAEM,OAAO,UAAU,CAAC,IAAU;QAC/B,OAAO,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,EACvD,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAC3C,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACzD;IAEM,OAAO,UAAU,CAAC,IAAU;QAC/B,OAAO,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,EACpD,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EACzC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC5D;IAEM,OAAO,cAAc,CAAC,QAAc;QACvC,OAAO,GAAG,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;KAClF;IAEM,OAAO,aAAa,CAAC,OAAe;QACvC,IAAI,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QAC3E,IAAI,KAAK,GAAG,KAAK,EAAU,CAAC;QAC5B,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,OAAO,CAAC,OAAO,CAAC,KAAK;YACjB,IAAI,OAAO,KAAK,KAAK,CAAC,KAAK;gBAAE,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACjF,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACvE,OAAO,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;SACxC,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC5B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SAC1C;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACtC,IAAIA,6BAAa,CAAC,UAAU,CAAC,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1E,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACxC;SACJ;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACzB;IAEM,OAAO,IAAI,CAAC,OAAe;QAC9B,IAAI,IAAI,GAAG,KAAK,CAAC;QACjB,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACzB,IAAI,GAAG,IAAI,CAAC;YACZ,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAClC;QAED,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,IAAI,GAAG,CAAC,IAAI,KAAK,EAAE,IAAI,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;QACrC,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAExC,OAAO,CAAC,IAAI,GAAG,GAAG,GAAG,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC9C;;AAxFsB,yBAAc,GAAGA,6BAAa,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAA,cAAc,EAAE,KAAK,CAAC,CAAC;AADzG,gCA0FC;AAED;CAEC;AAFD,8BAEC;AAED;IAYI;QACI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACxB;CACJ;AAfD,4DAeC;AAED,IAAY,SAQX;AARD,WAAY,SAAS;IACjB,6CAAU,CAAA;IACV,6CAAU,CAAA;IACV,+CAAW,CAAA;IACX,mDAAa,CAAA;IACb,iDAAY,CAAA;IACZ,6CAAU,CAAA;IACV,iDAAY,CAAA;CACf,EARW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAQpB;AAED;IAKI,OAAO,IAAI,CAAC,IAAU,EAAE,SAAoB;QACxC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,MAAM,GAAG,SAAS,CAAC;QACvB,IAAI,KAAK,KAAK,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC;QAC3B,IAAI,MAAM,KAAK,CAAC;YAAE,MAAM,GAAG,CAAC,CAAC;QAC7B,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;QACpD,OAAO,MAAM,CAAC;KACjB;IAED,OAAO,IAAI,CAAC,IAAU,EAAE,SAAoB;QACxC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,MAAM,GAAG,SAAS,CAAC;QACvB,IAAI,KAAK,KAAK,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC;QAC3B,IAAI,MAAM,KAAK,CAAC;YAAE,MAAM,GAAG,CAAC,CAAC;QAC7B,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;QAChD,OAAO,MAAM,CAAC;KACjB;IAED,OAAO,IAAI,CAAC,IAAU,EAAE,SAAoB;QACxC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC1B,IAAI,MAAM,GAAG,SAAS,CAAC;QACvB,IAAI,KAAK,KAAK,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC;QAC3B,IAAI,MAAM,KAAK,CAAC;YAAE,MAAM,GAAG,CAAC,CAAC;QAC7B,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;QACpD,OAAO,MAAM,CAAC;KACjB;IAED,OAAO,QAAQ,CAAC,IAAU,EAAE,EAAQ;QAChC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;KAC9E;IAED,OAAO,UAAU,CAAC,IAAU,EAAE,EAAQ;;;;;QAKlC,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACxE,IAAI,OAAO,GAAG,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;KAC7E;IAED,OAAO,YAAY,CAAC,IAAU,EAAE,EAAQ;QACpC,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACxE,IAAI,OAAO,GAAG,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;KACrE;IAED,OAAO,OAAO,CAAC,QAAc,EAAE,SAAe;QAC1C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC;KACf;IAED,OAAO,UAAU,CAAC,QAAc,EAAE,YAAoB;QAClD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,YAAY,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC;KACf;IAED,OAAO,UAAU,CAAC,QAAc,EAAE,YAAoB;QAClD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,YAAY,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC;KACf;IAED,OAAO,QAAQ,CAAC,QAAc,EAAE,UAAkB;QAC9C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,UAAU,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC;KACf;IAED,OAAO,OAAO,CAAC,QAAc,EAAE,SAAiB;QAC5C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;KACf;IAED,OAAO,SAAS,CAAC,QAAc,EAAE,WAAmB;QAChD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,WAAW,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;KACf;IAED,OAAO,QAAQ,CAAC,QAAc,EAAE,UAAkB;QAC9C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC;KACf;IAED,OAAO,aAAa,CAAC,aAAmB;;QAEvC,IAAI,MAAM,GAAI,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;;;QAI7C,IAAI,KAAK,GAAK,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;;;;QAK/C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;;QAG7C,IAAI,aAAa,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;;;QAIrC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;QAEtB,IAAI,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE;YACvB,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC3D;;;QAID,IAAI,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,aAAa,GAAG,MAAM,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC,CAAC;QAC3E,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,CAAC,cAAc,EAAE,EAAE,CAAA;KAClE;IAED,OAAO,QAAQ;QACX,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACpB,OAAO,IAAI,CAAC;KACf;IAED,OAAO,mBAAmB,CAAC,QAAc,EAAE,IAAY,EAAE,KAAa,EAAE,GAAW,EAAE,IAAI,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC;QACjH,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE;YAC9E,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;SAC9D;QACD,OAAO,QAAQ,CAAC;KACnB;IAED,OAAO,sBAAsB,CAAC,IAAY,EAAE,KAAa,EAAE,GAAW,EAAE,IAAI,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC;QACpG,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;KAC5F;IAED,OAAO,qCAAqC,CAAC,IAAU,EAAE,IAAW;QAChE,OAAO,IAAI,CAAC,sBAAsB,CAC9B,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EACnD,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CACzF,CAAC;KACL;IAED,OAAO,UAAU,CAAC,IAAY;QAC1B,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,MAAM,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;KACzE;IAED,OAAO,SAAS,CAAC,IAAU;QACvB,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/C,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;KAClD;IAEO,OAAO,SAAS,CAAC,IAAY,IAAI,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA,EAAE;IAEvH,OAAO,WAAW,CAAC,IAAY,EAAE,KAAa,EAAE,GAAW;QAC/D,OAAO,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,IAAI;eACxB,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,EAAE;eACxB,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;KACxD;IAEO,OAAO,WAAW,CAAC,IAAY,EAAE,MAAc,EAAE,MAAc;QACnE,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,GAAG,EAAE;eACtB,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,EAAE;eAC1B,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,EAAE,CAAC;KACrC;;AA9KuB,gBAAM,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;AAC7B,iBAAO,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;AACzB,mBAAS,GAAG,IAAI,CAAC;AAH7C,8BAgLC;;;;;;;;;;;;;;;;;ACveD,IAAI,gBAAgB,GAAG,GAAG,CAAC;;;AAG3B,IAAI,cAAc,GAAG,2BAA2B,CAAC;;;AAGjD,IAAI,oBAAoB,GAAG,CAAC;IACxB,sBAAsB,GAAG,CAAC,CAAC;;;AAG/B,IAAI,gBAAgB,GAAG,gBAAgB,CAAC;;;AAGxC,IAAI,OAAO,GAAG,oBAAoB;IAC9B,QAAQ,GAAG,gBAAgB;IAC3B,QAAQ,GAAG,wBAAwB;IACnC,OAAO,GAAG,kBAAkB;IAC5B,OAAO,GAAG,eAAe;IACzB,QAAQ,GAAG,gBAAgB;IAC3B,OAAO,GAAG,mBAAmB;IAC7B,MAAM,GAAG,4BAA4B;IACrC,MAAM,GAAG,cAAc;IACvB,SAAS,GAAG,iBAAiB;IAC7B,OAAO,GAAG,eAAe;IACzB,SAAS,GAAG,iBAAiB;IAC7B,UAAU,GAAG,kBAAkB;IAC/B,QAAQ,GAAG,gBAAgB;IAC3B,SAAS,GAAG,iBAAiB;IAC7B,MAAM,GAAG,cAAc;IACvB,SAAS,GAAG,iBAAiB;IAC7B,SAAS,GAAG,iBAAiB;IAC7B,YAAY,GAAG,oBAAoB;IACnC,UAAU,GAAG,kBAAkB,CAAC;;AAEpC,IAAI,cAAc,GAAG,sBAAsB;IACvC,WAAW,GAAG,mBAAmB;IACjC,UAAU,GAAG,uBAAuB;IACpC,UAAU,GAAG,uBAAuB;IACpC,OAAO,GAAG,oBAAoB;IAC9B,QAAQ,GAAG,qBAAqB;IAChC,QAAQ,GAAG,qBAAqB;IAChC,QAAQ,GAAG,qBAAqB;IAChC,eAAe,GAAG,4BAA4B;IAC9C,SAAS,GAAG,sBAAsB;IAClC,SAAS,GAAG,sBAAsB,CAAC;;;;;;AAMvC,IAAI,YAAY,GAAG,qBAAqB,CAAC;;;AAGzC,IAAI,YAAY,GAAG,6BAA6B,CAAC;;;AAGjD,IAAI,QAAQ,GAAG,kBAAkB,CAAC;;;AAGlC,IAAI,cAAc,GAAG,EAAE,CAAC;AACxB,cAAc,CAAC,UAAU,CAAC,GAAG,cAAc,CAAC,UAAU,CAAC;AACvD,cAAc,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC;AAClD,cAAc,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC;AACnD,cAAc,CAAC,eAAe,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC;AAC3D,cAAc,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AACjC,cAAc,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC;AAClD,cAAc,CAAC,cAAc,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC;AACxD,cAAc,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC;AACrD,cAAc,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC;AAClD,cAAc,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC;AAClD,cAAc,CAAC,SAAS,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC;AACrD,cAAc,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC;AAClD,cAAc,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC;;;AAGnC,IAAI,UAAU,GAAG,OAAOH,cAAM,IAAI,QAAQ,IAAIA,cAAM,IAAIA,cAAM,CAAC,MAAM,KAAK,MAAM,IAAIA,cAAM,CAAC;;;AAG3F,IAAI,QAAQ,GAAG,OAAO,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,IAAI,IAAI,CAAC;;;AAGjF,IAAI,IAAI,GAAG,UAAU,IAAI,QAAQ,IAAI,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC;;;AAG/D,IAAI,WAAW,GAAG,QAAc,IAAI,QAAQ,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC;;;AAGxF,IAAI,UAAU,GAAG,WAAW,IAAI,QAAa,IAAI,QAAQ,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC;;;AAGlG,IAAI,aAAa,GAAG,UAAU,IAAI,UAAU,CAAC,OAAO,KAAK,WAAW,CAAC;;;AAGrE,IAAI,WAAW,GAAG,aAAa,IAAI,UAAU,CAAC,OAAO,CAAC;;;AAGtD,IAAI,QAAQ,IAAI,WAAW;EACzB,IAAI;IACF,OAAO,WAAW,IAAI,WAAW,CAAC,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;GAC1E,CAAC,OAAO,CAAC,EAAE,EAAE;CACf,EAAE,CAAC,CAAC;;;AAGL,IAAI,gBAAgB,GAAG,QAAQ,IAAI,QAAQ,CAAC,YAAY,CAAC;;;;;;;;;;;AAWzD,SAAS,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE;EACrC,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM;MACzC,QAAQ,GAAG,CAAC;MACZ,MAAM,GAAG,EAAE,CAAC;;EAEhB,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;IACvB,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,IAAI,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;MAClC,MAAM,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,CAAC;KAC5B;GACF;EACD,OAAO,MAAM,CAAC;CACf;;;;;;;;;;AAUD,SAAS,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE;EAChC,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,MAAM,CAAC,MAAM;MACtB,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;;EAE1B,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;IACvB,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;GACvC;EACD,OAAO,KAAK,CAAC;CACd;;;;;;;;;;;;AAYD,SAAS,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE;EACnC,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;;EAE9C,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;IACvB,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE;MACzC,OAAO,IAAI,CAAC;KACb;GACF;EACD,OAAO,KAAK,CAAC;CACd;;;;;;;;;;;AAWD,SAAS,SAAS,CAAC,CAAC,EAAE,QAAQ,EAAE;EAC9B,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEtB,OAAO,EAAE,KAAK,GAAG,CAAC,EAAE;IAClB,MAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;GACjC;EACD,OAAO,MAAM,CAAC;CACf;;;;;;;;;AASD,SAAS,SAAS,CAAC,IAAI,EAAE;EACvB,OAAO,SAAS,KAAK,EAAE;IACrB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;GACpB,CAAC;CACH;;;;;;;;;;AAUD,SAAS,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE;EAC5B,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CACvB;;;;;;;;;;AAUD,SAAS,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;EAC7B,OAAO,MAAM,IAAI,IAAI,GAAG,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;CACjD;;;;;;;;;AASD,SAAS,UAAU,CAAC,GAAG,EAAE;EACvB,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;EAE7B,GAAG,CAAC,OAAO,CAAC,SAAS,KAAK,EAAE,GAAG,EAAE;IAC/B,MAAM,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;GAChC,CAAC,CAAC;EACH,OAAO,MAAM,CAAC;CACf;;;;;;;;;;AAUD,SAAS,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE;EAChC,OAAO,SAAS,GAAG,EAAE;IACnB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;GAC7B,CAAC;CACH;;;;;;;;;AASD,SAAS,UAAU,CAAC,GAAG,EAAE;EACvB,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;EAE7B,GAAG,CAAC,OAAO,CAAC,SAAS,KAAK,EAAE;IAC1B,MAAM,CAAC,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;GACzB,CAAC,CAAC;EACH,OAAO,MAAM,CAAC;CACf;;;AAGD,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS;IAC5B,SAAS,GAAG,QAAQ,CAAC,SAAS;IAC9B,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC;;;AAGnC,IAAI,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC;;;AAG5C,IAAI,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC;;;AAGtC,IAAI,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;;;AAGhD,IAAI,UAAU,IAAI,WAAW;EAC3B,IAAI,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;EACzF,OAAO,GAAG,IAAI,gBAAgB,GAAG,GAAG,IAAI,EAAE,CAAC;CAC5C,EAAE,CAAC,CAAC;;;;;;;AAOL,IAAI,oBAAoB,GAAG,WAAW,CAAC,QAAQ,CAAC;;;AAGhD,IAAI,UAAU,GAAG,MAAM,CAAC,GAAG;EACzB,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;GAC9D,OAAO,CAAC,wDAAwD,EAAE,OAAO,CAAC,GAAG,GAAG;CAClF,CAAC;;;AAGF,IAAI,MAAM,GAAG,aAAa,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS;IAChD,MAAM,GAAG,IAAI,CAAC,MAAM;IACpB,UAAU,GAAG,IAAI,CAAC,UAAU;IAC5B,oBAAoB,GAAG,WAAW,CAAC,oBAAoB;IACvD,MAAM,GAAG,UAAU,CAAC,MAAM;IAC1B,cAAc,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;;;AAG7D,IAAI,gBAAgB,GAAG,MAAM,CAAC,qBAAqB;IAC/C,cAAc,GAAG,MAAM,GAAG,MAAM,CAAC,QAAQ,GAAG,SAAS;IACrD,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;;;AAG9C,IAAI,QAAQ,GAAG,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC;IACtC,GAAG,GAAG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;IAC5B,OAAO,GAAG,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC;IACpC,GAAG,GAAG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;IAC5B,OAAO,GAAG,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC;IACpC,YAAY,GAAG,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;;AAG/C,IAAI,kBAAkB,GAAG,QAAQ,CAAC,QAAQ,CAAC;IACvC,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC;IAC7B,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC;IACrC,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC;IAC7B,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;;;AAG1C,IAAI,WAAW,GAAG,MAAM,GAAG,MAAM,CAAC,SAAS,GAAG,SAAS;IACnD,aAAa,GAAG,WAAW,GAAG,WAAW,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;AASlE,SAAS,IAAI,CAAC,OAAO,EAAE;EACrB,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,OAAO,IAAI,IAAI,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;;EAElD,IAAI,CAAC,KAAK,EAAE,CAAC;EACb,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;IACvB,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GAC9B;CACF;;;;;;;;;AASD,SAAS,SAAS,GAAG;EACnB,IAAI,CAAC,QAAQ,GAAG,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;EACvD,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;CACf;;;;;;;;;;;;AAYD,SAAS,UAAU,CAAC,GAAG,EAAE;EACvB,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;EACxD,IAAI,CAAC,IAAI,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5B,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;AAWD,SAAS,OAAO,CAAC,GAAG,EAAE;EACpB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;EACzB,IAAI,YAAY,EAAE;IAChB,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,OAAO,MAAM,KAAK,cAAc,GAAG,SAAS,GAAG,MAAM,CAAC;GACvD;EACD,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;CAC/D;;;;;;;;;;;AAWD,SAAS,OAAO,CAAC,GAAG,EAAE;EACpB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;EACzB,OAAO,YAAY,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;CAClF;;;;;;;;;;;;AAYD,SAAS,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE;EAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;EACzB,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EACnC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,IAAI,KAAK,KAAK,SAAS,IAAI,cAAc,GAAG,KAAK,CAAC;EAC3E,OAAO,IAAI,CAAC;CACb;;;AAGD,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC;AACjC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC;AACtC,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC;AAC7B,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC;AAC7B,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC;;;;;;;;;AAS7B,SAAS,SAAS,CAAC,OAAO,EAAE;EAC1B,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,OAAO,IAAI,IAAI,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;;EAElD,IAAI,CAAC,KAAK,EAAE,CAAC;EACb,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;IACvB,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GAC9B;CACF;;;;;;;;;AASD,SAAS,cAAc,GAAG;EACxB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;EACnB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;CACf;;;;;;;;;;;AAWD,SAAS,eAAe,CAAC,GAAG,EAAE;EAC5B,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ;MACpB,KAAK,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;EAEpC,IAAI,KAAK,GAAG,CAAC,EAAE;IACb,OAAO,KAAK,CAAC;GACd;EACD,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;EAChC,IAAI,KAAK,IAAI,SAAS,EAAE;IACtB,IAAI,CAAC,GAAG,EAAE,CAAC;GACZ,MAAM;IACL,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;GAC7B;EACD,EAAE,IAAI,CAAC,IAAI,CAAC;EACZ,OAAO,IAAI,CAAC;CACb;;;;;;;;;;;AAWD,SAAS,YAAY,CAAC,GAAG,EAAE;EACzB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ;MACpB,KAAK,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;EAEpC,OAAO,KAAK,GAAG,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;CAC/C;;;;;;;;;;;AAWD,SAAS,YAAY,CAAC,GAAG,EAAE;EACzB,OAAO,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;CAC9C;;;;;;;;;;;;AAYD,SAAS,YAAY,CAAC,GAAG,EAAE,KAAK,EAAE;EAChC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ;MACpB,KAAK,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;EAEpC,IAAI,KAAK,GAAG,CAAC,EAAE;IACb,EAAE,IAAI,CAAC,IAAI,CAAC;IACZ,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;GACzB,MAAM;IACL,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;GACxB;EACD,OAAO,IAAI,CAAC;CACb;;;AAGD,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG,cAAc,CAAC;AAC3C,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;AAChD,SAAS,CAAC,SAAS,CAAC,GAAG,GAAG,YAAY,CAAC;AACvC,SAAS,CAAC,SAAS,CAAC,GAAG,GAAG,YAAY,CAAC;AACvC,SAAS,CAAC,SAAS,CAAC,GAAG,GAAG,YAAY,CAAC;;;;;;;;;AASvC,SAAS,QAAQ,CAAC,OAAO,EAAE;EACzB,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,OAAO,IAAI,IAAI,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;;EAElD,IAAI,CAAC,KAAK,EAAE,CAAC;EACb,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;IACvB,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;GAC9B;CACF;;;;;;;;;AASD,SAAS,aAAa,GAAG;EACvB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;EACd,IAAI,CAAC,QAAQ,GAAG;IACd,MAAM,EAAE,IAAI,IAAI;IAChB,KAAK,EAAE,KAAK,GAAG,IAAI,SAAS,CAAC;IAC7B,QAAQ,EAAE,IAAI,IAAI;GACnB,CAAC;CACH;;;;;;;;;;;AAWD,SAAS,cAAc,CAAC,GAAG,EAAE;EAC3B,IAAI,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAClD,IAAI,CAAC,IAAI,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5B,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;AAWD,SAAS,WAAW,CAAC,GAAG,EAAE;EACxB,OAAO,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CACvC;;;;;;;;;;;AAWD,SAAS,WAAW,CAAC,GAAG,EAAE;EACxB,OAAO,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CACvC;;;;;;;;;;;;AAYD,SAAS,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE;EAC/B,IAAI,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;MAC5B,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;;EAErB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;EACrB,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;EACvC,OAAO,IAAI,CAAC;CACb;;;AAGD,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,aAAa,CAAC;AACzC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC;AAC9C,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,WAAW,CAAC;AACrC,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,WAAW,CAAC;AACrC,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,WAAW,CAAC;;;;;;;;;;AAUrC,SAAS,QAAQ,CAAC,MAAM,EAAE;EACxB,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;;EAEhD,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC;EAC7B,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;IACvB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;GACzB;CACF;;;;;;;;;;;;AAYD,SAAS,WAAW,CAAC,KAAK,EAAE;EAC1B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;EACzC,OAAO,IAAI,CAAC;CACb;;;;;;;;;;;AAWD,SAAS,WAAW,CAAC,KAAK,EAAE;EAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;CACjC;;;AAGD,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;AAC/D,QAAQ,CAAC,SAAS,CAAC,GAAG,GAAG,WAAW,CAAC;;;;;;;;;AASrC,SAAS,KAAK,CAAC,OAAO,EAAE;EACtB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;EAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;CACvB;;;;;;;;;AASD,SAAS,UAAU,GAAG;EACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,SAAS,CAAC;EAC9B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;CACf;;;;;;;;;;;AAWD,SAAS,WAAW,CAAC,GAAG,EAAE;EACxB,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ;MACpB,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;EAEjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;EACtB,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;AAWD,SAAS,QAAQ,CAAC,GAAG,EAAE;EACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CAC/B;;;;;;;;;;;AAWD,SAAS,QAAQ,CAAC,GAAG,EAAE;EACrB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CAC/B;;;;;;;;;;;;AAYD,SAAS,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE;EAC5B,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC;EACzB,IAAI,IAAI,YAAY,SAAS,EAAE;IAC7B,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC1B,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,MAAM,GAAG,gBAAgB,GAAG,CAAC,CAAC,EAAE;MACjD,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;MACzB,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC;MACxB,OAAO,IAAI,CAAC;KACb;IACD,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;GAC5C;EACD,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;EACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;EACtB,OAAO,IAAI,CAAC;CACb;;;AAGD,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,CAAC;AACnC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;AACxC,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,QAAQ,CAAC;AAC/B,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,QAAQ,CAAC;AAC/B,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,QAAQ,CAAC;;;;;;;;;;AAU/B,SAAS,aAAa,CAAC,KAAK,EAAE,SAAS,EAAE;EACvC,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;MACtB,KAAK,GAAG,CAAC,KAAK,IAAI,WAAW,CAAC,KAAK,CAAC;MACpC,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC;MAC5C,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,KAAK,CAAC;MAC3D,WAAW,GAAG,KAAK,IAAI,KAAK,IAAI,MAAM,IAAI,MAAM;MAChD,MAAM,GAAG,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,EAAE;MAC3D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;;EAE3B,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE;IACrB,IAAI,CAAC,SAAS,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC;QAC7C,EAAE,WAAW;;WAEV,GAAG,IAAI,QAAQ;;YAEd,MAAM,KAAK,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,QAAQ,CAAC,CAAC;;YAE/C,MAAM,KAAK,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,YAAY,IAAI,GAAG,IAAI,YAAY,CAAC,CAAC;;WAE3E,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC;SACtB,CAAC,EAAE;MACN,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAClB;GACF;EACD,OAAO,MAAM,CAAC;CACf;;;;;;;;;;AAUD,SAAS,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE;EAChC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;EAC1B,OAAO,MAAM,EAAE,EAAE;IACf,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAC7B,OAAO,MAAM,CAAC;KACf;GACF;EACD,OAAO,CAAC,CAAC,CAAC;CACX;;;;;;;;;;;;;AAaD,SAAS,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE;EACrD,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;EAC9B,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;CAC1E;;;;;;;;;AASD,SAAS,UAAU,CAAC,KAAK,EAAE;EACzB,IAAI,KAAK,IAAI,IAAI,EAAE;IACjB,OAAO,KAAK,KAAK,SAAS,GAAG,YAAY,GAAG,OAAO,CAAC;GACrD;EACD,OAAO,CAAC,cAAc,IAAI,cAAc,IAAI,MAAM,CAAC,KAAK,CAAC;MACrD,SAAS,CAAC,KAAK,CAAC;MAChB,cAAc,CAAC,KAAK,CAAC,CAAC;CAC3B;;;;;;;;;AASD,SAAS,eAAe,CAAC,KAAK,EAAE;EAC9B,OAAO,YAAY,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC;CAC5D;;;;;;;;;;;;;;;;AAgBD,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE;EAC7D,IAAI,KAAK,KAAK,KAAK,EAAE;IACnB,OAAO,IAAI,CAAC;GACb;EACD,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;IACpF,OAAO,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC;GAC3C;EACD,OAAO,eAAe,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;CAC/E;;;;;;;;;;;;;;;;AAgBD,SAAS,eAAe,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE;EAC7E,IAAI,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC;MAC1B,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC;MACzB,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC;MAC7C,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;;EAEjD,MAAM,GAAG,MAAM,IAAI,OAAO,GAAG,SAAS,GAAG,MAAM,CAAC;EAChD,MAAM,GAAG,MAAM,IAAI,OAAO,GAAG,SAAS,GAAG,MAAM,CAAC;;EAEhD,IAAI,QAAQ,GAAG,MAAM,IAAI,SAAS;MAC9B,QAAQ,GAAG,MAAM,IAAI,SAAS;MAC9B,SAAS,GAAG,MAAM,IAAI,MAAM,CAAC;;EAEjC,IAAI,SAAS,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;IACjC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;MACpB,OAAO,KAAK,CAAC;KACd;IACD,QAAQ,GAAG,IAAI,CAAC;IAChB,QAAQ,GAAG,KAAK,CAAC;GAClB;EACD,IAAI,SAAS,IAAI,CAAC,QAAQ,EAAE;IAC1B,KAAK,KAAK,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC;IAC7B,OAAO,CAAC,QAAQ,IAAI,YAAY,CAAC,MAAM,CAAC;QACpC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC;QACjE,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;GAC9E;EACD,IAAI,EAAE,OAAO,GAAG,oBAAoB,CAAC,EAAE;IACrC,IAAI,YAAY,GAAG,QAAQ,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC;QACrE,YAAY,GAAG,QAAQ,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;;IAEzE,IAAI,YAAY,IAAI,YAAY,EAAE;MAChC,IAAI,YAAY,GAAG,YAAY,GAAG,MAAM,CAAC,KAAK,EAAE,GAAG,MAAM;UACrD,YAAY,GAAG,YAAY,GAAG,KAAK,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC;;MAExD,KAAK,KAAK,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC;MAC7B,OAAO,SAAS,CAAC,YAAY,EAAE,YAAY,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;KAC1E;GACF;EACD,IAAI,CAAC,SAAS,EAAE;IACd,OAAO,KAAK,CAAC;GACd;EACD,KAAK,KAAK,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC;EAC7B,OAAO,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;CAC3E;;;;;;;;;;AAUD,SAAS,YAAY,CAAC,KAAK,EAAE;EAC3B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;IACvC,OAAO,KAAK,CAAC;GACd;EACD,IAAI,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,UAAU,GAAG,YAAY,CAAC;EAC5D,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;CACtC;;;;;;;;;AASD,SAAS,gBAAgB,CAAC,KAAK,EAAE;EAC/B,OAAO,YAAY,CAAC,KAAK,CAAC;IACxB,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;CACjE;;;;;;;;;AASD,SAAS,QAAQ,CAAC,MAAM,EAAE;EACxB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;IACxB,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC;GAC3B;EACD,IAAI,MAAM,GAAG,EAAE,CAAC;EAChB,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;IAC9B,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI,aAAa,EAAE;MAC5D,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAClB;GACF;EACD,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;;;;;AAeD,SAAS,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE;EACxE,IAAI,SAAS,GAAG,OAAO,GAAG,oBAAoB;MAC1C,SAAS,GAAG,KAAK,CAAC,MAAM;MACxB,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;;EAE7B,IAAI,SAAS,IAAI,SAAS,IAAI,EAAE,SAAS,IAAI,SAAS,GAAG,SAAS,CAAC,EAAE;IACnE,OAAO,KAAK,CAAC;GACd;;EAED,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAC/B,IAAI,OAAO,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC/B,OAAO,OAAO,IAAI,KAAK,CAAC;GACzB;EACD,IAAI,KAAK,GAAG,CAAC,CAAC;MACV,MAAM,GAAG,IAAI;MACb,IAAI,GAAG,CAAC,OAAO,GAAG,sBAAsB,IAAI,IAAI,QAAQ,GAAG,SAAS,CAAC;;EAEzE,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;EACxB,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;;EAGxB,OAAO,EAAE,KAAK,GAAG,SAAS,EAAE;IAC1B,IAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;QACvB,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;;IAE5B,IAAI,UAAU,EAAE;MACd,IAAI,QAAQ,GAAG,SAAS;UACpB,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;UAC1D,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAChE;IACD,IAAI,QAAQ,KAAK,SAAS,EAAE;MAC1B,IAAI,QAAQ,EAAE;QACZ,SAAS;OACV;MACD,MAAM,GAAG,KAAK,CAAC;MACf,MAAM;KACP;;IAED,IAAI,IAAI,EAAE;MACR,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,QAAQ,EAAE,QAAQ,EAAE;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC;iBACxB,QAAQ,KAAK,QAAQ,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,EAAE;cACxF,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;WACF,CAAC,EAAE;QACN,MAAM,GAAG,KAAK,CAAC;QACf,MAAM;OACP;KACF,MAAM,IAAI;UACL,QAAQ,KAAK,QAAQ;YACnB,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC;SAC5D,EAAE;MACL,MAAM,GAAG,KAAK,CAAC;MACf,MAAM;KACP;GACF;EACD,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;EACvB,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;EACvB,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;;;;;;;;;AAmBD,SAAS,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE;EAC7E,QAAQ,GAAG;IACT,KAAK,WAAW;MACd,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU;WACrC,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;QAC3C,OAAO,KAAK,CAAC;OACd;MACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;MACvB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;;IAEvB,KAAK,cAAc;MACjB,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU;UACtC,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;QAC7D,OAAO,KAAK,CAAC;OACd;MACD,OAAO,IAAI,CAAC;;IAEd,KAAK,OAAO,CAAC;IACb,KAAK,OAAO,CAAC;IACb,KAAK,SAAS;;;MAGZ,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;;IAE7B,KAAK,QAAQ;MACX,OAAO,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC;;IAEtE,KAAK,SAAS,CAAC;IACf,KAAK,SAAS;;;;MAIZ,OAAO,MAAM,KAAK,KAAK,GAAG,EAAE,CAAC,CAAC;;IAEhC,KAAK,MAAM;MACT,IAAI,OAAO,GAAG,UAAU,CAAC;;IAE3B,KAAK,MAAM;MACT,IAAI,SAAS,GAAG,OAAO,GAAG,oBAAoB,CAAC;MAC/C,OAAO,KAAK,OAAO,GAAG,UAAU,CAAC,CAAC;;MAElC,IAAI,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE;QAC3C,OAAO,KAAK,CAAC;OACd;;MAED,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;MAChC,IAAI,OAAO,EAAE;QACX,OAAO,OAAO,IAAI,KAAK,CAAC;OACzB;MACD,OAAO,IAAI,sBAAsB,CAAC;;;MAGlC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;MACzB,IAAI,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;MACjG,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;MACxB,OAAO,MAAM,CAAC;;IAEhB,KAAK,SAAS;MACZ,IAAI,aAAa,EAAE;QACjB,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;OAChE;GACJ;EACD,OAAO,KAAK,CAAC;CACd;;;;;;;;;;;;;;;AAeD,SAAS,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE;EAC1E,IAAI,SAAS,GAAG,OAAO,GAAG,oBAAoB;MAC1C,QAAQ,GAAG,UAAU,CAAC,MAAM,CAAC;MAC7B,SAAS,GAAG,QAAQ,CAAC,MAAM;MAC3B,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC;MAC5B,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC;;EAEhC,IAAI,SAAS,IAAI,SAAS,IAAI,CAAC,SAAS,EAAE;IACxC,OAAO,KAAK,CAAC;GACd;EACD,IAAI,KAAK,GAAG,SAAS,CAAC;EACtB,OAAO,KAAK,EAAE,EAAE;IACd,IAAI,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1B,IAAI,EAAE,SAAS,GAAG,GAAG,IAAI,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE;MACjE,OAAO,KAAK,CAAC;KACd;GACF;;EAED,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;EAChC,IAAI,OAAO,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC/B,OAAO,OAAO,IAAI,KAAK,CAAC;GACzB;EACD,IAAI,MAAM,GAAG,IAAI,CAAC;EAClB,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;EACzB,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;;EAEzB,IAAI,QAAQ,GAAG,SAAS,CAAC;EACzB,OAAO,EAAE,KAAK,GAAG,SAAS,EAAE;IAC1B,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtB,IAAI,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC;QACtB,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;;IAE1B,IAAI,UAAU,EAAE;MACd,IAAI,QAAQ,GAAG,SAAS;UACpB,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC;UACzD,UAAU,CAAC,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAC/D;;IAED,IAAI,EAAE,QAAQ,KAAK,SAAS;aACnB,QAAQ,KAAK,QAAQ,IAAI,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC;YACnF,QAAQ;SACX,EAAE;MACL,MAAM,GAAG,KAAK,CAAC;MACf,MAAM;KACP;IACD,QAAQ,KAAK,QAAQ,GAAG,GAAG,IAAI,aAAa,CAAC,CAAC;GAC/C;EACD,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE;IACvB,IAAI,OAAO,GAAG,MAAM,CAAC,WAAW;QAC5B,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC;;;IAGhC,IAAI,OAAO,IAAI,OAAO;SACjB,aAAa,IAAI,MAAM,IAAI,aAAa,IAAI,KAAK,CAAC;QACnD,EAAE,OAAO,OAAO,IAAI,UAAU,IAAI,OAAO,YAAY,OAAO;UAC1D,OAAO,OAAO,IAAI,UAAU,IAAI,OAAO,YAAY,OAAO,CAAC,EAAE;MACjE,MAAM,GAAG,KAAK,CAAC;KAChB;GACF;EACD,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;EACxB,KAAK,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;EACvB,OAAO,MAAM,CAAC;CACf;;;;;;;;;AASD,SAAS,UAAU,CAAC,MAAM,EAAE;EAC1B,OAAO,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;CACjD;;;;;;;;;;AAUD,SAAS,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE;EAC5B,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;EACxB,OAAO,SAAS,CAAC,GAAG,CAAC;MACjB,IAAI,CAAC,OAAO,GAAG,IAAI,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAC;MAChD,IAAI,CAAC,GAAG,CAAC;CACd;;;;;;;;;;AAUD,SAAS,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE;EAC9B,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EAClC,OAAO,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,SAAS,CAAC;CAChD;;;;;;;;;AASD,SAAS,SAAS,CAAC,KAAK,EAAE;EACxB,IAAI,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC;MAClD,GAAG,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;;EAEhC,IAAI;IACF,KAAK,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;IAClC,IAAI,QAAQ,GAAG,IAAI,CAAC;GACrB,CAAC,OAAO,CAAC,EAAE,EAAE;;EAEd,IAAI,MAAM,GAAG,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAC9C,IAAI,QAAQ,EAAE;IACZ,IAAI,KAAK,EAAE;MACT,KAAK,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC;KAC7B,MAAM;MACL,OAAO,KAAK,CAAC,cAAc,CAAC,CAAC;KAC9B;GACF;EACD,OAAO,MAAM,CAAC;CACf;;;;;;;;;AASD,IAAI,UAAU,GAAG,CAAC,gBAAgB,GAAG,SAAS,GAAG,SAAS,MAAM,EAAE;EAChE,IAAI,MAAM,IAAI,IAAI,EAAE;IAClB,OAAO,EAAE,CAAC;GACX;EACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;EACxB,OAAO,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,SAAS,MAAM,EAAE;IAC5D,OAAO,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;GAClD,CAAC,CAAC;CACJ,CAAC;;;;;;;;;AASF,IAAI,MAAM,GAAG,UAAU,CAAC;;;AAGxB,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,QAAQ,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW;KACnE,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,MAAM,CAAC;KACjC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,UAAU,CAAC;KACnD,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,MAAM,CAAC;KACjC,OAAO,IAAI,MAAM,CAAC,IAAI,OAAO,CAAC,IAAI,UAAU,CAAC,EAAE;EAClD,MAAM,GAAG,SAAS,KAAK,EAAE;IACvB,IAAI,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;QAC1B,IAAI,GAAG,MAAM,IAAI,SAAS,GAAG,KAAK,CAAC,WAAW,GAAG,SAAS;QAC1D,UAAU,GAAG,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;;IAE5C,IAAI,UAAU,EAAE;MACd,QAAQ,UAAU;QAChB,KAAK,kBAAkB,EAAE,OAAO,WAAW,CAAC;QAC5C,KAAK,aAAa,EAAE,OAAO,MAAM,CAAC;QAClC,KAAK,iBAAiB,EAAE,OAAO,UAAU,CAAC;QAC1C,KAAK,aAAa,EAAE,OAAO,MAAM,CAAC;QAClC,KAAK,iBAAiB,EAAE,OAAO,UAAU,CAAC;OAC3C;KACF;IACD,OAAO,MAAM,CAAC;GACf,CAAC;CACH;;;;;;;;;;AAUD,SAAS,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE;EAC9B,MAAM,GAAG,MAAM,IAAI,IAAI,GAAG,gBAAgB,GAAG,MAAM,CAAC;EACpD,OAAO,CAAC,CAAC,MAAM;KACZ,OAAO,KAAK,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACjD,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC;CACpD;;;;;;;;;AASD,SAAS,SAAS,CAAC,KAAK,EAAE;EACxB,IAAI,IAAI,GAAG,OAAO,KAAK,CAAC;EACxB,OAAO,CAAC,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,SAAS;OAChF,KAAK,KAAK,WAAW;OACrB,KAAK,KAAK,IAAI,CAAC,CAAC;CACtB;;;;;;;;;AASD,SAAS,QAAQ,CAAC,IAAI,EAAE;EACtB,OAAO,CAAC,CAAC,UAAU,KAAK,UAAU,IAAI,IAAI,CAAC,CAAC;CAC7C;;;;;;;;;AASD,SAAS,WAAW,CAAC,KAAK,EAAE;EAC1B,IAAI,IAAI,GAAG,KAAK,IAAI,KAAK,CAAC,WAAW;MACjC,KAAK,GAAG,CAAC,OAAO,IAAI,IAAI,UAAU,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,CAAC;;EAEzE,OAAO,KAAK,KAAK,KAAK,CAAC;CACxB;;;;;;;;;AASD,SAAS,cAAc,CAAC,KAAK,EAAE;EAC7B,OAAO,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACzC;;;;;;;;;AASD,SAAS,QAAQ,CAAC,IAAI,EAAE;EACtB,IAAI,IAAI,IAAI,IAAI,EAAE;IAChB,IAAI;MACF,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAChC,CAAC,OAAO,CAAC,EAAE,EAAE;IACd,IAAI;MACF,QAAQ,IAAI,GAAG,EAAE,EAAE;KACpB,CAAC,OAAO,CAAC,EAAE,EAAE;GACf;EACD,OAAO,EAAE,CAAC;CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCD,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE;EACxB,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC,CAAC;CAChE;;;;;;;;;;;;;;;;;;;;AAoBD,IAAI,WAAW,GAAG,eAAe,CAAC,WAAW,EAAE,OAAO,SAAS,CAAC,EAAE,EAAE,CAAC,GAAG,eAAe,GAAG,SAAS,KAAK,EAAE;EACxG,OAAO,YAAY,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC;IAChE,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;CAC/C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyBF,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2B5B,SAAS,WAAW,CAAC,KAAK,EAAE;EAC1B,OAAO,KAAK,IAAI,IAAI,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;CACtE;;;;;;;;;;;;;;;;;;;AAmBD,IAAI,QAAQ,GAAG,cAAc,IAAI,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8B3C,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE;EAC7B,OAAO,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;CAClC;;;;;;;;;;;;;;;;;;;AAmBD,SAAS,UAAU,CAAC,KAAK,EAAE;EACzB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;IACpB,OAAO,KAAK,CAAC;GACd;;;EAGD,IAAI,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;EAC5B,OAAO,GAAG,IAAI,OAAO,IAAI,GAAG,IAAI,MAAM,IAAI,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,QAAQ,CAAC;CAC9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BD,SAAS,QAAQ,CAAC,KAAK,EAAE;EACvB,OAAO,OAAO,KAAK,IAAI,QAAQ;IAC7B,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,gBAAgB,CAAC;CAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BD,SAAS,QAAQ,CAAC,KAAK,EAAE;EACvB,IAAI,IAAI,GAAG,OAAO,KAAK,CAAC;EACxB,OAAO,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,UAAU,CAAC,CAAC;CAClE;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BD,SAAS,YAAY,CAAC,KAAK,EAAE;EAC3B,OAAO,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,IAAI,QAAQ,CAAC;CAClD;;;;;;;;;;;;;;;;;;;AAmBD,IAAI,YAAY,GAAG,gBAAgB,GAAG,SAAS,CAAC,gBAAgB,CAAC,GAAG,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BrF,SAAS,IAAI,CAAC,MAAM,EAAE;EACpB,OAAO,WAAW,CAAC,MAAM,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;CACvE;;;;;;;;;;;;;;;;;;;;AAoBD,SAAS,SAAS,GAAG;EACnB,OAAO,EAAE,CAAC;CACX;;;;;;;;;;;;;;;AAeD,SAAS,SAAS,GAAG;EACnB,OAAO,KAAK,CAAC;CACd;;AAED,cAAc,GAAG,OAAO,CAAC;;;;;;;;;;;;ACjxDzB;IAII,YAAY,MAAqC,EAAE,OAAwB;QACvE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAyB,IAAI,KAAK,EAAiB,CAAC;QAC9D,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QACrF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QACrF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QACzF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QAC3F,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QACzF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QAC3F,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QAC/F,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;QACpF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAC;;QAGxF,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;QAExE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;QAG5B,IAAI,CAAC,IAAI,CAAC,OAAO,GAAGyC,kCAAe,CAAC,QAAQ,KAAK,CAAC,EAAE;YAChD,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAChD;QAED,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QAClD,OAAO,MAAM,CAAC;KACjB;IAEO,uBAAuB,CAAC,GAAoB,EAAE,IAAY;QAC9D,KAAK,IAAI,EAAE,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;YAC1B,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;gBAClD,IAAI,KAAK,GAAGC,mCAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;gBAC9D,IAAI,KAAK,EAAE;oBACP,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC/B;aACJ;SACJ;KACJ;;IAGO,sBAAsB,CAAC,IAAY,EAAE,cAA+B;QACxE,IAAI,MAAM,GAAG,IAAI,KAAK,EAAS,CAAC;QAEhC,cAAc,CAAC,OAAO,CAAC,aAAa;YAChC,IAAI,aAAa,CAAC,IAAI,KAAKjC,qBAAS,CAAC,iBAAiB;mBAC/C,aAAa,CAAC,IAAI,KAAKA,qBAAS,CAAC,qBAAqB,EAAE;gBAC3D,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC7E,IAAI,KAAK,GAAGiC,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC;gBACnF,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,EAAE;oBAC/B,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBACzC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBACjE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;wBACrB,OAAO;qBACV;oBAED,IAAI,aAAa,GAAG,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;oBAC/E,MAAM,CAAC,IAAI,CAAC,IAAIC,iBAAK,CAAC,aAAa,EAAE,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;iBACzE;aACJ;SACJ,CAAC,CAAC;QAEH,OAAOA,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAElC,qBAAS,CAAC,iBAAiB,CAAC,CAAC;KAC1E;IAES,KAAK,CAAC,WAA4B,EAAE,MAAuB,EAAE,IAAY;QAC/E,MAAM,CAAC,OAAO,CAAC,KAAK;YAChB,IAAI,IAAI,CAAC,OAAO,KAAKgC,kCAAe,CAAC,eAAe,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;gBAAE,OAAO;YAEhG,IAAI,OAAO,GAAG,KAAK,CAAC;YACpB,IAAI,cAAc,GAAG,IAAI,KAAK,EAAU,CAAC;YACzC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;YACpB,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK;gBAC5B,IAAItC,6BAAa,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;oBACtC,OAAO,GAAG,IAAI,CAAC;oBACf,IAAIA,6BAAa,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;wBACpC,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;4BACnB,UAAU,GAAG,KAAK,CAAC;yBACtB;wBACD,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBAC9B;yBAAM;wBACH,OAAO;qBACV;iBACJ;aACJ,CAAC,CAAC;YACH,IAAI,CAAC,OAAO,EAAE;gBACV,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;aAC1B;iBAAM,IAAI,cAAc,CAAC,MAAM,EAAE;gBAC9B,IAAI,OAAO,GAAG,IAAI,KAAK,EAAiB,CAAC;gBACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACzC,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;wBAClC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;qBAChC;iBACJ;;gBAGD,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;gBACrC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;gBACvB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;aAChD;SACJ,CAAC,CAAC;KACN;IAEO,mBAAmB,CAAC,EAAiB;QACzC,OAAOuC,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAChF;IAEO,yBAAyB,CAAC,EAAiB,EAAE,IAAY;QAC7D,IAAI,OAAO,GAAGA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;QACpG,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YACnE,OAAO,GAAGA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,YAAY,CAAC,CAAC;YACrF,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACjB,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;IAES,MAAM,CAAC,GAAoB,EAAE,MAAc;QACjD,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,GAAG,CAAC,OAAO,CAAC,EAAE;YACV,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/D,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC3E,IAAI,MAAM,CAAC,OAAO,EAAE;gBAChB,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;gBAChD,EAAE,CAAC,MAAM,IAAI,SAAS,CAAC;gBACvB,EAAE,CAAC,KAAK,IAAI,SAAS,CAAC;gBACtB,EAAE,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;aAChD;YACD,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACzE,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC;gBAC/C,EAAE,CAAC,MAAM,IAAI,SAAS,CAAC;gBACvB,EAAE,CAAC,KAAK,IAAI,SAAS,CAAC;gBACtB,EAAE,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;aAChD;YACD,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACzE,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC;gBAC/C,EAAE,CAAC,MAAM,IAAI,SAAS,CAAC;gBACvB,EAAE,CAAC,KAAK,IAAI,SAAS,CAAC;gBACtB,EAAE,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;aAChD;SACJ,CAAC,CAAC;KACN;IAEO,aAAa,CAAC,MAAc,EAAE,KAAa;QAC/C,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAGA,mCAAa,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC1D,IAAI,KAAK,EAAE;YACP,MAAM,CAAC,OAAO,GAAG,IAAI,CAAA;YACrB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAA;SAC7B;QACD,OAAO,MAAM,CAAC;KACjB;CACJ;AArKD,kDAqKC;AAiBD;IASI,YAAY,MAAkC,EAAE,OAAwB;QAR/D,mBAAc,GAAG,YAAY,CAAC;QAKtB,iBAAY,GAAGC,sBAAU,CAAC,UAAU,CAACA,qBAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3D,qBAAgB,GAAGA,sBAAU,CAAC,cAAc,CAACA,qBAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QAGhF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;IAED,KAAK,CAAC,EAAiB,EAAE,OAAc;QACnC,IAAI,aAAa,GAAG,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;QAC1C,IAAI,EAAE,GAAwB,IAAI,CAAC;;QAGnC,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,WAAW,GAAGD,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACrF,IAAI,UAAU,GAAGA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACnF,IAAI,UAAU,GAAGA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACnF,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,KAAK,CAAC,EAAE;YACxC,SAAS,GAAG,IAAI,CAAC;YACjB,EAAE,CAAC,KAAK,IAAI,WAAW,CAAC,MAAM,CAAC;YAC/B,EAAE,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC;YAChC,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAChD,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC;SAC9B;aACI,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;YAC3C,QAAQ,GAAG,IAAI,CAAC;YAChB,EAAE,CAAC,KAAK,IAAI,UAAU,CAAC,MAAM,CAAC;YAC9B,EAAE,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC;YAC/B,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC/C,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;SAC7B;aACI,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;YAC3C,QAAQ,GAAG,IAAI,CAAC;YAChB,EAAE,CAAC,KAAK,IAAI,UAAU,CAAC,MAAM,CAAC;YAC9B,EAAE,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC;YAC/B,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC/C,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;SAC7B;QAED,IAAI,EAAE,CAAC,IAAI,KAAKjC,qBAAS,CAAC,iBAAiB,EAAE;YACzC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;YACrD,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,IAAI,EAAE,CAAC,KAAK,KAAK,SAAS,EAAE;gBAC7C,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;aAC3D;SACJ;aACI,IAAI,EAAE,CAAC,IAAI,KAAKA,qBAAS,CAAC,iBAAiB,EAAE;YAC9C,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;SACxD;aACI,IAAI,EAAE,CAAC,IAAI,KAAKA,qBAAS,CAAC,qBAAqB,EAAE;YAClD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;SAC5D;aACI,IAAI,EAAE,CAAC,IAAI,KAAKA,qBAAS,CAAC,uBAAuB,EAAE;YACpD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;SAC9D;aACI,IAAI,EAAE,CAAC,IAAI,KAAKA,qBAAS,CAAC,uBAAuB,EAAE;YACpD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;SAC9D;aACI,IAAI,EAAE,CAAC,IAAI,KAAKA,qBAAS,CAAC,2BAA2B,EAAE;YACxD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;SAClE;aACI,IAAI,EAAE,CAAC,IAAI,KAAKA,qBAAS,CAAC,qBAAqB,EAAE;YAClD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;SAC5D;aACI,IAAI,EAAE,CAAC,IAAI,KAAKA,qBAAS,CAAC,gBAAgB,EAAE;YAC7C,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;SACvD;aACI;YACD,OAAO,IAAI,CAAC;SACf;;QAGD,IAAI,SAAS,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,EAAE;YAChC,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC;YAC3B,EAAE,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC;YAC1B,EAAE,CAAC,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC;YAC3B,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;YACnB,GAAG,CAAC,GAAG,GAAGA,6BAAiB,CAAC,SAAS,CAAC;YACtC,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;SAClB;QAED,IAAI,QAAQ,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,EAAE;YAC/B,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC;YAC3B,EAAE,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC;YAC1B,EAAE,CAAC,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC;YAC3B,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;YACnB,GAAG,CAAC,GAAG,GAAGA,6BAAiB,CAAC,QAAQ,CAAC;YACrC,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;SAClB;QAED,IAAI,QAAQ,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,EAAE;YAC/B,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC;YAC3B,EAAE,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC;YAC1B,EAAE,CAAC,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC;YAC3B,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;YACnB,GAAG,CAAC,GAAG,GAAGA,6BAAiB,CAAC,QAAQ,CAAC;YACrC,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;SAClB;QAED,IAAI,CAAC,IAAI,CAAC,OAAO,GAAGgC,kCAAe,CAAC,gBAAgB,MAAMA,kCAAe,CAAC,gBAAgB;eACnF,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,CAAC,mBAAmB,IAAI,IAAI,EAAE;YACrD,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;SAClD;aACI;YACD,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC/D;QAED,OAAO,EAAE,CAAC;KACb;IAEM,cAAc,CAAC,IAAyB,EAAE,SAAkB,EAAE,QAAiB,EAAE,QAAiB;QACrG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;;QAE1E,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC;QAC7G,OAAO,IAAI,CAAC;KACf;IAES,cAAc,CAAC,eAA8B,EAAE,aAAmB;QACxE,IAAI,aAAa,GAAG,eAAe,CAAC,IAAI,CAAC;QACzC,IAAI,aAAa,KAAKhC,qBAAS,CAAC,iBAAiB,EAAE;YAC/C,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;YACtE,IAAI,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK;gBAAE,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;YAC7F,OAAO,EAAE,CAAC;SACb;QACD,IAAI,aAAa,KAAKA,qBAAS,CAAC,iBAAiB,EAAE;YAC/C,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;SACvE;QACD,IAAI,aAAa,KAAKA,qBAAS,CAAC,qBAAqB,EAAE;YACnD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;SAC3E;QACD,IAAI,aAAa,KAAKA,qBAAS,CAAC,uBAAuB,EAAE;YACrD,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;SAC7E;QACD,IAAI,aAAa,KAAKA,qBAAS,CAAC,uBAAuB,EAAE;YACrD,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;SAC7E;QACD,IAAI,aAAa,KAAKA,qBAAS,CAAC,2BAA2B,EAAE;YACzD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;SACjF;QACD,IAAI,aAAa,KAAKA,qBAAS,CAAC,qBAAqB,EAAE;YACnD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;SAC3E;QACD,IAAI,aAAa,KAAKA,qBAAS,CAAC,gBAAgB,EAAE;YAC9C,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;SACtE;QACD,OAAO,IAAI,CAAC;KACf;IAES,qBAAqB,CAAC,IAAY,EAAE,SAAkB,EAAE,QAAiB,EAAE,QAAiB;QAClG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAGgC,kCAAe,CAAC,gBAAgB,MAAMA,kCAAe,CAAC,gBAAgB,EAAE;YACxF,IAAI,IAAI,KAAKhC,qBAAS,CAAC,qBAAqB,EAAE;gBAC1C,OAAOA,qBAAS,CAAC,iBAAiB,CAAC;aACtC;SACJ;aACI;YACD,IAAI,SAAS,IAAI,QAAQ,IAAI,QAAQ,EAAE;gBACnC,IAAI,IAAI,KAAKA,qBAAS,CAAC,iBAAiB;oBAAE,OAAOA,qBAAS,CAAC,uBAAuB,CAAC;gBACnF,IAAI,IAAI,KAAKA,qBAAS,CAAC,iBAAiB;oBAAE,OAAOA,qBAAS,CAAC,uBAAuB,CAAC;gBACnF,IAAI,IAAI,KAAKA,qBAAS,CAAC,qBAAqB;oBAAE,OAAOA,qBAAS,CAAC,2BAA2B,CAAC;aAC9F;SACJ;QACD,OAAO,IAAI,CAAC;KACf;IAEM,0BAA0B,CAAC,IAAyB;QACvD,IAAI,OAAO,GAAG,IAAI,KAAK,EAAuB,CAAC;QAC/C,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,IAAI,IAAI,EAAE;YACxC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC;YACjD,KAAK,IAAI,SAAS,IAAI,WAAW,EAAE;gBAC/B,IAAI,MAAM,GAAG,SAAS,CAAC;gBACvB,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC,CAAC;aAC5D;SACJ;aACI;YACD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAChE,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC;YACnG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACtB;QACD,OAAO,OAAO,CAAC;KAClB;IAES,kBAAkB,CAAC,IAAyB,EAAE,SAAkB,EAAE,QAAiB,EAAE,QAAiB;QAC5G,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QAEvB,IAAI,MAAM,GAAG,IAAI,GAAG,EAAe,CAAC;QACpC,IAAI,WAAW,GAAG,IAAI,KAAK,EAAa,CAAC;QAEzC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,IAAI,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjF,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE1B,IAAI,KAAK,GAA6B,IAAI,CAAC,KAAK,CAAC;QACjD,IAAI,CAAC,KAAK;YAAE,OAAO,IAAI,CAAC;QAExB,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QACpB,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;;QAG5B,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEA,qBAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC/D,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEA,qBAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACnE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEA,qBAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC3D,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEA,qBAAS,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QACnE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEA,qBAAS,CAAC,UAAU,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAE1F,IAAI,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC;QAC9C,IAAI,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;QAE1C,IAAI,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,gBAAgB,EAAE,GAAG,CAAC,CAAC;QACtE,IAAI,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;QAElE,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC7D,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QACzD,IAAImC,cAAO,CAAC,YAAY,EAAE,UAAU,CAAC,EAAE;YACnC,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC;gBAAE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEnC,qBAAS,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;SAC9F;aAAM;YACH,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC;gBAAE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEA,qBAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;YACjG,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC;gBAAE,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAEA,qBAAS,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;SAC1G;QAED,IAAI,OAAO,IAAI,OAAO,KAAK,MAAM,EAAE;YAC/B,IAAI,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBACvB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;aACvC;iBAAM;gBACH,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;gBAC1C,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;aAC/C;SACJ;QAED,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG;YACtB,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;;gBAEtB,IAAI,SAAS,GAAG,EAAE,CAAC;gBAEnB,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAEA,qBAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAC/D,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAEA,qBAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC3D,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAEA,qBAAS,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;gBACnE,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAEA,qBAAS,CAAC,UAAU,EAAE,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;gBAE1F,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ;oBAChC,SAAS,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;iBACzC,CAAC,CAAC;gBAEH,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B;SACJ,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACpE,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;YACnB,CAAC,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC;YACvB,CAAC,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC;YAC5B,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACvB;QACD,OAAO;YACH,MAAM,EAAE,WAAW;SACtB,CAAC;KACL;IAES,QAAQ,CAAC,CAAM;QACrB,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,KAAK,MAAM,CAAC,CAAC;KAC9C;IAES,sBAAsB,CAAC,GAAqB,EAAE,GAAW,EAAE,KAAU;QAC3E,IAAI,KAAK,YAAY,MAAM,EAAE;YACzB,IAAI,CAACiC,mCAAa,CAAC,aAAa,CAAC,KAAe,CAAC,EAAE;gBAC/C,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACvB;SACJ;aACI;YACD,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SACvB;KACJ;IAES,mBAAmB,CAAC,GAAc,EAAE,GAAW,EAAE,KAAa;QACpE,IAAI,CAACA,mCAAa,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YACrC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACpB;KACJ;IAES,sBAAsB,CAAC,IAAY,EAAE,WAAsB,EAAE,GAAW;QAC9E,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,QAAQ,IAAI;YACR,KAAKjC,qBAAS,CAAC,qBAAqB;gBAChC,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAEA,6BAAiB,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBACzF,MAAM;YAEV,KAAKA,qBAAS,CAAC,iBAAiB;gBAC5B,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAEA,6BAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBACrF,MAAM;YAEV,KAAKA,qBAAS,CAAC,iBAAiB;gBAC5B,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAEA,6BAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBACrF,MAAM;YAEV,KAAKA,qBAAS,CAAC,qBAAqB;gBAChC,IAAI,WAAW,CAAC,cAAc,CAACA,6BAAiB,CAAC,QAAQ,CAAC,EAAE;oBACxD,MAAM,CAACA,6BAAiB,CAAC,KAAK,CAAC,GAAG,WAAW,CAACA,6BAAiB,CAAC,QAAQ,CAAC,CAAC;iBAC7E;gBAED,MAAM;YAEV,KAAKA,qBAAS,CAAC,uBAAuB;gBAClC,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAEA,6BAAiB,CAAC,UAAU,EAAEA,6BAAiB,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBAC/G,MAAM;YAEV,KAAKA,qBAAS,CAAC,uBAAuB;gBAClC,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAEA,6BAAiB,CAAC,UAAU,EAAEA,6BAAiB,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBAC/G,MAAM;YAEV,KAAKA,qBAAS,CAAC,2BAA2B;gBACtC,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAEA,6BAAiB,CAAC,cAAc,EAAEA,6BAAiB,CAAC,YAAY,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBACvH,MAAM;SACb;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,6BAA6B,CAAC,WAAsB,EAAE,IAAY,EAAE,GAAW,EAAE,MAAiB;QACtG,IAAI,GAAG,GAAGA,6BAAiB,CAAC,KAAK,CAAC;QAClC,IAAI,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,IAAI,IAAI,CAAC,gBAAgB,KAAK,KAAK;YAAE,OAAO;QAErF,IAAI,CAACiC,mCAAa,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;YACnC,IAAI,GAAG,KAAKjC,6BAAiB,CAAC,SAAS,EAAE;gBACrC,GAAG,GAAGA,6BAAiB,CAAC,GAAG,CAAC;aAC/B;iBAAM,IAAI,GAAG,KAAKA,6BAAiB,CAAC,QAAQ,EAAE;gBAC3C,GAAG,GAAGA,6BAAiB,CAAC,KAAK,CAAC;aACjC;iBAAM,IAAI,GAAG,KAAKA,6BAAiB,CAAC,QAAQ,EAAE;gBAC3C,GAAG,GAAGA,6BAAiB,CAAC,KAAK,CAAC;aACjC;SACJ;QAED,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACvB;IAEO,qBAAqB,CAAC,WAAsB,EAAE,SAAiB,EAAE,OAAe,EAAE,GAAW,EAAE,MAAiB;QACpH,IAAI,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;QACnC,IAAI,GAAG,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAACiC,mCAAa,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;YACnC,IAAI,GAAG,KAAKjC,6BAAiB,CAAC,SAAS,EAAE;gBACrC,MAAM,CAACA,6BAAiB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACtC,OAAO;aACV;YAED,IAAI,GAAG,KAAKA,6BAAiB,CAAC,QAAQ,EAAE;gBACpC,MAAM,CAACA,6BAAiB,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;gBACtC,OAAO;aACV;YAED,IAAI,GAAG,KAAKA,6BAAiB,CAAC,QAAQ,EAAE;gBACpC,MAAM,CAACA,6BAAiB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;gBACxC,OAAO;aACV;SACJ;QAED,IAAIiC,mCAAa,CAAC,aAAa,CAAC,KAAK,CAAC,IAAIA,mCAAa,CAAC,aAAa,CAAC,GAAG,CAAC;YAAE,OAAO;QAEnF,MAAM,CAACjC,6BAAiB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QACxC,MAAM,CAACA,6BAAiB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;KACvC;IAES,SAAS,CAAC,GAAQ;QACxB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;KAChD;IAES,WAAW,CAAC,SAA2B,EAAE,OAAe;QAC9D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC;YAAE,OAAO;QAEpC,IAAI,UAAU,GAAc,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC;YAAE,OAAO;QAEpC,IAAI,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACnC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC1B,SAAS,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,EAAE,UAAU,CAAC,CAAC;QAE1C,IAAI,YAAY,GAAc,EAAE,CAAC;QACjC,QAAQ,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;YACzB,KAAKA,qBAAS,CAAC,iBAAiB;gBAC5B,YAAY,CAACA,6BAAiB,CAAC,KAAK,CAAC,GAAGkC,sBAAU,CAAC,IAAI,CAAC,UAAU,CAAClC,6BAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7F,YAAY,CAAC,OAAO,CAAC,GAAGkC,sBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC/C,MAAM;YAEV,KAAKlC,qBAAS,CAAC,qBAAqB;gBAChC,IAAI,UAAU,GAAG,UAAU,CAACA,6BAAiB,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAChE,YAAY,CAACA,6BAAiB,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,IAAIkC,sBAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC7F,YAAY,CAAC,OAAO,CAAC,GAAGA,sBAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACxD,MAAM;YAEV,KAAKlC,qBAAS,CAAC,uBAAuB;gBAClC,IAAI,UAAU,CAAC,cAAc,CAACA,6BAAiB,CAAC,KAAK,CAAC;oBAAE,YAAY,CAACA,6BAAiB,CAAC,KAAK,CAAC,GAAGkC,sBAAU,CAAC,IAAI,CAAC,UAAU,CAAClC,6BAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACrJ,IAAI,UAAU,CAAC,cAAc,CAACA,6BAAiB,CAAC,GAAG,CAAC;oBAAE,YAAY,CAACA,6BAAiB,CAAC,GAAG,CAAC,GAAGkC,sBAAU,CAAC,IAAI,CAAC,UAAU,CAAClC,6BAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC/I,YAAY,CAAC,OAAO,CAAC,GAAGkC,sBAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACxD,MAAM;YAEV,KAAKlC,qBAAS,CAAC,2BAA2B;gBACtC,IAAI,UAAU,CAAC,cAAc,CAACA,6BAAiB,CAAC,KAAK,CAAC,EAAE;oBACpD,IAAI,UAAU,GAAG,UAAU,CAACA,6BAAiB,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAChE,YAAY,CAACA,6BAAiB,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,IAAIkC,sBAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;iBAChG;gBAED,IAAI,UAAU,CAAC,cAAc,CAAClC,6BAAiB,CAAC,GAAG,CAAC,EAAE;oBAClD,IAAI,UAAU,GAAG,UAAU,CAACA,6BAAiB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC9D,YAAY,CAACA,6BAAiB,CAAC,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,IAAIkC,sBAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;iBAC9F;gBAED,YAAY,CAAC,OAAO,CAAC,GAAGA,sBAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACxD,MAAM;SACb;QAED,SAAS,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,EAAE,YAAY,CAAC,CAAC;KAC/C;CACJ;AAnaD,4CAmaC;;;;;;;;;;;;;;;;ACvnBD,IAAiB,YAAY,CAO5B;AAPD,WAAiB,YAAY;IACf,sBAAS,GAAG,yGAAyG,CAAC;IACtH,wBAAW,GAAG,iNAAiN,CAAC;IAChO,6BAAgB,GAAG,sNAAsN,CAAC;IAC1O,wBAAW,GAAG,iNAAiN,CAAC;IAChO,iCAAoB,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5e,4CAA+B,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC,EAAC,CAAC,SAAS,EAAE,aAAa,CAAC,EAAC,CAAC,cAAc,EAAE,aAAa,CAAC,EAAC,CAAC,kBAAkB,EAAE,aAAa,CAAC,EAAC,CAAC,qBAAqB,EAAE,aAAa,CAAC,EAAC,CAAC,UAAU,EAAE,aAAa,CAAC,EAAC,CAAC,QAAQ,EAAE,aAAa,CAAC,EAAC,CAAC,UAAU,EAAE,aAAa,CAAC,EAAC,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;CACtX,EAPgB,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAO5B;;;;;;;;;;;;;;;;;ACND,IAAiB,eAAe,CA0L/B;AA1LD,WAAiB,eAAe;IAClB,yBAAS,GAAG,mDAAmD,CAAC;IAChE,mCAAmB,GAAG,kCAAkC,CAAC;IACzD,6BAAa,GAAG,gEAAgE,CAAC;IACjF,mCAAmB,GAAG,yDAAyD,CAAC;IAChF,+BAAe,GAAG,oBAAoB,CAAC;IACvC,+BAAe,GAAG,yBAAyB,CAAC;IAC5C,+BAAe,GAAG,mBAAmB,CAAC;IACtC,wBAAQ,GAAG,4SAA4S,CAAC;IACxT,6BAAa,GAAG,oEAAoE,CAAC;IACrF,+BAAe,GAAG,kCAAkC,CAAC;IACrD,4BAAY,GAAG,kIAAkI,CAAC;IAClJ,kCAAkB,GAAG,iJAAiJ,CAAC;IACvK,kCAAkB,GAAG,wBAAwB,gBAAA,aAAa,eAAe,CAAC;IAC1E,6BAAa,GAAG,6KAA6K,CAAC;IAC9L,gCAAgB,GAAG,mCAAmC,gBAAA,kBAAkB,IAAI,gBAAA,aAAa,IAAI,CAAC;IAC9F,6BAAa,GAAG,yDAAyD,CAAC;IAC1E,gCAAgB,GAAG,4BAA4B,gBAAA,QAAQ,QAAQ,gBAAA,SAAS,QAAQ,gBAAA,QAAQ,QAAQ,gBAAA,gBAAgB,oBAAoB,gBAAA,eAAe,OAAO,CAAC;IAC3J,0CAA0B,GAAG,2BAA2B,gBAAA,gBAAgB,6BAA6B,gBAAA,QAAQ,QAAQ,gBAAA,SAAS,QAAQ,gBAAA,QAAQ,qBAAqB,gBAAA,eAAe,OAAO,CAAC;IAC1L,sCAAsB,GAAG,MAAM,gBAAA,gBAAgB,qBAAqB,gBAAA,QAAQ,QAAQ,gBAAA,mBAAmB,QAAQ,gBAAA,QAAQ,qBAAqB,gBAAA,eAAe,OAAO,CAAC;IACnK,4BAAY,GAAG,oBAAoB,gBAAA,QAAQ,QAAQ,gBAAA,mBAAmB,QAAQ,gBAAA,QAAQ,QAAQ,gBAAA,gBAAgB,oBAAoB,gBAAA,eAAe,OAAO,CAAC;IACzJ,6BAAa,GAAG,uKAAuK,gBAAA,eAAe,qCAAqC,CAAC;IAC5O,kCAAkB,GAAG,kCAAkC,gBAAA,aAAa,4JAA4J,gBAAA,aAAa,kEAAkE,CAAC;IAChT,gCAAgB,GAAG,IAAI,gBAAA,eAAe,YAAY,gBAAA,aAAa,MAAM,gBAAA,aAAa,SAAS,gBAAA,eAAe,GAAG,CAAC;IAC9G,gCAAgB,GAAG,qGAAqG,gBAAA,gBAAgB,GAAG,CAAC;IAC5I,+BAAe,GAAG,+GAA+G,gBAAA,eAAe,IAAI,gBAAA,aAAa,YAAY,CAAC;IAC9K,gCAAgB,GAAG,QAAQ,gBAAA,aAAa,EAAE,CAAC;IAC3C,0CAA0B,GAAG,4BAA4B,gBAAA,aAAa,EAAE,CAAC;IACzE,4BAAY,GAAG,sGAAsG,gBAAA,eAAe,IAAI,gBAAA,aAAa,WAAW,CAAC;IACjK,qCAAqB,GAAG,IAAI,gBAAA,eAAe,IAAI,gBAAA,aAAa,0FAA0F,CAAC;IACvJ,2BAAW,GAAG,iBAAiB,gBAAA,aAAa,2EAA2E,gBAAA,eAAe,IAAI,gBAAA,aAAa,iBAAiB,CAAC;IACzK,8BAAc,GAAG,wCAAwC,CAAC;IAC1D,2BAAW,GAAG,0BAA0B,CAAC;IACzC,4BAAY,GAAG,mBAAmB,CAAC;IACnC,0BAAU,GAAG,kJAAkJ,CAAC;IAChK,2BAAW,GAAG,6DAA6D,CAAC;IAC5E,2BAAW,GAAG,kEAAkE,CAAC;IACjF,6BAAa,GAAG,kEAAkE,gBAAA,WAAW,IAAI,gBAAA,WAAW,OAAO,CAAC;IACpH,uBAAO,GAAG,kBAAkB,gBAAA,QAAQ,QAAQ,CAAC;IAC7C,8BAAc,GAAG,uMAAuM,CAAC;IACzN,yBAAS,GAAG,qCAAqC,gBAAA,YAAY,MAAM,gBAAA,YAAY,iCAAiC,CAAC;IACjH,6BAAa,GAAG,OAAO,gBAAA,eAAe,kBAAkB,gBAAA,YAAY,MAAM,gBAAA,YAAY,wBAAwB,CAAC;IAC/G,6BAAa,GAAG,OAAO,gBAAA,eAAe,2BAA2B,gBAAA,YAAY,eAAe,gBAAA,YAAY,iCAAiC,CAAC;IAC1I,+BAAe,GAAG,oFAAoF,gBAAA,aAAa,2CAA2C,CAAC;IAC/J,gCAAgB,GAAG,kBAAkB,gBAAA,aAAa,cAAc,CAAC;IACjE,+BAAe,GAAG,+HAA+H,CAAC;IAClJ,mCAAmB,GAAG,6FAA6F,gBAAA,YAAY,OAAO,gBAAA,gBAAgB,GAAG,CAAC;IAC1J,2BAAW,GAAG,4BAA4B,gBAAA,QAAQ,KAAK,CAAC;IACxD,8BAAc,GAAG,OAAO,gBAAA,YAAY,qBAAqB,gBAAA,UAAU,+BAA+B,gBAAA,QAAQ,WAAW,CAAC;IACtH,8BAAc,GAAG,OAAO,gBAAA,YAAY,qBAAqB,gBAAA,UAAU,0BAA0B,gBAAA,QAAQ,oCAAoC,gBAAA,aAAa,KAAK,CAAC;IAC5J,8BAAc,GAAG,OAAO,gBAAA,YAAY,qBAAqB,gBAAA,QAAQ,8CAA8C,gBAAA,UAAU,0BAA0B,gBAAA,aAAa,OAAO,CAAC;IACxK,8BAAc,GAAG,MAAM,gBAAA,aAAa,qBAAqB,gBAAA,QAAQ,2BAA2B,gBAAA,aAAa,EAAE,CAAC;IAC5G,8BAAc,GAAG,MAAM,gBAAA,QAAQ,qBAAqB,gBAAA,aAAa,qBAAqB,gBAAA,aAAa,EAAE,CAAC;IACtG,8BAAc,GAAG,yBAAyB,gBAAA,aAAa,WAAW,gBAAA,QAAQ,KAAK,CAAC;IAChF,8BAAc,GAAG,MAAM,gBAAA,aAAa,YAAY,gBAAA,QAAQ,+BAA+B,gBAAA,aAAa,OAAO,CAAC;IAC5G,8BAAc,GAAG,yBAAyB,gBAAA,QAAQ,YAAY,gBAAA,aAAa,KAAK,CAAC;IACjF,8BAAc,GAAG,MAAM,gBAAA,QAAQ,YAAY,gBAAA,aAAa,+BAA+B,gBAAA,aAAa,OAAO,CAAC;IAC5G,8BAAc,GAAG,MAAM,gBAAA,aAAa,qBAAqB,gBAAA,aAAa,qBAAqB,gBAAA,QAAQ,EAAE,CAAC;IACtG,uBAAO,GAAG,cAAc,gBAAA,UAAU,EAAE,CAAC;IACrC,wBAAQ,GAAG,GAAG,gBAAA,UAAU,iBAAiB,CAAC;IAC1C,8BAAc,GAAG,mDAAmD,CAAC;IACrE,2BAAW,GAAG,uEAAuE,CAAC;IACtF,yBAAS,GAAG,MAAM,gBAAA,WAAW,iJAAiJ,gBAAA,WAAW,GAAG,CAAC;IAC7L,4BAAY,GAAG,uFAAuF,CAAC;IACvG,8BAAc,GAAG,mKAAmK,CAAC;IACrL,mCAAmB,GAAG,wKAAwK,CAAC;IAC/L,uBAAO,GAAG,kIAAkI,CAAC;IAC7I,2BAAW,GAAG,2FAA2F,CAAC;IAC1G,uBAAO,GAAG,wDAAwD,CAAC;IACnE,0BAAU,GAAG,mBAAmB,CAAC;IACjC,0BAAU,GAAG,wBAAwB,CAAC;IACtC,+BAAe,GAAG,4DAA4DE,yBAAY,CAAC,gBAAgB,mCAAmC,gBAAA,mBAAmB,kCAAkC,CAAC;IACpM,4BAAY,GAAG,cAAc,gBAAA,YAAY,QAAQ,gBAAA,cAAc,iDAAiD,gBAAA,cAAc,IAAI,CAAC;IACnI,0BAAU,GAAG,cAAc,gBAAA,eAAe,SAAS,gBAAA,eAAe,OAAO,CAAC;IAC1E,0BAAU,GAAG,aAAa,gBAAA,OAAO,IAAI,gBAAA,OAAO,IAAI,gBAAA,WAAW,GAAG,CAAC;IAC/D,8BAAc,GAAG,aAAa,gBAAA,OAAO,IAAI,gBAAA,WAAW,IAAI,gBAAA,WAAW,GAAG,CAAC;IACvE,yBAAS,GAAG,mBAAmB,gBAAA,YAAY,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,IAAIA,yBAAY,CAAC,WAAW,KAAKA,yBAAY,CAAC,WAAW,MAAMA,yBAAY,CAAC,SAAS,GAAG,CAAC;IAC9K,6BAAa,GAAG,2CAA2C,CAAC;IAC5D,+BAAe,GAAG,mDAAmD,CAAC;IACtE,iCAAiB,GAAG,2DAA2D,CAAC;IAChF,2BAAW,GAAG,kDAAkD,CAAC;IACjE,4BAAY,GAAG,WAAW,gBAAA,aAAa,IAAI,gBAAA,eAAe,IAAI,gBAAA,iBAAiB,IAAI,gBAAA,WAAW,IAAI,CAAC;IACnG,uBAAO,GAAG,uBAAuB,gBAAA,YAAY,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,IAAI,gBAAA,YAAY,MAAM,gBAAA,YAAY,MAAM,CAAC;IAChI,wBAAQ,GAAG,OAAOA,yBAAY,CAAC,SAAS,6BAA6B,CAAC;IACtE,6BAAa,GAAG,iFAAiF,CAAC;IAClG,uCAAuB,GAAG,yBAAyB,CAAC;IACpD,0BAAU,GAAG,wHAAwH,CAAC;IACtI,yBAAS,GAAG,4GAA4G,CAAC;IACzH,kCAAkB,GAAG,wMAAwM,CAAC;IAC9N,+BAAe,GAAG,GAAGA,yBAAY,CAAC,SAAS,kMAAkM,gBAAA,SAAS,EAAE,CAAC;IACzP,0BAAU,GAAG,OAAO,gBAAA,UAAU,UAAU,gBAAA,YAAY,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,QAAQ,gBAAA,SAAS,EAAE,CAAC;IAClH,0BAAU,GAAG,OAAO,gBAAA,UAAU,aAAaA,yBAAY,CAAC,SAAS,kBAAkBA,yBAAY,CAAC,WAAW,mBAAmBA,yBAAY,CAAC,WAAW,WAAW,gBAAA,SAAS,QAAQ,CAAC;IACnL,0BAAU,GAAG,OAAO,gBAAA,UAAU,SAASA,yBAAY,CAAC,SAAS,MAAMA,yBAAY,CAAC,WAAW,QAAQ,gBAAA,SAAS,GAAG,CAAC;IAChH,0BAAU,GAAG,MAAM,gBAAA,UAAU,OAAO,gBAAA,SAAS,QAAQ,gBAAA,SAAS,SAAS,gBAAA,UAAU,KAAK,CAAC;IACvF,0BAAU,GAAG,MAAM,gBAAA,UAAU,OAAO,gBAAA,SAAS,SAAS,gBAAA,SAAS,QAAQ,CAAC;IACxE,0BAAU,GAAG,GAAG,gBAAA,SAAS,QAAQ,gBAAA,SAAS,SAAS,gBAAA,UAAU,KAAK,CAAC;IACnE,0BAAU,GAAG,MAAM,gBAAA,cAAc,aAAa,gBAAA,SAAS,SAAS,gBAAA,SAAS,QAAQ,CAAC;IAClF,0BAAU,GAAG,MAAM,gBAAA,cAAc,OAAO,gBAAA,SAAS,SAAS,gBAAA,SAAS,QAAQ,CAAC;IAC5E,0BAAU,GAAG,MAAM,gBAAA,kBAAkB,OAAO,gBAAA,UAAU,SAAS,gBAAA,SAAS,QAAQ,CAAC;IACjF,6BAAa,GAAG,yBAAyB,gBAAA,SAAS,IAAI,gBAAA,kBAAkB,qBAAqB,gBAAA,SAAS,UAAU,gBAAA,SAAS,QAAQ,gBAAA,SAAS,IAAI,gBAAA,kBAAkB,qBAAqB,gBAAA,OAAO,IAAI,gBAAA,OAAO,IAAI,gBAAA,SAAS,IAAI,CAAC;IACzN,iCAAiB,GAAG,iBAAiB,gBAAA,SAAS,IAAI,gBAAA,kBAAkB,qBAAqB,gBAAA,SAAS,UAAU,gBAAA,mBAAmB,QAAQ,gBAAA,SAAS,IAAI,gBAAA,kBAAkB,qBAAqB,gBAAA,OAAO,IAAI,gBAAA,OAAO,IAAI,gBAAA,SAAS,IAAI,CAAC;IAC/N,gCAAgB,GAAG,iCAAiC,CAAC;IACrD,8BAAc,GAAG,mKAAmK,CAAC;IACrL,sCAAsB,GAAG,QAAQ,gBAAA,mBAAmB,OAAO,gBAAA,cAAc,uBAAuB,CAAC;IACjG,gCAAgB,GAAG,QAAQ,gBAAA,aAAa,EAAE,CAAC;IAC3C,0CAA0B,GAAG,4BAA4B,gBAAA,aAAa,EAAE,CAAC;IACzE,wBAAQ,GAAG,4EAA4E,CAAC;IACxF,2BAAW,GAAG,wDAAwD,CAAC;IACvE,sCAAsB,GAAG,qDAAqD,CAAC;IAC/E,8CAA8B,GAAG,QAAQ,gBAAA,aAAa,OAAO,gBAAA,sBAAsB,qBAAqB,CAAC;IACzG,qCAAqB,GAAG,yBAAyB,gBAAA,8BAA8B,EAAE,CAAC;IAClF,sCAAsB,GAAG,GAAG,gBAAA,8BAA8B,uCAAuC,CAAC;IAClG,2CAA2B,GAAG,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,yBAAyB,gBAAA,8BAA8B,EAAE,CAAC;IAClI,4CAA4B,GAAG,GAAG,gBAAA,8BAA8B,kCAAkC,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,GAAG,CAAC;IAC5I,6BAAa,GAAG,iCAAiC,CAAC;IAClD,oCAAoB,GAAG,0HAA0H,CAAC;IAClJ,4CAA4B,GAAG,QAAQ,gBAAA,mBAAmB,OAAO,gBAAA,oBAAoB,qBAAqB,CAAC;IAC3G,4CAA4B,GAAG,QAAQ,gBAAA,cAAc,gBAAgB,CAAC;IACtE,iCAAiB,GAAG,6HAA6H,CAAC;IAClJ,8BAAc,GAAG,kEAAkE,CAAC;IACpF,6BAAa,GAAG,yEAAyE,CAAC;IAC1F,6BAAa,GAAG,+CAA+C,gBAAA,iBAAiB,GAAG,CAAC;IACpF,+BAAe,GAAG,iCAAiC,CAAC;IACpD,4BAAY,GAAG,gCAAgC,CAAC;IAChD,4BAAY,GAAG,wDAAwD,CAAC;IACxE,4BAAY,GAAG,6BAA6B,CAAC;IAC7C,oCAAoB,GAAG,QAAQ,gBAAA,cAAc,aAAa,gBAAA,iBAAiB,EAAE,CAAC;IAC9E,8CAA8B,GAAG,gCAAgC,gBAAA,iBAAiB,EAAE,CAAC;IACrF,2BAAW,GAAG,6CAA6C,gBAAA,iBAAiB,EAAE,CAAC;IAC/E,wBAAQ,GAAG,mDAAmD,CAAC;IAC/D,yBAAS,GAAG,yEAAyE,CAAC;IACtF,gCAAgB,GAAG,8BAA8B,CAAC;IAClD,yBAAS,GAAG,kCAAkC,CAAC;IAC/C,6BAAa,GAAG,qWAAqW,gBAAA,SAAS,IAAI,gBAAA,aAAa,gBAAgB,CAAC;IACha,6BAAa,GAAG,mNAAmN,gBAAA,SAAS,IAAI,gBAAA,aAAa,gBAAgB,CAAC;IAC9Q,6BAAa,GAAG,iaAAia,gBAAA,SAAS,IAAI,gBAAA,aAAa,aAAa,CAAC;IACzd,+BAAe,GAAG,KAAK,CAAC;IACxB,+BAAe,GAAG,KAAK,CAAC;IACxB,+BAAe,GAAG,KAAK,CAAC;IACxB,+BAAe,GAAG,KAAK,CAAC;IACxB,2BAAW,GAAG,gBAAgB,CAAC;IAC/B,2BAAW,GAAG,sCAAsC,CAAC;IACrD,2BAAW,GAAG,uCAAuC,CAAC;IACtD,0BAAU,GAAG,eAAe,CAAC;IAC7B,0BAAU,GAAG,eAAe,CAAC;IAC7B,wBAAQ,GAAG,aAAa,CAAC;IACzB,0BAAU,GAAG,wBAAwB,CAAC;IACtC,gCAAgB,GAAG,YAAY,CAAC;IAChC,6BAAa,GAAG,QAAQ,CAAC;IACzB,oCAAoB,GAAG,2BAA2B,CAAC;IACnD,sCAAsB,GAAG,+BAA+B,CAAC;IACzD,oCAAoB,GAAG,2BAA2B,CAAC;IACnD,kCAAkB,GAAG,2DAA2D,CAAC;IACjF,kCAAkB,GAAG,gCAAgC,CAAC;IACtD,sCAAsB,GAAG,IAAI,gBAAA,kBAAkB,SAAS,gBAAA,iBAAiB,GAAG,CAAC;IAC7E,qCAAqB,GAAG,MAAM,gBAAA,eAAe,IAAI,gBAAA,eAAe,IAAI,gBAAA,eAAe,SAAS,gBAAA,aAAa,qBAAqB,gBAAA,uBAAuB,IAAI,CAAC;IAC1J,yCAAyB,GAAG,UAAU,gBAAA,eAAe,IAAI,gBAAA,eAAe,IAAI,gBAAA,eAAe,UAAU,gBAAA,iBAAiB,qBAAqB,gBAAA,uBAAuB,IAAI,CAAC;IACvK,8BAAc,GAAG,sBAAsB,CAAC;IACxC,2BAAW,GAAG,sBAAsB,CAAC;IACrC,yCAAyB,GAAG,yBAAyB,CAAC;IACtD,sCAAsB,GAAG,+BAA+B,CAAC;IACzD,gCAAgB,GAAG,4CAA4C,CAAC;IAChE,2BAAW,GAAG,iBAAiB,gBAAA,gBAAgB,mBAAmB,gBAAA,gBAAgB,kDAAkD,CAAC;IACrI,wCAAwB,GAAG,MAAM,gBAAA,YAAY,eAAe,gBAAA,gBAAgB,MAAM,CAAC;IACnF,+BAAe,GAAG,iFAAiF,CAAC;IACpG,mCAAmB,GAAG,iEAAiE,CAAC;IACxF,6BAAa,GAAG,uCAAuC,CAAC;IACxD,mCAAmB,GAAG,wFAAwF,gBAAA,kBAAkB,IAAI,gBAAA,SAAS,4BAA4B,CAAC;IAC1K,6BAAa,GAAG,qEAAqE,CAAC;IACtF,qCAAqB,GAAG,qEAAqE,gBAAA,kBAAkB,MAAM,CAAC;IACtH,yCAAyB,GAAG,gBAAgB,gBAAA,eAAe,IAAI,gBAAA,eAAe,mCAAmC,gBAAA,YAAY,cAAc,gBAAA,YAAY,kBAAkB,gBAAA,YAAY,aAAa,gBAAA,YAAY,QAAQ,CAAC;IACvN,kCAAkB,GAAG,iCAAiC,CAAC;IACvD,gCAAgB,GAAG,aAAa,CAAC;IACjC,sCAAsB,GAAG,oCAAoC,CAAC;IAC9D,kCAAkB,GAAG,YAAY,CAAC;IAClC,uBAAO,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACnX,4BAAY,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC,CAAC,OAAO,EAAE,MAAM,CAAC,EAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACzY,yBAAS,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACvJ,8BAAc,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAClH,2BAAW,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAChM,yBAAS,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxT,2BAAW,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACvkB,uBAAO,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACt4D,0BAAU,GAAgC,IAAI,GAAG,CAAie,6BAAa,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxG,4BAAY,GAAkC,IAAI,GAAG,CAAmB,CAAC,CAAC,WAAW,EAAE,CAAC,WAAW,EAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,WAAW,EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,WAAW,EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,iBAAiB,EAAC,cAAc,CAAC,CAAC,EAAC,CAAC,kBAAkB,EAAE,CAAC,qBAAqB,EAAC,uBAAuB,CAAC,CAAC,EAAC,CAAC,qBAAqB,EAAE,CAAC,qBAAqB,EAAC,oBAAoB,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAC,UAAU,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,EAAC,UAAU,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,eAAe,EAAE,CAAC,eAAe,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,cAAc,EAAC,WAAW,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,SAAS,EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,eAAe,EAAE,CAAC,eAAe,CAAC,CAAC,EAAC,CAAC,eAAe,EAAE,CAAC,eAAe,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,mBAAmB,EAAE,CAAC,mBAAmB,CAAC,CAAC,EAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,aAAa,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;CACpwD,EA1LgB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QA0L/B;;;;;;;;;;;ACpLD,yBAAiC,SAAQ1C,2BAAW;CAInD;AAJD,kDAIC;AAqCD;IA8BI;QACI,IAAI,CAAC,UAAU,GAAG0C,yBAAY,CAAC,oBAAoB,CAAC;KACvD;CACJ;AAjCD,kEAiCC;;;;;;ACzFD;;;;;;;;;;AAUA,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;;;AAGhB,IAAI5B,WAAS,GAAG,iBAAiB,CAAC;;;AAGlC,IAAI,MAAM,GAAG,YAAY,CAAC;;;AAG1B,IAAI,UAAU,GAAG,oBAAoB,CAAC;;;AAGtC,IAAI,UAAU,GAAG,YAAY,CAAC;;;AAG9B,IAAI,SAAS,GAAG,aAAa,CAAC;;;AAG9B,IAAI,YAAY,GAAG,QAAQ,CAAC;;;AAG5B,IAAII,aAAW,GAAG,MAAM,CAAC,SAAS,CAAC;;;;;;;AAOnC,IAAIC,gBAAc,GAAGD,aAAW,CAAC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2B1C,SAAS,QAAQ,CAAC,KAAK,EAAE;EACvB,IAAI,IAAI,GAAG,OAAO,KAAK,CAAC;EACxB,OAAO,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,UAAU,CAAC,CAAC;CAC5D;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BD,SAASO,cAAY,CAAC,KAAK,EAAE;EAC3B,OAAO,CAAC,CAAC,KAAK,IAAI,OAAO,KAAK,IAAI,QAAQ,CAAC;CAC5C;;;;;;;;;;;;;;;;;;;AAmBD,SAASD,UAAQ,CAAC,KAAK,EAAE;EACvB,OAAO,OAAO,KAAK,IAAI,QAAQ;KAC5BC,cAAY,CAAC,KAAK,CAAC,IAAIN,gBAAc,CAAC,IAAI,CAAC,KAAK,CAAC,IAAIL,WAAS,CAAC,CAAC;CACpE;;;;;;;;;;;;;;;;;;;;;;;;;AAyBD,SAAS,QAAQ,CAAC,KAAK,EAAE;EACvB,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE;IAC5B,OAAO,KAAK,CAAC;GACd;EACD,IAAIU,UAAQ,CAAC,KAAK,CAAC,EAAE;IACnB,OAAO,GAAG,CAAC;GACZ;EACD,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;IACnB,IAAI,KAAK,GAAG,OAAO,KAAK,CAAC,OAAO,IAAI,UAAU,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC;IACzE,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,CAAC;GAChD;EACD,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE;IAC5B,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC;GACrC;EACD,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EAClC,IAAI,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACtC,OAAO,CAAC,QAAQ,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;MACrC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;OAC7C,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;CAC7C;;AAED,mBAAc,GAAG,QAAQ;;;;;;;;;;;ACxIzB;IAII,YAAY,MAAmC;QAH5B,kBAAa,GAAGlB,qBAAS,CAAC,iBAAiB,CAAC;QAI3D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QACrD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;QAClD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACpE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QAC/E,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAES,eAAe,CAAC,MAAc;QACpC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM;YACpC,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACvD,OAAO,CAAC,OAAO,CAAC,KAAK;gBACjB,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;aAChE,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAES,YAAY,CAAC,MAAc;QACjC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM;YACvC,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACvD,OAAO,CAAC,OAAO,CAAC,KAAK;gBACjB,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;aAChE,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAEO,eAAe,CAAC,MAAc,EAAE,OAAa;QACjD,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3G,EAAE,CAAC,OAAO,CAAC,MAAM;YACb,IAAI,GAAG,GAAGG,eAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,EAAE,EAAE;gBACrB,OAAO;aACV;YACD,IAAI,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE;gBAClB,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACxD,IAAI,KAAK,GAAG3C,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3E,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;oBACvB,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC7E,OAAO;iBACV;;gBAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;gBACxE,IAAI,KAAK,EAAE;oBACP,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;oBAClD,IAAI,UAAU,KAAK,MAAM,CAAC,IAAI,EAAE;wBAC5B,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;wBAC9C,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;wBACtE,OAAO;qBACV;iBACJ;;gBAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;gBACrF,IAAI,KAAK,EAAE;oBACP,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;oBAC/B,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;;oBAGjC,IAAI,IAAI,GAAGwC,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;oBAC9D,IAAI,aAAa,GAAGA,qBAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;;;oBAItE,IAAI,mBAAmB,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;oBACjF,IAAI,IAAI,KAAKA,qBAAS,CAAC,QAAQ,EAAE;wBAC7B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE;wBAC5F,GAAG,CAAC,IAAI,CAAC,IAAIA,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC/D,OAAO;qBACV;iBACJ;;gBAGD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC1E,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;gBACzF,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE;oBAC5B,IAAI,QAAQ,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;oBAC1D,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC7F;;gBAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;gBACnF,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;uBAC/C,MAAM,CAAC,IAAI,KAAKuC,+BAAe,CAAC,eAAe,EAAE;oBACpD,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;oBAC/C,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;wBACvC,IAAI,QAAQ,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;wBAC1D,GAAG,CAAC,IAAI,CAAC,IAAIC,iBAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC7F;iBACJ;aACJ;YACD,IAAI,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE;gBAC9C,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;gBACjE,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1E,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;oBACvB,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC/E,OAAO;iBACV;aACJ;SACJ,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAES,0BAA0B,CAAC,MAAc,EAAE,OAAa;QAC9D,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACnE,KAAK,CAAC,OAAO,CAAC,EAAE;YACZ,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;YAC/E,IAAI,CAAC,KAAK;gBAAE,OAAO;YACnB,GAAG,GAAGwC,wBAAY,CAAC,mCAAmC,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;SAC7G,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;CACJ;AAnID,8CAmIC;AAkCD;IAII,YAAY,MAAgC;QAHzB,eAAU,GAAGlC,qBAAS,CAAC,iBAAiB,CAAC;QAIxD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,KAAK,CAAC,eAA8B,EAAE,aAAoB;QACtD,IAAI,CAAC,aAAa;YAAE,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/C,IAAI,WAAW,CAAC;QAChB,IAAI,eAAe,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;YAC1C,IAAI,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAChD,IAAI,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YACnE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC/D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACjE;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC3E;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAClE;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC/D;YACD,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAACA,6BAAiB,CAAC,IAAI,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACtG,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,IAAI,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAClG,WAAW,GAAG,WAAW,CAAC;aAC7B;SACJ;QACD,IAAI,MAAM,GAAG,IAAIpC,6BAAmB,CAAC,eAAe,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;QAC3B,MAAM,CAAC,QAAQ,GAAG,WAAW,GAAG,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;QACvD,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;QAE1B,OAAO,MAAM,CAAC;KACjB;IAES,oBAAoB,CAAC,MAAc,EAAE,aAAmB;QAC9D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,IAAIoC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK;YAC5B,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;YACjE,IAAI,CAAC,KAAK,EAAE;gBACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;gBAC3F,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;aAC/C;YACD,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;gBAC1E,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;gBAChD,OAAO,IAAI,CAAC;aACf;SACJ,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAES,iBAAiB,CAAC,MAAc,EAAE,aAAmB;QAC3D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;;QAE5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7G,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YACtG,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;YACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;YACvC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAEzC,MAAM,CAAC,KAAK,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAEhD,IAAI,MAAM,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACnD,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACjC,IAAI,UAAgB,CAAC;YACrB,IAAI,QAAc,CAAC;YAEnB,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;gBAC5B,UAAU,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBAChE,QAAQ,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC9D,IAAI,UAAU,GAAG,aAAa,EAAE;oBAC5B,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;iBAClD;gBAED,IAAI,QAAQ,IAAI,aAAa,EAAE;oBAC3B,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;iBAC9C;aACJ;iBAAM;gBACH,UAAU,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;gBACpE,QAAQ,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;aACrE;YAED,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;YAChC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;;QAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QACnF,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YACrE,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,KAAK,GAAGwC,qBAAS,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACpD,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;YACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;;QAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7E,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YACrE,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;YAC/C,IAAI,KAAK,GAAGwC,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjF,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;YACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;;QAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7E,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YACrE,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;YAC/C,IAAI,KAAK,GAAGwC,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjF,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;YACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;;QAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7E,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YACrE,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;YAC/C,IAAI,KAAK,GAAGwC,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjF,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAClD,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;YACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;;QAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAChF,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YACrE,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;YAC/C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACpD,IAAI,KAAK,GAAGwC,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAEjF,IAAI,OAAO,KAAK,CAAC;gBAAE,OAAO,GAAG,CAAC,CAAC;YAC/B,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE;gBAAE,KAAK,GAAGA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YACrF,MAAM,CAAC,KAAK,GAAG,WAAW,GAAG,OAAO,CAAC;YACrC,IAAI,UAAU,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,UAAU,GAAG,aAAa;gBAAE,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACxE,IAAI,QAAQ,IAAI,aAAa;gBAAE,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAErE,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;YAChC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;;QAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAC/E,IAAI,KAAK,EAAE;YACP,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;YAC9C,IAAI,EAAE,GAAGA,6BAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC3C,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YAEpE,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;YACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;YAEvC,MAAM,CAAC,KAAK,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;YAC/C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;YAC1B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;YACxB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YAEtB,OAAO,MAAM,CAAC;SACjB;;QAGD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAC5F,IAAI,KAAK,EAAE;YACP,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;YAC9C,IAAI,EAAE,GAAGA,6BAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC3C,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YACpE,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;YACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;;YAGvC,MAAM,CAAC,KAAK,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA;YACpD,MAAM,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YAC9C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YAEtB,OAAO,MAAM,CAAC;SACjB;QAED,OAAO,MAAM,CAAC;KACjB;IAEO,oBAAoB,CAAC,MAAc,EAAE,aAAmB;QAC5D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAE5C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC9D,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;SAC7D;QACD,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,MAAM,CAAC;QAE5C,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACxE,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAClF,IAAI,KAAK,EAAE;YACP,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrD,GAAG,GAAG,GAAG,CAAC;SACb;aAAM;;YAEH,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;YACtF,IAAI,KAAK,EAAE;gBACP,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;gBAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;gBACnC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;gBAChD,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACxB,GAAG,GAAG,GAAG,CAAC;gBACV,SAAS,GAAG,KAAK,CAAC;aACrB;SACJ;;QAGD,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;YAChF,IAAI,KAAK,EAAE;gBACP,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;;gBAEjC,IAAI,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC7E,IAAI,SAAS,GAAGwC,qBAAS,CAAC,sBAAsB,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC3G,IAAI,YAAY,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;gBACtC,IAAI,kBAAkB,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC7C,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,GAAG,YAAY,IAAI,aAAa,GAAG,YAAY,GAAG,aAAa,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrJ,GAAG,GAAG,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACrD,SAAS,GAAG,KAAK,CAAC;aACrB;SACJ;QAED,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAE1B,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;;QAGvC,IAAI,UAAU,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QACpE,IAAI,QAAQ,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAElE,IAAI,SAAS,EAAE;YACX,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACnD,IAAI,UAAU,GAAG,aAAa;gBAAE,UAAU,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;YACjE,IAAI,QAAQ,IAAI,aAAa;gBAAE,QAAQ,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;SACjE;aAAM;YACH,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACxD;QAED,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;;IAGO,iBAAiB,CAAC,MAAc,EAAE,aAAmB;QACzD,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAE5C,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QACnE,IAAI,CAAC,EAAE,IAAIxC,6BAAa,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YAC7C,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;SAClE;QACD,IAAI,CAAC,EAAE,IAAIA,6BAAa,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,CAAC;QAE/D,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;QACpE,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QAEvC,MAAM,CAAC,KAAK,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAChD,IAAI,QAAQ,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAClE,IAAI,UAAU,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAEpE,IAAI,UAAU,KAAKA,qBAAS,CAAC,QAAQ,EAAE,IAAI,UAAU,GAAG,aAAa;YAAE,UAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACtG,IAAI,QAAQ,KAAKA,qBAAS,CAAC,QAAQ,EAAE,IAAI,QAAQ,IAAI,aAAa;YAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAEjG,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,6BAA6B,CAAC,MAAc,EAAE,aAAmB;QACvE,OAAOA,wBAAY,CAAC,4BAA4B,CAC5C,MAAM,EACN,aAAa,EACb,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,MAAM,CAAC,cAAc,EAC1B,IAAI,CAAC,MAAM,CAAC,OAAO,EACnB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAChCA,wBAAY,CAAC,IAAI,CACpB,CAAC;KACL;IAES,mBAAmB,CAAC,MAAc,EAAE,aAAmB;QAC7D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAC3F,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAC1B,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QACjD,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;QAC/C,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3C,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACtG,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpD,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAIA,6BAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACvC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YACrD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;YACnC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;YAChD,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;SAC7B;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAClD,MAAM,GAAG,IAAI,CAAC;SACjB;QACD,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7D,IAAI,KAAK,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE;YAC5B,QAAQ,IAAI,CAAC,CAAC;YACd,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;SACtC;QACD,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,MAAM,IAAI,UAAU,GAAG,aAAa,EAAE;YACtC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;YAClE,IAAI,UAAU,CAAC,QAAQ,EAAE,KAAK,KAAK;gBAAE,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;SACrF;QACD,IAAI,MAAM,IAAI,QAAQ,IAAI,aAAa,EAAE;YACrC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;YAChE,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,KAAK;gBAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;SAC/E;QACD,MAAM,CAAC,KAAK,GAAG,CAAC,MAAM,EAAEwC,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrG,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,WAAW,CAAC,KAAY,EAAE,aAAmB;QACnD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3C,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;QACvC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC7E,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAClD,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,CAACxC,6BAAa,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;gBACvC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACpC,IAAI,IAAI,GAAG,GAAG,IAAI,IAAI,IAAI,EAAE;oBAAE,IAAI,IAAI,IAAI,CAAC;qBACtC,IAAI,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,EAAE;oBAAE,IAAI,IAAI,IAAI,CAAC;aAClD;SACJ;QACD,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,IAAI,KAAK,CAAC,EAAE;YACZ,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;YACnC,MAAM,CAAC,KAAK,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACnD,MAAM,GAAG,IAAI,CAAC;SACjB;aAAM;YACH,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACxD;QACD,IAAI,UAAU,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QACpE,IAAI,QAAQ,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QAClE,IAAI,MAAM,IAAI,UAAU,GAAG,aAAa,EAAE;YACtC,UAAU,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACvE;QACD,IAAI,MAAM,IAAI,QAAQ,IAAI,aAAa,EAAE;YACrC,QAAQ,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,GAAG,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;SACrE;QACD,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC5B,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAEO,WAAW,CAAC,QAAgB,EAAE,OAAe,EAAE,KAAa,EAAE,IAAY;QAC9E,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,YAAY,GAAGA,qBAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACrD,IAAI,OAAO,KAAK,CAAC;YAAE,OAAO,GAAG,CAAC,CAAC;QAC/B,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,EAAE;YAAE,YAAY,GAAGA,qBAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAClF,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,OAAO,YAAY,CAAC;KACvB;CACJ;AAnaD,wCAmaC;;;;;;;;;;;;;ACvlBD;IAII,YAAY,MAAmC;QAH9B,kBAAa,GAAGlC,qBAAS,CAAC,iBAAiB,CAAC;QAIzD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,IAAY,EAAE,OAAa;QAC/B,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS;aAC5C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;aAClC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;aAC/B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC;QAEtD,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACpE,OAAO,MAAM,CAAC;KACjB;IAED,eAAe,CAAC,IAAY;QACxB,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM;YACpC,IAAI,OAAO,GAAGD,mCAAa,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACrD,OAAO,CAAC,OAAO,CAAC,KAAK;gBACjB,GAAG,CAAC,IAAI,CAAC,IAAIC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;aAChE,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAED,YAAY,CAAC,IAAY;QACrB,IAAI,GAAG,GAAG,EAAE,CAAC;;QAEb,IAAI,OAAO,GAAGD,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAClE,OAAO,CAAC,OAAO,CAAC,KAAK;YACjB,IAAI,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;gBACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE;gBAC7C,OAAO;aACV;YACD,GAAG,CAAC,IAAI,CAAC,IAAIC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;SAChE,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAEL,kBAAkB,CAAC,IAAY,EAAE,OAAa;QAC1C,IAAI,GAAG,GAAG,EAAE,CAAC;;QAEb,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,EAAE;YAC/B,IAAI,OAAO,GAAGD,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACnE,OAAO,CAAC,OAAO,CAAC,KAAK;gBACjB,GAAG,CAAC,IAAI,CAAC,IAAIC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;aAChE,CAAC,CAAC;SACN;QACD,OAAO,GAAG,CAAC;KACd;CACJ;AAzDD,8CAyDC;AAYG;IAII,YAAY,aAAuC;QAH1C,eAAU,GAAGlC,qBAAS,CAAC,iBAAiB,CAAC;QAI9C,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;KAC/B;IAEM,KAAK,CAAC,EAAiB,EAAE,aAAoB;QAChD,IAAI,CAAC,aAAa;YAAE,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/C,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;YAC7B,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC7D,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAACA,6BAAiB,CAAC,IAAI,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACtG,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,IAAI,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAClG,KAAK,GAAG,WAAW,CAAC;aACvB;SACJ;QAED,IAAI,GAAG,GAAG,IAAIpC,6BAAmB,CAAC,EAAE,CAAC,CAAC;QACtC,GAAG,CAAC,KAAK,GAAG,KAAK,EACjB,GAAG,CAAC,QAAQ,GAAG,KAAK,KAAK,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,EAChD,GAAG,CAAC,aAAa,GAAG,EAAE,CAAA;QAEtB,OAAO,GAAG,CAAC;KACd;IAED,aAAa,CAAC,IAAY,EAAE,aAAmB;QAC3C,IAAI,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACjE,OAAO,WAAW,CAAC;KACtB;;IAGe,oBAAoB,CAAC,IAAY,EAAE,aAAmB;QAC1D,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,OAAO,GAAGmC,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACzE,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,GAAGA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,WAAW,CAAC,CAAC;YACnG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;SAC/C;QAED,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;YAC/F,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;SACrD;;;QAID,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,IAAI,EAAE;YACN,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE;gBACzB,IAAI,GAAG,GAAG,IAAIC,oCAAwB,EAAE,CAAC;gBAEzC,IAAI,IAAI,KAAK,EAAE,EAAE;oBACb,IAAI,GAAG,CAAC,CAAC;iBACZ;gBAED,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,KAAK,CAAC,EAAE;oBAC1B,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;iBACxB;gBAED,GAAG,CAAC,KAAK,GAAG,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC/C,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS;oBAC3BA,qBAAS,CAAC,sBAAsB,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjI,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBACnB,OAAO,GAAG,CAAC;aACd;SACJ;QAED,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YACvC,MAAM,GAAG,CAAC,CAAC;YACX,OAAO,GAAGD,mCAAa,CAAC,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAEvD,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;gBAC3F,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;aACrD;SACJ;QAED,OAAO,IAAIC,oCAAwB,EAAE,CAAC;KACzC;IAEO,UAAU,CAAC,KAAY,EAAE,aAAmB;QAChD,IAAI,GAAG,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QACzC,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,GAAG,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,MAAM,GAAG,KAAK,CAAC;QAEnB,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;QAC/C,IAAI,CAACD,mCAAa,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;;YAE/C,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YAC1D,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;;YAGxC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;YAC1C,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;YAEzC,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;gBAC3C,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACtC,IAAI,OAAO,EAAE;oBACT,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAC3C;gBACD,MAAM,GAAG,IAAI,CAAC;aACjB;SACJ;aACI,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;YACnE,MAAM,GAAG,IAAI,CAAC;YACd,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,EAAE;gBACnE,IAAI,GAAG,CAAC,CAAC;gBACT,GAAG,GAAG,CAAC,CAAC;gBACR,MAAM,GAAG,CAAC,CAAC;aACd;iBACI,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC1E,IAAI,GAAG,EAAE,CAAC;gBACV,GAAG,GAAG,CAAC,CAAC;gBACR,MAAM,GAAG,CAAC,CAAC;aACd;iBACI,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC5E,IAAI,GAAG,EAAE,CAAC;gBACV,GAAG,GAAG,CAAC,CAAC;gBACR,MAAM,GAAG,CAAC,CAAC;aACd;iBACI,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;gBACtE,IAAI,GAAG,EAAE,CAAC;gBACV,GAAG,GAAG,CAAC,CAAC;gBACR,MAAM,GAAG,CAAC,CAAC;aACd;SACJ;aACI;;YAED,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;YACzC,IAAIA,mCAAa,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBAC3C,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;gBACtD,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACxC,IAAI,CAAC,IAAI,EAAE;oBACP,OAAO,GAAG,CAAC;iBACd;aACJ;iBACI;gBACD,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBACpC,IAAI,CAAC,IAAI,EAAE;oBACP,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACxC,IAAI,CAAC,IAAI,EAAE;wBACP,OAAO,GAAG,CAAC;qBACd;iBACJ;aACJ;;YAGD,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YACrD,IAAIA,mCAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;gBAC1C,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;gBACtC,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;oBAC3C,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACtC,MAAM,GAAG,IAAI,CAAC;iBACjB;gBAED,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;gBACzC,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;oBAC5C,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACxC,MAAM,GAAG,IAAI,CAAC;iBACjB;aACJ;iBACI;gBACD,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAClC,MAAM,GAAG,IAAI,CAAC;aACjB;;YAGD,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YACrD,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;gBAC3C,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBACrC,MAAM,GAAG,IAAI,CAAC;aACjB;SACJ;;QAGD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QACvD,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;YAC5C,IAAIA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC;mBAC1FA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9F,IAAI,IAAI,IAAI,EAAE,EAAE;oBACZ,IAAI,IAAI,EAAE,CAAC;iBACd;gBACD,IAAIA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;oBAChG,KAAK,GAAG,IAAI,CAAC;iBAChB;aACH;iBACG,IAAIA,mCAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjG,IAAI,IAAI,GAAG,EAAE,EAAE;oBACX,IAAI,IAAI,EAAE,CAAC;iBACd;gBACD,KAAK,GAAG,IAAI,CAAC;aAChB;SACJ;;QAGD,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QAC5D,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;YAC/C,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;YACtD,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC/C,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;YAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;SAChE;;QAGD,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QAC5D,IAAI,CAACA,mCAAa,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;YAC/C,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YAClF,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC/C,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;YAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;SAC5G;QAED,IAAI,IAAI,KAAK,EAAE,EAAE;YACb,IAAI,GAAG,CAAC,CAAC;SACZ;QAED,GAAG,CAAC,KAAK,GAAG,GAAG,GAAGC,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/C,IAAI,MAAM,EAAE;YACR,GAAG,CAAC,KAAK,IAAI,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SAClD;QAED,IAAI,MAAM,EAAE;YACR,GAAG,CAAC,KAAK,IAAI,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SACrD;QAED,IAAI,IAAI,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE;YAC3C,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;SACxB;QAED,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;QAChF,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;QAEnB,OAAO,GAAG,CAAC;KACd;CACJ;AAtPT,wCAsPS;;;;;;;;;;;;;AC3Sb;IAII,YAAY,MAAyC;QAHlC,kBAAa,GAAGlC,qBAAS,CAAC,uBAAuB,CAAC;QAIjE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;QACtD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACvE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QAClE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QAChF,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAES,gBAAgB,CAAC,MAAc;QACrC,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM;YACzCxC,6BAAa,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;gBAClD,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;aACnE,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAES,kBAAkB,CAAC,MAAc,EAAE,OAAa;QACtD,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACjE,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,EAAE;YAChB,OAAO,MAAM,CAAC;SACjB;QACD,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,WAAW,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,SAAS,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;YACvC,IAAI,WAAW,IAAI,SAAS,EAAE;gBAC1B,GAAG,EAAE,CAAC;gBACN,SAAS;aACZ;YACD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,GAAG,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACzF,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YACvE,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;gBAC3F,IAAI,WAAW,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;gBACrC,IAAI,SAAS,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;gBAErE,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACtE,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBAC9D,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;gBACpE,IAAI,cAAc,CAAC,OAAO,IAAI,iBAAiB,CAAC,OAAO,EAAE;oBACrD,WAAW,GAAG,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC;iBACzF;gBACD,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;gBAC/C,GAAG,IAAI,CAAC,CAAC;gBACT,SAAS;aACZ;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;gBAC1C,IAAI,WAAW,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;gBACrC,IAAI,SAAS,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;gBAErE,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACtE,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;gBACpE,IAAI,iBAAiB,CAAC,OAAO,EAAE;oBAC3B,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC;oBACtC,MAAM,CAAC,IAAI,CAAC,IAAIA,iBAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;oBAC/C,GAAG,IAAI,CAAC,CAAC;oBACT,SAAS;iBACZ;aACJ;YACD,GAAG,EAAE,CAAC;SACT;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,aAAa,CAAC,MAAc,EAAE,OAAa;QAC/C,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,SAAS,GAAiB,IAAI,KAAK,EAAS,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,UAAU;YACrE,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;YACvF,IAAI,KAAK,EAAE;gBACP,SAAS,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAA;aACpF;SACJ,CAAC,CAAC;QACH,SAAS,CAAC,OAAO,CAAC,QAAQ;YACtB,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YAClE,IAAIxC,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC;gBAAE,OAAO;YACxD,IAAI,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YAC7E,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;gBAC3C,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClD,OAAO;aACV;YACD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YAC3E,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;gBAC3C,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClD,OAAO;aACV;YACD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YAChF,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;gBAC3C,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAC9D,IAAI,UAAU,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;gBACtF,IAAI,UAAU,EAAE;oBACZ,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;iBACrD;gBACD,OAAO;aACV;SACJ,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAEO,2BAA2B,CAAC,MAAc,EAAE,OAAa;QAC7D,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClE,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,MAAM,CAAC;QAClC,GAAG,CAAC,OAAO,CAAC,EAAE;YACV,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,EAAE;gBACvB,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;gBAC9C,MAAM,GAAG,MAAM;qBACV,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;qBAC7E,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,CAAA;aACtF;SACJ,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAEO,wBAAwB,CAAC,MAAc,EAAE,MAAc,EAAE,EAAiB;QAC9E,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7D,IAAI,KAAK,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE;YACrD,IAAI,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,UAAU,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;SAC5D;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,kBAAkB,CAAC,MAAc,EAAE,KAAY;QACnD,QAAQ,KAAK,IAAIxC,6BAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAC;KACnG;CACJ;AA9ID,0DA8IC;AA+CD;IAQI,YAAY,MAAsC,EAAE,kBAAkB,GAAG,KAAK;QAP3D,eAAU,GAAGM,qBAAS,CAAC,uBAAuB,CAAC;QAIjD,kBAAa,GAAG,QAAQ,CAAC;QACzB,mBAAc,GAAG,SAAS,CAAC;QAGxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;KAChD;IAED,KAAK,CAAC,eAA8B,EAAE,aAAoB;QACtD,IAAI,CAAC,aAAa;YAAE,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/C,IAAI,WAAW,CAAC;QAChB,IAAI,eAAe,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;YAC1C,IAAI,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACvD,IAAI,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YACjE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC9D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAChE;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAChE;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACvD;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC9D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC7D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC1D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACzD;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC5D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC7D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC9D;;YAGD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC3D;YAED,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,IAAI,WAAW,CAAC,WAAW,IAAI,WAAW,CAAC,SAAS,EAAE;oBAElD,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;oBAClC,WAAW,CAAC,gBAAgB,CAACA,6BAAiB,CAAC,UAAU,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC/G,WAAW,CAAC,gBAAgB,CAAClC,6BAAiB,CAAC,QAAQ,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC7G,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;oBAChC,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,UAAU,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3G,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,QAAQ,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;iBAE5G;qBAAM;oBACH,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;oBAClC,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;iBACnC;gBACD,WAAW,GAAG,WAAW,CAAC;aAC7B;SACJ;QACD,IAAI,MAAM,GAAG,IAAIpC,6BAAmB,CAAC,eAAe,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;QAC3B,MAAM,CAAC,QAAQ,GAAG,WAAW,GAAG,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;QACvD,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;QAE1B,OAAO,MAAM,CAAC;KACjB;IAEO,kBAAkB,CAAC,MAAc,EAAE,aAAmB;QAC1D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,MAAM,GAAG,IAAIoC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QACrF,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;SACvF;QACD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QAEnE,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3C,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAE3C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACtD,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;YACtB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,KAAK,GAAG,CAAC,CAAC;gBAAE,OAAO,MAAM,CAAC;YAC9B,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC;SAC9C;QACD,IAAI,SAAS,GAAGwC,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACpF,IAAI,OAAO,GAAGA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACrG,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAIA,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;QACtF,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,kBAAkB,CAAC,MAAc;QACvC,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACvF,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;SAC5E;QACD,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;SAC1F;QACD,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;SAChF;QACD,OAAO,KAAK,CAAC;KAChB;IAES,gBAAgB,CAAC,MAAc,EAAE,aAAmB;QAC1D,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,MAAM,GAAG,KAAK,CAAC;QAEnB,IAAI,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAE5C,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QACjF,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3C,IAAI,CAACxC,6BAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACxC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAClD,MAAM,GAAG,IAAI,CAAC;SACjB;aAAM;YACH,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;YAC1C,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAClD,IAAI,KAAK,GAAG,CAAC,EAAE;gBACX,KAAK,GAAG,CAAC,CAAC;gBACV,IAAI,EAAE,CAAC;aACV;iBAAM,IAAI,KAAK,GAAG,EAAE,EAAE;gBACnB,KAAK,GAAG,EAAE,CAAC;gBACX,IAAI,EAAE,CAAC;aACV;SACJ;QACD,IAAI,aAAa,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QACrG,IAAI,WAAW,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAEjG,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,CAACxC,6BAAa,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;YACvC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACpC,MAAM,GAAG,KAAK,CAAC;SAClB;QACD,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,SAAS,GAAGwC,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC3F,IAAI,MAAM,IAAI,SAAS,GAAG,aAAa;YAAE,UAAU,EAAE,CAAC;QACtD,IAAI,MAAM,IAAI,SAAS,IAAI,aAAa;YAAE,QAAQ,EAAE,CAAC;QAErD,MAAM,CAAC,KAAK,GAAG,IAAI,aAAa,IAAI,WAAW,KAAK,MAAM,GAAG,QAAQ,IAAI,CAAC;QAC1E,MAAM,CAAC,WAAW,GAAG;YACjBA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC;YAChFA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC;SACjF,CAAC;QACF,MAAM,CAAC,SAAS,GAAG;YACfA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC;YAC9EA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC;SAC/E,CAAC;QACF,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,kBAAkB,CAAC,MAAc,EAAE,aAAmB;QAC5D,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;YAClC,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,WAAW,GAAG,CAACA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YACtG,MAAM,CAAC,SAAS,GAAG,CAACA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YACpG,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;YACnC,MAAM,CAAC,KAAK,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAIA,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YACtF,MAAM,CAAC,WAAW,GAAG,CAACA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAC1G,MAAM,CAAC,SAAS,GAAG,CAACA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YACxG,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;QAED,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;QAEvF,IAAI,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,EACrE;YACI,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC,GAAG,EAAE,CAAC;SACzF;QAED,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QAErF,IAAI,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,EACrC;YACI,WAAW,GAAG,IAAI,CAAC;YACnB,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;SAC7C;QAED,IAAI,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,EACpC;YACI,UAAU,GAAG,IAAI,CAAC;YAClB,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;SAC7C;QAED,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3C,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACxC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YACjD,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAClD,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;gBACb,MAAM,CAAC,KAAK,GAAG,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAK,EAAE,CAAC,CAAC,IAAIA,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;gBAC9F,IAAI,IAAI,KAAK,CAAC;gBACd,UAAU,GAAG,IAAI,CAAC;gBAClB,QAAQ,GAAG,IAAI,CAAC;aACnB;iBAAM;gBACH,MAAM,CAAC,KAAK,GAAG,QAAQA,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;gBAC3D,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE;oBAAE,UAAU,EAAE,CAAC;gBACnD,IAAI,KAAK,IAAI,aAAa,CAAC,QAAQ,EAAE;oBAAE,QAAQ,EAAE,CAAC;aACrD;SACJ;aAAM;YACH,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YACvD,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;gBACpC,IAAI,MAAM,GAAGA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;gBAE3F,MAAM,CAAC,KAAK,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,KAAKA,sBAAU,CAAC,QAAQ,CAACA,qBAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;gBAEpI,IAAI,SAAS,GAAGA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;gBAC9F,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB;sBAC/BA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;sBAC7EA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;gBAE1F,IAAI,WAAW,EAAE;oBACb,OAAO,GAAG,IAAI,CAAC,kBAAkB;0BAC3BA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;0BAChFA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;iBAChG;gBAED,IAAI,UAAU,EAAE;oBACZ,SAAS,GAAGA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;iBAC/F;gBAED,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACtB,OAAO,MAAM,CAAC;aACjB;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;gBACnC,IAAI,SAAS,GAAGA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;gBAChG,IAAI,OAAO,GAAGA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,IAAI,CAAC,aAAa,EAAEA,qBAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,KAAK,IAAI,CAAC,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAElI,MAAM,CAAC,KAAK,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,KAAKA,sBAAU,CAAC,QAAQ,CAACA,qBAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC;gBAC7I,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACtB,OAAO,MAAM,CAAC;aACjB;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;gBACrC,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;gBACvC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;gBACpD,KAAK,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAC5B,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;gBAC9B,MAAM,CAAC,KAAK,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAIA,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;gBACtF,UAAU,GAAG,IAAI,CAAC;gBAClB,QAAQ,GAAG,IAAI,CAAC;aACnB;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;gBAC3C,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;gBACvC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,CAAC;gBAC1D,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;gBAC9B,IAAI,SAAS,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC7D,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB;sBAC/BA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;sBAC9CA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC3D,IAAI,WAAW,EAAE;oBACb,OAAO,GAAG,IAAI,CAAC,kBAAkB;0BAC3BA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;0BAC7CA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC7D;gBACD,IAAI,UAAU,EAAE;oBACZ,SAAS,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC5D;gBAED,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC5C,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACtB,OAAO,MAAM,CAAC;aACjB;SACJ;QAED,IAAI,WAAW,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACzE,IAAI,SAAS,GAAG,IAAI,CAAC,kBAAkB;cACjCA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,SAAS,CACfA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;cACrEA,qBAAS,CAAC,SAAS,CACjBA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACnE,IAAI,SAAS,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACrE,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB;cAC/BA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,SAAS,CACfA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;cACnEA,qBAAS,CAAC,SAAS,CACjBA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjE,IAAI,WAAW,EAAE;YACb,SAAS,GAAG,IAAI,CAAC,kBAAkB;kBAC7BA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC;kBACvDA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACpE,OAAO,GAAG,IAAI,CAAC,kBAAkB;kBAC3BA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAC;kBACrDA,qBAAS,CAAC,OAAO,CACfA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SACrE;aACI,IAAI,UAAU,EACnB;YACI,WAAW,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;YACtE,SAAS,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;SACrE;QAED,MAAM,CAAC,WAAW,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,kBAAkB,CAAC,MAAc,EAAE,aAAmB;QAC5D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QAC1E,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,aAAa,EAAE,aAAa,CAAC;iBAC9F,GAAG,CAAC,EAAE;gBACH,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC/C,OAAO,EAAE,CAAC;aACb,CAAC,CAAC;YACP,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;gBAAE,OAAO,MAAM,CAAC;SAC7C;QAED,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC1F,IAAI,UAAU,GAAW,IAAI,CAAC;QAC9B,IAAI,KAAK,EACT;YACI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;SAC3C;QAED,IAAI,CAAEA,6BAAa,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAClD;YACI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC7C,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SAChD;QAED,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1F,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,MAAM,CAAC;QAElC,IAAI,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC;QAC5C,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC;QACxC,IAAI,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC;QACxC,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;QAEpC,MAAM,CAAC,mBAAmB,GAAG,GAAG,CAAC;QACjC,MAAM,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,KAAKwC,qBAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,CAAC;QACzG,MAAM,CAAC,WAAW,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,SAAS,CAAC,MAAc,EAAE,aAAmB;QACnD,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QACjF,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QAEnE,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,SAAS,GAAGwC,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAChF,IAAI,OAAO,GAAGA,qBAAS,CAAC,OAAO,CAACA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACvI,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,aAAa,CAAC,MAAc,EAAE,aAAmB;QACvD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACvE,IAAI,SAAS,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;QACtC,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,IAAI,aAAa,GAAG,EAAE,CAAC;QAEvB,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YAClB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI,EAAE,KAAK,IAAI;gBAAE,OAAO,MAAM,CAAC;YAE/B,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YAClD,IAAI,GAAW,CAAC;YAChB,IAAI,cAAc,GAA6B,EAAE,CAAC,KAAK,CAAC;YACxD,IAAIxC,6BAAa,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC;gBAAE,OAAO,MAAM,CAAC;YAErE,IAAI,WAAW,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YACnF,IAAI,WAAW,EAAE;gBACb,GAAG,GAAGM,6BAAiB,CAAC,SAAS,CAAC;gBAClC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACvE;YACD,WAAW,GAAGN,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YACjF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;gBACxD,GAAG,GAAGM,6BAAiB,CAAC,QAAQ,CAAC;;gBAEjC,SAAS,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACzG,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACtE;YACD,WAAW,GAAGN,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YACtF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;gBACxD,GAAG,GAAGM,6BAAiB,CAAC,QAAQ,CAAA;gBAChC,SAAS,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACzG,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAEnE,IAAI,IAAI,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACxE,cAAc,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;gBACnC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACvE;YAED,IAAI,GAAG,EAAE;gBACL,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;aACtB;YAED,aAAa,GAAG,cAAc,CAAC,KAAK,CAAC;YACrC,MAAM,CAAC,mBAAmB,GAAG,CAAC,EAAE,CAAC,CAAC;SACrC;;QAGD,IAAI,KAAK,GAAGN,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAChF,IAAI,KAAK,EAAE;YAEP,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;YACjD,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACxD,QAAQ,YAAY;gBAChB,KAAK,GAAG;oBACJ,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;oBACrE,OAAO,GAAGwC,qBAAS,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;oBACrD,aAAa,IAAI,QAAQ,KAAK,CAAC,CAAC,CAAC;oBACjC,MAAM;gBACV,KAAK,KAAK;oBACN,OAAO,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC7F,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC3C,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;oBACvC,QAAQ,GAAG,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;oBACvD,MAAM;gBACV,KAAK,GAAG;oBACJ,OAAO,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC3E,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;oBACzC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;oBACvC,QAAQ,GAAGA,qBAAS,CAAC,SAAS,CAAC,OAAO,CAAC,GAAGA,qBAAS,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;oBAC7E,MAAM;aACb;YACD,aAAa,GAAG,IAAI,QAAQ,GAAG,CAAC;SACnC;QAED,IAAI,SAAS,CAAC,OAAO,EAAE,KAAK,OAAO,CAAC,OAAO,EAAE,IAAI,aAAa,EAAE;YAC5D,OAAO,GAAGA,qBAAS,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,KAAK,GAAG,IAAIA,sBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAIA,sBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,aAAa,GAAG,CAAC;YACtH,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QAED,OAAO,MAAM,CAAC;KACjB;IAEO,YAAY,CAAC,IAAU,EAAE,KAAa,EAAE,eAAwB;QACpE,IAAI,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC7C,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,KAAK,KAAK,CAAC;YAAE,OAAO,MAAM,CAAC;QAE/B,IAAI,CAAC,eAAe;YAAE,KAAK,IAAI,CAAC,CAAC,CAAC;QAClC,QAAQ,OAAO;YACX,KAAK,GAAG;gBAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,CAAC;gBAAC,MAAM;YACxD,KAAK,GAAG;gBAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC9D,KAAK,GAAG;gBAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;gBAAC,MAAM;YAC1D,KAAK,GAAG;gBAAE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,CAAC;gBAAC,MAAM;SACnE;QACD,OAAO,MAAM,CAAC;KACjB;IAES,gBAAgB,CAAC,MAAc,EAAE,aAAmB;QAC1D,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACjF,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QAE5D,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QACjD,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3C,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC;cACpD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/C,IAAIA,6BAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YACvC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACnD,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;YACvC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;YACpD,KAAK,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;SACjC;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAClD,MAAM,GAAG,IAAI,CAAC;SACjB;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;KAC5E;IAES,cAAc,CAAC,QAAgB,EAAE,KAAa,EAAE,IAAY,EAAE,aAAmB,EAAE,MAAe;QACxG,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1D,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE;YAC/B,QAAQ,EAAE,CAAC;YACX,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;SAC5C;QACD,IAAI,UAAU,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClC,IAAI,MAAM,IAAI,UAAU,GAAG,aAAa,EAAE;YACtC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;YAC5D,IAAI,UAAU,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE;gBACjC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;aAChD;SACJ;QACD,IAAI,MAAM,IAAI,QAAQ,IAAI,aAAa,EAAE;YACrC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;YAC1D,IAAI,QAAQ,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE;gBAC/B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;aAC5C;SACJ;QACD,MAAM,CAAC,KAAK,GAAG,MAAM;YACjB,QAAQA,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,KAAKA,sBAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;YAChF,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAIA,sBAAU,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,KAAKA,sBAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC;QAChH,MAAM,CAAC,WAAW,GAAG,CAAC,UAAU,EAAEA,qBAAS,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClG,MAAM,CAAC,SAAS,GAAG,CAAC,QAAQ,EAAEA,qBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5F,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAEO,eAAe,CAAC,MAAc,EAAE,aAAmB;QACvD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAChF,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QAE5D,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QACjD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAE3C,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACxC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;YACb,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,KAAK,GAAG,CAAC,CAAC;gBAAE,OAAO,MAAM,CAAC;YAC9B,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC;SAC9C;QAED,IAAI,gBAAsB,CAAC;QAC3B,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;YACzC,IAAI,OAAO,GAAGwC,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC7D,IAAI,iBAAiB,GAAGA,qBAAS,CAAC,IAAI,CAAC,OAAO,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC;YAClE,IAAI,OAAO,GAAGA,qBAAS,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;YACtD,IAAI,OAAO,KAAK,CAAC,EAAE;gBACf,iBAAiB,GAAGA,qBAAS,CAAC,IAAI,CAACA,qBAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC;aACxF;YAED,gBAAgB,GAAG,iBAAiB,CAAC;YACrC,OAAO,GAAGA,qBAAS,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC;YAE3D,MAAM,CAAC,KAAK,GAAG,GAAIA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAE,IAAKA,sBAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAE,KAAMA,sBAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAE,EAAE,CAAC;SACzJ;aAAM;YACH,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAExD,IAAI,QAAQ,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5D,IAAI,kBAAkB,GAAGA,qBAAS,CAAC,IAAI,CAAC,QAAQ,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC;YACpE,IAAI,OAAO,GAAGA,qBAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;YACvD,IAAI,OAAO,KAAK,CAAC,EAAE;gBACf,kBAAkB,GAAGA,qBAAS,CAAC,IAAI,CAACA,qBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC;aACzF;YAED,gBAAgB,GAAGA,qBAAS,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7E,IAAI,gBAAgB,GAAGA,qBAAS,CAAC,IAAI,CAAC,gBAAgB,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC;YAC1E,MAAM,CAAC,KAAK,GAAG,GAAIA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAE,IAAKA,sBAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAE,KAAMA,sBAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAE,EAAE,CAAC;SAC1J;QAED,MAAM,CAAC,WAAW,GAAG,CAAC,gBAAgB,EAAEA,qBAAS,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9G,MAAM,CAAC,SAAS,GAAG,CAAC,gBAAgB,EAAEA,qBAAS,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5G,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QAEtB,OAAO,MAAM,CAAC;KACjB;IAES,YAAY,CAAC,MAAc,EAAE,aAAmB;QACtD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7E,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE;YAC1C,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;SACrF;QACD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QAE5D,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;QACjD,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;QAE3C,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACxC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;YACb,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,KAAK,GAAG,CAAC,CAAC;gBAAE,OAAO,MAAM,CAAC;YAC9B,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC;SAC9C;QAED,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAI,SAAS,GAAGwC,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,UAAU,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACjG,IAAI,OAAO,GAAGA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,KAAK,GAAG,IAAIA,sBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAIA,sBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC;QACzG,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,WAAW,CAAC,MAAc,EAAE,aAAmB;QACrD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC5E,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC;QAE5D,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,KAAK,IAAI,CAAC,CAAC,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;YACtD,IAAIA,6BAAa,CAAC,aAAa,CAAC,OAAO,CAAC;gBAAE,OAAO,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,IAAI,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;YACzF,MAAM,CAAC,KAAK,GAAG,GAAG,OAAO,IAAI,MAAM,EAAE,CAAC;SACzC;aAAM;YACH,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC;SACzB;QACD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAEO,cAAc,CAAC,MAAc,EAAE,aAAmB;QACtD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC/E,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAC1B,IAAI,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5D,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,QAAQ,GAAGwC,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/E,IAAI,YAAY,GAAGA,qBAAS,CAAC,IAAI,CAAC,QAAQ,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC;QAC9D,IAAI,UAAU,GAAGA,qBAAS,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC;QAC1D,MAAM,CAAC,KAAK,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,KAAKA,sBAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC;QACjF,MAAM,CAAC,WAAW,GAAG,CAAC,UAAU,EAAEA,qBAAS,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;QACpE,MAAM,CAAC,SAAS,GAAG,CAAC,UAAU,EAAEA,qBAAS,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAEO,eAAe,CAAC,MAAc,EAAE,aAAmB;QACvD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC5E,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACnE,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,MAAM,CAAC;QAE9C,IAAI,cAAc,GAA6B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,KAAK,CAAC;QACzG,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC;QACpC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;QACpC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACvE,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAEO,gBAAgB,CAAC,MAAc,EAAE,aAAmB;QACxD,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7E,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACnE,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,MAAM,CAAC;QAE9C,IAAI,cAAc,GAA6B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,KAAK,CAAC;QACzG,MAAM,CAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC;QACpC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QACrC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAC5E,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QACxE,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,WAAW,CAAC,QAAgB,EAAE,OAAe,EAAE,KAAa,EAAE,IAAY;QAChF,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,YAAY,GAAGwC,qBAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACrD,IAAI,OAAO,KAAK,CAAC;YAAE,OAAO,GAAG,CAAC,CAAC;QAC/B,IAAI,cAAc,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACrE,IAAI,OAAO,GAAG,cAAc;YAAE,YAAY,GAAGA,qBAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC/E,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpE,OAAO,YAAY,CAAC;KACvB;IAEO,oBAAoB,CAAC,QAAc;QACvC,IAAI,SAAS,GAAGA,qBAAS,CAAC,IAAI,CAAC,QAAQ,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC;QAC3D,IAAI,OAAO,GAAGA,qBAAS,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5E,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;KAC/B;IAEO,qBAAqB,CAAC,QAAc;QACxC,IAAI,SAAS,GAAGA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;QACpH,IAAI,OAAO,GAAGA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACtH,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxE,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;KAC/B;CACJ;AAluBD,oDAkuBC;;;;;;;;;;;;;AC36BD;IAII,YAAY,MAAyC;QAH5C,kBAAa,GAAGlC,qBAAS,CAAC,uBAAuB,CAAC;QAIvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS;aACxC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;aACrC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACtD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QACrC,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAEO,gBAAgB,CAAC,IAAY;QACjC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK;YACtC,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACpD,OAAO,CAAC,OAAO,CAAC,KAAK;;gBAEjB,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;gBACrC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;gBACrC,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;;gBAEzC,IAAI,KAAK,IAAI,KAAK,IAAI,OAAO,EAAE;oBAC3B,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;iBAChE;aACJ,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAEO,kBAAkB,CAAC,IAAY,EAAE,OAAa;QAClD,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;QAGjE,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,OAAO,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC;YACxD,IAAI,SAAS,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;YAExC,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YAC5E,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;;YAEzE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;gBACxF,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;gBACtC,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;;gBAGvE,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACpE,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBACzD,IAAI,SAAS,CAAC,OAAO,EAAE;oBACnB,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC;iBACjC;gBAED,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;gBAC5C,GAAG,IAAI,CAAC,CAAC;gBACT,SAAS;aACZ;;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;gBAC1C,IAAI,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;gBACtC,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;;gBAGvE,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACpE,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAG,CAAC;gBACjE,IAAI,YAAY,CAAC,OAAO,EAAE;oBACtB,WAAW,GAAG,YAAY,CAAC,KAAK,CAAC;oBACjC,GAAG,CAAC,IAAI,CAAC,IAAIA,iBAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;oBAC5C,GAAG,IAAI,CAAC,CAAC;oBACT,SAAS;iBACZ;aACJ;YAED,GAAG,EAAE,CAAC;SACT;QAED,OAAO,GAAG,CAAC;KACd;IAEO,UAAU,CAAC,MAAc;QAC7B,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAC3E,OAAO,CAAC,OAAO,CAAC,KAAK;YACjB,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;SAChE,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;CACJ;AAhGD,0DAgGC;AAeD;IAII,YAAY,aAA6C;QACrD,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;KAC/B;IAEM,KAAK,CAAC,EAAiB,EAAE,OAAc;QAC1C,IAAI,aAAa,GAAG,OAAO,IAAI,IAAI,IAAI,EAAE,CAAC;QAC1C,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,EAAE,CAAC,IAAI,KAAK,oBAAoB,CAAC,UAAU,EAAE;YAC7C,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAChE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACjE;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACzD;YACD,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAAClC,6BAAiB,CAAC,UAAU,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAClH,WAAW,CAAC,gBAAgB,CAAClC,6BAAiB,CAAC,QAAQ,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAChH,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,UAAU,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC9G,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,QAAQ,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC5G,KAAK,GAAG,WAAW,CAAC;aACvB;SACJ;QAED,IAAI,GAAG,GAAG,IAAIpC,6BAAmB,CAAC,EAAE,CAAC,CAAC;QACtC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;QAClB,GAAG,CAAC,QAAQ,GAAG,KAAK,KAAK,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;QACjD,GAAG,CAAC,aAAa,GAAG,EAAE,CAAC;QAEvB,OAAO,GAAG,CAAC;KACd;IAEO,gBAAgB,CAAC,IAAY,EAAE,aAAmB;QACtD,IAAI,GAAG,GAAG,IAAIoC,oCAAwB,EAAE,CAAC;QACzC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,GAAG,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE5C,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC;QACvF,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACjB,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,WAAW,CAAC,CAAC;SAC1F;QAED,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE;;YAE1C,IAAI,OAAO,GAAG,KAAK,CAAC;;YAGpB,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAEpC,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACjD,IAAI,CAAC,SAAS,EAAE;gBACZ,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;aAC5C;YAED,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAEhC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC/C,IAAI,CAAC,OAAO,EAAE;gBACV,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;aAC1C;;YAGD,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;YACnD,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;YACrD,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;YAC1C,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;;YAE1C,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;gBAC5C,IAAI,YAAY,GAAG,CAACA,6BAAa,CAAC,aAAa,CAAC,SAAS,CAAC;oBACtDA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,WAAW,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC3G,IAAI,YAAY,GAAG,CAACA,6BAAa,CAAC,aAAa,CAAC,SAAS,CAAC;oBACtDA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,WAAW,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC3G,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,YAAY,EAAE;oBAErD,IAAI,SAAS,IAAI,EAAE,EAAE;wBACjB,SAAS,IAAI,EAAE,CAAC;qBACnB;oBACD,IAAI,OAAO,IAAI,EAAE,EAAE;wBACf,OAAO,IAAI,EAAE,CAAC;qBACjB;oBACD,OAAO,GAAG,IAAI,CAAC;iBAClB;qBACI,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,YAAY,EAAE;oBAC1D,IAAI,SAAS,GAAG,EAAE,EAAE;wBAChB,SAAS,IAAI,EAAE,CAAC;qBACnB;oBACD,IAAI,OAAO,GAAG,EAAE,EAAE;wBACd,OAAO,IAAI,EAAE,CAAC;qBACjB;oBACD,OAAO,GAAG,IAAI,CAAC;iBAClB;aACJ;YAED,IAAI,OAAO,EAAE;gBACT,IAAI,QAAQ,GAAG,GAAG,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBACvD,IAAI,MAAM,GAAG,GAAG,GAAGA,sBAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAEnD,GAAG,CAAC,KAAK,GAAG,IAAI,QAAQ,IAAI,MAAM,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC;gBAEhE,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG;oBAC9B,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;oBAClD,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;iBACnD,CAAC;gBAEF,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBAEnB,OAAO,GAAG,CAAC;aACd;SACJ;QACD,OAAO,GAAG,CAAC;KACd;IAEO,kBAAkB,CAAC,IAAY,EAAE,aAAmB;QACxD,IAAI,GAAG,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QACzC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACjE,IAAI,GAAG,GAAwB,IAAI,CAAC;QACpC,IAAI,GAAG,GAAwB,IAAI,CAAC;QACpC,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YAClB,OAAO,GAAG,CAAC;SACd;QAED,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAC1D,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAE1D,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,EAAE;YAC1C,OAAO,GAAG,CAAC;SACd;QAED,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;QACjC,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;QACjC,IAAI,SAAS,GAAS,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;QAC5C,IAAI,OAAO,GAAS,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;QAC1C,IAAI,CAACxC,6BAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;eAChE,OAAO,IAAI,SAAS,IAAI,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;YACpD,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;YAC1C,GAAG,CAAC,KAAK,CAAC,WAAW,GAAG,OAAO,CAAC;SACnC;QAED,GAAG,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,MAAMwC,qBAAS,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC;QAC/F,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;QACvE,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;QAEnB,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAChF,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;SACxB;QAED,GAAG,CAAC,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACrC,OAAO,GAAG,CAAC;KACd;;IAGO,UAAU,CAAC,IAAY,EAAE,aAAmB;QAChD,IAAI,GAAG,GAAG,aAAa,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;QACvC,IAAI,GAAG,GAAG,IAAIA,oCAAwB,EAAE,CAAC;;QAGzC,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACzE,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE;gBAChE,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;gBAC7C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAC/B,QAAQ,GAAG,IAAI,CAAC;gBAChB,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;aACzB;YACD,IAAI,CAAC,QAAQ,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC5E,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;gBAC3C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAC9B,OAAO,GAAG,IAAI,CAAC;gBACf,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;aACxB;SACJ;QAED,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACxD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,OAAO,IAAIwC,oCAAwB,EAAE,CAAC;SACzC;;QAGD,IAAI,QAAQ,EAAE;YACV,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC;;YAE9C,IAAI,UAAU,CAAC,MAAM,KAAK,EAAE,EAAE;gBAC1B,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;aACzB;SACJ;aACI,IAAI,OAAO,EAAE;YACd,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC;SACnD;QAED,GAAG,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;QAE7B,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG;YAC9B,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;YAC7D,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC;SAC9F,CAAC;QAEF,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;QAEnB,OAAO,GAAG,CAAC;KACd;;AAnNsB,+BAAU,GAAGlC,qBAAS,CAAC,uBAAuB,CAAC;AAD1E,oDAqNC;;;;;;;;;;;;;ACvTD;IAII,YAAY,MAAuC;QAHhC,kBAAa,GAAGA,qBAAS,CAAC,qBAAqB,CAAC;QAI/D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACrE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;QACrD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACtE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACrE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QACtE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;QAE/E,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAES,gBAAgB,CAAC,MAAc,EAAE,OAAa;QACpD,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClE,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,MAAM,CAAC;QAClC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QAC1E,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,MAAM,CAAC;QAClC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACd,OAAO,CAAC,GAAG,GAAG,CAAC,MAAM,IAAIxC,6BAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC9D,CAAC,EAAE,CAAC;aACP;YACD,IAAI,CAAC,IAAI,GAAG,CAAC,MAAM;gBAAE,MAAM;YAC3B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAKM,qBAAS,CAAC,iBAAiB,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAKA,qBAAS,CAAC,iBAAiB;iBAC1F,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAKA,qBAAS,CAAC,iBAAiB,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAKA,qBAAS,CAAC,iBAAiB,CAAC,EAAE;gBAC9F,IAAI,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;gBAC/C,IAAI,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC7B,IAAI,WAAW,GAAG,SAAS,EAAE;oBACzB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACV,SAAS;iBACZ;gBACD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,GAAG,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACzF,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE;oBACzC,IAAI,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;oBACzB,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;oBACvC,MAAM,CAAC,IAAI,CAAC,IAAIkC,iBAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;iBACtC;gBACD,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACV,SAAS;aACZ;YACD,CAAC,GAAG,CAAC,CAAC;SACT;QACD,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK;YACxB,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACxC,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YACxE,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;;gBAE3B,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;aAChC;SACJ,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAES,eAAe,CAAC,MAAc;QACpC,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9CA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC;aACrD,OAAO,CAAC,KAAK;YACV,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;SAClE,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAEO,iBAAiB,CAAC,MAAc,EAAE,OAAa;QACnD,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClE,GAAG,CAAC,OAAO,CAAC,EAAE;YACV,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,YAAY,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YAC7E,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,EAAE;gBACxE,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;aACnE;YACD,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC;gBAAE,OAAO;YACxD,IAAI,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC;YACtF,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC7B,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC;gBAC/B,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;aACtC;SACJ,CAAC,CAAC;QACHxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC;aACzE,OAAO,CAAC,KAAK;YACV,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;SAClE,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAEO,gBAAgB,CAAC,MAAc,EAAE,OAAa;QAClD,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClE,GAAG,CAAC,OAAO,CAAC,EAAE;YACV,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;YACnD,IAAIxC,6BAAa,CAAC,kBAAkB,CAAC,QAAQ,CAAC;gBAAE,OAAO;YACvD,IAAI,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;YACpF,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;gBACrB,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;gBAClD,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;aACtC;SACJ,CAAC,CAAC;QACHxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE,MAAM,CAAC;aACxE,OAAO,CAAC,KAAK;YACV,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;SAClE,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAEO,iBAAiB,CAAC,MAAc,EAAE,OAAa;QACnD,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClE,GAAG,CAAC,OAAO,CAAC,EAAE;YACV,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,aAAa,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YACnF,IAAI,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3C,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;aACvE;iBAAM;gBACH,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;gBACnD,IAAI,YAAY,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;gBACjF,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzC,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;iBAC1G;aACJ;SACJ,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAEO,0BAA0B,CAAC,MAAc,EAAE,OAAa;QAC5D,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;YAC7D,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YACvE,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,MAAM,GAAGwC,wBAAY,CAAC,mCAAmC,CAAC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aACnH;SACJ,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;CACJ;AAtJD,sDAsJC;AA8BD;IAII,YAAY,aAA2C;QACnD,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;KAC/B;IAEM,KAAK,CAAC,EAAiB,EAAE,OAAa;QACzC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,EAAE,CAAC,IAAI,KAAK,kBAAkB,CAAC,UAAU,EAAE;YAC3C,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAChE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aAC9D;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aAC/D;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACrE;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,6BAA6B,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aAC5E;YAED,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAAClC,6BAAiB,CAAC,QAAQ,CAAC,GAAGkC,sBAAU,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBAC9G,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,QAAQ,CAAC,GAAGkC,sBAAU,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAC1G,KAAK,GAAG,WAAW,CAAC;aACvB;SACJ;QAED,IAAI,GAAG,GAAG,IAAIpC,6BAAmB,CAAC,EAAE,CAAC,CAAC;QAAC;YACnC,GAAG,CAAC,KAAK,GAAG,KAAK,EACjB,GAAG,CAAC,QAAQ,GAAG,KAAK,KAAK,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,EAChD,GAAG,CAAC,aAAa,GAAG,EAAE,CAAA;SACzB;QAAA,AAAC;QACF,OAAO,GAAG,CAAC;KACd;IAES,eAAe,CAAC,IAAY,EAAE,aAAmB;QACvD,IAAI,GAAG,GAAG,IAAIoC,oCAAwB,EAAE,CAAC;QACzC,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;;QAG5C,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC1E,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;YACtF,IAAI,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YACrE,GAAG,CAAC,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC;YACrC,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC;YAChD,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;;IAGS,gBAAgB,CAAC,IAAY,EAAE,aAAmB;QACxD,IAAI,GAAG,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAEzC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACjE,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YAClB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,IAAI,EAAE,aAAa,CAAC,CAAC;YAC3F,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClB,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;aACtD;iBACI;gBACD,OAAO,GAAG,CAAC;aACd;SACJ;aACI;;;YAGD,IAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gBACnD,OAAO,GAAG,CAAC;aACd;SACJ;QAED,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACjE,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;;YAElB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,IAAI,EAAE,aAAa,CAAC,CAAC;YAC3F,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClB,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;aACtD;iBACI;gBACD,OAAO,GAAG,CAAC;aACd;SACJ;;;QAID,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,OAAO,cAAc,GAAG,GAAG,CAAC,MAAM,IAAIxC,6BAAa,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;YACxF,cAAc,EAAE,CAAC;SACpB;QAED,IAAI,cAAc,IAAI,GAAG,CAAC,MAAM,EAAE;YAC9B,OAAO,GAAG,CAAC;SACd;QAED,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,CAAC,CAAA;QACtF,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,aAAa,CAAC,CAAC;QAC3E,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,EAAE;YAC1C,OAAO,GAAG,CAAC;SACd;QAED,IAAI,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;QACvC,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;QACnC,IAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC;QAEjC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;;QAG5B,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,GAAG,EAAE,EAAE;YAC7E,IAAI,IAAI,EAAE,CAAC;SACd;aACI,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,IAAI,EAAE,EAAE;YACnF,IAAI,IAAI,EAAE,CAAC;SACd;QAED,IAAI,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC;QAC3B,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC1B,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACtD;QACD,OAAO,GAAG,GAAG,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACpE,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC;QAEnC,IAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;QACpB,IAAI,IAAI,IAAI,EAAE,IAAI,CAACxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,MAAM;eAC1E,CAACA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,GAAG,CAAC,OAAO,EAAE;YACnF,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;SACxB;QACD,GAAG,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAClH,GAAG,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC1G,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;;QAGnB,GAAG,CAAC,QAAQ,GAAG,OAAO,CAAC;QACvB,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC3C,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,KAAK,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;SAC5D;;QAGD,GAAG,CAAC,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAErC,OAAO,GAAG,CAAC;KACd;IAES,gBAAgB,CAAC,IAAY,EAAE,aAAmB;QACxD,IAAI,GAAG,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QACzC,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;QAE5C,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,OAAe,CAAC;QAEpB,IAAI,YAAY,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,2BAA2B,EAAE,WAAW,CAAC,CAAC;QAClG,IAAI,EAAE,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,CAAC,EAAE;YACzE,YAAY,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,WAAW,CAAC,CAAC;SAClG;QAED,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;YACtE,IAAI,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;YACnD,IAAI,CAAC,OAAO,EAAE;gBACV,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;gBAChE,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAC3C;iBACI;gBACD,IAAI,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;aAChC;YACD,OAAO,GAAG,GAAG,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;SAChD;aACI;YACD,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YACxE,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,WAAW,EAAE,aAAa,CAAC,CAAC;gBAClG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;oBAClB,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC;iBACtD;qBACI;oBACD,OAAO,GAAG,CAAC;iBACd;aACJ;YAED,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAC7D,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,EAAE;gBACnB,OAAO,GAAG,CAAC;aACd;YAED,IAAI,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC;YAEhC,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACvB,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACxB,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACxB,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC;SACzB;QAGD,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC;QAExF,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;;YAG9C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAE9C,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,CAAC;;YAGrC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;YAG3C,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC1B,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACtD;YACD,OAAO,GAAG,GAAG,GAAGwC,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAEpE,GAAG,CAAC,KAAK,GAAGA,sBAAU,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;YAClD,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAChH,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;IAEO,sBAAsB,CAAC,IAAY,EAAE,WAAiB;QAC1D,IAAI,GAAG,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QACzC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAC/D,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YAClB,OAAO,GAAG,CAAC;SACd;QACD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;QACrD,IAAIxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,MAAM,EAAE;YACvE,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YAC3D,IAAI,UAAU,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAChD,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC5C,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACnC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAC7C,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;YACnD,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC;YAC7B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACzC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;YAC/C,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;YACzB,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;;IAGO,6BAA6B,CAAC,IAAY,EAAE,aAAmB;QACnE,OAAOwC,wBAAY,CAAC,4BAA4B,CAC5C,IAAI,EACJ,aAAa,EACb,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,MAAM,CAAC,cAAc,EAC1B,IAAI,CAAC,MAAM,CAAC,OAAO,EACnB,IAAI,CAAC,MAAM,CAAC,SAAS,EACrB,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAChCA,wBAAY,CAAC,QAAQ,CACxB,CAAC;KACL;;AApRsB,6BAAU,GAAGlC,qBAAS,CAAC,qBAAqB,CAAC;AADxE,gDAsRC;;;;;;;;;;;;;ACncD;IAII,YAAY,MAA6C;QAHtC,kBAAa,GAAGA,qBAAS,CAAC,2BAA2B,CAAC;QAIrE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS;aAC5C,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACpD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACtD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACjD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC9C,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QACxC,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAEO,gBAAgB,CAAC,MAAc,EAAE,OAAa;QAClD,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM;YACzCxC,6BAAa,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;;gBAElD,IAAI,aAAa,GAAG,KAAK,CAAA;gBACzB,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC9C,IAAI,CAACA,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE;oBAC9C,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;oBACtE,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;wBACvB,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBAChB,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;wBACrB,AACA,IAAI,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;wBACzE,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;4BAC7H,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC1D,aAAa,GAAG,IAAI,CAAC;yBACxB;qBACJ;iBACJ;gBACD,IAAI,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC5D,IAAI,CAACxC,6BAAa,CAAC,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE;oBAClE,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;oBACxE,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;wBACvB,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;wBAChB,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;wBACrB,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC;wBAC/B,IAAI,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;wBAClE,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;4BAC7H,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;yBACzE;qBACJ;iBACJ;aACJ,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAES,kBAAkB,CAAC,MAAc,EAAE,OAAa;QACtD,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC/E,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACvE,IAAI,UAAU,GAAoB,EAAE,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,KAAK;YAClC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC5B,OAAO,CAAC,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,KAAK,EAAE;gBAClF,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACjC;YACD,OAAO,CAAC,GAAG,OAAO,CAAC,MAAM,IAAIxC,6BAAa,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE;gBAC1E,CAAC,EAAE,CAAC;aACP;SACJ,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE;YACvB,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACjC;QACD,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzG,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,OAAO,GAAG,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,IAAI,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;YAClC,IAAI,QAAQ,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YACnC,IAAI,WAAW,CAAC,IAAI,KAAKM,qBAAS,CAAC,iBAAiB,IAAI,QAAQ,CAAC,IAAI,KAAKA,qBAAS,CAAC,iBAAiB,EAAE;gBACnG,GAAG,EAAE,CAAC;gBACN,SAAS;aACZ;YACD,IAAI,WAAW,GAAG,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC;YACzD,IAAI,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC;YAE/B,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,GAAG,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACzF,IAAI,OAAO,GAAGN,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YACzE,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;gBACnG,IAAI,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;gBACpC,IAAI,SAAS,GAAG,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;gBACjD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACnE,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBACzD,IAAI,cAAc,GAAG,SAAS,CAAC,OAAO,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;gBACjG,IAAI,cAAc,CAAC,OAAO,EAAE;oBACxB,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC;iBACtC;gBACD,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAA;gBAC9C,GAAG,IAAI,CAAC,CAAC;gBACT,SAAS;aACZ;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;gBAC1C,IAAI,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;gBACpC,IAAI,SAAS,GAAG,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;gBACjD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;gBACnE,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;gBACpE,IAAI,iBAAiB,CAAC,OAAO,EAAE;oBAC3B,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC;oBACtC,MAAM,CAAC,IAAI,CAAC,IAAIA,iBAAK,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAA;oBAC9C,GAAG,IAAI,CAAC,CAAC;oBACT,SAAS;iBACZ;aACJ;YACD,GAAG,EAAE,CAAC;SACT;QAAA,AAAC;QACF,OAAO,MAAM,CAAC;KACjB;IAEO,aAAa,CAAC,MAAc,EAAE,OAAa;QAC/C,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,SAAS,GAAiB,IAAI,KAAK,EAAS,CAAC;QACjD,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ;YACnE,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;YACrF,IAAI,KAAK,EAAE;gBACP,SAAS,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;aAC/E;SACJ,CAAC,CAAC;QACH,SAAS,CAAC,OAAO,CAAC,QAAQ;YACtB,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAA;YAC9D,IAAIxC,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC;gBAAE,OAAO;YACxD,IAAI,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YACnF,IAAI,KAAK,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE;gBACzF,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAA;gBACjD,OAAO;aACV;YACD,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YAC/E,IAAI,KAAK,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE;gBACzF,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAA;aACpD;SACJ,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IAES,UAAU,CAAC,MAAc,EAAE,OAAa;QAC9C,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9CxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;YAC9E,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;SAClE,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;YAC/D,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;YACnD,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;YAC/F,IAAI,KAAK,EAAE;gBACP,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;oBACnE,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;iBACvF;qBACI;oBACD,IAAI,UAAU,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;oBAE/G,IAAI,UAAU,EAAE;;wBAEZ,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;wBAEhE,IAAI,WAAW,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;wBACzF,IAAI,WAAW,EAAE;4BACb,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;yBACjG;qBACJ;iBACJ;aACJ;YAED,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC3C,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;YAC5F,IAAI,KAAK,EAAE;gBACP,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE;oBAChF,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;oBACjG,IAAIA,6BAAa,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;wBACvC,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;qBAC5D;iBACJ;qBACI;oBACD,IAAI,UAAU,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;oBAE5H,IAAI,UAAU,EAAE;;wBAEZ,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;wBAE7D,IAAI,WAAW,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;wBACzF,IAAI,WAAW,EAAE;4BACb,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;yBAClE;qBAEJ;iBACJ;aACJ;;YAGD,KAAK,IAAI,CAAC,IAAI,MAAM,EAAE;;gBAElB,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;oBACb,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;oBAC1C,IAAI,CAACxC,6BAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE;wBAC9C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;wBACjE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;4BACpB,KAAK,IAAI,EAAE,IAAI,OAAO,EAAE;gCACpB,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;gCACzD,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;oCAC1C,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;iCAC/F;6BACJ;yBACJ;qBACJ;iBACJ;;gBAGD,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;oBACrC,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;oBACjD,IAAI,CAACxC,6BAAa,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;wBAC7C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAChE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;4BACpB,KAAK,IAAI,EAAE,IAAI,OAAO,EAAE;gCACpB,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gCAC/C,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;oCAC1C,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;iCACxF;6BACJ;yBACJ;qBACJ;iBACJ;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;KACjB;IAEO,iBAAiB,CAAC,MAAc;QACpC,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAC9C,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;QAClF,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;SAC/E;QACD,OAAO,CAAC,OAAO,CAAC,KAAK;YACjB,MAAM,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;SACnE,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;CACJ;AAzPD,kEAyPC;AA2BD;IAII,YAAY,MAA0C;QAHnC,eAAU,GAAGlC,qBAAS,CAAC,2BAA2B,CAAC;QAIlE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,KAAK,CAAC,eAA8B,EAAE,aAAoB;QACtD,IAAI,CAAC,aAAa;YAAE,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/C,IAAI,WAAW,CAAC;QAChB,IAAI,eAAe,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;YAC1C,IAAI,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACvD,IAAI,WAAW,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YACtE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAChE;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACpE;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC3D;YACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAC/D;YACD,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAACA,6BAAiB,CAAC,cAAc,CAAC,GAAGkC,sBAAU,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvH,WAAW,CAAC,gBAAgB,CAAClC,6BAAiB,CAAC,YAAY,CAAC,GAAGkC,sBAAU,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrH,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,cAAc,CAAC,GAAGkC,sBAAU,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnH,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,YAAY,CAAC,GAAGkC,sBAAU,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjH,WAAW,GAAG,WAAW,CAAC;aAC7B;SACJ;QACD,IAAI,MAAM,GAAG,IAAIpC,6BAAmB,CAAC,eAAe,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;QAC3B,MAAM,CAAC,QAAQ,GAAG,WAAW,GAAG,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;QACvD,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;QAE1B,OAAO,MAAM,CAAC;KACjB;IAES,uBAAuB,CAAE,IAAW,EAAE,aAAkB;QAE9D,IAAI,GAAG,GAAG,IAAIoC,oCAAwB,EAAE,CAAC;QACzC,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAC5E,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EACnB;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;SACrD;QAED,IAAI,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,0BAA0B,GAAG,qBAAqB,CAAC,KAAK,CAAC;QAE7D,IAAI,CAAC,0BAA0B,EAC/B;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;SACrD;QAED,IAAI,eAAe,GAAG,0BAA0B,CAAC,KAAK,CAAC;;QAEvD,IAAI,CAACxC,6BAAa,CAAC,aAAa,CAAC,eAAe,CAAC;eAC1C,eAAe,CAAC,UAAU,CAAC,GAAG,CAAC,EACtC;YACI,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;YACtG,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,IAAI,UAAe,CAAC;YACpB,IAAI,QAAc,CAAC;YACnB,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;gBAC7F,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;gBACpE,IAAI,EAAE,CAAC,KAAK,EAAE;oBACV,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC;oBAClC,QAAQ,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;oBAE9B,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC;iBACzB;qBACI;oBACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;iBACrD;gBAED,eAAe,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBACpE,IAAI,oBAAoB,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACtD,IAAI,qBAAqB,GAAG,0BAA0B,CAAC,WAAW,CAAC;gBACnE,IAAI,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC;gBAC5C,IAAI,OAAO,GAAG,qBAAqB,CAAC,KAAK,CAAC;gBAE1C,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE;oBACnC,IAAI,QAAQ,GAAG,OAAO,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBACjD,IAAI,MAAM,GAAG,OAAO,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;oBAE/C,GAAG,CAAC,KAAK,GAAG,IAAI,QAAQ,IAAI,MAAM,IAAI,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC;oBAEjE,GAAG,CAAC,WAAW,GAAG;wBACdwC,qBAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAClG,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,CAAC;wBACzEA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAClG,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC;qBAAC,CAAC;oBAEzE,GAAG,CAAC,SAAS,GAAG;wBACZA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAC5F,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,CAAC;wBACzEA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAC5F,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC;qBAAC,CAAC;oBAEzE,IAAI,CAACxC,6BAAa,CAAC,aAAa,CAAC,0BAA0B,CAAC,OAAO,CAAC;2BAC7D,0BAA0B,CAAC,OAAO,KAAK,MAAM,EAAE;wBAClD,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;qBACxB;oBAED,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;oBACnB,GAAG,CAAC,mBAAmB,GAAG,CAAC,EAAE,EAAE,qBAAqB,CAAC,CAAC;oBAEtD,OAAO,GAAG,CAAC;iBACd;aACJ;iBAED;gBACI,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACrD;SACJ;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;KACrD;IAEO,gBAAgB,CAAC,MAAc,EAAE,aAAmB;QACxD,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACtF,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;SACzF;QACD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC;YAAE,OAAO,MAAM,CAAC;QAE/C,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAClH,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAEhH,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAC,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC,GAAG,EAAE,CAAC;QAChG,IAAI,CAAC,EAAE;YAAE,OAAO,MAAM,CAAC;QAEvB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;QACzD,IAAI,CAAC,EAAE;YAAE,OAAO,MAAM,CAAC;QAEvB,IAAI,UAAU,GAA6B,EAAE,CAAC,KAAK,CAAC;QACpD,IAAI,UAAU,GAAS,UAAU,CAAC,WAAW,CAAC;QAC9C,IAAI,QAAQ,GAAS,UAAU,CAAC,SAAS,CAAC;QAC1C,IAAI,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC;QAE1B,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;QACrC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;QACrC,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QAEzC,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAChE,IAAI,SAAS,IAAI,EAAE;gBAAE,SAAS,IAAI,EAAE,CAAC;YACrC,IAAI,OAAO,IAAI,EAAE;gBAAE,OAAO,IAAI,EAAE,CAAC;YACjC,KAAK,GAAG,IAAI,CAAC;SAChB;QACD,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAChE,IAAI,SAAS,GAAG,EAAE;gBAAE,SAAS,IAAI,EAAE,CAAC;YACpC,IAAI,OAAO,GAAG,EAAE;gBAAE,OAAO,IAAI,EAAE,CAAC;YAChC,KAAK,GAAG,IAAI,CAAC;SAChB;QACD,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,IAAI,SAAS,IAAI,EAAE,IAAI,OAAO,IAAI,EAAE,EAAE;YACtD,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;SAC3B;QAED,IAAI,QAAQ,GAAG,GAAG,OAAO,IAAIwC,sBAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;QACjE,IAAI,MAAM,GAAG,GAAG,OAAO,IAAIA,sBAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC;QAE7D,MAAM,CAAC,KAAK,GAAG,IAAI,QAAQ,IAAI,MAAM,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC;QACnE,MAAM,CAAC,WAAW,GAAG;YACjBA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;YACxHA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;SACzH,CAAC;QACF,MAAM,CAAC,SAAS,GAAG;YACfA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;YAClHA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;SACnH,CAAC;QACF,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,kBAAkB,CAAC,MAAc,EAAE,aAAmB;QAC5D,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,GAA6D,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACvE,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QAC/E,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;YAC/H,WAAW,GAAG,IAAI,CAAC;SACtB;aAAM,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACzD,IAAIxC,6BAAa,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;gBACrD,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;gBACvH,YAAY,GAAG,IAAI,CAAC;aACvB;iBAAM;gBACH,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;gBACvH,UAAU,GAAG,IAAI,CAAC;aACrB;SACJ;aAAM,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACzD,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;gBACzC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;gBACvH,UAAU,GAAG,IAAI,CAAC;aACrB;iBAAM;gBACH,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;gBACvH,YAAY,GAAG,IAAI,CAAC;aACvB;SACJ;QACD,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAE9D,IAAI,KAAK,GAA6B,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;QACtD,IAAI,GAAG,GAA6B,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC;QAElD,IAAI,WAAW,GAAS,KAAK,CAAC,WAAW,CAAC;QAC1C,IAAI,SAAS,GAAS,GAAG,CAAC,WAAW,CAAC;QACtC,IAAI,SAAS,GAAS,KAAK,CAAC,SAAS,CAAC;QACtC,IAAI,OAAO,GAAS,GAAG,CAAC,SAAS,CAAC;QAElC,IAAI,WAAW,EAAE;YACb,IAAI,WAAW,GAAG,SAAS;gBAAE,WAAW,GAAG,SAAS,CAAC;YACrD,IAAI,OAAO,GAAG,SAAS;gBAAE,OAAO,GAAG,SAAS,CAAC;YAC7C,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,MAAMwC,qBAAS,CAAC,UAAU,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,CAAC;SACnH;aAAM,IAAI,YAAY,EAAE;YACrB,SAAS,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,WAAW,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,OAAO,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;YAC7L,OAAO,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;YAC/K,IAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YAClD,MAAM,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,MAAMA,qBAAS,CAAC,UAAU,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,CAAC;SAC7H;aAAM,IAAI,UAAU,EAAE;YACnB,WAAW,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,OAAO,EAAE,EAAE,WAAW,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,UAAU,EAAE,EAAE,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC;YAC/L,SAAS,GAAGA,qBAAS,CAAC,sBAAsB,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,EAAE,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;YACjL,IAAI,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,GAAG,IAAI,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,MAAMA,qBAAS,CAAC,UAAU,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,CAAC;SAC7H;QACD,IAAI,CAACxC,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC5J,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;SAC3B;QAED,MAAM,CAAC,WAAW,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,MAAM,CAAC,mBAAmB,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QAClD,OAAO,MAAM,CAAC;KACjB;IAES,YAAY,CAAC,OAAsB,EAAE,KAAoB,EAAE,WAA4B,EAAE,SAA0B,EAAE,aAAmB;QAE9I,IAAI,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACxD,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QAClD,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;KACzC;IAES,sBAAsB,CAAC,MAAc,EAAE,aAAmB;QAChE,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,QAAQ,GAAG,MAAM,CAAC;QACtB,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,OAAO,GAAG,KAAK,CAAC;QAEpB,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7F,IAAI,KAAK,EAAE;YACP,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;YAC3C,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC3D,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;aAC5B;iBAAM,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;gBACjE,OAAO,GAAG,IAAI,CAAC;gBACf,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;aAC3B;SACJ;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO;YAAE,OAAO,MAAM,CAAC;QAEhD,IAAI,QAAQ,EAAE;YACV,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;YACxC,IAAI,OAAO,CAAC,MAAM,KAAK,EAAE;gBAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;SACjD;aAAM,IAAI,OAAO,EAAE;YAChB,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;SAC1B;QAED,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACnF,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE;YAC9D,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,IAAI,GAAGwC,qBAAS,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACnD,MAAM,CAAC,KAAK,GAAGA,sBAAU,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;YAC7D,MAAM,CAAC,WAAW,GAAG;gBACjBA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC9GA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;aACzI,CAAC;YACF,MAAM,CAAC,SAAS,GAAG;gBACfA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC9GA,qBAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;aACzI,CAAC;YACF,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;QAED,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACzF,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAE1B,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;QACrD,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QAChE,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;;QAGtE,IAAI,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACvE,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;SAC1H;aACI;YACD,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAClE,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1B,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;aACxH;SACJ;QAED,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;YACxD,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,EAAE;gBACrC,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;gBACjE,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE;oBAC5D,KAAK,GAAG,IAAI,CAAC;iBAChB;aACJ;YAED,IAAI,CAAC,KAAK,EAAE;gBACR,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAClD,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,EAAE;oBACvD,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;wBACnE,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;wBACnD,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE;4BAC5D,KAAK,GAAG,IAAI,CAAC;yBAChB;qBACJ;iBACJ;qBACI;oBACD,KAAK,GAAG,IAAI,CAAC;iBAChB;gBAED,IAAI,CAAC,KAAK,EAAE;oBACR,OAAO,MAAM,CAAC;iBACjB;aACJ;SACJ;QAED,IAAI,qBAAqB,GAAG,KAAK,CAAC;QAClC,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAC5B;YACI,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,IAAI,MAAM,IAAI,IAAI,EAClB;gBACI,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC;gBAC5C,IAAI,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;gBAExC,IAAI,YAAY,IAAI,UAAU,EAC9B;oBACI,OAAO,CAAC,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;oBAClD,OAAO,CAAC,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;iBACnD;qBAED;oBACI,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,IAAI,OAAO,CAAC,SAAS,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,EAC9F;wBACI,OAAO,CAAC,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;wBAClD,OAAO,CAAC,OAAO,GAAG,YAAY,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;qBACnD;yBAED;wBACI,OAAO,CAAC,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;wBAChD,OAAO,CAAC,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;qBACjD;iBACJ;gBACD,qBAAqB,GAAG,IAAI,CAAC;aAChC;SACJ;QAED,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAC7D,IAAI,CAAC,EAAE;YAAE,OAAO,MAAM,CAAC;QAEvB,IAAI,UAAU,GAAS,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC;QAC5C,IAAI,QAAQ,GAAS,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;QAGxC,IAAI,CAAC,qBAAqB,EAAE;YACxB,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;SAChD;aACI;YACD,MAAM,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC,QAAQ,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,MAAM,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,GAAG,CAAC;SACpI;QAED,MAAM,CAAC,WAAW,GAAG;YACjBwC,qBAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;YAChIA,qBAAS,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;SAC3J,CAAC;QACF,MAAM,CAAC,SAAS,GAAG;YACfA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;YAC1HA,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;SACrJ,CAAC;QACF,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAES,aAAa,CAAC,MAAc,EAAE,aAAmB;QACvD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;;QAG5C,IAAI,mBAAmB,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QAC5F,IAAI,mBAAmB,CAAC,MAAM,EAC9B;YACI,OAAO,MAAM,CAAC;SACjB;QAED,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;QACvE,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,MAAM,CAAC;QAE5C,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QACjE,IAAI,CAAC,EAAE;YAAE,OAAO,MAAM,CAAC;QAEvB,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;QAClD,IAAI,cAAc,GAA6B,EAAE,CAAC,KAAK,CAAC;QACxD,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,GAAW,CAAC;QAChB,IAAI,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;YAC1F,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;SACxD;QACD,IAAI,SAAS,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;QACtC,IAAI,WAAW,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACnF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;YACxD,GAAG,GAAGM,6BAAiB,CAAC,SAAS,CAAC;YAClC,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,EAAE,GAAG,WAAW,CAAC,CAAC;SAClE;QACD,WAAW,GAAGN,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACjF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;YACxD,GAAG,GAAGM,6BAAiB,CAAC,QAAQ,CAAC;YACjC,OAAO,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9B,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,WAAW,CAAC,CAAC;SAC5D;QAED,IAAI,aAAa,GAAGkC,sBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,aAAa,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,WAAW,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,WAAW,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAEvD,MAAM,CAAC,KAAK,GAAG,IAAI,aAAa,IAAI,aAAa,IAAI,WAAW,IAAI,WAAW,IAAI,cAAc,CAAC,KAAK,GAAG,CAAC;QAC3G,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QAEtB,IAAI,GAAG,EAAE;YACL,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;SACtB;QACD,MAAM,CAAC,mBAAmB,GAAG,CAAC,EAAE,CAAC,CAAC;QAElC,OAAO,MAAM,CAAC;KACjB;IAEO,OAAO,CAAC,KAAU;QACtB,OAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;KAC7D;IAEO,iBAAiB,CAAC,MAAc,EAAE,aAAmB;QACzD,IAAI,MAAM,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACtF,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;SACnF;QACD,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAE1B,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QACzC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE/C,IAAI,CAAC,OAAO;YAAE,OAAO,MAAM,CAAC;QAC5B,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,WAAW,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAChF,IAAI,WAAW;YAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QAE5B,IAAI,SAAS,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;QACxC,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;QACtC,IAAI,OAAO,GAAG,EAAE,CAAC;QAEjB,QAAQ,OAAO;YACX,KAAK,GAAG;gBACJ,OAAO,GAAGwC,qBAAS,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC9G,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBACvC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC7C,OAAO,GAAG,KAAKA,qBAAS,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,CAAC;gBACjE,MAAM;YACN,KAAK,GAAG;gBACJ,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gBACnE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC/D,OAAO,GAAG,MAAM,CAAC;gBACrB,MAAM;YACN,KAAK,GAAG;gBACJ,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gBACvE,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnE,OAAO,GAAG,MAAM,CAAC;gBACrB,MAAM;YACN,KAAK,GAAG;gBACJ,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;gBACvE,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnE,OAAO,GAAG,MAAM,CAAC;gBACrB,MAAM;YACN,SAAS,OAAO,MAAM,CAAC;SAC1B;QAED,IAAI,aAAa,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,aAAa,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,WAAW,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,WAAW,GAAGA,sBAAU,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAEvD,MAAM,CAAC,KAAK,GAAG,IAAI,aAAa,IAAI,aAAa,IAAI,WAAW,IAAI,WAAW,IAAI,OAAO,GAAG,CAAC;QAC9F,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;CACJ;AA5gBD,4DA4gBC;;;;;;;;;;;;;AClzBD;IAII,YAAY,MAAuC;QAHlC,kBAAa,GAAGlC,qBAAS,CAAC,qBAAqB,CAAC;QAI7D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,AAEA,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS;aAC5C,MAAM,CAAC,UAAU,CAAC;aAClB,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;aACxD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAA;QACtC,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAEO,cAAc,CAAC,MAAc;QACjC,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC;aACnD,GAAG,CAAC,CAAC;YACF,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;YACvD,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/E,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE;gBAC5B,OAAO,IAAIwC,iBAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;aACpE;SACJ,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;aAC9B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;aAC3E,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;aAChE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,CAAC;KAChF;IAEO,uBAAuB,CAAC,MAAc,EAAE,GAAY;QACxD,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;YACZ,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;YACvD,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YACjF,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE;gBAC5B,OAAO,IAAIwC,iBAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;aACpE;SACJ,CAAC,CAAC;KACN;IAEO,gBAAgB,CAAC,MAAc;;QAEnC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC;aAEvD,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;aAE9D,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC,CAAC;KACvF;IAEO,kBAAkB,CAAC,MAAc,EAAE,MAAc;QACrD,OAAOxC,6BAAa,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC;aAC9C,GAAG,CAAC,CAAC,IAAI,IAAIwC,iBAAK,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;KACrD;CACJ;AA1DD,sDA0DC;AAiBD;IAII,YAAY,MAAoC;QAH7B,eAAU,GAAGlC,qBAAS,CAAC,qBAAqB,CAAC;QAI5D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,KAAK,CAAC,eAA8B,EAAE,aAAoB;QACtD,IAAI,CAAC,aAAa;YAAE,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/C,IAAI,WAAW,CAAC;QAChB,IAAI,eAAe,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE;YAC1C,IAAI,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAChD,IAAI,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAClE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACnE;YACD,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAACA,6BAAiB,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;gBAC9F,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAACA,6BAAiB,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;gBAC1F,WAAW,GAAG,WAAW,CAAC;aAC7B;SACJ;QACD,IAAI,MAAM,GAAG,IAAIF,6BAAmB,CAAC,eAAe,CAAC,CAAC;QACtD,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;QAC3B,MAAM,CAAC,QAAQ,GAAG,WAAW,GAAG,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;QACvD,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;QAE1B,OAAO,MAAM,CAAC;KACjB;IAEO,mBAAmB,CAAC,MAAc,EAAE,aAAmB;QAC3D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC;SACxD;QACD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;SACvD;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,qBAAqB,CAAC,MAAc,EAAE,aAAmB;QAC7D,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;;QAElC,IAAI,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;;QAErF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,aAAa,EAAE,GAAG,CAAC,CAAC;SACvF;;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC,CAAA;SAC/E;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,kBAAkB,CAAC,KAAa,EAAE,MAAc,EAAE,GAAW;QACjE,IAAI,MAAM,GAAG,IAAIoC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC1D,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAE1B,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;YAAE,OAAO,MAAM,CAAC;QAExD,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/E,MAAM,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACpE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;IAEO,oBAAoB,CAAC,MAAc;QACvC,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,SAAS,GAAG,MAAM,CAAC;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YAChB,IAAI,UAAU,GAAG,EAAE,CAAC;YACpB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAC5C,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACxE,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;YAC/E,IAAI,KAAK,EAAE;gBACP,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;gBACxC,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;aAC5C;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBACrC,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAC;gBACrF,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAElD,MAAM,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC/E,MAAM,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBACpE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;gBACtC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACtB,OAAO,MAAM,CAAC;aACjB;SACJ;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,4BAA4B,CAAC,MAAc;QAC/C,IAAI,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC/E,IAAI,KAAK,EAAE;YACP,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;YAC9C,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACvC,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aAChD;SACJ;QACD,OAAO,CAAC,CAAC;KACZ;IAEO,uBAAuB,CAAC,MAAc;QAC1C,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACvF,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAC1B,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;QAEnG,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACrC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAClD,IAAI,GAAG,GAAG,IAAI,KAAK,OAAO,KAAK,GAAG,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,GAAG,CAAC,EAAE;gBACzE,OAAO,MAAM,CAAC;aACjB;YAED,MAAM,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YAC/E,MAAM,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACpE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;YACtC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,WAAW,CAAC,MAAc;QAC9B,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC5E,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;SACjF;QACD,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;QAC1B,IAAI,GAAG,GAAGA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;QAC3E,GAAG,IAAI,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAE5B,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACrC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAElD,MAAM,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YAC/E,MAAM,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACpE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;YACtC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,MAAM,CAAC;KACjB;IAEO,sBAAsB,CAAC,MAAc;QACzC,IAAI,MAAM,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QACvF,IAAI,CAAC,KAAK;YAAE,OAAO,MAAM,CAAC;;QAG1B,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAE5B,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;QAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACrC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAClD,IAAI,GAAG,GAAG,IAAI,KAAK,OAAO,KAAK,GAAG,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,GAAG,CAAC,EAAE;gBACzE,OAAO,MAAM,CAAC;aACjB;YAED,MAAM,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YAC/E,MAAM,CAAC,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACpE,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;YACtC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACtB,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,MAAM,CAAC;KACjB;IAES,aAAa,CAAC,MAAc;QAClC,OAAO,CAAC,MAAM,KAAK,GAAG,MAAM,MAAM,KAAK,GAAG,CAAC,KAAK,MAAM,KAAK,GAAG,CAAC,CAAA;KAClE;CACJ;AAhMD,gDAgMC;;;;;;;;;;;;ACxRD;IAWI;QACI,IAAI,CAAC,QAAQ,GAAGA,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,oBAAoB,CAAC,CAAC;QACtF,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,8BAA8B,CAAC,CAAC;QAC1G,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,yBAAyB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,yBAAyB,CAAC,CAAA;QACvG,IAAI,CAAC,iBAAiB,GAAG,IAAIL,8CAAwB,EAAE,CAAC;KAC3D;CACJ;AAtBD,sFAsBC;AAED;IAcI,YAAY,MAA0C;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,YAAY,GAAGvC,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,oBAAoB,CAAC,CAAC;QACtF,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,8BAA8B,CAAC,CAAC;QAC1G,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,QAAQ,CAAC,CAAC;QAC9E,IAAI,CAAC,iBAAiB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC,CAAC;QAChF,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;KAC7C;CACJ;AA5BD,gFA4BC;;;;;;;;;;;ACpDD;IAgCI;QACI,IAAI,CAAC,aAAa,GAAG,iCAAiC,CAAC,aAAa,CAAC;QACrE,IAAI,CAAC,OAAO,GAAG,iCAAiC,CAAC,OAAO,CAAC;QACzD,IAAI,CAAC,QAAQ,GAAG,iCAAiC,CAAC,QAAQ,CAAC;KAC9D;;AAnCa,+CAAa,GAAa;;IAEpC5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;IAC9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;;IAE9D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC;CACtE,CAAC;AACY,yCAAO,GAAW5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC9E,iDAAe,GAAW5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;AAC9F,4CAAU,GAAW5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AACpF,gDAAc,GAAW5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;AAC5F,0CAAQ,GAAW5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AA1BlG,8EAqCC;AAED;IAUI,YAAY,MAA0C;QAClD,IAAI,CAAC,eAAe,GAAGA,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,OAAO,GAAG,iCAAiC,CAAC,OAAO,CAAC;QACzD,IAAI,CAAC,WAAW,GAAG,iCAAiC,CAAC,aAAa,CAAC;QACnE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,UAAU,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;KAC3D;IAEM,cAAc,CAAC,MAAc,EAAE,MAAsD;QACxF,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAEhD,IAAI,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAClC,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI,IAAI,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YACnF,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI,IAAI,aAAa,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;YAChD,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI;YACD,IAAI,KAAK,GAAG5C,6BAAa,CAAC,UAAU,CAAC,iCAAiC,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;YACvG,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;YAC/C,IAAI,MAAM,EAAE;gBACR,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;aAC1C;iBACI;gBACD,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;gBAC5D,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACvC;SACJ;QAED,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC9B,QAAQ,GAAG,CAAC,QAAQ,CAAC;SACxB;QAED,MAAM,CAAC,GAAG,IAAI,QAAQ,CAAC;QACvB,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,GAAG,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;SACpB;QACD,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;KACxB;IAEM,cAAc,CAAC,MAAc,EAAE,MAAsF;QACxH,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,iCAAiC,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QACxG,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,EAAE;YAC5F,IAAI,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;YAClD,IAAI,CAAC,SAAS,EAAE;gBACZ,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;gBAC1C,IAAI,KAAK,EAAE;oBACP,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE;wBACnB,SAAS,GAAG,CAAC,EAAE,CAAC;qBACnB;yBAAM;wBACH,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;qBACvB;iBACJ;gBAED,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;gBAC1C,IAAI,KAAK,EAAE;oBACP,IAAI,MAAM,CAAC,IAAI,GAAG,EAAE,EAAE;wBAClB,SAAS,GAAG,EAAE,CAAC;qBAClB;oBAED,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;;wBAE7D,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE;4BACxC,SAAS,GAAG,CAAC,CAAC;4BACd,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,EAAE;gCACpB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;6BACvB;iCAAM;gCACH,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;6BACvB;yBACJ;6BAAM;4BACH,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;yBACvB;qBACJ;yBAAM,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;;wBAEpE,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,EAAE;4BACxC,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,EAAE;gCACpB,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;6BACnB;4BACD,SAAS,GAAG,CAAC,CAAC;4BACd,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;yBACvB;6BAAM;4BACH,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;yBACvB;qBACJ;yBAAM;wBACH,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;qBACvB;iBACJ;aACJ;SACJ;QAED,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,IAAI,EAAE,CAAC;KAChD;CACJ;AAhHD,wEAgHC;;;;;;;;;;;;;;;AClJD;IAiBI;QACI,IAAI,CAAC,aAAa,GAAG;YACjBA,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;SAC9D,CAAC;QACF,IAAI,CAAC,gBAAgB,GAAG;YACpB5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,OAAO,CAAC;YACpD5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC;YAC5D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC;YACtD5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC;YAC1D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC;YAC1D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,kBAAkB,CAAC;YAC/D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,mBAAmB,CAAC;YAChE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC;SAC3D,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,OAAO,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,OAAO,CAAC,CAAC;QACpE,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,wBAAwB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,wBAAwB,CAAC,CAAC;QACtG,IAAI,CAAC,kBAAkB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,SAAS,GAAGA,+BAAe,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,gBAAgB,GAAG,IAAIL,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,YAAY,GAAG,IAAIA,sCAAgB,CAAC,IAAIA,sDAAgC,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,GAAG,IAAIM,kCAAqB,CAAC,IAAIC,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,oBAAoB,GAAG,IAAIC,qDAAmC,EAAE,CAAC;KACzE;CACJ;AAvDD,8EAuDC;AAED;IAmCI,YAAY,MAAgD;QACxD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG;YACb/C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;SAC9D,CAAC;QACF,IAAI,CAAC,OAAO,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,OAAO,CAAC,CAAC;QACpE,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAC5E,IAAI,CAAC,UAAU,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,mBAAmB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,mBAAmB,CAAC,CAAC;QAC5F,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,wBAAwB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,wBAAwB,CAAC,CAAC;QACtG,IAAI,CAAC,kBAAkB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,eAAe,GAAGA,+BAAe,CAAC,eAAe,CAAC;KAC1D;IAED,WAAW,CAAC,MAAc;QACtB,IAAI,WAAW,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC9C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,OAAO,GAAG5C,6BAAa,CAAC,UAAU,CAAC,8BAA8B,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAChG,IAAI,WAAW,KAAK,OAAO,EAAE;YACzB,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,WAAW,KAAK,UAAU,IAAI,WAAW,KAAK,KAAK,EAAE;YAC5D,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,WAAW,KAAK,WAAW,EAAE;YACpC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAI,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC;YACjD,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;YACvC,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,WAAW,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;YACrD,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAI,OAAO,CAAC,MAAM,EAAE;YACvB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SACjC;QACD,OAAO,KAAK,CAAC;KAChB;IAED,aAAa,CAAC,MAAc;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KAChC;IAED,QAAQ,CAAC,MAAc;QACnB,IAAI,WAAW,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC9C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,iBAAiB,GAAGA,6BAAa,CAAC,UAAU,CAAC,8BAA8B,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAC9G,IAAI,iBAAiB,GAAGA,6BAAa,CAAC,UAAU,CAAC,8BAA8B,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAC9G,IAAI,iBAAiB,CAAC,MAAM,EAAE;YAC1B,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,iBAAiB,CAAC,MAAM,EAAE;YACjC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QACD,OAAO,KAAK,CAAC;KAChB;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,WAAW,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC9C,OAAO,WAAW,KAAK,MAAM,CAAC;KACjC;;;;;AArFe,+CAAgB,GAAGA,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;AACjF,8CAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;AAC/E,8CAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;AAjCnG,wEAqHC;;;;;;;;;;;;;;;;;;AC3KD;IAiBI;QACI,IAAI,CAAC,kBAAkB,GAAG,IAAII,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,kBAAkB,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,iBAAiB,GAAG,IAAIN,kCAAqB,CAAC,IAAIC,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,WAAW,GAAG9C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,qBAAqB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,2BAA2B,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,2BAA2B,CAAC,CAAC;QAC5G,IAAI,CAAC,UAAU,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAC9E,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,4BAA4B,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,4BAA4B,CAAC,CAAC;QAC9G,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAC5E,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,oBAAoB,GAAG,IAAIG,qDAAmC,EAAE,CAAC;KACzE;IAED,gBAAgB,CAAC,MAAc;QAC3B,QAAQ/C,6BAAa,CAAC,kBAAkB,CAAC,MAAM,CAAC;eACjCA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC;eAChEA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;KAC9E;CACZ;AAxCD,sFAwCC;AAGD;IAuBI,YAAY,MAA0C;QAClD,IAAI,CAAC,eAAe,GAAG4C,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,eAAe,GAAGA,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,2BAA2B,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,2BAA2B,CAAC,CAAC;QAC5G,IAAI,CAAC,4BAA4B,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,4BAA4B,CAAC,CAAC;QAC9G,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;KAC3D;IAEM,OAAO,CAAC,IAAY,EAAE,IAAY;QACrC,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,IAAI,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE;YAC/C,MAAM,IAAI,EAAE,CAAC;SAChB;aACI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE;YACpD,MAAM,IAAI,EAAE,CAAC;SAChB;QACD,OAAO,MAAM,CAAC;KACjB;IAEM,kBAAkB,CAAC,IAAY;QAClC,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,KAAa,CAAC;QAClB,IAAI,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC7B,KAAK,GAAG,aAAa,CAAC;SACzB;aACI,IAAI,WAAW,KAAK,UAAU,IAAI,WAAW,KAAK,YAAY,EAAE;YACjE,KAAK,GAAG,UAAU,CAAC;SACtB;aACI,IAAI,WAAW,KAAK,qBAAqB,IAAI,WAAW,KAAK,MAAM,EAAE;YACtE,KAAK,GAAG,YAAY,CAAC;SACxB;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;SAC3C;QACD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;KAC1C;IAEM,WAAW,CAAC,IAAY;QAC3B,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAChC,KAAK,GAAG,CAAC,CAAC;SACb;aACI,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACrC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QACD,OAAO,KAAK,CAAC;KAChB;IAEM,kBAAkB,CAAC,IAAY,EAAE,WAAmB,IAAa,OAAO,KAAK,CAAC,EAAE;CAC1F;AA3FD,gFA2FC;;;;;;;;;;;;;AC3ID;IAMI;QACI,IAAI,CAAC,gBAAgB,GAAG;YACpB5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,iBAAiB,EAAE,KAAK,CAAC;SACxE,CAAC;QACF,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,mBAAmB,GAAG,IAAIM,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;KAC7F;IAEM,iBAAiB,CAAC,MAAc;QACnC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACzB,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACnC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;SAC1C;QACD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;KAC3C;IAEM,oBAAoB,CAAC,MAAc;QACtC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC5B,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACtC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;SAC1C;QACD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;KAC3C;IAEM,iBAAiB,CAAC,MAAc;QACnC,OAAO,MAAM,KAAK,KAAK,CAAC;KAC3B;CACJ;AArCD,0FAqCC;AAED;IASI,YAAY,MAA0C;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,qBAAqB,GAAGnD,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QACxF,IAAI,CAAC,yBAAyB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,iBAAiB,CAAC,CAAC;QAChG,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;KAC3D;IAED,oBAAoB,CAAC,IAAY;QAG7B,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC3B,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAClE;QACD,IAAI,MAAM,GAAG;YACT,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,EAAE;YACT,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC;YACV,MAAM,EAAE,CAAC;SACZ,CAAC;QACF,IAAI,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YACjC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC;YACrB,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;SACvB;aACI,IAAI,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YACxC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;YACtB,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;SACvB;aACI,IAAI,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YACtC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;YACtB,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;SACvB;aACI,IAAI,WAAW,KAAK,SAAS,EAAE;YAChC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC;YACrB,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;SACvB;aACI,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACpC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;YACtB,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;YACpB,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;SACtB;aACI;YACD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;YACpB,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,OAAO,MAAM,CAAC;SACjB;QAED,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,OAAO,MAAM,CAAC;KACjB;CACJ;AApED,oFAoEC;;;;;;;;;;;;;;;;ACzGD;IAiBI;QACI,IAAI,CAAC,kBAAkB,GAAG;YACtB5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC;YAC7D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC;YACzD5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,kBAAkB,CAAC;YAC/D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC;YAC1D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC;YAC7D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC;YACtD5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC;YAC7D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC;YAC5D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC;YACnE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,0BAA0B,CAAC;YACvE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC;YACzD5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,qBAAqB,CAAC;YAClE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC;YACxD5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC;YAC3D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC;YAC5D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,qBAAqB,CAAC;YAClE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,yBAAyB,CAAC;SACzE,CAAC;QACF,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QAClF,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,0BAA0B,CAAC,CAAC;QACtG,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QAC9E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QAChF,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,kBAAkB,GAAG,IAAII,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,gBAAgB,GAAG,IAAIV,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,IAAIM,kCAAqB,CAAC,IAAIC,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG9C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,mBAAmB,CAAC,CAAC;KAC/F;IAED,iBAAiB,CAAC,MAAc;QAC5B,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QAC3C,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACzB,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;KACjB;;IAED,oBAAoB,CAAC,MAAc;QAC/B,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QAC3C,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC5B,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;KACjB;;IAED,iBAAiB,CAAC,MAAc;QAC5B,IAAI,KAAK,GAAG5C,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;QAC7E,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,CAAC;KAClD;;CACJ;AA3ED,0FA2EC;AAED;IAqCI,YAAY,MAAgD;QACxD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,sBAAsB,GAAGA,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,0BAA0B,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,0BAA0B,CAAC,CAAC;QAC1G,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,kBAAkB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QAC9E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;QACrE,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,qBAAqB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,qBAAqB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,yBAAyB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,yBAAyB,CAAC,CAAC;QACxG,IAAI,CAAC,eAAe,GAAGA,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;KACjC;IAED,kBAAkB,CAAC,MAAc;QAC7B,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI5C,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1E,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACjF,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QACD,OAAO,KAAK,CAAC;KAChB;IAED,YAAY,CAAC,MAAc;QACvB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QAChB,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1E,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACjF,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACjF,KAAK,GAAG,CAAC,CAAC;SACb;QACD,OAAO,KAAK,CAAC;KAChB;IAED,QAAQ,CAAC,MAAc;QACnB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,QAAQ,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;KACjF;IAED,YAAY,CAAC,MAAc;QACvB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,aAAa,KAAK,cAAc,CAAC;KAC3C;IAED,aAAa,CAAC,MAAc;QACxB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,aAAa,KAAK,eAAe,CAAC;KAC5C;IAED,UAAU,CAAC,MAAc;QACrB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzC;IAED,SAAS,CAAC,MAAc;QACpB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;KAC5C;IAED,WAAW,CAAC,MAAc;QACtB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;KAC1C;IAED,UAAU,CAAC,MAAc;QACrB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzC;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,aAAa,KAAK,MAAM,CAAC;KACnC;CACJ;AA1ID,oFA0IC;;;;;;;;;;;;;;;;;;;;;;AChND;IAwBI;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAIuC,8CAAwB,EAAE,CAAC;QACxD,IAAI,CAAC,mBAAmB,GAAG,IAAIS,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,mBAAmB,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,uBAAuB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,2DAAqC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,iBAAiB,GAAG,IAAIP,kCAAqB,CAAC,IAAIC,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAIO,sCAAuB,CAAC,IAAIC,+DAAuC,EAAE,CAAC,CAAA;QACrG,IAAI,CAAC,kBAAkB,GAAG;YACtBtD,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC;YAC1D5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,iBAAiB,CAAC;SACjE,CAAA;QACD,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,4BAA4B,CAAC,CAAC;QACxG,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,oBAAoB,CAAC,CAAC;QACxF,IAAI,CAAC,4BAA4B,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,4BAA4B,CAAC,CAAC;QAC9G,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QAClF,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,0BAA0B,CAAC,CAAC;QACtG,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,mBAAmB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,mBAAmB,CAAC,CAAC;QAC5F,IAAI,CAAC,qBAAqB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,mBAAmB,CAAC,CAAC;QAC5F,IAAI,CAAC,kBAAkB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;KACzF;IAED,iBAAiB,CAAC,MAAc;QAC5B,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QAC3C,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACzB,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;KACjB;;IAED,oBAAoB,CAAC,MAAc;QAC/B,IAAI,MAAM,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;QAC3C,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC5B,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;KACjB;;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAO5C,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAChF;;CACJ;AAzED,kGAyEC;AAED;IA0BI,YAAY,MAAgD;QACxD,IAAI,CAAC,qBAAqB,GAAGA,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QACxF,IAAI,CAAC,yBAAyB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,iBAAiB,CAAC,CAAC;QAChG,IAAI,CAAC,4BAA4B,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,4BAA4B,CAAC,CAAC;QAC9G,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,SAAS,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QAC9E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QAChF,IAAI,CAAC,qBAAqB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,oBAAoB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,oBAAoB,CAAC,CAAC;QAC9F,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,oBAAoB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,oBAAoB,CAAC,CAAC;QAC9F,IAAI,CAAC,kBAAkB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,mBAAmB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,mBAAmB,CAAC,CAAC;KAC/F;IAED,mBAAmB,CAAC,MAAc;QAC9B,IAAI,OAAe,CAAC;QACpB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,IAAI5C,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACxE,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,GAAG,IAAI,CAAC;SAClB;aAAM,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACjF,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,GAAG,IAAI,CAAC;SAClB;aAAM,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/E,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;YACb,OAAO,GAAG,IAAI,CAAC;SAClB;aAAM,IAAIA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7E,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,GAAG,EAAE,CAAC;YACZ,OAAO,GAAG,IAAI,CAAC;SAClB;QACD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;KACzG;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC;aACpC,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QAC/C,OAAO,KAAK,CAAC;KAChB;CACJ;AA1FD,4FA0FC;;;;;;;;;;;;;AClLD,uBAA+B,SAAQkD,uBAAc;IACjD,YAAY,aAAuC;QAC/C,KAAK,CAAC,aAAa,CAAC,CAAC;KACxB;IAED,aAAa,CAAC,IAAY,EAAE,aAAmB;QAC3C,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;YACtB,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;SACpD;QACD,OAAO,WAAW,CAAC;KACtB;;IAGO,QAAQ,CAAC,IAAY,EAAE,aAAmB;QAC9C,IAAI,GAAG,GAAG,IAAIV,oCAAwB,EAAE,CAAC;QACzC,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;QAE5C,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAACmD,mDAAiC,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAChG,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;YAChE,IAAI,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;YAC9C,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,OAAO,EAAE;gBACT,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;aACvC;YAED,GAAG,CAAC,KAAK,GAAG,GAAG,GAAGX,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC/C,GAAG,CAAC,WAAW;gBACX,GAAG,CAAC,SAAS;oBACb,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,EAAE,aAAa,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACzG,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;CACJ;AApCD,8CAoCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBD;IASI;QACI,IAAI,CAAC,UAAU,GAAGxC,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,QAAQ,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,gBAAgB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,cAAc,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;KACnF;CACJ;AAlBD,kFAkBC;AAED,8CAAsD,SAAQxC,qCAA2B;IACrF;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,oBAAoB,GAAG,IAAI,mCAAmC,EAAE,CAAC;QACtE,IAAI,CAAC,OAAO,GAAGwC,+BAAe,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,YAAY,GAAGA,+BAAe,CAAC,YAAY,CAAC;QACjD,IAAI,CAAC,SAAS,GAAGA,+BAAe,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAGA,+BAAe,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAGA,+BAAe,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAGA,+BAAe,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,OAAO,GAAGA,+BAAe,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,aAAa,GAAGA,+BAAe,CAAC,aAAa,CAAC;QACnD,IAAI,CAAC,iBAAiB,GAAG,IAAIL,8CAAwB,EAAE,CAAC;QACxD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,CAAiB,CAAC,GAAGG,yBAAY,CAAC,oBAAoB,EAAE,GAAGE,+BAAe,CAAC,UAAU,CAAC,CAAC,CAAC;QACjH,IAAI,CAAC,YAAY,GAAG,IAAIL,sCAAgB,CAAC,IAAIA,sDAAgC,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,aAAa,GAAG,IAAIS,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,IAAII,oCAAqB,CAAC,IAAIH,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,iBAAiB,GAAG,IAAIP,kCAAqB,CAAC,IAAIC,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAIU,sCAAuB,CAAC,IAAIC,+DAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,+DAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,uEAA2C,EAAE,CAAC,CAAC;QAClH,IAAI,CAAC,cAAc,GAAG,IAAId,+BAAkB,CAAC,IAAIC,wDAAkC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,UAAU,GAAG,IAAIE,uBAAc,CAAC,IAAIC,gDAA8B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,UAAU,GAAG,IAAI5C,2BAAiB,CAAC,IAAI8C,gDAA8B,CAAC,IAAI,CAAC,CAAC,CAAC;QAClF,IAAI,CAAC,cAAc,GAAG,IAAII,iCAAkB,CAAC,IAAIH,wDAAkC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,gBAAgB,GAAG,IAAII,mCAAoB,CAAC,IAAIC,4DAAoC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,gBAAgB,GAAG,IAAIJ,mCAAoB,CAAC,IAAIC,4DAAoC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,oBAAoB,GAAG,IAAII,2CAAwB,CAAC,IAAIC,oEAAwC,CAAC,IAAI,CAAC,CAAC,CAAC;KAChH;CACJ;AAhCD,4FAgCC;;;;;;;;;;;;;AC5CD;IAII,YAAY,MAAkC;QAH3B,kBAAa,GAAGrD,qBAAS,CAAC,gBAAgB,CAAA;QAIzD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,IAAI,aAAa,GAAG,OAAO,CAAC;QAE5B,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS;aAC5C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;aAClC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;aAClC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aACrD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;aAChD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;aACxE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;aACxE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;aAC5E,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;aAC9E,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;aAC9E,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC,CAAA;QACnF,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAES,aAAa,CAAC,MAAc;QAClC,IAAI,GAAG,GAAG,EAAE,CAAC;QACbxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;YACrE,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;SAC/D,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAES,aAAa,CAAC,MAAc;QAClC,IAAI,GAAG,GAAG,EAAE,CAAC;QACbxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;YACrE,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;SAC/D,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAES,iBAAiB,CAAC,MAAc,EAAE,OAAa;QACrD,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;YAC7D,IAAIxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC;gBAAE,OAAO;YAChF,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;YAC/E,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;aAC9D;SACJ,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAES,YAAY,CAAC,MAAc,EAAE,OAAa;QAChD,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;YACzD,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;YACnD,IAAIxC,6BAAa,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;gBAC9E,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;gBAC3C,IAAI,aAAa,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;gBACxF,IAAI,aAAa,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC3C,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAA;iBACpE;aACJ;iBAAM;gBACH,IAAI,YAAY,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;gBAChF,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzC,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;iBAC/E;aACJ;SACJ,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;IAEO,SAAS,CAAC,SAA6B,EAAE,MAAc,EAAE,OAAa;QAC1E,IAAI,GAAG,GAAG,EAAE,CAAC;QACbxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;YACpE,IAAI,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YAC9F,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;gBAChD,IAAI,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,EAAE;oBACjE,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;iBACtE;aACJ,CAAC,CAAC;SACN,CAAC,CAAC;QACHxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;YACvE,IAAI,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YAC9H,SAAS,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE;gBAChD,IAAI,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,EAAE;oBACzB,IAAI,MAAM,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC3B,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;wBAC5D,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;qBACjD;oBACD,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;iBACpD;aACJ,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;CACJ;AApGD,4CAoGC;AA4BD;IAII,YAAY,aAAsC;QAC9C,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;KAC/B;IAED,KAAK,CAAC,EAAiB,EAAE,aAAoB;QACzC,IAAI,CAAC,aAAa;YAAE,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/C,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,EAAE,CAAC,IAAI,KAAK,aAAa,CAAC,UAAU,EAAE;YACtC,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aAChE;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACjE;;;YAID,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aAC/H;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACvH;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACvH;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aACnH;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aAC3G;YAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBACtB,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;aAC3G;YAED,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAAClC,6BAAiB,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC;gBAC9E,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAACA,6BAAiB,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC;gBAE1E,KAAK,GAAG,WAAW,CAAC;aACvB;SACJ;QAED,IAAI,GAAG,GAAG,IAAIF,6BAAmB,CAAC,EAAE,CAAC,CAAC;QACtC,GAAG,CAAC,KAAK,GAAG,KAAK,EACjB,GAAG,CAAC,QAAQ,GAAG,KAAK,KAAK,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,EAChD,GAAG,CAAC,aAAa,GAAG,EAAE,CAAA;QAEtB,OAAO,GAAG,CAAC;KACd;IAES,iBAAiB,CAAC,IAAY,EAAE,OAAa;QACnD,IAAI,GAAG,GAAG,IAAIoC,oCAAwB,EAAE,CAAC;QACzC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC/D,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,EAAE;YACvE,OAAO,GAAG,CAAC;SACd;QAED,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;QACrD,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;QAC/E,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;YAC9D,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC;YACxB,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC;YACxD,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;IAES,aAAa,CAAC,IAAY;QAChC,IAAI,GAAG,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;;QAEzC,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACxE,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,oBAAoB,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAClE,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE;gBAC/B,OAAO,GAAG,CAAC;aACd;YAED,GAAG,CAAC,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC;YACvC,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC;YACtD,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YAEnB,OAAO,GAAG,CAAC;SACd;;QAGD,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACpE,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;YACrD,IAAI,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;YACjD,IAAI,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBACnD,IAAI,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;gBACtE,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE;oBAC9B,OAAO,GAAG,CAAC;iBACd;gBAED,IAAI,CAACA,6BAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE;oBAChE,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC3E;gBAED,GAAG,CAAC,KAAK,GAAG,mBAAmB,CAAC,KAAK,CAAC;gBACtC,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC;gBACtD,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBACnB,OAAO,GAAG,CAAC;aACd;SACJ;QAED,OAAO,GAAG,CAAC;KACd;IAES,kBAAkB,CAAC,IAAY,EAAE,OAAa;QACpD,IAAI,GAAG,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QACzC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3D,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YAClB,OAAO,GAAG,CAAC;SACd;QAED,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC7C,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QAC3E,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;YAC1D,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC;YACxB,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC;YACtD,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;IAES,SAAS,CAAC,SAA6B,EAAE,MAAuB,EAAE,IAAY,EAAE,OAAa;QACnG,IAAI,GAAG,GAAG,IAAIwC,oCAAwB,EAAE,CAAC;QACzC,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,IAAI,EAAmB,CAAC;QACxB,IAAI,KAAK,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;QAC3E,IAAI,KAAK,EAAE;YACP,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YACxF,EAAE,GAAG,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAC7C,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;gBACxD,OAAO,GAAG,IAAI,CAAC;aAClB;SACJ;QACD,KAAK,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;QAC1E,IAAI,KAAK,EAAE;YACP,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YACxH,EAAE,GAAG,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAC7C,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;gBACxD,OAAO,GAAG,IAAI,CAAC;aAClB;SACJ;QACD,IAAI,OAAO,EAAE;YACT,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC;YACxB,GAAG,CAAC,WAAW,GAAG,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC;YACxC,GAAG,CAAC,SAAS,GAAG,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC;YACtC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QACD,OAAO,GAAG,CAAC;KACd;;AA9KsB,wBAAU,GAAGM,qBAAS,CAAC,gBAAgB,CAAC;AADnE,sCAgLC;;;;;;;;;;;;;;ACnUD;IAII,YAAY,MAAsC;QAHjC,kBAAa,GAAGA,qBAAS,CAAC,iBAAiB,CAAA;QAIxD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED,OAAO,CAAC,MAAc,EAAE,OAAa;QACjC,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;QACnC,AAEA,IAAI,MAAM,GAAiB,IAAI,KAAK,EAAS;aACxC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAA;QACtC,IAAI,MAAM,GAAGkC,iBAAK,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC;KACjB;IAEO,YAAY,CAAC,MAAc;QAC/B,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK;YACpCxC,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK;gBACjD,GAAG,CAAC,IAAI,CAAC,IAAIwC,iBAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;aAC/D,CAAC,CAAC;SACN,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACd;CACJ;AA3BD,oDA2BC;AAWD;IAII,YAAY,MAAmC;QAC3C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAEM,KAAK,CAAC,EAAiB,EAAE,aAAmB;QAC/C,IAAI,CAAC,aAAa;YAAE,aAAa,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/C,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,EAAE,CAAC,IAAI,KAAK,iBAAiB,CAAC,UAAU,EAAE;YAC1C,IAAI,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAEtE,IAAI,WAAW,CAAC,OAAO,EAAE;gBACrB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAClC,WAAW,CAAC,gBAAgB,CAAClC,6BAAiB,CAAC,IAAI,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;gBACtG,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,WAAW,CAAC,cAAc,CAAClC,6BAAiB,CAAC,IAAI,CAAC,GAAGkC,sBAAU,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAClG,KAAK,GAAG,WAAW,CAAC;aACvB;SACJ;QAED,IAAI,GAAG,GAAG,IAAIpC,6BAAmB,CAAC,EAAE,CAAC,CAAC;QACtC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;QAClB,GAAG,CAAC,QAAQ,GAAG,KAAK,KAAK,IAAI,GAAG,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;QACjD,GAAG,CAAC,aAAa,GAAG,EAAE,CAAC;QAEvB,OAAO,GAAG,CAAC;KACd;IAES,sBAAsB,CAAC,IAAY,EAAE,aAAmB;QAC9D,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAC9B,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC5C,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,OAAO,GAAGJ,6BAAa,CAAC,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC3D,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;;gBAE3F,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;gBACrD,OAAO,GAAG,CAAC;aACd;SACJ;QACD,OAAO,IAAIwC,oCAAwB,EAAE,CAAC;KACzC;IAES,UAAU,CAAC,KAAY,EAAE,aAAmB;QAClD,IAAI,GAAG,GAAG,IAAIA,oCAAwB,EAAE,CAAC;QACzC,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;;QAG/F,IAAI,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QACvD,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QACzD,IAAI,IAAY,CAAC;QACjB,IAAI,OAAO,GAAG,KAAK,CAAC;QAEpB,IAAI,OAAO,EAAE;YACT,IAAI,GAAG,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC7B,OAAO,GAAG,IAAI,CAAC;SAClB;aACI,IAAI,QAAQ,EAAE;YACf,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBACZ,OAAO,GAAG,CAAC;aACd;YACD,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC;YAC3C,OAAO,GAAG,IAAI,CAAC;SAClB;aACI;YACD,IAAI,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;SACtC;QAED,IAAI,UAAkB,CAAC;QACvB,KAAK,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE;YAChD,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;gBACnE,MAAM;aACT;SACJ;QAED,IAAI,UAAU,EAAE;YACZ,IAAI,QAAgB,CAAC;YACrB,IAAI,KAAK,GAAG,aAAa,CAAC;YAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC7D,IAAI,IAAI,EAAE;gBACN,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;gBACnB,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,+BAA+B,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBACvE,IAAI,CAAC,QAAQ,EAAE;oBACX,QAAQ,GAAG,IAAIA,sBAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,IAAIA,sBAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;iBAC5G;aACJ;iBACI;gBACD,OAAO,GAAG,CAAC;aACd;YAED,IAAI,KAAK,CAAC,OAAO,EAAE,KAAKA,qBAAS,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE;gBACpD,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,WAAW,GAAGA,qBAAS,CAAC,QAAQ,EAAE,CAAC;gBACvC,GAAG,CAAC,SAAS,GAAGA,qBAAS,CAAC,QAAQ,EAAE,CAAC;gBACrC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBACnB,OAAO,GAAG,CAAC;aACd;YAED,IAAI,OAAO,EAAE;gBACT,GAAG,CAAC,KAAK,GAAGA,sBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC;gBACpD,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACpF,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;gBACnB,OAAO,GAAG,CAAC;aACd;YAED,GAAG,CAAC,KAAK,GAAG,MAAM,GAAG,QAAQ,CAAC;YAC9B,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;YACxE,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;YACpE,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YAEnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;IAEO,cAAc,CAAC,KAAW,EAAE,aAAmB,EAAE,OAAe;QACpE,IAAI,KAAK,GAAG,aAAa,EAAE;YACvB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,IAAI,EAAE;gBACN,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;aACxC;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;IAEO,YAAY,CAAC,KAAW,EAAE,aAAmB,EAAE,OAAe;QAClE,IAAI,KAAK,IAAI,aAAa,EAAE;YACxB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,IAAI,EAAE;gBACN,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;aACxC;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;;AAzIsB,4BAAU,GAAGlC,qBAAS,CAAC,iBAAiB,CAAC;AADpE,8CA2IC;AAED;IAQI;QACI,IAAI,CAAC,+BAA+B,GAAGoC,yBAAY,CAAC,+BAA+B,CAAC;QACpF,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACxD;;IAGS,gBAAgB;QACtB,OAAO,IAAI,GAAG,CACV;YACI,CAAC,SAAS,EAAE,8BAA8B,CAAC,UAAU,CAAC;YACtD,CAAC,SAAS,EAAE,8BAA8B,CAAC,UAAU,CAAC;YACtD,CAAC,iBAAiB,EAAE,8BAA8B,CAAC,eAAe,CAAC;YACnE,CAAC,cAAc,EAAE,8BAA8B,CAAC,eAAe,CAAC;YAChE,CAAC,kBAAkB,EAAE,8BAA8B,CAAC,mBAAmB,CAAC;YACxE,CAAC,qBAAqB,EAAE,8BAA8B,CAAC,mBAAmB,CAAC;YAC3E,CAAC,UAAU,EAAE,8BAA8B,CAAC,WAAW,CAAC;YACxD,CAAC,QAAQ,EAAE,8BAA8B,CAAC,SAAS,CAAC;YACpD,CAAC,UAAU,EAAE,8BAA8B,CAAC,WAAW,CAAC;YACxD,CAAC,UAAU,EAAE,8BAA8B,CAAC,WAAW,CAAC;SAC3D,CAAC,CAAC;KACV;;;IAIS,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEF,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAEhJ,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAElJ,OAAO,mBAAmB,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAEzJ,OAAO,mBAAmB,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAEzJ,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAE/I,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,8BAA8B,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAElJ,OAAO,SAAS,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAE/I,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,EAAEA,qBAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAEnJ,OAAO,eAAe,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,8BAA8B,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,EAAEA,qBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;IAEzJ,OAAO,MAAM,CAAC,IAAY,EAAE,KAAa,EAAE,IAAY,EAAE,SAAoB;QACnF,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAA,EAAE,CAAC,CAAC;QAClH,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG;YAC5B,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;SAC5D,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;KACrB;IAES,OAAO,UAAU,CAAC,IAAY,EAAE,KAAa,EAAE,SAAoB;QACzE,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAA,EAAE,CAAC,CAAC;QAClH,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG;YAC5B,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,SAAS,CAAC;SAC5D,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAChC;CACJ;AAjED,wEAiEC;;;;;;;;;;;;;;;;;;;;;;;;;AC5OD;IAiBI;QACI,IAAI,CAAC,iBAAiB,GAAG,IAAIK,kCAAqB,CAAC,IAAIC,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,aAAa,GAAG,IAAII,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG,IAAIH,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,IAAIP,oCAAqB,CAAC,IAAIU,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAII,sCAAuB,CAAC,IAAIC,+DAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,+DAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,uEAA2C,EAAE,CAAC,CAAC;QAClH,IAAI,CAAC,SAAS,GAAG3D,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAA;QAC1E,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAA;QACnF,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAA;QAC/E,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAA;QAC/E,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAA;QAC7E,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAA;QACnF,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAA;QAC7E,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;KAClC;CACJ;AAlCD,4EAkCC;AAED;IAuBI,YAAY,MAA0C;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;QAE9D,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE9B,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,eAAe,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,YAAY,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,YAAY,CAAC,CAAC;KACjF;IAEM,oBAAoB,CAAC,IAAY;QACpC,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,WAAW,KAAK,OAAO,EAAE;YACzB,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,WAAW,KAAK,QAAQ,EAAE;YAC/B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,WAAW,KAAK,UAAU,EAAE;YACjC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,WAAW,KAAK,SAAS,EAAE;YAChC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,WAAW,KAAK,QAAQ,IAAI,WAAW,KAAK,UAAU,IAAI,WAAW,KAAK,QAAQ,EAAE;YACzF,KAAK,GAAG,KAAK,CAAC;SACjB;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;SAC3C;QACD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;KAC1C;IAEM,mBAAmB,CAAC,IAAY;QACnC,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,WAAW,KAAK,KAAK,EAAE;YACvB,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,WAAW,KAAK,MAAM,EAAE;YAC7B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,WAAW,KAAK,OAAO,EAAE;YAC9B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,WAAW,KAAK,MAAM,EAAE;YAC7B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;SAC3C;QAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;KAC1C;CACJ;AAhGD,sEAgGC;;;;;;;;;;;;;AClJD;IAGI;QACI,IAAI,CAAC,cAAc,GAAG;YACV5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;SACpE,CAAC;KACL;CACZ;AAVD,oFAUC;AAED,uCAA+C,SAAQgB,0CAA8B;IACjF;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,gBAAgB,GAAG;YACpB5D,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjE5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;SACpE,CAAC;QACF,IAAI,CAAC,YAAY,GAAGA,+BAAe,CAAC,YAAY,CAAC;QACjD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACxD;IAES,gBAAgB;QACtB,OAAO,IAAI,GAAG,CACV;YACI,GAAG,KAAK,CAAC,gBAAgB,EAAE;YAC3B,CAAC,cAAc,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC/D,CAAC,SAAS,EAAE,iCAAiC,CAAC,OAAO,CAAC;YACtD,CAAC,aAAa,EAAE,iCAAiC,CAAC,UAAU,CAAC;YAC7D,CAAC,WAAW,EAAE,iCAAiC,CAAC,UAAU,CAAC;YAC3D,CAAC,cAAc,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAChE,CAAC,UAAU,EAAE,iCAAiC,CAAC,QAAQ,CAAC;YACxD,CAAC,aAAa,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC9D,CAAC,WAAW,EAAE,iCAAiC,CAAC,SAAS,CAAC;YAC1D,CAAC,iBAAiB,EAAE,iCAAiC,CAAC,YAAY,CAAC;YACnE,CAAC,UAAU,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAC5D,CAAC,UAAU,EAAE,iCAAiC,CAAC,QAAQ,CAAC;YACxD,CAAC,eAAe,EAAE,iCAAiC,CAAC,aAAa,CAAC;YAClE,CAAC,UAAU,EAAE,iCAAiC,CAAC,aAAa,CAAC;YAC7D,CAAC,WAAW,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAC7D,CAAC,MAAM,EAAE,iCAAiC,CAAC,YAAY,CAAC;YACxD,CAAC,SAAS,EAAE,iCAAiC,CAAC,OAAO,CAAC;YACtD,CAAC,YAAY,EAAE,iCAAiC,CAAC,OAAO,CAAC;YACzD,CAAC,aAAa,EAAE,iCAAiC,CAAC,OAAO,CAAC;YAC1D,CAAC,iBAAiB,EAAE,iCAAiC,CAAC,eAAe,CAAC;YACtE,CAAC,eAAe,EAAE,iCAAiC,CAAC,YAAY,CAAC;YACjE,CAAC,eAAe,EAAE,iCAAiC,CAAC,aAAa,CAAC;YAClE,CAAC,cAAc,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAChE,CAAC,YAAY,EAAE,iCAAiC,CAAC,OAAO,CAAC;YACzD,CAAC,aAAa,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC9D,CAAC,QAAQ,EAAE,iCAAiC,CAAC,MAAM,CAAC;YACpD,CAAC,gBAAgB,EAAE,iCAAiC,CAAC,cAAc,CAAC;YACpE,CAAC,aAAa,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC9D,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,kBAAkB,CAAC;YAC3E,CAAC,iBAAiB,EAAE,iCAAiC,CAAC,kBAAkB,CAAC;YACzE,CAAC,aAAa,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC9D,CAAC,cAAc,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAChE,CAAC,cAAc,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAChE,CAAC,aAAa,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC9D,CAAC,cAAc,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAChE,CAAC,aAAa,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC9D,CAAC,cAAc,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAChE,CAAC,YAAY,EAAE,iCAAiC,CAAC,UAAU,CAAC;YAC5D,CAAC,WAAW,EAAE,iCAAiC,CAAC,SAAS,CAAC;SAC7D,CAAC,CAAC;KACV;;IAGO,OAAO,OAAO,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACvE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC5E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,aAAa,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,aAAa,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,OAAO,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACvE,OAAO,QAAQ,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACxE,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC7E,OAAO,SAAS,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACzE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC3E,OAAO,QAAQ,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACxE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC3E,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC5E,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC7E,OAAO,eAAe,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAChF,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC5E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC7E,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC5E,OAAO,MAAM,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACtE,OAAO,cAAc,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC9E,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC5E,OAAO,kBAAkB,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAClF,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC5E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC7E,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC5E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC7E,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC7E,OAAO,SAAS,CAAC,IAAY,IAAU,OAAOJ,qBAAS,CAAC,QAAQ,EAAE,CAAC,EAAE;IAEtE,YAAY,CAAC,IAAY;QAC5B,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC5C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QAChB,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAChC,KAAK,GAAG,CAAC,CAAC;SACb;aACI,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACrC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aACI,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YACrC,KAAK,GAAG,CAAC,CAAC;SACb;QACD,OAAO,KAAK,CAAC;KAChB;IAEM,oBAAoB,CAAC,OAAe;QACvC,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KACvC;CACJ;AA3GD,8EA2GC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGD;IAoBI;QACI,IAAI,CAAC,aAAa,GAAG,IAAIQ,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,mDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAII,sCAAuB,CAAC,IAAIC,+DAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,+DAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,uEAA2C,EAAE,CAAC,CAAC;QAClH,IAAI,CAAC,gBAAgB,GAAG,IAAIC,gCAAoB,CAAC,IAAIC,yDAAoC,EAAE,CAAC,CAAC;QAC7F,IAAI,CAAC,iBAAiB,GAAG,IAAIhB,kCAAqB,CAAC,IAAIC,2DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,YAAY,GAAG,IAAIgB,wBAAgB,CAAC,IAAIC,iDAAgC,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,gBAAgB,GAAG,IAAIxB,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,UAAU,GAAGvC,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,yBAAyB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,yBAAyB,CAAC,CAAC;QACxG,IAAI,CAAC,sBAAsB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,mBAAmB,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,mBAAmB,CAAC,CAAC;QAC5F,IAAI,CAAC,mBAAmB,GAAG;YACvB5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,aAAa,CAAC;SAC7D,CAAC;KACL;CACJ;AA1CD,kFA0CC;AAED;IAcI,YAAY,MAAgD;QACxD,IAAI,CAAC,WAAW,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,UAAU,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,GAAG5C,6BAAa,CAAC,aAAa,CAAC4C,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,aAAa,GAAG,IAAIgB,6BAAiB,CAAC,IAAIC,sDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,IAAIC,qBAAa,CAAC,IAAIC,8CAA6B,CAAC,MAAM,CAAC,CAAC,CAAC;KACjF;CACJ;AA5BD,4EA4BC;;;;;;;;;;;;;;;;;ACvFD,IAAiB,eAAe,CAyK/B;AAzKD,WAAiB,eAAe;IAClB,yBAAS,GAAG,iDAAiD,CAAC;IAC9D,wBAAQ,GAAG,6BAA6B,CAAC;IACzC,wBAAQ,GAAG,iIAAiI,CAAC;IAC7I,6BAAa,GAAG,oEAAoE,CAAC;IACrF,yBAAS,GAAG,gDAAgD,CAAC;IAC7D,6BAAa,GAAG,kCAAkC,CAAC;IACnD,kCAAkB,GAAG,oDAAoD,CAAC;IAC1E,0BAAU,GAAG,mKAAmK,CAAC;IACjL,gCAAgB,GAAG,oCAAoC,gBAAA,kBAAkB,IAAI,gBAAA,UAAU,IAAI,CAAC;IAC5F,6BAAa,GAAG,0DAA0D,CAAC;IAC3E,yBAAS,GAAG,2EAA2E,CAAC;IACxF,2BAAW,GAAG,kEAAkE,CAAC;IACjF,gCAAgB,GAAG,qCAAqC,gBAAA,QAAQ,QAAQ,gBAAA,SAAS,QAAQ,gBAAA,QAAQ,QAAQ,gBAAA,gBAAgB,oBAAoB,gBAAA,aAAa,OAAO,CAAC;IAClK,0CAA0B,GAAG,MAAM,gBAAA,gBAAgB,sCAAsC,gBAAA,QAAQ,QAAQ,gBAAA,SAAS,QAAQ,gBAAA,QAAQ,qBAAqB,gBAAA,aAAa,OAAO,CAAC;IAC5K,sCAAsB,GAAG,MAAM,gBAAA,gBAAgB,iCAAiC,gBAAA,QAAQ,QAAQ,gBAAA,QAAQ,QAAQ,gBAAA,QAAQ,qBAAqB,gBAAA,aAAa,OAAO,CAAC;IAClK,+BAAe,GAAG,gCAAgC,gBAAA,QAAQ,QAAQ,gBAAA,QAAQ,QAAQ,gBAAA,QAAQ,QAAQ,gBAAA,gBAAgB,oBAAoB,gBAAA,aAAa,OAAO,CAAC;IAC3J,kCAAkB,GAAG,2WAA2W,CAAC;IACjY,kCAAkB,GAAG,uPAAuP,gBAAA,aAAa,uDAAuD,CAAC;IACjV,qCAAqB,GAAG,IAAI,gBAAA,aAAa,YAAY,gBAAA,aAAa,MAAM,gBAAA,aAAa,SAAS,gBAAA,aAAa,GAAG,CAAC;IAC/G,gCAAgB,GAAG,mHAAmH,gBAAA,gBAAgB,GAAG,CAAC;IAC1J,+BAAe,GAAG,gIAAgI,gBAAA,aAAa,+CAA+C,CAAC;IAC/M,gCAAgB,GAAG,QAAQ,gBAAA,aAAa,EAAE,CAAC;IAC3C,0CAA0B,GAAG,4BAA4B,gBAAA,aAAa,EAAE,CAAC;IACzE,4BAAY,GAAG,6GAA6G,gBAAA,aAAa,mDAAmD,CAAC;IAC7L,qCAAqB,GAAG,IAAI,gBAAA,aAAa,4JAA4J,CAAC;IACtM,2BAAW,GAAG,kJAAkJ,gBAAA,aAAa,oDAAoD,CAAC;IAClO,8BAAc,GAAG,0CAA0C,CAAC;IAC5D,2BAAW,GAAG,4BAA4B,CAAC;IAC3C,4BAAY,GAAG,yBAAyB,CAAC;IACzC,8BAAc,GAAG,kDAAkD,CAAC;IACpE,gCAAgB,GAAG,YAAY,CAAC;IAChC,yBAAS,GAAG,4BAA4B,CAAC;IACzC,iCAAiB,GAAG,mBAAmB,CAAC;IACxC,4BAAY,GAAG,sBAAsB,CAAC;IACtC,4BAAY,GAAG,uGAAuG,CAAC;IACvH,uBAAO,GAAG,kBAAkB,gBAAA,QAAQ,QAAQ,CAAC;IAC7C,8BAAc,GAAG,6HAA6H,CAAC;IAC/I,yBAAS,GAAG,iBAAiB,gBAAA,YAAY,MAAM,gBAAA,YAAY,mCAAmC,CAAC;IAC/F,6BAAa,GAAG,sBAAsB,gBAAA,YAAY,MAAM,gBAAA,YAAY,0DAA0D,CAAC;IAC/H,6BAAa,GAAG,mCAAmC,gBAAA,YAAY,MAAM,gBAAA,YAAY,gEAAgE,CAAC;IAClJ,+BAAe,GAAG,6OAA6O,CAAC;IAChQ,2BAAW,GAAG,MAAM,CAAC;IACrB,wCAAwB,GAAG,MAAM,CAAC;IAClC,mCAAmB,GAAG,qGAAqG,gBAAA,YAAY,OAAO,gBAAA,gBAAgB,GAAG,CAAC;IAClK,mCAAmB,GAAG,MAAM,CAAC;IAC7B,gCAAgB,GAAG,yBAAyB,gBAAA,QAAQ,KAAK,CAAC;IAC1D,4BAAY,GAAG,cAAc,gBAAA,gBAAgB,EAAE,CAAC;IAChD,6BAAa,GAAG,IAAI,gBAAA,UAAU,iBAAiB,CAAC;IAChD,8BAAc,GAAG,OAAO,gBAAA,YAAY,qBAAqB,gBAAA,QAAQ,mCAAmC,gBAAA,UAAU,KAAK,CAAC;IACpH,8BAAc,GAAG,OAAO,gBAAA,YAAY,qBAAqB,gBAAA,QAAQ,yBAAyB,gBAAA,UAAU,8BAA8B,gBAAA,SAAS,KAAK,CAAC;IACjJ,8BAAc,GAAG,OAAO,gBAAA,YAAY,qBAAqB,gBAAA,QAAQ,wCAAwC,gBAAA,UAAU,oBAAoB,gBAAA,SAAS,OAAO,CAAC;IACxJ,8BAAc,GAAG,MAAM,gBAAA,aAAa,qBAAqB,gBAAA,QAAQ,qBAAqB,gBAAA,SAAS,EAAE,CAAC;IAClG,8BAAc,GAAG,MAAM,gBAAA,QAAQ,qBAAqB,gBAAA,aAAa,qBAAqB,gBAAA,SAAS,EAAE,CAAC;IAClG,8BAAc,GAAG,sBAAsB,gBAAA,aAAa,WAAW,gBAAA,QAAQ,KAAK,CAAC;IAC7E,8BAAc,GAAG,MAAM,gBAAA,aAAa,YAAY,gBAAA,QAAQ,+BAA+B,gBAAA,SAAS,OAAO,CAAC;IACxG,8BAAc,GAAG,sBAAsB,gBAAA,QAAQ,YAAY,gBAAA,aAAa,KAAK,CAAC;IAC9E,8BAAc,GAAG,MAAM,gBAAA,QAAQ,YAAY,gBAAA,aAAa,+BAA+B,gBAAA,SAAS,OAAO,CAAC;IACxG,+BAAe,GAAG,MAAM,gBAAA,SAAS,qBAAqB,gBAAA,aAAa,qBAAqB,gBAAA,QAAQ,EAAE,CAAC;IACnG,4BAAY,GAAG,uFAAuF,CAAC;IACvG,yBAAS,GAAG,wCAAwC,CAAC;IACrD,2BAAW,GAAG,yDAAyD,CAAC;IACxE,2BAAW,GAAG,8DAA8D,CAAC;IAC7E,6BAAa,GAAG,QAAQ,CAAC;IACzB,8BAAc,GAAG,2KAA2K,CAAC;IAC7L,mCAAmB,GAAG,gLAAgL,CAAC;IACvM,2BAAW,GAAG,wBAAwB,CAAC;IACvC,uBAAO,GAAG,+CAA+C,CAAC;IAC1D,uBAAO,GAAG,oDAAoD,CAAC;IAC/D,2BAAW,GAAG,yDAAyD,CAAC;IACxE,2BAAW,GAAG,oDAAoD,CAAC;IACnE,+BAAe,GAAG,kEAAkErB,yBAAY,CAAC,gBAAgB,mCAAmC,gBAAA,mBAAmB,mCAAmC,CAAC;IAC3M,6BAAa,GAAG,qDAAqD,CAAC;IACtE,4BAAY,GAAG,cAAc,gBAAA,YAAY,wBAAwB,gBAAA,cAAc,KAAK,gBAAA,aAAa,gBAAgB,gBAAA,cAAc,OAAO,CAAC;IACvI,0BAAU,GAAG,aAAa,gBAAA,eAAe,4EAA4E,CAAC;IACtH,0BAAU,GAAG,cAAc,gBAAA,eAAe,UAAU,gBAAA,OAAO,IAAI,gBAAA,OAAO,IAAI,gBAAA,WAAW,IAAI,CAAC;IAC1F,yBAAS,GAAG,gBAAgB,gBAAA,YAAY,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,IAAIA,yBAAY,CAAC,WAAW,KAAKA,yBAAY,CAAC,WAAW,MAAMA,yBAAY,CAAC,SAAS,GAAG,CAAC;IAC3K,uBAAO,GAAG,2BAA2B,gBAAA,YAAY,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,MAAM,CAAC;IAClG,+BAAe,GAAG,IAAIA,yBAAY,CAAC,SAAS,kMAAkM,gBAAA,SAAS,GAAG,CAAC;IAC3P,0BAAU,GAAG,OAAO,gBAAA,UAAU,UAAU,gBAAA,YAAY,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,SAAS,gBAAA,SAAS,GAAG,CAAC;IACpH,0BAAU,GAAG,OAAO,gBAAA,UAAU,aAAaA,yBAAY,CAAC,SAAS,kBAAkBA,yBAAY,CAAC,WAAW,mBAAmBA,yBAAY,CAAC,WAAW,WAAW,gBAAA,SAAS,QAAQ,CAAC;IACnL,0BAAU,GAAG,OAAO,gBAAA,UAAU,SAASA,yBAAY,CAAC,SAAS,MAAMA,yBAAY,CAAC,WAAW,QAAQ,gBAAA,SAAS,GAAG,CAAC;IAChH,0BAAU,GAAG,QAAQ,gBAAA,SAAS,OAAO,gBAAA,SAAS,MAAM,gBAAA,SAAS,OAAO,gBAAA,UAAU,SAAS,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,UAAU,gBAAA,aAAa,eAAe,gBAAA,cAAc,OAAO,gBAAA,WAAW,OAAO,CAAC;IAC3M,0BAAU,GAAG,OAAO,gBAAA,UAAU,IAAI,gBAAA,SAAS,GAAG,gBAAA,UAAU,aAAa,gBAAA,SAAS,KAAK,gBAAA,SAAS,QAAQ,gBAAA,UAAU,KAAK,CAAC;IACpH,0BAAU,GAAG,IAAI,gBAAA,SAAS,QAAQ,gBAAA,SAAS,SAAS,gBAAA,UAAU,MAAM,CAAC;IACrE,0BAAU,GAAG,MAAM,gBAAA,UAAU,mBAAmB,gBAAA,SAAS,SAAS,gBAAA,SAAS,QAAQ,CAAC;IACpF,0BAAU,GAAG,MAAM,gBAAA,UAAU,OAAO,gBAAA,SAAS,SAAS,gBAAA,SAAS,QAAQ,CAAC;IACxE,0BAAU,GAAG,iBAAiB,gBAAA,YAAY,QAAQ,gBAAA,aAAa,iBAAiB,gBAAA,cAAc,OAAO,CAAC;IACtG,2BAAW,GAAG,gEAAgE,CAAC;IAC/E,2BAAW,GAAG,OAAO,gBAAA,YAAY,KAAK,gBAAA,SAAS,OAAO,CAAC;IACvD,gCAAgB,GAAG,oDAAoD,CAAC;IACxE,wBAAQ,GAAG,8NAA8N,CAAC;IAC1O,2BAAW,GAAG,sFAAsF,CAAC;IACrG,8BAAc,GAAG,+FAA+F,CAAC;IACjH,sCAAsB,GAAG,qEAAqE,gBAAA,cAAc,OAAO,CAAC;IACpH,qCAAqB,GAAG,gCAAgC,gBAAA,sBAAsB,EAAE,CAAC;IACjF,sCAAsB,GAAG,IAAI,gBAAA,sBAAsB,wCAAwC,CAAC;IAC5F,2CAA2B,GAAG,IAAI,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,mCAAmC,gBAAA,sBAAsB,EAAE,CAAC;IACpI,4CAA4B,GAAG,IAAI,gBAAA,sBAAsB,qCAAqC,gBAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,IAAI,CAAC;IACzI,6BAAa,GAAG,2EAA2E,CAAC;IAC5F,yBAAS,GAAG,uIAAuI,CAAC;IACpJ,8BAAc,GAAG,mDAAmD,CAAC;IACrE,gCAAgB,GAAG,qMAAqM,CAAC;IACzN,6BAAa,GAAG,kCAAkCA,yBAAY,CAAC,SAAS,IAAI,gBAAA,gBAAgB,qBAAqB,gBAAA,SAAS,UAAU,gBAAA,SAAS,QAAQA,yBAAY,CAAC,SAAS,IAAI,gBAAA,gBAAgB,qBAAqB,gBAAA,OAAO,IAAI,gBAAA,OAAO,IAAI,gBAAA,SAAS,IAAI,CAAC;IACxP,iCAAiB,GAAG,4BAA4BA,yBAAY,CAAC,SAAS,IAAI,gBAAA,gBAAgB,qBAAqB,gBAAA,SAAS,6BAA6BA,yBAAY,CAAC,SAAS,IAAI,gBAAA,gBAAgB,qBAAqB,gBAAA,OAAO,IAAI,gBAAA,OAAO,IAAI,gBAAA,SAAS,IAAI,CAAC;IACxP,6BAAa,GAAG,4EAA4E,CAAC;IAC7F,gCAAgB,GAAG,QAAQ,gBAAA,aAAa,EAAE,CAAC;IAC3C,0CAA0B,GAAG,gCAAgC,gBAAA,aAAa,EAAE,CAAC;IAC7E,oDAAoC,GAAG,gCAAgC,gBAAA,aAAa,EAAE,CAAC;IACvF,4CAA4B,GAAG,6HAA6H,CAAC;IAC7J,qCAAqB,GAAG,IAAI,gBAAA,SAAS,IAAI,gBAAA,WAAW,QAAQ,gBAAA,SAAS,EAAE,CAAC;IACxE,8BAAc,GAAG,sEAAsE,CAAC;IACxF,4BAAY,GAAG,QAAQ,gBAAA,SAAS,EAAE,CAAC;IACnC,8CAA8B,GAAG,4BAA4B,gBAAA,SAAS,EAAE,CAAC;IACzE,2BAAW,GAAG,kBAAkB,gBAAA,SAAS,EAAE,CAAC;IAC5C,wBAAQ,GAAG,qEAAqE,CAAC;IACjF,yBAAS,GAAG,gEAAgE,CAAC;IAC7E,kCAAkB,GAAG,gCAAgC,CAAC;IACtD,sCAAsB,GAAG,kCAAkC,gBAAA,SAAS,EAAE,CAAC;IACvE,6BAAa,GAAG,2VAA2V,gBAAA,aAAa,mEAAmE,CAAC;IAC5b,6BAAa,GAAG,0LAA0L,gBAAA,aAAa,mEAAmE,CAAC;IAC3R,6BAAa,GAAG,6JAA6J,gBAAA,aAAa,mEAAmE,CAAC;IAC9P,2BAAW,GAAG,+BAA+B,CAAC;IAC9C,0BAAU,GAAG,iCAAiC,CAAC;IAC/C,0BAAU,GAAG,yBAAyB,CAAC;IACvC,6BAAa,GAAG,gGAAgG,CAAC;IACjH,8BAAc,GAAG,4BAA4B,CAAC;IAC9C,6BAAa,GAAG,YAAY,gBAAA,cAAc,QAAQ,gBAAA,SAAS,GAAG,CAAC;IAC/D,+BAAe,GAAG,YAAY,gBAAA,cAAc,SAAS,CAAC;IACtD,4BAAY,GAAG,QAAQ,gBAAA,cAAc,qBAAqB,CAAC;IAC3D,kCAAkB,GAAG,IAAI,gBAAA,cAAc,qCAAqC,CAAC;IAC7E,4BAAY,GAAG,YAAY,gBAAA,cAAc,QAAQ,CAAC;IAClD,qCAAqB,GAAG,MAAM,CAAC;IAC/B,yCAAyB,GAAG,MAAM,CAAC;IACnC,kCAAkB,GAAG,MAAM,CAAC;IAC5B,gCAAgB,GAAG,MAAM,CAAC;IAC1B,kCAAkB,GAAG,QAAQ,CAAC;IAC9B,wBAAQ,GAAG,eAAe,CAAC;IAC3B,0BAAU,GAAG,gCAAgC,CAAC;IAC9C,wBAAQ,GAAG,QAAQ,CAAC;IACpB,uBAAO,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/Y,4BAAY,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC,CAAC,KAAK,EAAE,OAAO,CAAC,EAAC,CAAC,SAAS,EAAE,MAAM,CAAC,EAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACza,yBAAS,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,EAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAC,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5I,8BAAc,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAClH,2BAAW,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxX,yBAAS,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACjQ,2BAAW,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACtmB,uBAAO,GAAgC,IAAI,GAAG,CAAicAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5vB,4BAAY,GAAkC,IAAI,GAAG,CAAmB,CAAC,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,iBAAiB,EAAE,CAAC,cAAc,EAAC,sBAAsB,EAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,aAAa,EAAC,2BAA2B,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,cAAc,EAAC,SAAS,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,SAAS,EAAC,cAAc,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,iBAAiB,EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,EAAC,eAAe,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,YAAY,EAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,eAAe,CAAC,CAAC,EAAC,CAAC,gBAAgB,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACnsB,+CAA+B,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,QAAQ,EAAE,aAAa,CAAC,EAAC,CAAC,QAAQ,EAAE,aAAa,CAAC,EAAC,CAAC,iBAAiB,EAAE,aAAa,CAAC,EAAC,CAAC,YAAY,EAAE,aAAa,CAAC,EAAC,CAAC,UAAU,EAAE,aAAa,CAAC,EAAC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;IACtQ,6BAAa,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxG,+BAAe,GAAG,KAAK,CAAC;IACxB,+BAAe,GAAG,QAAQ,CAAC;IAC3B,+BAAe,GAAG,KAAK,CAAC;IACxB,+BAAe,GAAG,KAAK,CAAC;IACxB,+BAAe,GAAG,8BAA8B,CAAC;IACjD,+BAAe,GAAG,mBAAmB,CAAC;IACtC,+BAAe,GAAG,cAAc,CAAC;IACjC,gCAAgB,GAAG,QAAQ,CAAC;IAC5B,+BAAe,GAAG,QAAQ,CAAC;IAC3B,yCAAyB,GAAG,QAAQ,CAAC;IACrC,2BAAW,GAAG,sBAAsB,CAAC;IACrC,yCAAyB,GAAG,yBAAyB,CAAC;IACtD,sCAAsB,GAAG,+BAA+B,CAAC;IACzD,mCAAmB,GAAG,QAAQ,CAAC;IAC/B,+BAAe,GAAG,QAAQ,CAAC;IAC3B,0BAAU,GAAG,0BAA0B,CAAC;IACxC,iCAAiB,GAAG,QAAQ,CAAC;IAC7B,sCAAsB,GAAG,MAAM,CAAC;CAC7C,EAzKgB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAyK/B;;;;;;;;;;;;AC5KD;IAWI;QACI,IAAI,CAAC,QAAQ,GAAG1C,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7E,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACjH,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACzG,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,yBAAyB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAC/G,IAAI,CAAC,iBAAiB,GAAG,IAAIzB,8CAAwB,EAAE,CAAC;KAC3D;CACJ;AAtBD,sFAsBC;AAED;IAcI,YAAY,MAA0C;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,YAAY,GAAGvC,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,8BAA8B,CAAC,CAAC;QAC1G,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,gBAAgB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,QAAQ,CAAC,CAAC;QAC9E,IAAI,CAAC,iBAAiB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QAChF,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;KAC7C;CACJ;AA5BD,gFA4BC;;;;;;;;;;;;;AChDD;IAOI;QACI,IAAI,CAAC,OAAO,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC3E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,iCAAiC,CAAC,gBAAgB,EAAE,CAAC;QAE1E,IAAI,CAAC,iBAAiB,GAAG,IAAInB,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;KACnG;IAED,OAAO,gBAAgB;QACnB,OAAO;YACH9C,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC;YAC9DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC;YAC/DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC;YAC/DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC;SACtE,CAAA;KACJ;CACJ;AA/BD,8EA+BC;AAED;IAUI,YAAY,MAA0C;QAElD,IAAI,CAAC,eAAe,GAAGA,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,OAAO,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC3E,IAAI,CAAC,WAAW,GAAG,iCAAiC,CAAC,gBAAgB,EAAE,CAAC;QACxE,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,UAAU,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAEjF,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;KACjC;IAED,cAAc,CAAC,MAAc,EAAE,MAAuD;QAClF,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE/C,IAAI,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YAC1E,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI,IAAI,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;YAC9C,QAAQ,GAAG,CAAC,EAAE,CAAC;SAClB;aACI,IAAI,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC7E,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI;YACD,IAAI,OAAO,GAAGhE,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAC3E,IAAI,OAAO,CAAC,MAAM,EAAE;gBAChB,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;gBAC5C,IAAI,MAAM,EAAE;oBACR,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;iBACnC;qBACI;oBACD,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;oBACzD,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;wBAC1B,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;qBACvC;iBACJ;aACJ;SACJ;QAED,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC;YACpE,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC;YAC5E,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;;SAEvF;aACI,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC1E,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YAC/E,QAAQ,GAAG,CAAC,QAAQ,CAAC;SACxB;QAED,MAAM,CAAC,GAAG,IAAI,QAAQ,CAAC;QACvB,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,GAAG,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;SACpB;QAED,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC;KACrD;IAED,cAAc,CAAC,MAAc,EAAE,MAAuF;QAClH,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC/C,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAE1C,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACtE,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,EAAE;gBAC3D,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;gBAC7C,IAAI,CAAC,SAAS,EAAE;oBACZ,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;oBACrC,IAAI,KAAK,EAAE;wBACP,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE;4BACnB,SAAS,GAAG,CAAC,EAAE,CAAC;yBACnB;wBAED,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;qBACvB;oBAED,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;oBACrC,IAAI,KAAK,EAAE;wBACP,IAAI,MAAM,CAAC,IAAI,GAAG,EAAE,EAAE;4BAClB,SAAS,GAAG,EAAE,CAAC;yBAClB;wBAED,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;qBACvB;iBACJ;aACJ;SACJ;QAED,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,IAAI,EAAE,CAAC;KAChD;CACJ;AAzGD,wEAyGC;;;;;;;;;;;;;;;;;;ACtID;IAoBI;QACI,IAAI,CAAC,gBAAgB,GAAGA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QAC7F,IAAI,CAAC,QAAQ,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7E,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAEnF,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACzG,IAAI,CAAC,qBAAqB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;QACvG,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACzG,IAAI,CAAC,2BAA2B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QACnH,IAAI,CAAC,4BAA4B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACrH,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,UAAU,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAEjF,IAAI,CAAC,kBAAkB,GAAG,IAAIhB,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,kBAAkB,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,iBAAiB,GAAG,IAAIN,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,oBAAoB,GAAG,IAAIC,uDAAmC,EAAE,CAAC;KACzE;IAED,gBAAgB,CAAC,MAAc;QAC3B,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;QAC5B,OAAO,OAAO,KAAK,EAAE;eACd/C,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,OAAO;eACvEA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC;KAChF;CACJ;AAhDD,sFAgDC;AAED;IA0BI,YAAY,MAA0C;QAClD,IAAI,CAAC,eAAe,GAAGgE,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,eAAe,GAAGA,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7E,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,2BAA2B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAA;QAClH,IAAI,CAAC,4BAA4B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAA;QACpH,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACzG,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAA;QACtF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAE/E,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAA;QAE1F,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;KAC3D;IAED,kBAAkB,CAAC,IAAY,EAAE,WAAmB;QAChD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC;eAC1C,WAAW,CAAC,iBAAiB,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KAC7D;IAED,kBAAkB,CAAC,IAAY;QAC3B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAChG,KAAK,GAAG,aAAa,CAAC;SACzB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC;YACnE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAClG,KAAK,GAAG,YAAY,CAAC;SACxB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnC,KAAK,GAAG,UAAU,CAAC;SACtB;aACI;YACD,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,IAAI;aACd,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,KAAK;SACf,CAAC;KACL;IAED,WAAW,CAAC,IAAY;QACpB,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAIhE,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YAC5E,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aACI,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACjF,KAAK,GAAG,CAAC,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KAEhB;IAED,OAAO,CAAC,IAAY,EAAE,IAAY;QAC9B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,MAAM,GAAG,IAAI,CAAC;;QAGlB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,IAAI,IAAI,EAAE,EAAE;YACnF,MAAM,IAAI,EAAE,CAAC;SAChB;aACI,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE;YACxF,MAAM,IAAI,EAAE,CAAC;SAChB;QAED,OAAO,MAAM,CAAC;KACjB;CACJ;AAlHD,gFAkHC;;;;;;;;;;;;;;;;ACvKD;IAoBI;QACI,IAAI,CAAC,kBAAkB,GAAG;YACtBA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC;YAC7DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC;YAC5DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC;YAC7DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC;YAC5DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,CAAC;YAC/DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,CAAC;YAC/DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC;YACtDhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC;YAC7DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC;YAC5DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,CAAC;YACnEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,0BAA0B,CAAC;YACvEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC;YACzDhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC;YACxDhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC;YAC5DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,yBAAyB,CAAC;SACzE,CAAC;QACF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QAClF,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,0BAA0B,CAAC,CAAC;QACtG,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,CAAC,CAAC;QAElF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,iBAAiB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,iBAAiB,CAAC,CAAC;QACxF,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAE9E,IAAI,CAAC,kBAAkB,GAAG,IAAIhB,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,gBAAgB,GAAG,IAAIV,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,IAAIM,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;KACnG;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAO9C,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACnE;IAED,oBAAoB,CAAC,MAAc;QAC/B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;KACtE;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC;KACnF;CACJ;AAxED,0FAwEC;AAED;IA0CI,YAAY,MAA0C;QAClD,IAAI,CAAC,eAAe,GAAGgE,+BAAe,CAAC,eAAe,CAAC;QACvD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QAEpC,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACjF,IAAI,CAAC,0BAA0B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,0BAA0B,CAAC,CAAC;QAC1G,IAAI,CAAC,gBAAgB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,kBAAkB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QACrF,IAAI,CAAC,gBAAgB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAC3F,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,8BAA8B,CAAC,CAAC;QAC1G,IAAI,CAAC,gBAAgB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,qBAAqB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,qBAAqB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,yBAAyB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,yBAAyB,CAAC,CAAC;QAExG,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QAEpF,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;QACrE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;KACrC;IAED,kBAAkB,CAAC,MAAc;QAC7B,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAIhE,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YAC5E,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YAC5E,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAChB;IAED,YAAY,CAAC,MAAc;QACvB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QAChB,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YAC5E,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YAC5E,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aACI,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACjF,KAAK,GAAG,CAAC,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KAChB;IAED,QAAQ,CAAC,MAAc;QACnB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO;eAC1EA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC;KACrF;IAED,YAAY,CAAC,MAAc;QACvB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,KAAK,gBAAgB;eAC/B,UAAU,KAAK,iBAAiB,CAAC;KAC3C;IAED,aAAa,CAAC,MAAc;QACxB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,KAAK,gBAAgB;eAC/B,UAAU,KAAK,kBAAkB,CAAC;KAC5C;IAED,UAAU,CAAC,MAAc;QACrB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;eAC7B,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;KAChD;IAED,SAAS,CAAC,MAAc;QACpB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;KAC/C;IAED,WAAW,CAAC,MAAc;QACtB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;eAC1B,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;KACvC;IAED,UAAU,CAAC,MAAc;QACrB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;eAC1B,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC;KACrF;CACJ;AAnKD,oFAmKC;;;;;;;;;;;;;;AC9OD;IAWI;QACI,IAAI,CAAC,mBAAmB,GAAG,IAAIkD,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,oBAAoB,GAAG,IAAIJ,uDAAmC,EAAE,CAAC;QAEtE,IAAI,CAAC,gBAAgB,GAAG;YACpB/C,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,iBAAiB,EAAE,KAAK,CAAC;SACxE,CAAC;QAEF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAEzF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,iBAAiB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QAC/F,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;KACxF;IAED,iBAAiB,CAAC,IAAY;QAC1B,OAAOhE,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACjE;IAED,iBAAiB,CAAC,IAAY;QAC1B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC;KACjF;IAED,oBAAoB,CAAC,IAAY;QAC7B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;KACpE;CACJ;AAvCD,0FAuCC;AAED;IASI,YAAY,MAA0C;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,qBAAqB,GAAGA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAC/F,IAAI,CAAC,yBAAyB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QACvG,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;KAC5F;IAED,oBAAoB,CAAC,IAAY;QAE7B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAClC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,CAAC,CAAC;SACf;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACpC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;YAC1F,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,GAAG,EAAE,CAAC;SACf;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,KAAK;gBACL,SAAS;gBACT,OAAO;gBACP,MAAM;aACT,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,KAAK;YACL,SAAS;YACT,OAAO;YACP,MAAM;SACT,CAAC;KACL;CACJ;AAzED,oFAyEC;;;;;;;;;;;;;;;;;;;;;;AC3GD;IA6BI;QACI,IAAI,CAAC,kBAAkB,GAAG;YACtBhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,CAAC;YAC1DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,iBAAiB,CAAC;SACjE,CAAA;QAED,IAAI,CAAC,gBAAgB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QAC5E,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QAC9E,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAChF,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,oCAAoC,CAAC,CAAC;QAChH,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,IAAI,CAAC,4BAA4B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,4BAA4B,CAAC,CAAC;QAC9G,IAAI,CAAC,qBAAqB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,mBAAmB,CAAC,CAAC;QAC5F,IAAI,CAAC,kBAAkB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,CAAC,CAAC;QAC1F,IAAI,CAAC,gBAAgB,GAAEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QAErF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,iBAAiB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,iBAAiB,CAAC,CAAC;QACxF,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,CAAC,CAAC;QAE9E,IAAI,CAAC,iBAAiB,GAAG,IAAIzB,8CAAwB,EAAE,CAAC;QAExD,IAAI,CAAC,mBAAmB,GAAG,IAAIS,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,mBAAmB,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,uBAAuB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,6DAAqC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,iBAAiB,GAAG,IAAIP,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAIO,sCAAuB,CAAC,IAAIC,iEAAuC,EAAE,CAAC,CAAC;KACzG;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAOtD,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACnE;IAED,oBAAoB,CAAC,MAAc;QAC/B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;KACtE;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC;KACnF;CACJ;AA3ED,kGA2EC;AAED;IAgCI,YAAY,MAA0C;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE9B,IAAI,CAAC,eAAe,GAAGA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QAEpF,IAAI,CAAC,qBAAqB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,CAAC,CAAC;QACxF,IAAI,CAAC,yBAAyB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,iBAAiB,CAAC,CAAC;QAChG,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,2BAA2B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,oCAAoC,CAAC,CAAC;QACrH,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,CAAC,CAAC;QACxE,IAAI,CAAC,4BAA4B,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,4BAA4B,CAAC,CAAC;QAC9G,IAAI,CAAC,qBAAqB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,qBAAqB,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,mBAAmB,CAAC,CAAC;KAC/F;IAED,mBAAmB,CAAC,MAAc;QAC9B,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAClC,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,CAAC,CAAC;SACf;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACpC,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;YAC1F,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnC,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnC,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,GAAG,EAAE,CAAC;SACf;aACI;YACD,OAAO,GAAG,IAAI,CAAC;YACf,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,OAAO;gBACP,SAAS;gBACT,OAAO;gBACP,MAAM;aACT,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,OAAO;YACP,SAAS;YACT,OAAO;YACP,MAAM;SACT,CAAC;KACL;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;;QAGd,IAAIhE,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO;YAC1E,UAAU,KAAK,QAAQ,EAAE;YACzB,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aACI,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACjF,KAAK,GAAG,CAAC,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KAChB;CACJ;AArID,4FAqIC;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9MD;IASI;QACI,IAAI,CAAC,UAAU,GAAGA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,QAAQ,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,gBAAgB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;QACtF,IAAI,CAAC,cAAc,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,CAAC,CAAC;QAClF,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,CAAC,CAAC;KACnF;CACJ;AAlBD,kFAkBC;AAED,8CAAsD,SAAQ5D,qCAA2B;IAErF;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,oBAAoB,GAAG,IAAI,mCAAmC,EAAE,CAAC;QAEtE,IAAI,CAAC,OAAO,GAAG4D,+BAAe,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,YAAY,GAAGA,+BAAe,CAAC,YAAY,CAAC;QACjD,IAAI,CAAC,SAAS,GAAGA,+BAAe,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAGA,+BAAe,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAGA,+BAAe,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAGA,+BAAe,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,OAAO,GAAGA,+BAAe,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,aAAa,GAAGA,+BAAe,CAAC,aAAa,CAAC;QAEnD,IAAI,CAAC,iBAAiB,GAAG,IAAIzB,8CAAwB,EAAE,CAAC;QACxD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,6CAAuB,EAAE,CAAC;QAEtD,IAAI,CAAC,YAAY,GAAG,IAAIA,sCAAgB,CAAC,IAAIA,sDAAgC,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,aAAa,GAAG,IAAIS,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,iBAAiB,GAAG,IAAIP,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAIU,sCAAuB,CAAC,IAAIC,iEAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,iEAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,yEAA2C,EAAE,CAAC,CAAC;QAClH,IAAI,CAAC,cAAc,GAAG,IAAId,+BAAkB,CAAC,IAAIC,0DAAkC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,UAAU,GAAG,IAAIE,uBAAc,CAAC,IAAIC,kDAA8B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,UAAU,GAAG,IAAIC,uBAAc,CAAC,IAAIC,kDAA8B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/E,IAAI,CAAC,cAAc,GAAG,IAAIT,iCAAkB,CAAC,IAAIU,0DAAkC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,gBAAgB,GAAG,IAAII,mCAAoB,CAAC,IAAIC,8DAAoC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,gBAAgB,GAAG,IAAIJ,mCAAoB,CAAC,IAAIC,8DAAoC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,oBAAoB,GAAG,IAAII,2CAAwB,CAAC,IAAIC,sEAAwC,CAAC,IAAI,CAAC,CAAC,CAAC;KAChH;CACJ;AAnCD,4FAmCC;;;;;;;;;;;;;;;AClED;IAiBI;QACI,IAAI,CAAC,aAAa,GAAG;YACjB3D,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC;SACtE,CAAC;QACF,IAAI,CAAC,gBAAgB,GAAG;YACpBhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,OAAO,EAAE,KAAK,CAAC;YAC3DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC;YACnEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC;YAC7DhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC;YAChEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,mBAAmB,EAAE,KAAK,CAAC;YACvEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,EAAE,KAAK,CAAC;SACvE,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,OAAO,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvF,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,wBAAwB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC7G,IAAI,CAAC,kBAAkB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QACjG,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,SAAS,GAAGA,+BAAe,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,gBAAgB,GAAG,IAAIzB,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,YAAY,GAAG,IAAIA,sCAAgB,CAAC,IAAIA,sDAAgC,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,iBAAiB,GAAG,IAAIM,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,oBAAoB,GAAG,IAAIC,uDAAmC,EAAE,CAAC;KACzE;CACJ;AAxDD,8EAwDC;AAED;IAiCI,YAAY,MAAgD;QACxD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG;YACb/C,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,EAAE,KAAK,CAAC;YAClEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC;SACtE,CAAC;QACF,IAAI,CAAC,OAAO,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC3E,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,UAAU,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACjF,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,SAAS,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,mBAAmB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QACnG,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,wBAAwB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC7G,IAAI,CAAC,kBAAkB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QACjG,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,eAAe,GAAGA,+BAAe,CAAC,eAAe,CAAC;KAC1D;IAED,WAAW,CAAC,MAAc;QAEtB,IAAI,UAAU,GAAG,8BAA8B,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;QACvF,IAAI,KAAK,GAAG,CAAC,CAAC;;QAGd,IAAI,UAAU,KAAK,KAAK,IAAI,UAAU,KAAK,QAAQ,EAAE;YACjD,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,UAAU,KAAK,QAAQ;YAC9B,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC;YACpC,UAAU,CAAC,QAAQ,CAAC,kBAAkB,CAAC;YACvC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YACpC,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,UAAU,KAAK,MAAM,EAAE;YAC9B,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3C,UAAU,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE;YAC9C,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YACtC,UAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;YAC1C,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YAC1C,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAChB;IAED,aAAa,CAAC,MAAc;QACxB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAIhE,6BAAa,CAAC,UAAU,CAAC,8BAA8B,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,MAAM,EAAE;YAC7F,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAIA,6BAAa,CAAC,UAAU,CAAC,8BAA8B,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,MAAM,EAAE;YAC7F,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAChB;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAOA,6BAAa,CAAC,UAAU,CAAC,8BAA8B,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;KAC1G;IAEO,OAAO,SAAS,CAAC,MAAc;QACnC,OAAO,MAAM;aACR,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAC3B;;;AAlGe,+CAAgB,GAAGA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,gBAAgB,CAAC,CAAC;AACjF,8CAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;AAC/E,8CAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;AA/BnG,wEAgIC;;;;;;;;;;;;;AC/LD;IAGI;QACI,IAAI,CAAC,cAAc,GAAG;YAClBhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;SACpE,CAAC;KACL;CACJ;AAVD,oFAUC;AAED,uCAA+C,SAAQJ,0CAA8B;IAMjF;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,gBAAgB,GAAG;YACpB5D,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;YACjEhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC;SACpE,CAAC;QAEF,IAAI,CAAC,YAAY,GAAGA,+BAAe,CAAC,YAAY,CAAC;QACjD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrD,IAAI,CAAC,+BAA+B,GAAGA,+BAAe,CAAC,+BAA+B,CAAC;QAEvF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,CAAC,CAAC;KACvF;IAES,gBAAgB;QACtB,OAAO,IAAI,GAAG,CACV;YACI,GAAG,KAAK,CAAC,gBAAgB,EAAE;YAC3B,CAAC,QAAQ,EAAE,iCAAiC,CAAC,UAAU,CAAC;YACxD,CAAC,QAAQ,EAAE,iCAAiC,CAAC,UAAU,CAAC;YACxD,CAAC,iBAAiB,EAAE,iCAAiC,CAAC,eAAe,CAAC;YACtE,CAAC,YAAY,EAAE,iCAAiC,CAAC,SAAS,CAAC;YAC3D,CAAC,UAAU,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC3D,CAAC,SAAS,EAAE,iCAAiC,CAAC,WAAW,CAAC;YAC1D,CAAC,SAAS,EAAE,iCAAiC,CAAC,SAAS,CAAC;YACxD,CAAC,SAAS,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAC3D,CAAC,YAAY,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAC9D,CAAC,UAAU,EAAE,iCAAiC,CAAC,OAAO,CAAC;YACvD,CAAC,YAAY,EAAE,iCAAiC,CAAC,UAAU,CAAC;YAC5D,CAAC,SAAS,EAAE,iCAAiC,CAAC,OAAO,CAAC;YACtD,CAAC,SAAS,EAAE,iCAAiC,CAAC,UAAU,CAAC;YACzD,CAAC,gBAAgB,EAAE,iCAAiC,CAAC,YAAY,CAAC;YAClE,CAAC,MAAM,EAAE,iCAAiC,CAAC,WAAW,CAAC;YACvD,CAAC,OAAO,EAAE,iCAAiC,CAAC,SAAS,CAAC;SACzD,CAAC,CAAC;KACV;;IAGO,OAAO,OAAO,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACvE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC5E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,SAAS,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACzE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC3E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC3E,OAAO,SAAS,CAAC,IAAY,IAAU,OAAOxB,qBAAS,CAAC,QAAQ,EAAE,CAAC,EAAE;IAE7E,YAAY,CAAC,IAAY;QACrB,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QAEhB,IAAIxC,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YAC5E,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YAC5E,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aACI,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACjF,KAAK,GAAG,CAAC,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KAChB;IAED,oBAAoB,CAAC,OAAe;QAChC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;aAC3B,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;aAClB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KAC3B;CACJ;AApFD,8EAoFC;;;;;;;;;;;;;;;;;;;;;;;;;AClFD;IAiBI;QACI,IAAI,CAAC,SAAS,GAAGA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvF,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,kBAAkB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QACjG,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAE3F,IAAI,CAAC,iBAAiB,GAAG,IAAInB,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,aAAa,GAAG,IAAII,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG,IAAIH,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,IAAIP,oCAAqB,CAAC,IAAIU,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAII,sCAAuB,CAAC,IAAIC,iEAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,iEAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,yEAA2C,EAAE,CAAC,CAAC;KACrH;CACJ;AAnCD,4EAmCC;AAED;IAuBI,YAAY,MAA0C;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;QAC9D,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE9B,IAAI,CAAC,eAAe,GAAG3D,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvF,IAAI,CAAC,aAAa,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvF,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACrF,IAAI,CAAC,eAAe,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,YAAY,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;KACxF;IAED,oBAAoB,CAAC,IAAY;QAC7B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YACrE,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,cAAc,EAAE;YACpC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,gBAAgB,EAAE;YACtC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,cAAc,EAAE;YACpC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,YAAY,EAAE;YAClC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO;gBACH,KAAK;gBACL,OAAO,EAAE,KAAK;aACjB,CAAC;SACL;QAED,OAAO;YACH,KAAK;YACL,OAAO,EAAE,IAAI;SAChB,CAAA;KACJ;IAED,mBAAmB,CAAC,IAAY;QAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,UAAU,KAAK,KAAK,IAAI,UAAU,KAAK,KAAK;YAC5C,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,MAAM,EAAE;YAChD,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,QAAQ,IAAI,UAAU,KAAK,SAAS,EAAE;YAC1D,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,KAAK,IAAI,UAAU,KAAK,OAAO,EAAE;YACrD,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,KAAK,IAAI,UAAU,KAAK,MAAM,EAAE;YACpD,KAAK,GAAG,KAAK,CAAC;SACjB;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,KAAK;aACR,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,KAAK;SACR,CAAC;KACL;CACJ;AA/GD,sEA+GC;;;;;;;;;;;;;AClKD,iCAAyC,SAAQN,2CAAwB;IACrE,YAAY,MAA0C;QAClD,KAAK,CAAC,MAAM,CAAC,CAAC;KACjB;IAES,sBAAsB,CAAC,MAAc,EAAE,aAAmB;QAEhE,IAAI,GAAG,GAAG,IAAIlB,oCAAwB,EAAE,CAAC;QACzC,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;;QAG7C,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACxD,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QAChC,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC1B,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YAChB,OAAO,GAAG,CAAC;SACd;QAED,IAAI,OAAO,GAAGxC,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;QACvF,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,EAAE;YACrF,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAEnD,IAAI,IAAI,GAAGwC,qBAAS,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAA;YAClD,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YACzB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5B,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAAA,AAAC;YAE/B,GAAG,CAAC,KAAK,GAAGA,sBAAU,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;YAElD,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,WAAW,GAAG;gBAC9BA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;gBACtFA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;aACjG,CAAC;YAEF,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YACnB,OAAO,GAAG,CAAC;SACd;QAED,IAAI,UAAU,GAAG,UAAU,CAAC,OAAO,CAACwB,+BAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAGA,+BAAe,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;;;;;QAM1G,OAAO,GAAGhE,6BAAa,CAAC,UAAU,CAACA,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,cAAc,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QAClI,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;YACzE,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YACtE,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClB,OAAO,GAAG,CAAC;aACd;YAED,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAE7D,IAAI,UAAU,GAAI,EAAE,CAAC,KAAkC,CAAC,WAAW,CAAC;YACpE,IAAI,QAAQ,GAAI,EAAE,CAAC,KAAkC,CAAC,SAAS,CAAC;YAEhE,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,GAAG,OAAO,CAAC;YAElC,GAAG,CAAC,WAAW,GAAG;gBACdxB,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC3IA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;aACtJ,CAAC;YAEF,GAAG,CAAC,SAAS,GAAG;gBACZA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;gBACrIA,qBAAS,CAAC,mBAAmB,CAACA,qBAAS,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;aAChJ,CAAC;YAEF,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;YAEnB,OAAO,GAAG,CAAC;SACd;QAED,OAAO,GAAG,CAAC;KACd;CACJ;AAhFD,kEAgFC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DD;IAoBI;QACI,IAAI,CAAC,WAAW,GAAGxC,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,UAAU,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,WAAW,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,yBAAyB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,yBAAyB,CAAC,CAAC;QACxG,IAAI,CAAC,sBAAsB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,sBAAsB,CAAC,CAAC;QAClG,IAAI,CAAC,mBAAmB,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,mBAAmB,CAAC,CAAC;QAE5F,IAAI,CAAC,aAAa,GAAG,IAAIhB,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,qDAAiC,EAAE,CAAC,CAAC;QACpF,IAAI,CAAC,iBAAiB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,mBAAmB,GAAG,IAAII,sCAAuB,CAAC,IAAIC,iEAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,iEAAuC,EAAE,CAAC,CAAC;QACtG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,yEAA2C,EAAE,CAAC,CAAC;QAClH,IAAI,CAAC,iBAAiB,GAAG,IAAId,kCAAqB,CAAC,IAAIC,6DAAqC,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,YAAY,GAAG,IAAIgB,wBAAgB,CAAC,IAAIC,mDAAgC,EAAE,CAAC,CAAC;QACjF,IAAI,CAAC,gBAAgB,GAAG,IAAIH,gCAAoB,CAAC,IAAIC,2DAAoC,EAAE,CAAC,CAAC;QAC7F,IAAI,CAAC,gBAAgB,GAAG,IAAItB,6CAAuB,EAAE,CAAC;QACtD,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;KACjC;CACJ;AAzCD,kFAyCC;AAED,sCAA8C,SAAQQ,4DAAwC;IAc1F;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG/C,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,UAAU,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,GAAGhE,6BAAa,CAAC,aAAa,CAACgE,+BAAe,CAAC,UAAU,CAAC,CAAC;QAE1E,IAAI,CAAC,gBAAgB,GAAG,IAAIR,mCAAoB,CAAC,IAAIC,8DAAoC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,gBAAgB,GAAG,IAAIJ,mCAAoB,CAAC,IAAIC,8DAAoC,CAAC,IAAI,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,oBAAoB,GAAG,IAAIW,gDAA2B,CAAC,IAAIN,sEAAwC,CAAC,IAAI,CAAC,CAAC,CAAC;QAChH,IAAI,CAAC,SAAS,GAAG,IAAIG,qBAAa,CAAC,IAAIC,gDAA6B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,aAAa,GAAG,IAAIH,6BAAiB,CAAC,IAAIC,wDAAiC,EAAE,CAAC,CAAC;KACvF;CACJ;AA3BD,4EA2BC;;;;;;;;;;;;;;;;;ACtFD,IAAiB,cAAc,CA8L9B;AA9LD,WAAiB,cAAc;IACjB,wBAAS,GAAG,gDAAgD,CAAC;IAC7D,kCAAmB,GAAG,6CAA6C,CAAC;IACpE,4BAAa,GAAG,wGAAwG,CAAC;IACzH,8BAAe,GAAG,qDAAqD,CAAC;IACxE,8BAAe,GAAG,mDAAmD,CAAC;IACtE,8BAAe,GAAG,2CAA2C,CAAC;IAC9D,uBAAQ,GAAG,iPAAiP,CAAC;IAC7P,4BAAa,GAAG,oEAAoE,CAAC;IACrF,8BAAe,GAAG,kCAAkC,CAAC;IACrD,2BAAY,GAAG,+FAA+F,CAAC;IAC/G,iCAAkB,GAAG,gBAAgB,eAAA,eAAe,sBAAsB,eAAA,eAAe,cAAc,eAAA,eAAe,OAAO,CAAC;IAC9H,4BAAa,GAAG,4OAA4O,CAAC;IAC7P,+BAAgB,GAAG,4CAA4C,eAAA,kBAAkB,IAAI,eAAA,aAAa,IAAI,CAAC;IACvG,4BAAa,GAAG,6FAA6F,CAAC;IAC9G,+BAAgB,GAAG,2BAA2B,eAAA,QAAQ,QAAQ,eAAA,SAAS,QAAQ,eAAA,QAAQ,QAAQ,eAAA,gBAAgB,oBAAoB,eAAA,eAAe,OAAO,CAAC;IAC1J,yCAA0B,GAAG,0BAA0B,eAAA,gBAAgB,4BAA4B,eAAA,QAAQ,QAAQ,eAAA,SAAS,QAAQ,eAAA,QAAQ,qBAAqB,eAAA,eAAe,OAAO,CAAC;IACxL,qCAAsB,GAAG,MAAM,eAAA,gBAAgB,yBAAyB,eAAA,QAAQ,QAAQ,eAAA,mBAAmB,QAAQ,eAAA,QAAQ,qBAAqB,eAAA,eAAe,OAAO,CAAC;IACvK,2BAAY,GAAG,kBAAkB,eAAA,QAAQ,QAAQ,eAAA,mBAAmB,QAAQ,eAAA,QAAQ,QAAQ,eAAA,gBAAgB,oBAAoB,eAAA,eAAe,OAAO,CAAC;IACvJ,4BAAa,GAAG,2BAA2B,CAAC;IAC5C,4BAAa,GAAG,sQAAsQ,eAAA,eAAe,uBAAuB,eAAA,aAAa,KAAK,eAAA,aAAa,QAAQ,eAAA,eAAe,IAAI,eAAA,eAAe,IAAI,CAAC;IAC1Y,iCAAkB,GAAG,QAAQ,eAAA,aAAa,gPAAgP,eAAA,aAAa,oGAAoG,CAAC;IAC5Y,+BAAgB,GAAG,IAAI,eAAA,eAAe,YAAY,eAAA,aAAa,MAAM,eAAA,aAAa,SAAS,eAAA,eAAe,GAAG,CAAC;IAC9G,+BAAgB,GAAG,oHAAoH,eAAA,gBAAgB,GAAG,CAAC;IAC3J,8BAAe,GAAG,8HAA8H,eAAA,eAAe,IAAI,eAAA,aAAa,gBAAgB,CAAC;IACjM,+BAAgB,GAAG,QAAQ,eAAA,aAAa,EAAE,CAAC;IAC3C,yCAA0B,GAAG,4BAA4B,eAAA,aAAa,EAAE,CAAC;IACzE,2BAAY,GAAG,iHAAiH,eAAA,eAAe,IAAI,eAAA,aAAa,iBAAiB,CAAC;IAClL,oCAAqB,GAAG,IAAI,eAAA,eAAe,gBAAgB,eAAA,eAAe,IAAI,eAAA,eAAe,KAAK,eAAA,aAAa,0GAA0G,CAAC;IAC1N,0BAAW,GAAG,gDAAgD,eAAA,eAAe,IAAI,eAAA,eAAe,iBAAiB,eAAA,aAAa,4EAA4E,eAAA,eAAe,IAAI,eAAA,aAAa,uBAAuB,CAAC;IAClQ,6BAAc,GAAG,2CAA2C,CAAC;IAC7D,0BAAW,GAAG,qBAAqB,CAAC;IACpC,2BAAY,GAAG,kBAAkB,CAAC;IAClC,yBAAU,GAAG,0OAA0O,CAAC;IACxP,4BAAa,GAAG,+DAA+D,CAAC;IAChF,sBAAO,GAAG,qCAAqC,eAAA,QAAQ,QAAQ,CAAC;IAChE,6BAAc,GAAG,gLAAgL,CAAC;IAClM,wBAAS,GAAG,gCAAgC,eAAA,YAAY,MAAM,eAAA,YAAY,4BAA4B,CAAC;IACvG,4BAAa,GAAG,QAAQ,eAAA,YAAY,kCAAkC,eAAA,eAAe,OAAO,eAAA,YAAY,QAAQ,eAAA,eAAe,QAAQ,CAAC;IACxI,4BAAa,GAAG,QAAQ,eAAA,YAAY,QAAQ,eAAA,eAAe,OAAO,eAAA,YAAY,kCAAkC,eAAA,eAAe,QAAQ,CAAC;IACxI,8BAAe,GAAG,qJAAqJ,CAAC;IACxK,4BAAa,GAAG,oGAAoG,CAAC;IACrH,8BAAe,GAAG,qIAAqI,CAAC;IACxJ,kCAAmB,GAAG,yGAAyG,eAAA,YAAY,OAAO,eAAA,gBAAgB,GAAG,CAAC;IACtK,kCAAmB,GAAG,MAAM,CAAC;IAC7B,0BAAW,GAAG,2BAA2B,eAAA,QAAQ,KAAK,CAAC;IACvD,6BAAc,GAAG,OAAO,eAAA,YAAY,qBAAqB,eAAA,UAAU,yBAAyB,eAAA,QAAQ,KAAK,CAAC;IAC1G,6BAAc,GAAG,OAAO,eAAA,YAAY,qBAAqB,eAAA,QAAQ,wBAAwB,eAAA,UAAU,oBAAoB,eAAA,aAAa,KAAK,CAAC;IAC1I,6BAAc,GAAG,OAAO,eAAA,YAAY,qBAAqB,eAAA,QAAQ,6BAA6B,eAAA,UAAU,oBAAoB,eAAA,aAAa,OAAO,CAAC;IACjJ,6BAAc,GAAG,MAAM,eAAA,aAAa,qBAAqB,eAAA,QAAQ,qBAAqB,eAAA,aAAa,EAAE,CAAC;IACtG,6BAAc,GAAG,MAAM,eAAA,QAAQ,qBAAqB,eAAA,aAAa,qBAAqB,eAAA,aAAa,EAAE,CAAC;IACtG,6BAAc,GAAG,iCAAiC,eAAA,aAAa,cAAc,eAAA,QAAQ,KAAK,CAAC;IAC3F,6BAAc,GAAG,MAAM,eAAA,QAAQ,YAAY,eAAA,aAAa,oBAAoB,eAAA,aAAa,OAAO,CAAC;IACjG,6BAAc,GAAG,mBAAmB,eAAA,QAAQ,YAAY,eAAA,aAAa,KAAK,CAAC;IAC3E,6BAAc,GAAG,MAAM,eAAA,QAAQ,YAAY,eAAA,aAAa,oBAAoB,eAAA,aAAa,OAAO,CAAC;IACjG,6BAAc,GAAG,MAAM,eAAA,aAAa,qBAAqB,eAAA,aAAa,qBAAqB,eAAA,QAAQ,EAAE,CAAC;IACtG,sBAAO,GAAG,cAAc,eAAA,UAAU,EAAE,CAAC;IACrC,uBAAQ,GAAG,GAAG,eAAA,UAAU,gBAAgB,CAAC;IACzC,6BAAc,GAAG,2DAA2D,CAAC;IAC7E,wBAAS,GAAG,+HAA+H,CAAC;IAC5I,2BAAY,GAAG,uLAAuL,CAAC;IACvM,6BAAc,GAAG,gKAAgK,CAAC;IAClL,kCAAmB,GAAG,qKAAqK,CAAC;IAC5L,0BAAW,GAAG,2BAA2B,CAAC;IAC1C,sBAAO,GAAG,+GAA+G,CAAC;IAC1H,sBAAO,GAAG,8FAA8F,CAAC;IACzG,8BAAe,GAAG,yDAAyDnB,yBAAY,CAAC,gBAAgB,mCAAmC,eAAA,mBAAmB,kCAAkC,CAAC;IACjM,2BAAY,GAAG,cAAc,eAAA,YAAY,QAAQ,eAAA,cAAc,gDAAgD,eAAA,cAAc,IAAI,CAAC;IAClI,yBAAU,GAAG,8BAA8B,eAAA,eAAe,OAAO,eAAA,eAAe,IAAI,eAAA,eAAe,SAAS,CAAC;IAC7G,yBAAU,GAAG,aAAa,eAAA,OAAO,IAAI,eAAA,OAAO,IAAI,eAAA,WAAW,GAAG,CAAC;IAC/D,wBAAS,GAAG,gBAAgB,eAAA,YAAY,IAAI,eAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,IAAIA,yBAAY,CAAC,WAAW,KAAKA,yBAAY,CAAC,WAAW,MAAMA,yBAAY,CAAC,SAAS,GAAG,CAAC;IAC3K,4BAAa,GAAG,qBAAqB,CAAC;IACtC,2BAAY,GAAG,8BAA8B,CAAC;IAC9C,6BAAc,GAAG,4CAA4C,CAAC;IAC9D,8BAAe,GAAG,oCAAoC,eAAA,YAAY,GAAG,CAAC;IACtE,0BAAW,GAAG,oEAAoE,CAAC;IACnF,gCAAiB,GAAG,gCAAgC,eAAA,cAAc,GAAG,CAAC;IACtE,2BAAY,GAAG,WAAW,eAAA,aAAa,IAAI,eAAA,eAAe,IAAI,eAAA,iBAAiB,IAAI,eAAA,WAAW,IAAI,CAAC;IACnG,sBAAO,GAAG,yBAAyB,eAAA,YAAY,IAAI,eAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,IAAI,eAAA,YAAY,MAAM,eAAA,YAAY,MAAM,CAAC;IAClI,uBAAQ,GAAG,yBAAyBA,yBAAY,CAAC,SAAS,sBAAsB,eAAA,YAAY,8BAA8BA,yBAAY,CAAC,SAAS,uBAAuB,CAAC;IACxK,4BAAa,GAAG,qFAAqF,CAAC;IACtG,sCAAuB,GAAG,0BAA0B,CAAC;IACrD,8BAAe,GAAG,GAAGA,yBAAY,CAAC,SAAS,kMAAkM,eAAA,SAAS,EAAE,CAAC;IACzP,yBAAU,GAAG,gIAAgI,CAAC;IAC9I,iCAAkB,GAAG,0LAA0L,CAAC;IAChN,yBAAU,GAAG,OAAO,eAAA,YAAY,IAAI,eAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,QAAQ,eAAA,SAAS,QAAQ,eAAA,UAAU,IAAI,CAAC;IAClH,yBAAU,GAAG,OAAO,eAAA,UAAU,aAAaA,yBAAY,CAAC,SAAS,kBAAkBA,yBAAY,CAAC,WAAW,mBAAmBA,yBAAY,CAAC,WAAW,WAAW,eAAA,SAAS,QAAQ,CAAC;IACnL,yBAAU,GAAG,MAAMA,yBAAY,CAAC,SAAS,MAAMA,yBAAY,CAAC,WAAW,QAAQ,eAAA,SAAS,SAAS,eAAA,UAAU,IAAI,CAAC;IAChH,yBAAU,GAAG,MAAM,eAAA,SAAS,QAAQ,eAAA,SAAS,UAAU,eAAA,UAAU,SAAS,eAAA,UAAU,KAAK,CAAC;IAC1F,yBAAU,GAAG,MAAM,eAAA,SAAS,SAAS,eAAA,SAAS,cAAc,eAAA,UAAU,IAAI,CAAC;IAC3E,yBAAU,GAAG,GAAG,eAAA,SAAS,QAAQ,eAAA,SAAS,SAAS,eAAA,UAAU,KAAK,CAAC;IACnE,yBAAU,GAAG,MAAM,eAAA,UAAU,eAAe,eAAA,SAAS,SAAS,eAAA,SAAS,QAAQ,CAAC;IAChF,yBAAU,GAAG,MAAM,eAAA,UAAU,OAAO,eAAA,SAAS,SAAS,eAAA,SAAS,QAAQ,CAAC;IACxE,yBAAU,GAAG,MAAM,eAAA,kBAAkB,OAAO,eAAA,UAAU,SAAS,eAAA,SAAS,QAAQ,CAAC;IACjF,wBAAS,GAAG,yGAAyG,CAAC;IACtH,8BAAe,GAAG,oCAAoC,CAAC;IACvD,4BAAa,GAAG,oGAAoG,CAAC;IACrH,4BAAa,GAAG,uCAAuC,CAAC;IACxD,4BAAa,GAAG,6BAA6B,eAAA,SAAS,IAAI,eAAA,kBAAkB,qBAAqB,eAAA,eAAe,UAAU,eAAA,SAAS,QAAQ,eAAA,SAAS,IAAI,eAAA,kBAAkB,qBAAqB,eAAA,OAAO,IAAI,eAAA,OAAO,IAAI,eAAA,eAAe,IAAI,CAAC;IACzO,gCAAiB,GAAG,eAAe,eAAA,SAAS,IAAI,eAAA,kBAAkB,qBAAqB,eAAA,eAAe,UAAU,eAAA,mBAAmB,QAAQ,eAAA,SAAS,IAAI,eAAA,kBAAkB,qBAAqB,eAAA,OAAO,IAAI,eAAA,OAAO,IAAI,eAAA,eAAe,IAAI,CAAC;IACzO,+BAAgB,GAAG,6CAA6C,CAAC;IACjE,6BAAc,GAAG,uQAAuQ,CAAC;IACzR,qCAAsB,GAAG,QAAQ,eAAA,aAAa,OAAO,eAAA,cAAc,MAAM,eAAA,cAAc,QAAQ,eAAA,eAAe,gCAAgC,CAAC;IAC/I,+BAAgB,GAAG,QAAQ,eAAA,aAAa,EAAE,CAAC;IAC3C,yCAA0B,GAAG,4BAA4B,eAAA,aAAa,EAAE,CAAC;IACzE,uBAAQ,GAAG,0FAA0F,CAAC;IACtG,0BAAW,GAAG,8FAA8F,CAAC;IAC7G,qCAAsB,GAAG,8DAA8D,CAAC;IACxF,6CAA8B,GAAG,QAAQ,eAAA,aAAa,OAAO,eAAA,sBAAsB,uCAAuC,CAAC;IAC3H,oCAAqB,GAAG,iCAAiC,eAAA,8BAA8B,EAAE,CAAC;IAC1F,qCAAsB,GAAG,GAAG,eAAA,8BAA8B,iCAAiC,CAAC;IAC5F,0CAA2B,GAAG,IAAI,eAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,8BAA8B,eAAA,8BAA8B,EAAE,CAAC;IACvI,2CAA4B,GAAG,GAAG,eAAA,8BAA8B,kCAAkC,eAAA,YAAY,IAAIA,yBAAY,CAAC,SAAS,GAAG,CAAC;IAC5I,4BAAa,GAAG,6CAA6C,CAAC;IAC9D,mCAAoB,GAAG,kLAAkL,CAAC;IAC1M,2CAA4B,GAAG,QAAQ,eAAA,aAAa,OAAO,eAAA,oBAAoB,uCAAuC,CAAC;IACvH,2CAA4B,GAAG,QAAQ,eAAA,cAAc,OAAO,CAAC;IAC7D,gCAAiB,GAAG,wJAAwJ,CAAC;IAC7K,6BAAc,GAAG,iEAAiE,CAAC;IACnF,4BAAa,GAAG,qIAAqI,CAAC;IACtJ,4BAAa,GAAG,gEAAgE,eAAA,iBAAiB,GAAG,CAAC;IACrG,8BAAe,GAAG,iDAAiD,CAAC;IACpE,2BAAY,GAAG,gDAAgD,CAAC;IAChE,2BAAY,GAAG,qFAAqF,CAAC;IACrG,2BAAY,GAAG,2CAA2C,CAAC;IAC3D,mCAAoB,GAAG,QAAQ,eAAA,cAAc,aAAa,eAAA,iBAAiB,EAAE,CAAC;IAC9E,6CAA8B,GAAG,gCAAgC,eAAA,iBAAiB,EAAE,CAAC;IACrF,0BAAW,GAAG,iCAAiC,eAAA,iBAAiB,IAAI,CAAC;IACrE,uBAAQ,GAAG,iGAAiG,CAAC;IAC7G,wBAAS,GAAG,6FAA6F,CAAC;IAC1G,+BAAgB,GAAG,iCAAiC,CAAC;IACrD,wBAAS,GAAG,kCAAkC,CAAC;IAC/C,4BAAa,GAAG,gYAAgY,eAAA,SAAS,KAAK,eAAA,eAAe,8BAA8B,eAAA,eAAe,IAAI,eAAA,eAAe,SAAS,CAAC;IACvf,4BAAa,GAAG,mJAAmJ,eAAA,SAAS,IAAI,eAAA,eAAe,6BAA6B,eAAA,eAAe,IAAI,eAAA,eAAe,SAAS,CAAC;IACxQ,4BAAa,GAAG,+QAA+Q,eAAA,SAAS,IAAI,eAAA,eAAe,6BAA6B,eAAA,eAAe,IAAI,eAAA,eAAe,MAAM,CAAC;IACjY,4BAAa,GAAG,qGAAqG,eAAA,SAAS,IAAI,eAAA,eAAe,6BAA6B,eAAA,eAAe,IAAI,eAAA,eAAe,SAAS,CAAC;IAC1N,8BAAe,GAAG,KAAK,CAAC;IACxB,8BAAe,GAAG,IAAI,CAAC;IACvB,8BAAe,GAAG,KAAK,CAAC;IACxB,8BAAe,GAAG,IAAI,CAAC;IACvB,0BAAW,GAAG,yBAAyB,CAAC;IACxC,0BAAW,GAAG,kEAAkE,CAAC;IACjF,0BAAW,GAAG,eAAe,CAAC;IAC9B,2BAAY,GAAG,+BAA+B,CAAC;IAC/C,yBAAU,GAAG,eAAe,CAAC;IAC7B,yBAAU,GAAG,gBAAgB,CAAC;IAC9B,6BAAc,GAAG,aAAa,CAAC;IAC/B,yBAAU,GAAG,mBAAmB,CAAC;IACjC,+BAAgB,GAAG,qBAAqB,CAAC;IACzC,0BAAW,GAAG,wDAAwD,CAAC;IACvE,0BAAW,GAAG,6DAA6D,CAAC;IAC5E,4BAAa,GAAG,UAAU,CAAC;IAC3B,mCAAoB,GAAG,uBAAuB,CAAC;IAC/C,qCAAsB,GAAG,uDAAuD,CAAC;IACjF,mCAAoB,GAAG,yCAAyC,CAAC;IACjE,iCAAkB,GAAG,qBAAqB,CAAC;IAC3C,iCAAkB,GAAG,oEAAoE,CAAC;IAC1F,qCAAsB,GAAG,IAAI,eAAA,kBAAkB,SAAS,eAAA,iBAAiB,GAAG,CAAC;IAC7E,oCAAqB,GAAG,OAAO,eAAA,eAAe,WAAW,eAAA,aAAa,QAAQ,eAAA,eAAe,IAAI,eAAA,eAAe,mBAAmB,eAAA,uBAAuB,IAAI,CAAC;IAC/J,wCAAyB,GAAG,UAAU,eAAA,eAAe,cAAc,eAAA,iBAAiB,SAAS,eAAA,eAAe,IAAI,eAAA,eAAe,qBAAqB,eAAA,uBAAuB,IAAI,CAAC;IAChL,6BAAc,GAAG,mBAAmB,CAAC;IACrC,gCAAiB,GAAG,8BAA8B,CAAC;IACnD,wBAAS,GAAG,aAAa,CAAC;IAC1B,yBAAU,GAAG,6BAA6B,CAAC;IAC3C,0BAAW,GAAG,sCAAsC,CAAC;IACrD,wCAAyB,GAAG,wBAAwB,CAAC;IACrD,qCAAsB,GAAG,4BAA4B,CAAC;IACtD,+BAAgB,GAAG,4CAA4C,CAAC;IAChE,0BAAW,GAAG,iBAAiB,eAAA,gBAAgB,oBAAoB,eAAA,gBAAgB,kDAAkD,CAAC;IACtI,uCAAwB,GAAG,MAAM,eAAA,YAAY,cAAc,eAAA,gBAAgB,MAAM,CAAC;IAClF,8BAAe,GAAG,2FAA2F,CAAC;IAC9G,kCAAmB,GAAG,oEAAoE,CAAC;IAC3F,oCAAqB,GAAG,MAAM,CAAC;IAC/B,wCAAyB,GAAG,MAAM,CAAC;IACnC,iCAAkB,GAAG,MAAM,CAAC;IAC5B,+BAAgB,GAAG,MAAM,CAAC;IAC1B,qCAAsB,GAAG,MAAM,CAAC;IAChC,iCAAkB,GAAG,QAAQ,CAAC;IAC9B,sBAAO,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,EAAC,CAAC,UAAU,EAAE,GAAG,CAAC,EAAC,CAAC,SAAS,EAAE,GAAG,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9Z,2BAAY,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAC,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAC,CAAC,UAAU,EAAE,MAAM,CAAC,EAAC,CAAC,SAAS,EAAE,MAAM,CAAC,EAAC,CAAC,UAAU,EAAE,KAAK,CAAC,EAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAC,CAAC,OAAO,EAAE,KAAK,CAAC,EAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACxe,wBAAS,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,EAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC,CAAC,SAAS,EAAE,IAAI,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACxI,6BAAc,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAClH,0BAAW,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3N,wBAAS,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACrP,0BAAW,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACltB,sBAAO,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,YAAY,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,aAAa,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,WAAW,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,eAAe,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,cAAc,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,iBAAiB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,EAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,EAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,EAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,EAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,EAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,EAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,EAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,EAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,EAAC,CAAC,oBAAoB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC92H,yBAAU,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACxa,4BAAa,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACtG,2BAAY,GAAkC,IAAI,GAAG,CAAmB,CAAC,CAAC,SAAS,EAAE,CAAC,OAAO,EAAC,OAAO,EAAC,cAAc,EAAC,cAAc,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,cAAc,EAAC,cAAc,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,gBAAgB,EAAC,gBAAgB,EAAC,oBAAoB,EAAC,cAAc,CAAC,CAAC,EAAC,CAAC,kBAAkB,EAAE,CAAC,yBAAyB,EAAC,oBAAoB,CAAC,CAAC,EAAC,CAAC,qBAAqB,EAAE,CAAC,qBAAqB,EAAC,oBAAoB,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,eAAe,EAAC,SAAS,EAAC,eAAe,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,kBAAkB,EAAC,kBAAkB,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,SAAS,EAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,EAAC,YAAY,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,EAAC,UAAU,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,eAAe,EAAE,CAAC,eAAe,CAAC,CAAC,EAAC,CAAC,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,WAAW,EAAE,CAAC,MAAM,EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,iBAAiB,EAAC,UAAU,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,YAAY,EAAC,qBAAqB,EAAC,qBAAqB,CAAC,CAAC,EAAC,CAAC,iBAAiB,EAAE,CAAC,qBAAqB,EAAC,eAAe,CAAC,CAAC,EAAC,CAAC,eAAe,EAAE,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,eAAe,EAAE,CAAC,kBAAkB,EAAC,iBAAiB,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,aAAa,EAAC,SAAS,EAAC,OAAO,CAAC,CAAC,EAAC,CAAC,gBAAgB,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,SAAS,EAAC,SAAS,CAAC,CAAC,EAAC,CAAC,mBAAmB,EAAE,CAAC,0BAA0B,EAAC,yBAAyB,CAAC,CAAC,EAAC,CAAC,iBAAiB,EAAE,CAAC,gBAAgB,EAAC,eAAe,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,qBAAqB,EAAC,UAAU,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,CAAC,EAAC,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,CAAC,EAAC,CAAC,cAAc,EAAE,CAAC,iBAAiB,EAAC,iBAAiB,EAAC,cAAc,EAAC,cAAc,CAAC,CAAC,EAAC,CAAC,YAAY,EAAE,CAAC,qBAAqB,EAAC,qBAAqB,EAAC,mBAAmB,EAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;IACtmE,yBAAU,GAAG,qBAAqB,CAAC;CAChD,EA9LgB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QA8L9B;;;;;;;;;;;;ACjMD;IAWI;QACI,IAAI,CAAC,QAAQ,GAAG1C,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC9E,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAC5F,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QAChH,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACxG,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACxF,IAAI,CAAC,yBAAyB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;QAC9G,IAAI,CAAC,iBAAiB,GAAG,IAAI3B,6CAAuB,EAAE,CAAC;KAC1D;CACJ;AAtBD,oFAsBC;AAED;IAcI,YAAY,MAA0C;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,YAAY,GAAGvC,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,oBAAoB,CAAC,CAAC;QACrF,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,CAAC,CAAC;QACjF,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,8BAA8B,CAAC,CAAC;QACzG,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,gBAAgB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,QAAQ,CAAC,CAAC;QAC7E,IAAI,CAAC,iBAAiB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,CAAC,CAAC;QAC/E,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,CAAC,CAAC;QACjG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;KAC7C;CACJ;AA5BD,8EA4BC;;;;;;;;;;;;;AChDD;IAOI;QACI,IAAI,CAAC,OAAO,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1E,IAAI,CAAC,QAAQ,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAAA,AAAC;QAC7E,IAAI,CAAC,aAAa,GAAG,gCAAgC,CAAC,gBAAgB,EAAE,CAAC;QAEzE,IAAI,CAAC,iBAAiB,GAAG,IAAIrB,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;KAClG;IAED,OAAO,gBAAgB;QACnB,OAAO;YACH9C,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC;SACrE,CAAA;KACJ;CACJ;AA7BD,4EA6BC;AAED;IAUI,YAAY,MAA0C;QAElD,IAAI,CAAC,eAAe,GAAGA,6BAAc,CAAC,eAAe,CAAC;QACtD,IAAI,CAAC,OAAO,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1E,IAAI,CAAC,WAAW,GAAG,gCAAgC,CAAC,gBAAgB,EAAE,CAAC;QACvE,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1F,IAAI,CAAC,UAAU,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAEhF,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;KACjC;IAED,cAAc,CAAC,MAAc,EAAE,MAAuD;QAClF,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE/C,IAAI,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAChC,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI,IAAI,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC1E,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI,IAAI,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YAC5C,QAAQ,GAAG,EAAE,CAAC;SACjB;aACI;YACD,IAAI,OAAO,GAAGlE,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAC3E,IAAI,OAAO,CAAC,MAAM,EAAE;gBAChB,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACvB,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;gBAC5C,IAAI,MAAM,EAAE;oBACR,QAAQ,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;iBACnC;qBACI;oBACD,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;oBACzD,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;wBAC1B,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;qBACvC;iBACJ;aACJ;SACJ;QAED,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC5B,QAAQ,GAAG,CAAC,QAAQ,CAAC;SACxB;QAED,MAAM,CAAC,GAAG,IAAI,QAAQ,CAAC;QACvB,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,GAAG,IAAI,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC;SACpB;QAED,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;KACxB;IAED,cAAc,CAAC,MAAc,EAAE,MAAuF;QAClH,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE/C,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAGA,6BAAa,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QACtE,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,EAAE;gBAC3D,IAAI,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;gBAC7C,IAAI,CAAC,SAAS,EAAE;oBACZ,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;oBACrC,IAAI,KAAK,EAAE;wBACP,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE;4BACnB,SAAS,GAAG,CAAC,EAAE,CAAC;yBACnB;wBAED,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;qBACvB;oBAED,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;oBACrC,IAAI,KAAK,EAAE;wBACP,IAAI,MAAM,CAAC,IAAI,GAAG,EAAE,EAAE;4BAClB,SAAS,GAAG,EAAE,CAAC;yBAClB;wBAED,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;qBACvB;iBACJ;aACJ;SACJ;QAED,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,IAAI,EAAE,CAAC;KAChD;CACJ;AAlGD,sEAkGC;;;;;;;;;;;;;;;;;;AC7HD;IAoBI;QACI,IAAI,CAAC,gBAAgB,GAAGA,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QAC5F,IAAI,CAAC,QAAQ,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAElF,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACxF,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACxG,IAAI,CAAC,qBAAqB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;QACtG,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACxG,IAAI,CAAC,2BAA2B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClH,IAAI,CAAC,4BAA4B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;QACpH,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACxF,IAAI,CAAC,UAAU,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAEhF,IAAI,CAAC,kBAAkB,GAAG,IAAIlB,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,kBAAkB,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,iBAAiB,GAAG,IAAIN,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,oBAAoB,GAAG,IAAIC,sDAAkC,EAAE,CAAC;KACxE;IAED,gBAAgB,CAAC,MAAc;QAE3B,QAAQ,MAAM,KAAK,EAAE,IAAI,MAAM,KAAK,GAAG;YACnC/C,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,OAAO;YACvE,MAAM,KAAK,GAAG;YACd,MAAM,KAAK,MAAM;YACjB,MAAM,KAAK,MAAM,EAAE;KAC1B;CACJ;AAlDD,oFAkDC;AAED;IA0BI,YAAY,MAA0C;QAClD,IAAI,CAAC,eAAe,GAAGkE,6BAAc,CAAC,eAAe,CAAC;QACtD,IAAI,CAAC,eAAe,GAAGA,6BAAc,CAAC,eAAe,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,2BAA2B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAA;QACjH,IAAI,CAAC,4BAA4B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAA;QACnH,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QACxG,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAA;QACrF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAElF,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;KAC3D;IAED,kBAAkB,CAAC,IAAY,EAAE,WAAmB;QAChD,OAAO,KAAK,CAAC;KAChB;IAED,kBAAkB,CAAC,IAAY;QAC3B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACnC,KAAK,GAAG,aAAa,CAAC;SACzB;aACI,IAAI,UAAU,KAAK,WAAW;YAC/B,UAAU,KAAK,cAAc;YAC7B,UAAU,KAAK,YAAY,EAAE;YAC7B,KAAK,GAAG,UAAU,CAAC;SACtB;aACI,IAAI,UAAU,KAAK,kBAAkB;YACtC,UAAU,KAAK,KAAK,EAAE;YACtB,KAAK,GAAG,YAAY,CAAC;SACxB;aACI;YACD,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,IAAI;aACd,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,KAAK;SACf,CAAC;KACL;IAED,WAAW,CAAC,IAAY;QACpB,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC;YACjC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC;YAClC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAClC,KAAK,GAAG,CAAC,CAAC;SACb;aACI,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC;YACrC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC;YACjC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC9B,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACjC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAEhB;IAED,OAAO,CAAC,IAAY,EAAE,IAAY;QAC9B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,MAAM,GAAG,IAAI,CAAC;;QAGlB,IAAI,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE;YAC5C,MAAM,IAAI,EAAE,CAAC;SAChB;aACI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE;YACjD,MAAM,IAAI,EAAE,CAAC;SAChB;QAED,OAAO,MAAM,CAAC;KACjB;CACJ;AAtHD,8EAsHC;;;;;;;;;;;;;;;;AC7KD;IAsBI;QACI,IAAI,CAAC,kBAAkB,GAAG;YACtBlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC;YAC5DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC;YACxDlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,kBAAkB,CAAC;YAC9DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC;YACzDlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC;YAC5DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,CAAC;YACrDlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,mBAAmB,CAAC;YAC/DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC;YAC3DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,CAAC;YAClElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,0BAA0B,CAAC;YACtElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC;YACxDlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,qBAAqB,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC;YACvDlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC;YAC3DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC;YAC3DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC;YAC3DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,qBAAqB,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,yBAAyB,CAAC;SACxE,CAAC;QACF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,CAAC,CAAC;QACvE,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACjF,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,0BAA0B,CAAC,CAAC;QACrG,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAC7E,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAC/E,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC,CAAC;QAC7E,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC,CAAC;QAC/E,IAAI,CAAC,gBAAgB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACrF,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,CAAC,CAAC;QACjF,IAAI,CAAC,mBAAmB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,mBAAmB,CAAC,CAAC;QAE3F,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,CAAC,CAAC;QACvE,IAAI,CAAC,iBAAiB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,iBAAiB,CAAC,CAAC;QACvF,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC,CAAC;QAE5E,IAAI,CAAC,kBAAkB,GAAG,IAAIlB,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACxF,IAAI,CAAC,gBAAgB,GAAG,IAAIV,4CAAsB,EAAE,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,IAAIM,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;KAClG;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAO9C,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACnE;IAED,oBAAoB,CAAC,MAAc;QAC/B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;KACrE;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC;KACnF;CACJ;AA3ED,wFA2EC;AAED;IA0CI,YAAY,MAA0C;QAClD,IAAI,CAAC,eAAe,GAAGkE,6BAAc,CAAC,eAAe,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QAEpC,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,CAAC,CAAC;QACjG,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC,CAAC;QAC7E,IAAI,CAAC,0BAA0B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,0BAA0B,CAAC,CAAC;QACzG,IAAI,CAAC,gBAAgB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACrF,IAAI,CAAC,kBAAkB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,kBAAkB,CAAC,CAAC;QACzF,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC,CAAC;QAC/E,IAAI,CAAC,gBAAgB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACrF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,CAAC,CAAC;QACvE,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAC7E,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAC/E,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,8BAA8B,CAAC,CAAC;QACzG,IAAI,CAAC,gBAAgB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACrF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QACnF,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC,CAAC;QAC7E,IAAI,CAAC,qBAAqB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,qBAAqB,CAAC,CAAC;QAC/F,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,CAAC,CAAC;QACjF,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC,CAAC;QAC7E,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAEnF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QAC7E,IAAI,CAAC,eAAe,GAAGA,6BAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAClE,IAAI,CAAC,eAAe,GAAGA,6BAAa,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAEnE,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;QACrE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;KACrC;IAED,kBAAkB,CAAC,MAAc;QAC7B,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YACrE,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAClC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAChB;IAED,YAAY,CAAC,MAAc;QACvB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QAChB,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAC;YACpE,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAChC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAI,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,EACzC;YACI,KAAK,GAAG,CAAC,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KAChB;IAED,QAAQ,CAAC,MAAc;QACnB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC;YAClC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;KACxC;IAED,YAAY,CAAC,MAAc;QACvB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,UAAU,KAAK,iBAAiB;YACpC,UAAU,KAAK,cAAc,EAAE;KACtC;IAED,aAAa,CAAC,MAAc;QACxB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,KAAK,gBAAgB,CAAC;KAC1C;IAED,UAAU,CAAC,MAAc;QACrB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC;YAClC,CAAC,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;KAC/C;IAED,SAAS,CAAC,MAAc;QACpB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,UAAU,CAAC,QAAQ,CAAC,gBAAgB,CAAC;YACzC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;KAC1C;IAED,WAAW,CAAC,MAAc;QACtB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,OAAO,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,UAAU,CAAC,MAAc;QACrB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACjC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;aACzB,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAChC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EACjC;KACL;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,UAAU,KAAK,WAAW;YAC9B,UAAU,KAAK,UAAU;YACzB,UAAU,KAAK,WAAW;YAC1B,UAAU,KAAK,UAAU;YACzB,UAAU,KAAK,SAAS,EAAE;KACjC;CACJ;AA/KD,kFA+KC;;;;;;;;;;;;;;AC7PD;IAWI;QACI,IAAI,CAAC,mBAAmB,GAAG,IAAIkD,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,oBAAoB,GAAG,IAAIJ,sDAAkC,EAAE,CAAC;QAErE,IAAI,CAAC,gBAAgB,GAAG;YACpB/C,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,iBAAiB,EAAE,KAAK,CAAC;YACpElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,OAAO,EAAE,KAAK,CAAC;YAC1DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,OAAO,EAAE,KAAK,CAAC;SAC7D,CAAC;QAEF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAExF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,CAAC,iBAAiB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QAC9F,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;KACtF;IAED,iBAAiB,CAAC,IAAY;QAC1B,OAAOlE,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACjE;IAED,iBAAiB,CAAC,IAAY;QAC1B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC;KACjF;IAED,oBAAoB,CAAC,IAAY;QAC7B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;KACnE;CACJ;AAzCD,wFAyCC;AAED;IASI,YAAY,MAA0C;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,qBAAqB,GAAGA,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAC9F,IAAI,CAAC,yBAAyB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QACtG,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;KAC3F;IAED,oBAAoB,CAAC,IAAY;QAE7B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,IAAI,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAC5B;YACI,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC/D;QAED,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC9B,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC5B,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAChC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC;YACtC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC;YACjC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC;YACjC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACnC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC7B,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC/B,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,KAAK,MAAM;YAC1B,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC9B,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAChC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAClC,KAAK,GAAG,KAAK,CAAC;YACd,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,GAAG,EAAE,CAAC;SACf;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,KAAK;gBACL,SAAS;gBACT,OAAO;gBACP,MAAM;aACT,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,KAAK;YACL,SAAS;YACT,OAAO;YACP,MAAM;SACT,CAAC;KACL;CACJ;AAvFD,kFAuFC;;;;;;;;;;;;;;;;;;;;;;AC3HD;IA6BI;QACI,IAAI,CAAC,kBAAkB,GAAG;YACtBlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC;YACzDlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,iBAAiB,CAAC;YAC7DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,CAAC;SACrE,CAAA;QAED,IAAI,CAAC,gBAAgB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACrF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,CAAC,CAAC;QACvE,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,4BAA4B,CAAC,CAAC;QACvG,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,oBAAoB,CAAC,CAAC;QACvF,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACjF,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC,CAAC;QAC/E,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QACnF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QACnF,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,0BAA0B,CAAC,CAAC;QACrG,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,CAAC,CAAC;QAC7E,IAAI,CAAC,4BAA4B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,4BAA4B,CAAC,CAAC;QAC7G,IAAI,CAAC,qBAAqB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,qBAAqB,CAAC,CAAC;QAC/F,IAAI,CAAC,mBAAmB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,mBAAmB,CAAC,CAAC;QAC3F,IAAI,CAAC,kBAAkB,GAAElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,kBAAkB,CAAC,CAAC;QACxF,IAAI,CAAC,gBAAgB,GAAElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QAEpF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,CAAC,CAAC;QACxE,IAAI,CAAC,iBAAiB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,iBAAiB,CAAC,CAAC;QACvF,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAE3E,IAAI,CAAC,iBAAiB,GAAG,IAAI3B,6CAAuB,EAAE,CAAC;QAEvD,IAAI,CAAC,mBAAmB,GAAG,IAAIS,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,mBAAmB,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACzF,IAAI,CAAC,uBAAuB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,4DAAoC,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,iBAAiB,GAAG,IAAIP,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,mBAAmB,GAAG,IAAIO,sCAAuB,CAAC,IAAIC,gEAAsC,EAAE,CAAC,CAAC;KACxG;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAOtD,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;KACnE;IAED,oBAAoB,CAAC,MAAc;QAC/B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;KACrE;IAED,iBAAiB,CAAC,MAAc;QAC5B,OAAOA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC;KACnF;CACJ;AA5ED,gGA4EC;AAED;IAqCI,YAAY,MAA0C;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE9B,IAAI,CAAC,eAAe,GAAGA,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QACnF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QACnF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAEnF,IAAI,CAAC,oBAAoB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,oBAAoB,CAAC,CAAC;QAC7F,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,CAAC,CAAC;QACjG,IAAI,CAAC,oBAAoB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,oBAAoB,CAAC,CAAC;QAC7F,IAAI,CAAC,kBAAkB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,kBAAkB,CAAC,CAAC;QAEzF,IAAI,CAAC,qBAAqB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC,CAAC;QACvF,IAAI,CAAC,yBAAyB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,iBAAiB,CAAC,CAAC;QAC/F,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,CAAC,CAAC;QACjG,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,CAAC,CAAC;QACjF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAC7E,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,CAAC,CAAC;QAC/E,IAAI,CAAC,2BAA2B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,0BAA0B,CAAC,CAAC;QAC1G,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC,CAAC;QAC3E,IAAI,CAAC,4BAA4B,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,4BAA4B,CAAC,CAAC;QAC7G,IAAI,CAAC,qBAAqB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,qBAAqB,CAAC,CAAC;QAC/F,IAAI,CAAC,mBAAmB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,mBAAmB,CAAC,CAAC;KAC9F;IAED,mBAAmB,CAAC,MAAc;QAC9B,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAIlE,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACjF,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,CAAC,CAAC;YACd,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACxF,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACtF,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;SAChB;aACI,IAAIA,6BAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE;YACpF,OAAO,GAAG,KAAK,CAAC;YAChB,SAAS,GAAG,EAAE,CAAC;YACf,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,GAAG,EAAE,CAAC;SACf;aACI;YACD,OAAO,GAAG,IAAI,CAAC;YACf,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,OAAO;gBACP,SAAS;gBACT,OAAO;gBACP,MAAM;aACT,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,OAAO;YACP,SAAS;YACT,OAAO;YACP,MAAM;SACT,CAAC;KACL;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;;QAGd,IAAI,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC;YACjC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC;YAClC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAClC,KAAK,GAAG,CAAC,CAAC;SACb;aACI,IAAI,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC;YACtC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAChC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAChB;CACJ;AA/ID,0FA+IC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzND;IASI;QACI,IAAI,CAAC,UAAU,GAAGA,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,CAAC,CAAC;QAC3E,IAAI,CAAC,gBAAgB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,gBAAgB,CAAC,CAAC;QACrF,IAAI,CAAC,cAAc,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,CAAC,CAAC;QACjF,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,CAAC,CAAC;KAClF;CACJ;AAlBD,gFAkBC;AAED,6CAAqD,SAAQ9D,qCAA2B;IAEpF;QACI,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,oBAAoB,GAAG,IAAI,kCAAkC,EAAE,CAAC;QAErE,IAAI,CAAC,OAAO,GAAG8D,6BAAc,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,YAAY,GAAGA,6BAAc,CAAC,YAAY,CAAC;QAChD,IAAI,CAAC,SAAS,GAAGA,6BAAc,CAAC,SAAS,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAGA,6BAAc,CAAC,WAAW,CAAC;QAC9C,IAAI,CAAC,SAAS,GAAGA,6BAAc,CAAC,SAAS,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAGA,6BAAc,CAAC,WAAW,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAGA,6BAAc,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,aAAa,GAAGA,6BAAc,CAAC,aAAa,CAAC;QAElD,IAAI,CAAC,iBAAiB,GAAG,IAAI3B,6CAAuB,EAAE,CAAC;QACvD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,4CAAsB,EAAE,CAAC;QACrD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,4CAAsB,EAAE,CAAC;QAErD,IAAI,CAAC,YAAY,GAAG,IAAIA,sCAAgB,CAAC,IAAIA,qDAA+B,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,IAAIS,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,aAAa,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,iBAAiB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,iBAAiB,GAAG,IAAIP,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,mBAAmB,GAAG,IAAIU,sCAAuB,CAAC,IAAIC,gEAAsC,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,gEAAsC,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,wEAA0C,EAAE,CAAC,CAAC;QACjH,IAAI,CAAC,cAAc,GAAG,IAAId,+BAAkB,CAAC,IAAIC,yDAAiC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,UAAU,GAAG,IAAIE,uBAAc,CAAC,IAAIC,iDAA6B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9E,IAAI,CAAC,UAAU,GAAG,IAAIC,uBAAc,CAAC,IAAIC,iDAA6B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9E,IAAI,CAAC,cAAc,GAAG,IAAIT,iCAAkB,CAAC,IAAIU,yDAAiC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1F,IAAI,CAAC,gBAAgB,GAAG,IAAII,mCAAoB,CAAC,IAAIC,6DAAmC,CAAC,IAAI,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,gBAAgB,GAAG,IAAIJ,mCAAoB,CAAC,IAAIC,6DAAmC,CAAC,IAAI,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,oBAAoB,GAAG,IAAII,2CAAwB,CAAC,IAAIC,qEAAuC,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/G;CACJ;AAnCD,0FAmCC;;;;;;;;;;;;;;;AClED;IAkBI;QACI,IAAI,CAAC,aAAa,GAAG;YACjB3D,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;SACpE,CAAC;QACF,IAAI,CAAC,gBAAgB,GAAG;YACpBlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,OAAO,EAAE,KAAK,CAAC;YAC1DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC;YAClElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,EAAE,KAAK,CAAC;YAC5DlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,mBAAmB,EAAE,KAAK,CAAC;YACtElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC;SACjE,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1E,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,wBAAwB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC5G,IAAI,CAAC,kBAAkB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAChG,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACpF,IAAI,CAAC,SAAS,GAAGA,6BAAc,CAAC,SAAS,CAAC;QAC1C,IAAI,CAAC,gBAAgB,GAAG,IAAI3B,4CAAsB,EAAE,CAAC;QACrD,IAAI,CAAC,gBAAgB,GAAG,IAAIA,4CAAsB,EAAE,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,IAAIA,sCAAgB,CAAC,IAAIA,qDAA+B,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,iBAAiB,GAAG,IAAIM,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,oBAAoB,GAAG,IAAIC,sDAAkC,EAAE,CAAC;QACrE,IAAI,CAAC,gBAAgB,GAAG/C,6BAAa,CAAC,aAAa,CAAC,2EAA2E,EAAC,KAAK,CAAC,CAAC;KAC1I;CACJ;AA1DD,4EA0DC;AAED;IA6BI,YAAY,MAA+C;QACvD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG;YACbA,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;YACjElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,cAAc,EAAE,KAAK,CAAC;SACpE,CAAC;QACF,IAAI,CAAC,OAAO,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1E,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1F,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,UAAU,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAChF,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACpF,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,SAAS,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC9E,IAAI,CAAC,mBAAmB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAClG,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAClF,IAAI,CAAC,wBAAwB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QAC5G,IAAI,CAAC,kBAAkB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAChG,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,eAAe,GAAGA,6BAAc,CAAC,eAAe,CAAC;KACzD;IAED,WAAW,CAAC,MAAc;QAEtB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,UAAU,KAAK,aAAa,IAAI,UAAU,KAAK,KAAK,EAAE;YACtD,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,UAAU,KAAK,QAAQ;YAC9B,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3B,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YACrC,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,UAAU,KAAK,MAAM,EAAE;YAC9B,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC;YAC1C,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YACrC,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC;YACxC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACnC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aAAM,IAAI,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YACvC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAChB;IAED,aAAa,CAAC,MAAc;QACxB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACrE,KAAK,GAAG,CAAC,CAAC;SACb;aAAM,IAAI,UAAU,KAAK,UAAU;YAChC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAClC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;QAED,OAAO,KAAK,CAAC;KAChB;IAED,cAAc,CAAC,MAAc;QACzB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YACnC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;KACzC;CACJ;AAvHD,sEAuHC;;;;;;;;;;;;;ACxLD;IAGI;QACI,IAAI,CAAC,cAAc,GAAG;YAClBlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;SACnE,CAAC;KACL;CACJ;AAXD,kFAWC;AAED,sCAA8C,SAAQN,0CAA8B;IAEhF;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,gBAAgB,GAAG;YACpB5D,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;YAChElE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC;SACnE,CAAC;QAEF,IAAI,CAAC,YAAY,GAAGA,6BAAc,CAAC,YAAY,CAAC;QAChD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;KACxD;IAES,gBAAgB;QACtB,OAAO,IAAI,GAAG,CACV;YACI,GAAG,KAAK,CAAC,gBAAgB,EAAE;YAC3B,CAAC,cAAc,EAAE,gCAAgC,CAAC,WAAW,CAAC;YAC9D,CAAC,SAAS,EAAE,gCAAgC,CAAC,OAAO,CAAC;YACrD,CAAC,aAAa,EAAE,gCAAgC,CAAC,UAAU,CAAC;YAC5D,CAAC,WAAW,EAAE,gCAAgC,CAAC,UAAU,CAAC;YAC1D,CAAC,cAAc,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC/D,CAAC,UAAU,EAAE,gCAAgC,CAAC,QAAQ,CAAC;YACvD,CAAC,aAAa,EAAE,gCAAgC,CAAC,WAAW,CAAC;YAC7D,CAAC,WAAW,EAAE,gCAAgC,CAAC,SAAS,CAAC;YACzD,CAAC,iBAAiB,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAClE,CAAC,UAAU,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC3D,CAAC,UAAU,EAAE,gCAAgC,CAAC,QAAQ,CAAC;YACvD,CAAC,eAAe,EAAE,gCAAgC,CAAC,aAAa,CAAC;YACjE,CAAC,UAAU,EAAE,gCAAgC,CAAC,aAAa,CAAC;YAC5D,CAAC,WAAW,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC5D,CAAC,MAAM,EAAE,gCAAgC,CAAC,YAAY,CAAC;YACvD,CAAC,SAAS,EAAE,gCAAgC,CAAC,OAAO,CAAC;YACrD,CAAC,YAAY,EAAE,gCAAgC,CAAC,OAAO,CAAC;YACxD,CAAC,aAAa,EAAE,gCAAgC,CAAC,OAAO,CAAC;YACzD,CAAC,iBAAiB,EAAE,gCAAgC,CAAC,eAAe,CAAC;YACrE,CAAC,eAAe,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAChE,CAAC,eAAe,EAAE,gCAAgC,CAAC,aAAa,CAAC;YACjE,CAAC,cAAc,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC/D,CAAC,YAAY,EAAE,gCAAgC,CAAC,OAAO,CAAC;YACxD,CAAC,aAAa,EAAE,gCAAgC,CAAC,WAAW,CAAC;YAC7D,CAAC,QAAQ,EAAE,gCAAgC,CAAC,MAAM,CAAC;YACnD,CAAC,gBAAgB,EAAE,gCAAgC,CAAC,cAAc,CAAC;YACnE,CAAC,aAAa,EAAE,gCAAgC,CAAC,WAAW,CAAC;YAC7D,CAAC,mBAAmB,EAAE,gCAAgC,CAAC,kBAAkB,CAAC;YAC1E,CAAC,iBAAiB,EAAE,gCAAgC,CAAC,kBAAkB,CAAC;YACxE,CAAC,aAAa,EAAE,gCAAgC,CAAC,WAAW,CAAC;YAC7D,CAAC,cAAc,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC/D,CAAC,cAAc,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC/D,CAAC,aAAa,EAAE,gCAAgC,CAAC,WAAW,CAAC;YAC7D,CAAC,cAAc,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC/D,CAAC,aAAa,EAAE,gCAAgC,CAAC,WAAW,CAAC;YAC7D,CAAC,cAAc,EAAE,gCAAgC,CAAC,YAAY,CAAC;YAC/D,CAAC,YAAY,EAAE,gCAAgC,CAAC,UAAU,CAAC;YAC3D,CAAC,YAAY,EAAE,gCAAgC,CAAC,UAAU,CAAE;YAC5D,CAAC,YAAY,EAAE,gCAAgC,CAAC,UAAU,CAAC;YAC3D,CAAC,WAAW,EAAE,gCAAgC,CAAC,SAAS,CAAE;SAC7D,CAAC,CAAC;KACV;;IAGO,OAAO,OAAO,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACvE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC5E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,SAAS,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACzE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC3E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;IAC9E,OAAO,SAAS,CAAC,IAAY,IAAU,OAAO1B,qBAAS,CAAC,QAAQ,EAAE,CAAC,EAAE;IAErE,OAAO,aAAa,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACzE,OAAO,aAAa,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACzE,OAAO,OAAO,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IAClE,OAAO,QAAQ,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IACnE,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACxE,OAAO,QAAQ,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IACnE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACtE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAC;IACvE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAC;IACxE,OAAO,eAAe,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IAC3E,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IACvE,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACxE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACvE,OAAO,MAAM,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IACjE,OAAO,cAAc,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IACzE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACvE,OAAO,kBAAkB,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IAC7E,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACvE,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAC;IACxE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAC;IACvE,OAAO,YAAY,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAC;IACxE,OAAO,WAAW,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAC;IACtE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACtE,OAAO,UAAU,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC;IACtE,OAAO,SAAS,CAAC,IAAY,IAAU,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC;IAE9E,YAAY,CAAC,IAAY;QACrB,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QAEhB,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACjC,KAAK,GAAG,CAAC,CAAC;SACb;aACI,IAAI,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YACrC,KAAK,GAAG,CAAC,CAAC,CAAC;SACd;aACI,IAAI,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YACrC,KAAK,GAAG,CAAC,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KAChB;IAED,oBAAoB,CAAC,OAAe;QAChC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;aAC3B,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;KAC1B;CACJ;AAxHD,4EAwHC;;;;;;;;;;;;;;;;;;;;;;;;;ACvHD;IAiBI;QACI,IAAI,CAAC,SAAS,GAAGxC,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACjF,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1F,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACpF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAE1F,IAAI,CAAC,iBAAiB,GAAG,IAAIrB,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,aAAa,GAAG,IAAII,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,aAAa,GAAG,IAAIH,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,iBAAiB,GAAG,IAAIP,oCAAqB,CAAC,IAAIU,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,mBAAmB,GAAG,IAAII,sCAAuB,CAAC,IAAIC,gEAAsC,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,gEAAsC,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,wEAA0C,EAAE,CAAC,CAAC;KACpH;CACJ;AAnCD,0EAmCC;AAED;IAuBI,YAAY,MAA0C;QAClD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;QACtD,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;QAC9D,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAChD,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE9B,IAAI,CAAC,eAAe,GAAG3D,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1F,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,aAAa,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACtF,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACpF,IAAI,CAAC,eAAe,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1F,IAAI,CAAC,YAAY,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;KACvF;IAED,oBAAoB,CAAC,IAAY;QAC7B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,UAAU,KAAK,WAAW,IAAI,UAAU,KAAK,aAAa;YAC1D,UAAU,KAAK,OAAO,IAAI,UAAU,KAAK,eAAe,EAAE;YAC1D,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,cAAc,EAAE;YACpC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,gBAAgB,EAAE;YACtC,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,SAAS,EAAE;YAC/B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,QAAQ,EAAE;YAC9B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO;gBACH,KAAK;gBACL,OAAO,EAAE,KAAK;aACjB,CAAC;SACL;QAED,OAAO;YACH,KAAK;YACL,OAAO,EAAE,IAAI;SAChB,CAAA;KACJ;IAED,mBAAmB,CAAC,IAAY;QAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,EAAE,CAAC;QAEf,IAAI,UAAU,KAAK,MAAM,IAAI,UAAU,KAAK,SAAS,EAAE;YACnD,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,SAAS,EAAE;YAC/B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,MAAM,EAAE;YAC5B,KAAK,GAAG,KAAK,CAAC;SACjB;aACI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,OAAO,EAAE;YACpD,KAAK,GAAG,KAAK,CAAC;SACjB;aACI;YACD,KAAK,GAAG,IAAI,CAAC;YACb,OAAO;gBACH,OAAO,EAAE,KAAK;gBACd,KAAK;aACR,CAAC;SACL;QAED,OAAO;YACH,OAAO,EAAE,IAAI;YACb,KAAK;SACR,CAAC;KACL;CACJ;AA/GD,oEA+GC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/ID;IAoBI;QACI,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,UAAU,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,CAAC,CAAC;QACzE,IAAI,CAAC,UAAU,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,yBAAyB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,yBAAyB,CAAC,CAAC;QACvG,IAAI,CAAC,sBAAsB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,sBAAsB,CAAC,CAAC;QACjG,IAAI,CAAC,mBAAmB,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,mBAAmB,CAAC,CAAC;QAE3F,IAAI,CAAC,aAAa,GAAG,IAAIlB,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,aAAa,GAAG,IAAIC,0BAAiB,CAAC,IAAIC,oDAAgC,EAAE,CAAC,CAAC;QACnF,IAAI,CAAC,iBAAiB,GAAG,IAAIT,oCAAqB,CAAC,IAAIU,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,mBAAmB,GAAG,IAAII,sCAAuB,CAAC,IAAIC,gEAAsC,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,mBAAmB,GAAG,IAAIJ,sCAAuB,CAAC,IAAIC,gEAAsC,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,uBAAuB,GAAG,IAAII,8CAA2B,CAAC,IAAIC,wEAA0C,EAAE,CAAC,CAAC;QACjH,IAAI,CAAC,iBAAiB,GAAG,IAAId,kCAAqB,CAAC,IAAIC,4DAAoC,EAAE,CAAC,CAAC;QAC/F,IAAI,CAAC,YAAY,GAAG,IAAIgB,wBAAgB,CAAC,IAAIC,kDAA+B,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB,GAAG,IAAIH,gCAAoB,CAAC,IAAIC,0DAAmC,EAAE,CAAC,CAAC;QAC5F,IAAI,CAAC,gBAAgB,GAAG,IAAItB,4CAAsB,EAAE,CAAC;QACrD,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;KACjC;CACJ;AAzCD,gFAyCC;AAED,qCAA6C,SAAQQ,2DAAuC;IAcxF;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,GAAG/C,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,UAAU,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,CAAC,CAAC;QACzE,IAAI,CAAC,UAAU,GAAGlE,6BAAa,CAAC,aAAa,CAACkE,6BAAc,CAAC,UAAU,CAAC,CAAC;QAEzE,IAAI,CAAC,gBAAgB,GAAG,IAAIV,mCAAoB,CAAC,IAAIC,6DAAmC,CAAC,IAAI,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,gBAAgB,GAAG,IAAIJ,mCAAoB,CAAC,IAAIC,6DAAmC,CAAC,IAAI,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,SAAS,GAAG,IAAIQ,qBAAa,CAAC,IAAIC,+CAA4B,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,aAAa,GAAG,IAAIH,6BAAiB,CAAC,IAAIC,uDAAgC,EAAE,CAAC,CAAC;KACtF;CACJ;AA1BD,0EA0BC;;;;;;;;;;;;;;;;ACpFD,IAAiB,eAAe,CAiJ/B;AAjJD,WAAiB,eAAe;IAClB,0BAAU,GAAG,kIAAkI,CAAC;IAChJ,wBAAQ,GAAG,wHAAwH,CAAC;IACpI,qCAAqB,GAAG,quBAAquB,CAAC;IAC9vB,oCAAoB,GAAG,oMAAoM,CAAC;IAC5N,6BAAa,GAAG,iEAAiE,CAAC;IAClF,yBAAS,GAAG,2CAA2C,CAAC;IACxD,yCAAyB,GAAG,6BAA6B,CAAC;IAC1D,sCAAsB,GAAG,eAAe,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,IAAI,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,IAAI,CAAC;IACnN,4BAAY,GAAG,qEAAqE,CAAC;IACrF,0BAAU,GAAG,eAAe,CAAC;IAC7B,6BAAa,GAAG,kBAAkB,gBAAA,YAAY,EAAE,CAAC;IACjD,6BAAa,GAAG,4BAA4B,gBAAA,YAAY,EAAE,CAAC;IAC3D,6BAAa,GAAG,oBAAoB,gBAAA,YAAY,EAAE,CAAC;IACnD,+BAAe,GAAG,8BAA8B,CAAC;IACjD,mCAAmB,GAAG,MAAM,gBAAA,UAAU,IAAI,gBAAA,aAAa,mDAAmD,gBAAA,YAAY,GAAG,CAAC;IAC1H,0BAAU,GAAG,iBAAiB,CAAC;IAC/B,0BAAU,GAAG,eAAe,CAAC;IAC7B,0BAAU,GAAG,eAAe,CAAC;IAC7B,2BAAW,GAAG,gBAAgB,gBAAA,UAAU,IAAI,gBAAA,UAAU,IAAI,gBAAA,UAAU,qBAAqB,gBAAA,UAAU,IAAI,gBAAA,UAAU,IAAI,gBAAA,UAAU,OAAO,gBAAA,qBAAqB,EAAE,CAAC;IAC9J,6BAAa,GAAG,qBAAqB,CAAC;IACtC,2BAAW,GAAG,MAAM,CAAC;IACrB,0BAAU,GAAG,MAAM,CAAC;IACpB,8BAAc,GAAG,IAAI,gBAAA,UAAU,cAAc,gBAAA,SAAS,IAAI,gBAAA,sBAAsB,cAAc,gBAAA,UAAU,SAAS,gBAAA,qBAAqB,cAAc,gBAAA,YAAY,MAAM,gBAAA,WAAW,IAAI,gBAAA,UAAU,IAAI,CAAC;IACpM,8BAAc,GAAG,MAAM,gBAAA,SAAS,IAAI,gBAAA,sBAAsB,eAAe,gBAAA,UAAU,WAAW,gBAAA,UAAU,SAAS,gBAAA,qBAAqB,cAAc,gBAAA,YAAY,MAAM,gBAAA,WAAW,IAAI,gBAAA,UAAU,IAAI,CAAC;IACpM,8BAAc,GAAG,MAAM,gBAAA,SAAS,IAAI,gBAAA,sBAAsB,eAAe,gBAAA,UAAU,WAAW,gBAAA,UAAU,UAAU,gBAAA,oBAAoB,IAAI,gBAAA,QAAQ,eAAe,gBAAA,YAAY,MAAM,gBAAA,WAAW,IAAI,gBAAA,UAAU,IAAI,CAAC;IACjN,8BAAc,GAAG,GAAG,gBAAA,aAAa,YAAY,gBAAA,QAAQ,oBAAoB,gBAAA,SAAS,IAAI,CAAC;IACvF,8BAAc,GAAG,GAAG,gBAAA,QAAQ,YAAY,gBAAA,aAAa,oBAAoB,gBAAA,SAAS,IAAI,CAAC;IACvF,8BAAc,GAAG,GAAG,gBAAA,aAAa,qBAAqB,gBAAA,QAAQ,qBAAqB,gBAAA,SAAS,EAAE,CAAC;IAC/F,8BAAc,GAAG,MAAM,gBAAA,QAAQ,qBAAqB,gBAAA,aAAa,qBAAqB,gBAAA,SAAS,EAAE,CAAC;IAClG,8BAAc,GAAG,GAAG,gBAAA,SAAS,yBAAyB,gBAAA,aAAa,yBAAyB,gBAAA,QAAQ,EAAE,CAAC;IACvG,mCAAmB,GAAG,wBAAwB,CAAC;IAC/C,2CAA2B,GAAG,o6BAAo6B,CAAC;IACn8B,mCAAmB,GAAG,aAAa,CAAC;IACpC,mCAAmB,GAAG,aAAa,CAAC;IACpC,mCAAmB,GAAG,aAAa,CAAC;IACpC,kCAAkB,GAAG,gBAAgB,gBAAA,mBAAmB,IAAI,gBAAA,mBAAmB,IAAI,gBAAA,mBAAmB,SAAS,CAAC;IAChH,mCAAmB,GAAG,+CAA+C,CAAC;IACtE,+BAAe,GAAG,8BAA8B,CAAC;IACjD,iCAAiB,GAAG,4BAA4B,CAAC;IACjD,4CAA4B,GAAG,eAAe,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,IAAI,gBAAA,yBAAyB,GAAG,gBAAA,yBAAyB,KAAK,CAAC;IAC1N,gCAAgB,GAAG,YAAY,gBAAA,kBAAkB,IAAI,gBAAA,UAAU,IAAI,CAAC;IACpE,gCAAgB,GAAG,eAAe,gBAAA,mBAAmB,IAAI,gBAAA,4BAA4B,UAAU,gBAAA,gBAAgB,IAAI,gBAAA,2BAA2B,IAAI,gBAAA,QAAQ,QAAQ,gBAAA,mBAAmB,QAAQ,gBAAA,2BAA2B,IAAI,gBAAA,QAAQ,qBAAqB,gBAAA,mBAAmB,IAAI,CAAC;IACjR,4BAAY,GAAG,IAAI,gBAAA,4BAA4B,IAAI,gBAAA,SAAS,IAAI,gBAAA,UAAU,EAAE,CAAC;IAC7E,mCAAmB,GAAG,IAAI,gBAAA,iBAAiB,oBAAoB,gBAAA,aAAa,MAAM,gBAAA,aAAa,cAAc,gBAAA,iBAAiB,GAAG,CAAC;IAClI,kCAAkB,GAAG,qBAAqB,gBAAA,UAAU,KAAK,gBAAA,mBAAmB,IAAI,gBAAA,mBAAmB,IAAI,gBAAA,mBAAmB,oCAAoC,CAAC;IAC/J,gCAAgB,GAAG,UAAU,gBAAA,gBAAgB,4CAA4C,CAAC;IAC1F,yBAAS,GAAG,wBAAwB,CAAC;IACrC,4BAAY,GAAG,QAAQ,gBAAA,SAAS,EAAE,CAAC;IACnC,sCAAsB,GAAG,yBAAyB,gBAAA,SAAS,EAAE,CAAC;IAC9D,0BAAU,GAAG,IAAI,gBAAA,4BAA4B,IAAI,gBAAA,SAAS,IAAI,gBAAA,mBAAmB,IAAI,gBAAA,4BAA4B,IAAI,gBAAA,SAAS,GAAG,CAAC;IAClI,4BAAY,GAAG,IAAI,gBAAA,UAAU,IAAI,gBAAA,SAAS,IAAI,gBAAA,UAAU,GAAG,CAAC;IAC5D,yBAAS,GAAG,mBAAmB,CAAC;IAChC,2BAAW,GAAG,mBAAmB,CAAC;IAClC,2BAAW,GAAG,0BAA0B,CAAC;IACzC,8BAAc,GAAG,KAAK,gBAAA,SAAS,IAAI,gBAAA,4BAA4B,+BAA+B,gBAAA,WAAW,EAAE,CAAC;IAC5G,4BAAY,GAAG,KAAK,gBAAA,SAAS,IAAI,gBAAA,4BAA4B,+DAA+D,CAAC;IAC7H,gCAAgB,GAAG,gBAAgB,CAAC;IACpC,wBAAQ,GAAG,4BAA4B,CAAC;IACxC,0BAAU,GAAG,eAAe,CAAC;IAC7B,gCAAgB,GAAG,8BAA8B,CAAC;IAClD,uCAAuB,GAAG,yBAAyB,CAAC;IACpD,8CAA8B,GAAG,wBAAwB,CAAC;IAC1D,yBAAS,GAAG,yGAAyG,CAAC;IACtH,4BAAY,GAAG,iDAAiD,CAAC;IACjE,4BAAY,GAAG,sBAAsB,CAAC;IACtC,uCAAuB,GAAG,aAAa,CAAC;IACxC,uCAAuB,GAAG,aAAa,CAAC;IACxC,uCAAuB,GAAG,aAAa,CAAC;IACxC,yBAAS,GAAG,sCAAsC,CAAC;IACnD,8BAAc,GAAG,6DAA6D,CAAC;IAC/E,sCAAsB,GAAG,MAAM,gBAAA,uBAAuB,IAAI,gBAAA,uBAAuB,IAAI,gBAAA,uBAAuB,QAAQ,gBAAA,cAAc,2BAA2B,CAAC;IAC9J,uCAAuB,GAAG,+BAA+B,CAAC;IAC1D,0CAA0B,GAAG,QAAQ,gBAAA,uBAAuB,EAAE,CAAC;IAC/D,oDAAoC,GAAG,4BAA4B,gBAAA,uBAAuB,EAAE,CAAC;IAC7F,iCAAiB,GAAG,2BAA2B,CAAC;IAChD,uCAAuB,GAAG,GAAG,CAAC;IAC9B,kCAAkB,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,MAAM,CAAC,EAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,UAAU,CAAC,EAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7K,sCAAsB,GAAG,CAAE,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,KAAK,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,CAAE,CAAC;IAClF,iCAAiB,GAAG,KAAK,gBAAA,mBAAmB,IAAI,gBAAA,4BAA4B,qEAAqE,CAAC;IAClJ,iCAAiB,GAAG,KAAK,gBAAA,mBAAmB,IAAI,gBAAA,4BAA4B,qHAAqH,CAAC;IAClM,iCAAiB,GAAG,KAAK,gBAAA,mBAAmB,IAAI,gBAAA,4BAA4B,yDAAyD,CAAC;IACtI,4BAAY,GAAG,sCAAsC,CAAC;IACtD,gCAAgB,GAAG,wBAAwB,gBAAA,YAAY,GAAG,CAAC;IAC3D,kCAAkB,GAAG,mBAAmB,CAAC;IACzC,4BAAY,GAAG,yBAAyB,CAAC;IACzC,+BAAe,GAAG,kBAAkB,CAAC;IACrC,gCAAgB,GAAG,kGAAkG,CAAC;IACtH,kCAAkB,GAAG,2MAA2M,CAAC;IACjO,kCAAkB,GAAG,2MAA2M,CAAC;IACjO,gCAAgB,GAAG,0CAA0C,CAAC;IAC9D,kCAAkB,GAAG,yCAAyC,CAAC;IAC/D,kCAAkB,GAAG,GAAG,gBAAA,kBAAkB,EAAE,CAAC;IAC7C,kCAAkB,GAAG,qBAAqB,CAAC;IAC3C,mCAAmB,GAAG,SAAS,CAAC;IAChC,mCAAmB,GAAG,QAAQ,CAAC;IAC/B,sCAAsB,GAAG,KAAK,CAAC;IAC/B,6BAAa,GAAG,OAAO,gBAAA,sBAAsB,YAAY,gBAAA,gBAAgB,IAAI,gBAAA,gBAAgB,IAAI,gBAAA,kBAAkB,EAAE,CAAC;IACtH,+BAAe,GAAG,UAAU,gBAAA,kBAAkB,IAAI,gBAAA,kBAAkB,IAAI,gBAAA,mBAAmB,EAAE,CAAC;IAC9F,+BAAe,GAAG,UAAU,gBAAA,kBAAkB,IAAI,gBAAA,kBAAkB,IAAI,gBAAA,mBAAmB,EAAE,CAAC;IAC9F,6BAAa,GAAG,eAAe,CAAC;IAChC,gCAAgB,GAAG,kCAAkC,CAAC;IACtD,oCAAoB,GAAG,GAAG,gBAAA,aAAa,IAAI,gBAAA,gBAAgB,IAAI,gBAAA,aAAa,WAAW,gBAAA,eAAe,KAAK,gBAAA,eAAe,MAAM,CAAC;IACjI,kCAAkB,GAAG,WAAW,gBAAA,gBAAgB,YAAY,gBAAA,kBAAkB,aAAa,gBAAA,kBAAkB,KAAK,CAAC;IACnH,gCAAgB,GAAG,8DAA8D,CAAC;IAClF,+CAA+B,GAAG,8EAA8E,CAAC;IACjH,8CAA8B,GAAG,sBAAsB,CAAC;IACxD,4BAAY,GAAG,GAAG,gBAAA,+BAA+B,IAAI,gBAAA,gBAAgB,IAAI,gBAAA,oBAAoB,GAAG,gBAAA,8BAA8B,GAAG,CAAC;IAClI,4BAAY,GAAG,GAAG,gBAAA,+BAA+B,IAAI,gBAAA,gBAAgB,IAAI,gBAAA,kBAAkB,GAAG,gBAAA,8BAA8B,GAAG,CAAC;IAChI,4BAAY,GAAG,IAAI,gBAAA,eAAe,GAAG,gBAAA,oBAAoB,EAAE,CAAC;IAC5D,gDAAgC,GAAG,mBAAmB,CAAC;IACvD,0CAA0B,GAAG,eAAe,gBAAA,gBAAgB,KAAK,gBAAA,oBAAoB,IAAI,CAAC;IAC1F,2CAA2B,GAAG,GAAG,gBAAA,gCAAgC,YAAY,gBAAA,gBAAgB,IAAI,gBAAA,oBAAoB,QAAQ,CAAC;IAC9H,4CAA4B,GAAG,eAAe,gBAAA,gBAAgB,KAAK,gBAAA,kBAAkB,IAAI,CAAC;IAC1F,6CAA6B,GAAG,GAAG,gBAAA,gCAAgC,YAAY,gBAAA,gBAAgB,IAAI,gBAAA,kBAAkB,QAAQ,CAAC;IAC9H,+CAA+B,GAAG,eAAe,gBAAA,gBAAgB,KAAK,gBAAA,gBAAgB,IAAI,CAAC;IAC3F,iDAAiC,GAAG,eAAe,gBAAA,gBAAgB,KAAK,gBAAA,gBAAgB,IAAI,CAAC;IAC7F,kCAAkB,GAAG,IAAI,gBAAA,4BAA4B,GAAG,gBAAA,6BAA6B,IAAI,gBAAA,0BAA0B,GAAG,gBAAA,2BAA2B,GAAG,CAAC;IACrJ,kCAAkB,GAAG,IAAI,gBAAA,iCAAiC,GAAG,gBAAA,6BAA6B,IAAI,gBAAA,+BAA+B,GAAG,gBAAA,2BAA2B,GAAG,CAAC;IAC/J,yCAAyB,GAAG,SAAS,CAAC;IACtC,wCAAwB,GAAG,SAAS,CAAC;IACrC,mDAAmC,GAAG,MAAM,CAAC;IAC7C,iDAAiC,GAAG,KAAK,CAAC;IAC1C,iDAAiC,GAAG,KAAK,CAAC;IAC1C,6CAA6B,GAAG,GAAG,CAAC;IACpC,0CAA0B,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7O,+CAA+B,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAC,CAAC,OAAO,EAAE,MAAM,CAAC,EAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAC,CAAC,OAAO,EAAE,IAAI,CAAC,EAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,SAAS,EAAE,EAAE,CAAC,EAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5Z,4CAA4B,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACvI,iDAAiC,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACrI,8CAA8B,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5R,6CAA6B,GAAgC,IAAI,GAAG,CAAiB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC,CAAC,KAAK,EAAE,EAAE,CAAC,EAAC,CAAC,IAAI,EAAE,EAAE,CAA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"}